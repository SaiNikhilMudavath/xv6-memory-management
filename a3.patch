diff --git a/Makefile b/Makefile
index ff63e17..c7eec23 100644
--- a/Makefile
+++ b/Makefile
@@ -27,6 +27,7 @@ OBJS = \
 	uart.o\
 	vectors.o\
 	vm.o\
+	pageswap.o\
 
 # Cross-compiling (e.g., on Mac OS X)
 # TOOLPREFIX = i386-jos-elf
@@ -74,10 +75,17 @@ endif
 CC = $(TOOLPREFIX)gcc
 AS = $(TOOLPREFIX)gas
 LD = $(TOOLPREFIX)ld
+
+
+ALPHA ?= 25
+BETA ?= 10
 OBJCOPY = $(TOOLPREFIX)objcopy
 OBJDUMP = $(TOOLPREFIX)objdump
 CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -fno-omit-frame-pointer
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+CFLAGS += -DALPHA=$(ALPHA)
+CFLAGS += -DBETA=$(BETA)
+
 ASFLAGS = -m32 -gdwarf-2 -Wa,-divide
 # FreeBSD ld wants ``elf_i386_fbsd''
 LDFLAGS += -m $(shell $(LD) -V | grep elf_i386 2>/dev/null | head -n 1)
@@ -181,7 +189,7 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
-	_inf\
+	_memtest\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -218,7 +226,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 2
+CPUS := 1
 endif
 QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)
 
@@ -251,7 +259,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c memtest.c \
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
@@ -284,4 +292,4 @@ tar:
 	cp dist/* dist/.gdbinit.tmpl /tmp/xv6
 	(cd /tmp; tar cf - xv6) | gzip >xv6-rev10.tar.gz  # the next one will be 10 (9/17)
 
-.PHONY: dist-test dist
+.PHONY: dist-test dist
\ No newline at end of file
diff --git a/_cat b/_cat
deleted file mode 100755
index e7a812c..0000000
Binary files a/_cat and /dev/null differ
diff --git a/_echo b/_echo
deleted file mode 100755
index 1b69409..0000000
Binary files a/_echo and /dev/null differ
diff --git a/_forktest b/_forktest
deleted file mode 100755
index d3ef4c7..0000000
Binary files a/_forktest and /dev/null differ
diff --git a/_grep b/_grep
deleted file mode 100755
index cf18d8e..0000000
Binary files a/_grep and /dev/null differ
diff --git a/_inf b/_inf
index fce52b2..8078393 100755
Binary files a/_inf and b/_inf differ
diff --git a/_init b/_init
deleted file mode 100755
index b3e48f7..0000000
Binary files a/_init and /dev/null differ
diff --git a/_kill b/_kill
deleted file mode 100755
index 787e046..0000000
Binary files a/_kill and /dev/null differ
diff --git a/_ln b/_ln
deleted file mode 100755
index f5c54bc..0000000
Binary files a/_ln and /dev/null differ
diff --git a/_ls b/_ls
deleted file mode 100755
index 37950d2..0000000
Binary files a/_ls and /dev/null differ
diff --git a/_mkdir b/_mkdir
deleted file mode 100755
index 91e760f..0000000
Binary files a/_mkdir and /dev/null differ
diff --git a/_rm b/_rm
deleted file mode 100755
index 0768daa..0000000
Binary files a/_rm and /dev/null differ
diff --git a/_sh b/_sh
deleted file mode 100755
index f63007c..0000000
Binary files a/_sh and /dev/null differ
diff --git a/_stressfs b/_stressfs
deleted file mode 100755
index f454965..0000000
Binary files a/_stressfs and /dev/null differ
diff --git a/_usertests b/_usertests
deleted file mode 100755
index 9aa6a49..0000000
Binary files a/_usertests and /dev/null differ
diff --git a/_wc b/_wc
deleted file mode 100755
index f33ad24..0000000
Binary files a/_wc and /dev/null differ
diff --git a/_zombie b/_zombie
deleted file mode 100755
index 9475cb9..0000000
Binary files a/_zombie and /dev/null differ
diff --git a/bio.d b/bio.d
deleted file mode 100644
index b4bbd30..0000000
--- a/bio.d
+++ /dev/null
@@ -1,2 +0,0 @@
-bio.o: bio.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
- sleeplock.h fs.h buf.h
diff --git a/bio.o b/bio.o
deleted file mode 100644
index 139f714..0000000
Binary files a/bio.o and /dev/null differ
diff --git a/bootasm.d b/bootasm.d
deleted file mode 100644
index 3b3dc19..0000000
--- a/bootasm.d
+++ /dev/null
@@ -1 +0,0 @@
-bootasm.o: bootasm.S asm.h memlayout.h mmu.h
diff --git a/bootasm.o b/bootasm.o
deleted file mode 100644
index 63d3e50..0000000
Binary files a/bootasm.o and /dev/null differ
diff --git a/bootblock b/bootblock
deleted file mode 100755
index 1ef7977..0000000
Binary files a/bootblock and /dev/null differ
diff --git a/bootblock.asm b/bootblock.asm
deleted file mode 100644
index 59f0a79..0000000
--- a/bootblock.asm
+++ /dev/null
@@ -1,355 +0,0 @@
-
-bootblock.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00007c00 <start>:
-# with %cs=0 %ip=7c00.
-
-.code16                       # Assemble for 16-bit mode
-.globl start
-start:
-  cli                         # BIOS enabled interrupts; disable
-    7c00:	fa                   	cli
-
-  # Zero data segment registers DS, ES, and SS.
-  xorw    %ax,%ax             # Set %ax to zero
-    7c01:	31 c0                	xor    %eax,%eax
-  movw    %ax,%ds             # -> Data Segment
-    7c03:	8e d8                	mov    %eax,%ds
-  movw    %ax,%es             # -> Extra Segment
-    7c05:	8e c0                	mov    %eax,%es
-  movw    %ax,%ss             # -> Stack Segment
-    7c07:	8e d0                	mov    %eax,%ss
-
-00007c09 <seta20.1>:
-
-  # Physical address line A20 is tied to zero so that the first PCs 
-  # with 2 MB would run software that assumed 1 MB.  Undo that.
-seta20.1:
-  inb     $0x64,%al               # Wait for not busy
-    7c09:	e4 64                	in     $0x64,%al
-  testb   $0x2,%al
-    7c0b:	a8 02                	test   $0x2,%al
-  jnz     seta20.1
-    7c0d:	75 fa                	jne    7c09 <seta20.1>
-
-  movb    $0xd1,%al               # 0xd1 -> port 0x64
-    7c0f:	b0 d1                	mov    $0xd1,%al
-  outb    %al,$0x64
-    7c11:	e6 64                	out    %al,$0x64
-
-00007c13 <seta20.2>:
-
-seta20.2:
-  inb     $0x64,%al               # Wait for not busy
-    7c13:	e4 64                	in     $0x64,%al
-  testb   $0x2,%al
-    7c15:	a8 02                	test   $0x2,%al
-  jnz     seta20.2
-    7c17:	75 fa                	jne    7c13 <seta20.2>
-
-  movb    $0xdf,%al               # 0xdf -> port 0x60
-    7c19:	b0 df                	mov    $0xdf,%al
-  outb    %al,$0x60
-    7c1b:	e6 60                	out    %al,$0x60
-
-  # Switch from real to protected mode.  Use a bootstrap GDT that makes
-  # virtual addresses map directly to physical addresses so that the
-  # effective memory map doesn't change during the transition.
-  lgdt    gdtdesc
-    7c1d:	0f 01 16             	lgdtl  (%esi)
-    7c20:	78 7c                	js     7c9e <readsect+0x12>
-  movl    %cr0, %eax
-    7c22:	0f 20 c0             	mov    %cr0,%eax
-  orl     $CR0_PE, %eax
-    7c25:	66 83 c8 01          	or     $0x1,%ax
-  movl    %eax, %cr0
-    7c29:	0f 22 c0             	mov    %eax,%cr0
-
-//PAGEBREAK!
-  # Complete the transition to 32-bit protected mode by using a long jmp
-  # to reload %cs and %eip.  The segment descriptors are set up with no
-  # translation, so that the mapping is still the identity mapping.
-  ljmp    $(SEG_KCODE<<3), $start32
-    7c2c:	ea                   	.byte 0xea
-    7c2d:	31 7c 08 00          	xor    %edi,0x0(%eax,%ecx,1)
-
-00007c31 <start32>:
-
-.code32  # Tell assembler to generate 32-bit code now.
-start32:
-  # Set up the protected-mode data segment registers
-  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
-    7c31:	66 b8 10 00          	mov    $0x10,%ax
-  movw    %ax, %ds                # -> DS: Data Segment
-    7c35:	8e d8                	mov    %eax,%ds
-  movw    %ax, %es                # -> ES: Extra Segment
-    7c37:	8e c0                	mov    %eax,%es
-  movw    %ax, %ss                # -> SS: Stack Segment
-    7c39:	8e d0                	mov    %eax,%ss
-  movw    $0, %ax                 # Zero segments not ready for use
-    7c3b:	66 b8 00 00          	mov    $0x0,%ax
-  movw    %ax, %fs                # -> FS
-    7c3f:	8e e0                	mov    %eax,%fs
-  movw    %ax, %gs                # -> GS
-    7c41:	8e e8                	mov    %eax,%gs
-
-  # Set up the stack pointer and call into C.
-  movl    $start, %esp
-    7c43:	bc 00 7c 00 00       	mov    $0x7c00,%esp
-  call    bootmain
-    7c48:	e8 f0 00 00 00       	call   7d3d <bootmain>
-
-  # If bootmain returns (it shouldn't), trigger a Bochs
-  # breakpoint if running under Bochs, then loop.
-  movw    $0x8a00, %ax            # 0x8a00 -> port 0x8a00
-    7c4d:	66 b8 00 8a          	mov    $0x8a00,%ax
-  movw    %ax, %dx
-    7c51:	66 89 c2             	mov    %ax,%dx
-  outw    %ax, %dx
-    7c54:	66 ef                	out    %ax,(%dx)
-  movw    $0x8ae0, %ax            # 0x8ae0 -> port 0x8a00
-    7c56:	66 b8 e0 8a          	mov    $0x8ae0,%ax
-  outw    %ax, %dx
-    7c5a:	66 ef                	out    %ax,(%dx)
-
-00007c5c <spin>:
-spin:
-  jmp     spin
-    7c5c:	eb fe                	jmp    7c5c <spin>
-    7c5e:	66 90                	xchg   %ax,%ax
-
-00007c60 <gdt>:
-	...
-    7c68:	ff                   	(bad)
-    7c69:	ff 00                	incl   (%eax)
-    7c6b:	00 00                	add    %al,(%eax)
-    7c6d:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
-    7c74:	00                   	.byte 0
-    7c75:	92                   	xchg   %eax,%edx
-    7c76:	cf                   	iret
-	...
-
-00007c78 <gdtdesc>:
-    7c78:	17                   	pop    %ss
-    7c79:	00 60 7c             	add    %ah,0x7c(%eax)
-	...
-
-00007c7e <waitdisk>:
-static inline uchar
-inb(ushort port)
-{
-  uchar data;
-
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-    7c7e:	ba f7 01 00 00       	mov    $0x1f7,%edx
-    7c83:	ec                   	in     (%dx),%al
-
-void
-waitdisk(void)
-{
-  // Wait for disk ready.
-  while((inb(0x1F7) & 0xC0) != 0x40)
-    7c84:	83 e0 c0             	and    $0xffffffc0,%eax
-    7c87:	3c 40                	cmp    $0x40,%al
-    7c89:	75 f8                	jne    7c83 <waitdisk+0x5>
-    ;
-}
-    7c8b:	c3                   	ret
-
-00007c8c <readsect>:
-
-// Read a single sector at offset into dst.
-void
-readsect(void *dst, uint offset)
-{
-    7c8c:	55                   	push   %ebp
-    7c8d:	89 e5                	mov    %esp,%ebp
-    7c8f:	57                   	push   %edi
-    7c90:	53                   	push   %ebx
-    7c91:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  // Issue command.
-  waitdisk();
-    7c94:	e8 e5 ff ff ff       	call   7c7e <waitdisk>
-}
-
-static inline void
-outb(ushort port, uchar data)
-{
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-    7c99:	b8 01 00 00 00       	mov    $0x1,%eax
-    7c9e:	ba f2 01 00 00       	mov    $0x1f2,%edx
-    7ca3:	ee                   	out    %al,(%dx)
-    7ca4:	ba f3 01 00 00       	mov    $0x1f3,%edx
-    7ca9:	89 d8                	mov    %ebx,%eax
-    7cab:	ee                   	out    %al,(%dx)
-  outb(0x1F2, 1);   // count = 1
-  outb(0x1F3, offset);
-  outb(0x1F4, offset >> 8);
-    7cac:	89 d8                	mov    %ebx,%eax
-    7cae:	c1 e8 08             	shr    $0x8,%eax
-    7cb1:	ba f4 01 00 00       	mov    $0x1f4,%edx
-    7cb6:	ee                   	out    %al,(%dx)
-  outb(0x1F5, offset >> 16);
-    7cb7:	89 d8                	mov    %ebx,%eax
-    7cb9:	c1 e8 10             	shr    $0x10,%eax
-    7cbc:	ba f5 01 00 00       	mov    $0x1f5,%edx
-    7cc1:	ee                   	out    %al,(%dx)
-  outb(0x1F6, (offset >> 24) | 0xE0);
-    7cc2:	89 d8                	mov    %ebx,%eax
-    7cc4:	c1 e8 18             	shr    $0x18,%eax
-    7cc7:	83 c8 e0             	or     $0xffffffe0,%eax
-    7cca:	ba f6 01 00 00       	mov    $0x1f6,%edx
-    7ccf:	ee                   	out    %al,(%dx)
-    7cd0:	b8 20 00 00 00       	mov    $0x20,%eax
-    7cd5:	ba f7 01 00 00       	mov    $0x1f7,%edx
-    7cda:	ee                   	out    %al,(%dx)
-  outb(0x1F7, 0x20);  // cmd 0x20 - read sectors
-
-  // Read data.
-  waitdisk();
-    7cdb:	e8 9e ff ff ff       	call   7c7e <waitdisk>
-  asm volatile("cld; rep insl" :
-    7ce0:	8b 7d 08             	mov    0x8(%ebp),%edi
-    7ce3:	b9 80 00 00 00       	mov    $0x80,%ecx
-    7ce8:	ba f0 01 00 00       	mov    $0x1f0,%edx
-    7ced:	fc                   	cld
-    7cee:	f3 6d                	rep insl (%dx),%es:(%edi)
-  insl(0x1F0, dst, SECTSIZE/4);
-}
-    7cf0:	5b                   	pop    %ebx
-    7cf1:	5f                   	pop    %edi
-    7cf2:	5d                   	pop    %ebp
-    7cf3:	c3                   	ret
-
-00007cf4 <readseg>:
-
-// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.
-// Might copy more than asked.
-void
-readseg(uchar* pa, uint count, uint offset)
-{
-    7cf4:	55                   	push   %ebp
-    7cf5:	89 e5                	mov    %esp,%ebp
-    7cf7:	57                   	push   %edi
-    7cf8:	56                   	push   %esi
-    7cf9:	53                   	push   %ebx
-    7cfa:	83 ec 0c             	sub    $0xc,%esp
-    7cfd:	8b 5d 08             	mov    0x8(%ebp),%ebx
-    7d00:	8b 75 10             	mov    0x10(%ebp),%esi
-  uchar* epa;
-
-  epa = pa + count;
-    7d03:	89 df                	mov    %ebx,%edi
-    7d05:	03 7d 0c             	add    0xc(%ebp),%edi
-
-  // Round down to sector boundary.
-  pa -= offset % SECTSIZE;
-    7d08:	89 f0                	mov    %esi,%eax
-    7d0a:	25 ff 01 00 00       	and    $0x1ff,%eax
-    7d0f:	29 c3                	sub    %eax,%ebx
-
-  // Translate from bytes to sectors; kernel starts at sector 1.
-  offset = (offset / SECTSIZE) + 1;
-    7d11:	c1 ee 09             	shr    $0x9,%esi
-    7d14:	83 c6 01             	add    $0x1,%esi
-
-  // If this is too slow, we could read lots of sectors at a time.
-  // We'd write more to memory than asked, but it doesn't matter --
-  // we load in increasing order.
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    7d17:	39 fb                	cmp    %edi,%ebx
-    7d19:	73 1a                	jae    7d35 <readseg+0x41>
-    readsect(pa, offset);
-    7d1b:	83 ec 08             	sub    $0x8,%esp
-    7d1e:	56                   	push   %esi
-    7d1f:	53                   	push   %ebx
-    7d20:	e8 67 ff ff ff       	call   7c8c <readsect>
-  for(; pa < epa; pa += SECTSIZE, offset++)
-    7d25:	81 c3 00 02 00 00    	add    $0x200,%ebx
-    7d2b:	83 c6 01             	add    $0x1,%esi
-    7d2e:	83 c4 10             	add    $0x10,%esp
-    7d31:	39 fb                	cmp    %edi,%ebx
-    7d33:	72 e6                	jb     7d1b <readseg+0x27>
-}
-    7d35:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    7d38:	5b                   	pop    %ebx
-    7d39:	5e                   	pop    %esi
-    7d3a:	5f                   	pop    %edi
-    7d3b:	5d                   	pop    %ebp
-    7d3c:	c3                   	ret
-
-00007d3d <bootmain>:
-{
-    7d3d:	55                   	push   %ebp
-    7d3e:	89 e5                	mov    %esp,%ebp
-    7d40:	57                   	push   %edi
-    7d41:	56                   	push   %esi
-    7d42:	53                   	push   %ebx
-    7d43:	83 ec 10             	sub    $0x10,%esp
-  readseg((uchar*)elf, 4096, 0);
-    7d46:	6a 00                	push   $0x0
-    7d48:	68 00 10 00 00       	push   $0x1000
-    7d4d:	68 00 00 01 00       	push   $0x10000
-    7d52:	e8 9d ff ff ff       	call   7cf4 <readseg>
-  if(elf->magic != ELF_MAGIC)
-    7d57:	83 c4 10             	add    $0x10,%esp
-    7d5a:	81 3d 00 00 01 00 7f 	cmpl   $0x464c457f,0x10000
-    7d61:	45 4c 46 
-    7d64:	75 21                	jne    7d87 <bootmain+0x4a>
-  ph = (struct proghdr*)((uchar*)elf + elf->phoff);
-    7d66:	a1 1c 00 01 00       	mov    0x1001c,%eax
-    7d6b:	8d 98 00 00 01 00    	lea    0x10000(%eax),%ebx
-  eph = ph + elf->phnum;
-    7d71:	0f b7 35 2c 00 01 00 	movzwl 0x1002c,%esi
-    7d78:	c1 e6 05             	shl    $0x5,%esi
-    7d7b:	01 de                	add    %ebx,%esi
-  for(; ph < eph; ph++){
-    7d7d:	39 f3                	cmp    %esi,%ebx
-    7d7f:	72 15                	jb     7d96 <bootmain+0x59>
-  entry();
-    7d81:	ff 15 18 00 01 00    	call   *0x10018
-}
-    7d87:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    7d8a:	5b                   	pop    %ebx
-    7d8b:	5e                   	pop    %esi
-    7d8c:	5f                   	pop    %edi
-    7d8d:	5d                   	pop    %ebp
-    7d8e:	c3                   	ret
-  for(; ph < eph; ph++){
-    7d8f:	83 c3 20             	add    $0x20,%ebx
-    7d92:	39 f3                	cmp    %esi,%ebx
-    7d94:	73 eb                	jae    7d81 <bootmain+0x44>
-    pa = (uchar*)ph->paddr;
-    7d96:	8b 7b 0c             	mov    0xc(%ebx),%edi
-    readseg(pa, ph->filesz, ph->off);
-    7d99:	83 ec 04             	sub    $0x4,%esp
-    7d9c:	ff 73 04             	push   0x4(%ebx)
-    7d9f:	ff 73 10             	push   0x10(%ebx)
-    7da2:	57                   	push   %edi
-    7da3:	e8 4c ff ff ff       	call   7cf4 <readseg>
-    if(ph->memsz > ph->filesz)
-    7da8:	8b 4b 14             	mov    0x14(%ebx),%ecx
-    7dab:	8b 43 10             	mov    0x10(%ebx),%eax
-    7dae:	83 c4 10             	add    $0x10,%esp
-    7db1:	39 c8                	cmp    %ecx,%eax
-    7db3:	73 da                	jae    7d8f <bootmain+0x52>
-      stosb(pa + ph->filesz, 0, ph->memsz - ph->filesz);
-    7db5:	01 c7                	add    %eax,%edi
-    7db7:	29 c1                	sub    %eax,%ecx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-    7db9:	b8 00 00 00 00       	mov    $0x0,%eax
-    7dbe:	fc                   	cld
-    7dbf:	f3 aa                	rep stos %al,%es:(%edi)
-               "=D" (addr), "=c" (cnt) :
-               "0" (addr), "1" (cnt), "a" (data) :
-               "memory", "cc");
-}
-    7dc1:	eb cc                	jmp    7d8f <bootmain+0x52>
diff --git a/bootblock.o b/bootblock.o
deleted file mode 100755
index 934bc3a..0000000
Binary files a/bootblock.o and /dev/null differ
diff --git a/bootblockother.o b/bootblockother.o
deleted file mode 100755
index e1d1b8a..0000000
Binary files a/bootblockother.o and /dev/null differ
diff --git a/bootmain.d b/bootmain.d
deleted file mode 100644
index b32eaf5..0000000
--- a/bootmain.d
+++ /dev/null
@@ -1 +0,0 @@
-bootmain.o: bootmain.c types.h elf.h x86.h memlayout.h
diff --git a/bootmain.o b/bootmain.o
deleted file mode 100644
index 6151d2f..0000000
Binary files a/bootmain.o and /dev/null differ
diff --git a/cat.asm b/cat.asm
deleted file mode 100644
index 32c9cb3..0000000
--- a/cat.asm
+++ /dev/null
@@ -1,1209 +0,0 @@
-
-_cat:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  }
-}
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	57                   	push   %edi
-   e:	56                   	push   %esi
-   f:	be 01 00 00 00       	mov    $0x1,%esi
-  14:	53                   	push   %ebx
-  15:	51                   	push   %ecx
-  16:	83 ec 18             	sub    $0x18,%esp
-  19:	8b 01                	mov    (%ecx),%eax
-  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
-  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  21:	83 c3 04             	add    $0x4,%ebx
-  int fd, i;
-
-  if(argc <= 1){
-  24:	83 f8 01             	cmp    $0x1,%eax
-  27:	7f 26                	jg     4f <main+0x4f>
-  29:	eb 52                	jmp    7d <main+0x7d>
-  2b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  for(i = 1; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "cat: cannot open %s\n", argv[i]);
-      exit();
-    }
-    cat(fd);
-  30:	83 ec 0c             	sub    $0xc,%esp
-  for(i = 1; i < argc; i++){
-  33:	83 c6 01             	add    $0x1,%esi
-  36:	83 c3 04             	add    $0x4,%ebx
-    cat(fd);
-  39:	50                   	push   %eax
-  3a:	e8 51 00 00 00       	call   90 <cat>
-    close(fd);
-  3f:	89 3c 24             	mov    %edi,(%esp)
-  42:	e8 34 03 00 00       	call   37b <close>
-  for(i = 1; i < argc; i++){
-  47:	83 c4 10             	add    $0x10,%esp
-  4a:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
-  4d:	74 29                	je     78 <main+0x78>
-    if((fd = open(argv[i], 0)) < 0){
-  4f:	83 ec 08             	sub    $0x8,%esp
-  52:	6a 00                	push   $0x0
-  54:	ff 33                	push   (%ebx)
-  56:	e8 38 03 00 00       	call   393 <open>
-  5b:	83 c4 10             	add    $0x10,%esp
-  5e:	89 c7                	mov    %eax,%edi
-  60:	85 c0                	test   %eax,%eax
-  62:	79 cc                	jns    30 <main+0x30>
-      printf(1, "cat: cannot open %s\n", argv[i]);
-  64:	50                   	push   %eax
-  65:	ff 33                	push   (%ebx)
-  67:	68 cb 07 00 00       	push   $0x7cb
-  6c:	6a 01                	push   $0x1
-  6e:	e8 2d 04 00 00       	call   4a0 <printf>
-      exit();
-  73:	e8 db 02 00 00       	call   353 <exit>
-  }
-  exit();
-  78:	e8 d6 02 00 00       	call   353 <exit>
-    cat(0);
-  7d:	83 ec 0c             	sub    $0xc,%esp
-  80:	6a 00                	push   $0x0
-  82:	e8 09 00 00 00       	call   90 <cat>
-    exit();
-  87:	e8 c7 02 00 00       	call   353 <exit>
-  8c:	66 90                	xchg   %ax,%ax
-  8e:	66 90                	xchg   %ax,%ax
-
-00000090 <cat>:
-{
-  90:	55                   	push   %ebp
-  91:	89 e5                	mov    %esp,%ebp
-  93:	56                   	push   %esi
-  94:	53                   	push   %ebx
-  95:	8b 75 08             	mov    0x8(%ebp),%esi
-  while((n = read(fd, buf, sizeof(buf))) > 0) {
-  98:	eb 1d                	jmp    b7 <cat+0x27>
-  9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if (write(1, buf, n) != n) {
-  a0:	83 ec 04             	sub    $0x4,%esp
-  a3:	53                   	push   %ebx
-  a4:	68 20 0b 00 00       	push   $0xb20
-  a9:	6a 01                	push   $0x1
-  ab:	e8 c3 02 00 00       	call   373 <write>
-  b0:	83 c4 10             	add    $0x10,%esp
-  b3:	39 d8                	cmp    %ebx,%eax
-  b5:	75 25                	jne    dc <cat+0x4c>
-  while((n = read(fd, buf, sizeof(buf))) > 0) {
-  b7:	83 ec 04             	sub    $0x4,%esp
-  ba:	68 00 02 00 00       	push   $0x200
-  bf:	68 20 0b 00 00       	push   $0xb20
-  c4:	56                   	push   %esi
-  c5:	e8 a1 02 00 00       	call   36b <read>
-  ca:	83 c4 10             	add    $0x10,%esp
-  cd:	89 c3                	mov    %eax,%ebx
-  cf:	85 c0                	test   %eax,%eax
-  d1:	7f cd                	jg     a0 <cat+0x10>
-  if(n < 0){
-  d3:	75 1b                	jne    f0 <cat+0x60>
-}
-  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-  d8:	5b                   	pop    %ebx
-  d9:	5e                   	pop    %esi
-  da:	5d                   	pop    %ebp
-  db:	c3                   	ret
-      printf(1, "cat: write error\n");
-  dc:	83 ec 08             	sub    $0x8,%esp
-  df:	68 a8 07 00 00       	push   $0x7a8
-  e4:	6a 01                	push   $0x1
-  e6:	e8 b5 03 00 00       	call   4a0 <printf>
-      exit();
-  eb:	e8 63 02 00 00       	call   353 <exit>
-    printf(1, "cat: read error\n");
-  f0:	50                   	push   %eax
-  f1:	50                   	push   %eax
-  f2:	68 ba 07 00 00       	push   $0x7ba
-  f7:	6a 01                	push   $0x1
-  f9:	e8 a2 03 00 00       	call   4a0 <printf>
-    exit();
-  fe:	e8 50 02 00 00       	call   353 <exit>
- 103:	66 90                	xchg   %ax,%ax
- 105:	66 90                	xchg   %ax,%ax
- 107:	66 90                	xchg   %ax,%ax
- 109:	66 90                	xchg   %ax,%ax
- 10b:	66 90                	xchg   %ax,%ax
- 10d:	66 90                	xchg   %ax,%ax
- 10f:	90                   	nop
-
-00000110 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 110:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 111:	31 c0                	xor    %eax,%eax
-{
- 113:	89 e5                	mov    %esp,%ebp
- 115:	53                   	push   %ebx
- 116:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 119:	8b 5d 0c             	mov    0xc(%ebp),%ebx
- 11c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
- 120:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 124:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 127:	83 c0 01             	add    $0x1,%eax
- 12a:	84 d2                	test   %dl,%dl
- 12c:	75 f2                	jne    120 <strcpy+0x10>
-    ;
-  return os;
-}
- 12e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 131:	89 c8                	mov    %ecx,%eax
- 133:	c9                   	leave
- 134:	c3                   	ret
- 135:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 13c:	00 
- 13d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000140 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 140:	55                   	push   %ebp
- 141:	89 e5                	mov    %esp,%ebp
- 143:	53                   	push   %ebx
- 144:	8b 55 08             	mov    0x8(%ebp),%edx
- 147:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 14a:	0f b6 02             	movzbl (%edx),%eax
- 14d:	84 c0                	test   %al,%al
- 14f:	75 17                	jne    168 <strcmp+0x28>
- 151:	eb 3a                	jmp    18d <strcmp+0x4d>
- 153:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 158:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
- 15c:	83 c2 01             	add    $0x1,%edx
- 15f:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
- 162:	84 c0                	test   %al,%al
- 164:	74 1a                	je     180 <strcmp+0x40>
- 166:	89 d9                	mov    %ebx,%ecx
- 168:	0f b6 19             	movzbl (%ecx),%ebx
- 16b:	38 c3                	cmp    %al,%bl
- 16d:	74 e9                	je     158 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
- 16f:	29 d8                	sub    %ebx,%eax
-}
- 171:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 174:	c9                   	leave
- 175:	c3                   	ret
- 176:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 17d:	00 
- 17e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
- 180:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 184:	31 c0                	xor    %eax,%eax
- 186:	29 d8                	sub    %ebx,%eax
-}
- 188:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 18b:	c9                   	leave
- 18c:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
- 18d:	0f b6 19             	movzbl (%ecx),%ebx
- 190:	31 c0                	xor    %eax,%eax
- 192:	eb db                	jmp    16f <strcmp+0x2f>
- 194:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 19b:	00 
- 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001a0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 1a0:	55                   	push   %ebp
- 1a1:	89 e5                	mov    %esp,%ebp
- 1a3:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1a6:	80 3a 00             	cmpb   $0x0,(%edx)
- 1a9:	74 15                	je     1c0 <strlen+0x20>
- 1ab:	31 c0                	xor    %eax,%eax
- 1ad:	8d 76 00             	lea    0x0(%esi),%esi
- 1b0:	83 c0 01             	add    $0x1,%eax
- 1b3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 1b7:	89 c1                	mov    %eax,%ecx
- 1b9:	75 f5                	jne    1b0 <strlen+0x10>
-    ;
-  return n;
-}
- 1bb:	89 c8                	mov    %ecx,%eax
- 1bd:	5d                   	pop    %ebp
- 1be:	c3                   	ret
- 1bf:	90                   	nop
-  for(n = 0; s[n]; n++)
- 1c0:	31 c9                	xor    %ecx,%ecx
-}
- 1c2:	5d                   	pop    %ebp
- 1c3:	89 c8                	mov    %ecx,%eax
- 1c5:	c3                   	ret
- 1c6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1cd:	00 
- 1ce:	66 90                	xchg   %ax,%ax
-
-000001d0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1d0:	55                   	push   %ebp
- 1d1:	89 e5                	mov    %esp,%ebp
- 1d3:	57                   	push   %edi
- 1d4:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 1d7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 1da:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1dd:	89 d7                	mov    %edx,%edi
- 1df:	fc                   	cld
- 1e0:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 1e2:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 1e5:	89 d0                	mov    %edx,%eax
- 1e7:	c9                   	leave
- 1e8:	c3                   	ret
- 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000001f0 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 1f0:	55                   	push   %ebp
- 1f1:	89 e5                	mov    %esp,%ebp
- 1f3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1f6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 1fa:	0f b6 10             	movzbl (%eax),%edx
- 1fd:	84 d2                	test   %dl,%dl
- 1ff:	75 12                	jne    213 <strchr+0x23>
- 201:	eb 1d                	jmp    220 <strchr+0x30>
- 203:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 208:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 20c:	83 c0 01             	add    $0x1,%eax
- 20f:	84 d2                	test   %dl,%dl
- 211:	74 0d                	je     220 <strchr+0x30>
-    if(*s == c)
- 213:	38 d1                	cmp    %dl,%cl
- 215:	75 f1                	jne    208 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 217:	5d                   	pop    %ebp
- 218:	c3                   	ret
- 219:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 220:	31 c0                	xor    %eax,%eax
-}
- 222:	5d                   	pop    %ebp
- 223:	c3                   	ret
- 224:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 22b:	00 
- 22c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000230 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 230:	55                   	push   %ebp
- 231:	89 e5                	mov    %esp,%ebp
- 233:	57                   	push   %edi
- 234:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 235:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 238:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 239:	31 db                	xor    %ebx,%ebx
-{
- 23b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 23e:	eb 27                	jmp    267 <gets+0x37>
-    cc = read(0, &c, 1);
- 240:	83 ec 04             	sub    $0x4,%esp
- 243:	6a 01                	push   $0x1
- 245:	56                   	push   %esi
- 246:	6a 00                	push   $0x0
- 248:	e8 1e 01 00 00       	call   36b <read>
-    if(cc < 1)
- 24d:	83 c4 10             	add    $0x10,%esp
- 250:	85 c0                	test   %eax,%eax
- 252:	7e 1d                	jle    271 <gets+0x41>
-      break;
-    buf[i++] = c;
- 254:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 258:	8b 55 08             	mov    0x8(%ebp),%edx
- 25b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 25f:	3c 0a                	cmp    $0xa,%al
- 261:	74 10                	je     273 <gets+0x43>
- 263:	3c 0d                	cmp    $0xd,%al
- 265:	74 0c                	je     273 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 267:	89 df                	mov    %ebx,%edi
- 269:	83 c3 01             	add    $0x1,%ebx
- 26c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 26f:	7c cf                	jl     240 <gets+0x10>
- 271:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 273:	8b 45 08             	mov    0x8(%ebp),%eax
- 276:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 27a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 27d:	5b                   	pop    %ebx
- 27e:	5e                   	pop    %esi
- 27f:	5f                   	pop    %edi
- 280:	5d                   	pop    %ebp
- 281:	c3                   	ret
- 282:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 289:	00 
- 28a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000290 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 290:	55                   	push   %ebp
- 291:	89 e5                	mov    %esp,%ebp
- 293:	56                   	push   %esi
- 294:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 295:	83 ec 08             	sub    $0x8,%esp
- 298:	6a 00                	push   $0x0
- 29a:	ff 75 08             	push   0x8(%ebp)
- 29d:	e8 f1 00 00 00       	call   393 <open>
-  if(fd < 0)
- 2a2:	83 c4 10             	add    $0x10,%esp
- 2a5:	85 c0                	test   %eax,%eax
- 2a7:	78 27                	js     2d0 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 2a9:	83 ec 08             	sub    $0x8,%esp
- 2ac:	ff 75 0c             	push   0xc(%ebp)
- 2af:	89 c3                	mov    %eax,%ebx
- 2b1:	50                   	push   %eax
- 2b2:	e8 f4 00 00 00       	call   3ab <fstat>
-  close(fd);
- 2b7:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 2ba:	89 c6                	mov    %eax,%esi
-  close(fd);
- 2bc:	e8 ba 00 00 00       	call   37b <close>
-  return r;
- 2c1:	83 c4 10             	add    $0x10,%esp
-}
- 2c4:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 2c7:	89 f0                	mov    %esi,%eax
- 2c9:	5b                   	pop    %ebx
- 2ca:	5e                   	pop    %esi
- 2cb:	5d                   	pop    %ebp
- 2cc:	c3                   	ret
- 2cd:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 2d0:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 2d5:	eb ed                	jmp    2c4 <stat+0x34>
- 2d7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2de:	00 
- 2df:	90                   	nop
-
-000002e0 <atoi>:
-
-int
-atoi(const char *s)
-{
- 2e0:	55                   	push   %ebp
- 2e1:	89 e5                	mov    %esp,%ebp
- 2e3:	53                   	push   %ebx
- 2e4:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2e7:	0f be 02             	movsbl (%edx),%eax
- 2ea:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 2ed:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 2f0:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 2f5:	77 1e                	ja     315 <atoi+0x35>
- 2f7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2fe:	00 
- 2ff:	90                   	nop
-    n = n*10 + *s++ - '0';
- 300:	83 c2 01             	add    $0x1,%edx
- 303:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 306:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 30a:	0f be 02             	movsbl (%edx),%eax
- 30d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 310:	80 fb 09             	cmp    $0x9,%bl
- 313:	76 eb                	jbe    300 <atoi+0x20>
-  return n;
-}
- 315:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 318:	89 c8                	mov    %ecx,%eax
- 31a:	c9                   	leave
- 31b:	c3                   	ret
- 31c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000320 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 320:	55                   	push   %ebp
- 321:	89 e5                	mov    %esp,%ebp
- 323:	57                   	push   %edi
- 324:	8b 45 10             	mov    0x10(%ebp),%eax
- 327:	8b 55 08             	mov    0x8(%ebp),%edx
- 32a:	56                   	push   %esi
- 32b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 32e:	85 c0                	test   %eax,%eax
- 330:	7e 13                	jle    345 <memmove+0x25>
- 332:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 334:	89 d7                	mov    %edx,%edi
- 336:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 33d:	00 
- 33e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 340:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 341:	39 f8                	cmp    %edi,%eax
- 343:	75 fb                	jne    340 <memmove+0x20>
-  return vdst;
-}
- 345:	5e                   	pop    %esi
- 346:	89 d0                	mov    %edx,%eax
- 348:	5f                   	pop    %edi
- 349:	5d                   	pop    %ebp
- 34a:	c3                   	ret
-
-0000034b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 34b:	b8 01 00 00 00       	mov    $0x1,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret
-
-00000353 <exit>:
-SYSCALL(exit)
- 353:	b8 02 00 00 00       	mov    $0x2,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret
-
-0000035b <wait>:
-SYSCALL(wait)
- 35b:	b8 03 00 00 00       	mov    $0x3,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret
-
-00000363 <pipe>:
-SYSCALL(pipe)
- 363:	b8 04 00 00 00       	mov    $0x4,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret
-
-0000036b <read>:
-SYSCALL(read)
- 36b:	b8 05 00 00 00       	mov    $0x5,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret
-
-00000373 <write>:
-SYSCALL(write)
- 373:	b8 10 00 00 00       	mov    $0x10,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret
-
-0000037b <close>:
-SYSCALL(close)
- 37b:	b8 15 00 00 00       	mov    $0x15,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret
-
-00000383 <kill>:
-SYSCALL(kill)
- 383:	b8 06 00 00 00       	mov    $0x6,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret
-
-0000038b <exec>:
-SYSCALL(exec)
- 38b:	b8 07 00 00 00       	mov    $0x7,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret
-
-00000393 <open>:
-SYSCALL(open)
- 393:	b8 0f 00 00 00       	mov    $0xf,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret
-
-0000039b <mknod>:
-SYSCALL(mknod)
- 39b:	b8 11 00 00 00       	mov    $0x11,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret
-
-000003a3 <unlink>:
-SYSCALL(unlink)
- 3a3:	b8 12 00 00 00       	mov    $0x12,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret
-
-000003ab <fstat>:
-SYSCALL(fstat)
- 3ab:	b8 08 00 00 00       	mov    $0x8,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret
-
-000003b3 <link>:
-SYSCALL(link)
- 3b3:	b8 13 00 00 00       	mov    $0x13,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret
-
-000003bb <mkdir>:
-SYSCALL(mkdir)
- 3bb:	b8 14 00 00 00       	mov    $0x14,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret
-
-000003c3 <chdir>:
-SYSCALL(chdir)
- 3c3:	b8 09 00 00 00       	mov    $0x9,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret
-
-000003cb <dup>:
-SYSCALL(dup)
- 3cb:	b8 0a 00 00 00       	mov    $0xa,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret
-
-000003d3 <getpid>:
-SYSCALL(getpid)
- 3d3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 3d8:	cd 40                	int    $0x40
- 3da:	c3                   	ret
-
-000003db <sbrk>:
-SYSCALL(sbrk)
- 3db:	b8 0c 00 00 00       	mov    $0xc,%eax
- 3e0:	cd 40                	int    $0x40
- 3e2:	c3                   	ret
-
-000003e3 <sleep>:
-SYSCALL(sleep)
- 3e3:	b8 0d 00 00 00       	mov    $0xd,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret
-
-000003eb <uptime>:
-SYSCALL(uptime)
- 3eb:	b8 0e 00 00 00       	mov    $0xe,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret
- 3f3:	66 90                	xchg   %ax,%ax
- 3f5:	66 90                	xchg   %ax,%ax
- 3f7:	66 90                	xchg   %ax,%ax
- 3f9:	66 90                	xchg   %ax,%ax
- 3fb:	66 90                	xchg   %ax,%ax
- 3fd:	66 90                	xchg   %ax,%ax
- 3ff:	90                   	nop
-
-00000400 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 400:	55                   	push   %ebp
- 401:	89 e5                	mov    %esp,%ebp
- 403:	57                   	push   %edi
- 404:	56                   	push   %esi
- 405:	53                   	push   %ebx
- 406:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 408:	89 d1                	mov    %edx,%ecx
-{
- 40a:	83 ec 3c             	sub    $0x3c,%esp
- 40d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 410:	85 d2                	test   %edx,%edx
- 412:	0f 89 80 00 00 00    	jns    498 <printint+0x98>
- 418:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 41c:	74 7a                	je     498 <printint+0x98>
-    x = -xx;
- 41e:	f7 d9                	neg    %ecx
-    neg = 1;
- 420:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 425:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 428:	31 f6                	xor    %esi,%esi
- 42a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 430:	89 c8                	mov    %ecx,%eax
- 432:	31 d2                	xor    %edx,%edx
- 434:	89 f7                	mov    %esi,%edi
- 436:	f7 f3                	div    %ebx
- 438:	8d 76 01             	lea    0x1(%esi),%esi
- 43b:	0f b6 92 40 08 00 00 	movzbl 0x840(%edx),%edx
- 442:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 446:	89 ca                	mov    %ecx,%edx
- 448:	89 c1                	mov    %eax,%ecx
- 44a:	39 da                	cmp    %ebx,%edx
- 44c:	73 e2                	jae    430 <printint+0x30>
-  if(neg)
- 44e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 451:	85 c0                	test   %eax,%eax
- 453:	74 07                	je     45c <printint+0x5c>
-    buf[i++] = '-';
- 455:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 45a:	89 f7                	mov    %esi,%edi
- 45c:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 45f:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 462:	01 df                	add    %ebx,%edi
- 464:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 468:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 46b:	83 ec 04             	sub    $0x4,%esp
- 46e:	88 45 d7             	mov    %al,-0x29(%ebp)
- 471:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 474:	6a 01                	push   $0x1
- 476:	50                   	push   %eax
- 477:	56                   	push   %esi
- 478:	e8 f6 fe ff ff       	call   373 <write>
-  while(--i >= 0)
- 47d:	89 f8                	mov    %edi,%eax
- 47f:	83 c4 10             	add    $0x10,%esp
- 482:	83 ef 01             	sub    $0x1,%edi
- 485:	39 c3                	cmp    %eax,%ebx
- 487:	75 df                	jne    468 <printint+0x68>
-}
- 489:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 48c:	5b                   	pop    %ebx
- 48d:	5e                   	pop    %esi
- 48e:	5f                   	pop    %edi
- 48f:	5d                   	pop    %ebp
- 490:	c3                   	ret
- 491:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 498:	31 c0                	xor    %eax,%eax
- 49a:	eb 89                	jmp    425 <printint+0x25>
- 49c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000004a0 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 4a0:	55                   	push   %ebp
- 4a1:	89 e5                	mov    %esp,%ebp
- 4a3:	57                   	push   %edi
- 4a4:	56                   	push   %esi
- 4a5:	53                   	push   %ebx
- 4a6:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 4a9:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 4ac:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 4af:	0f b6 1e             	movzbl (%esi),%ebx
- 4b2:	83 c6 01             	add    $0x1,%esi
- 4b5:	84 db                	test   %bl,%bl
- 4b7:	74 67                	je     520 <printf+0x80>
- 4b9:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 4bc:	31 d2                	xor    %edx,%edx
- 4be:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 4c1:	eb 34                	jmp    4f7 <printf+0x57>
- 4c3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 4c8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 4cb:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 4d0:	83 f8 25             	cmp    $0x25,%eax
- 4d3:	74 18                	je     4ed <printf+0x4d>
-  write(fd, &c, 1);
- 4d5:	83 ec 04             	sub    $0x4,%esp
- 4d8:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4db:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4de:	6a 01                	push   $0x1
- 4e0:	50                   	push   %eax
- 4e1:	57                   	push   %edi
- 4e2:	e8 8c fe ff ff       	call   373 <write>
- 4e7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4ea:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4ed:	0f b6 1e             	movzbl (%esi),%ebx
- 4f0:	83 c6 01             	add    $0x1,%esi
- 4f3:	84 db                	test   %bl,%bl
- 4f5:	74 29                	je     520 <printf+0x80>
-    c = fmt[i] & 0xff;
- 4f7:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4fa:	85 d2                	test   %edx,%edx
- 4fc:	74 ca                	je     4c8 <printf+0x28>
-      }
-    } else if(state == '%'){
- 4fe:	83 fa 25             	cmp    $0x25,%edx
- 501:	75 ea                	jne    4ed <printf+0x4d>
-      if(c == 'd'){
- 503:	83 f8 25             	cmp    $0x25,%eax
- 506:	0f 84 04 01 00 00    	je     610 <printf+0x170>
- 50c:	83 e8 63             	sub    $0x63,%eax
- 50f:	83 f8 15             	cmp    $0x15,%eax
- 512:	77 1c                	ja     530 <printf+0x90>
- 514:	ff 24 85 e8 07 00 00 	jmp    *0x7e8(,%eax,4)
- 51b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 520:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 523:	5b                   	pop    %ebx
- 524:	5e                   	pop    %esi
- 525:	5f                   	pop    %edi
- 526:	5d                   	pop    %ebp
- 527:	c3                   	ret
- 528:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 52f:	00 
-  write(fd, &c, 1);
- 530:	83 ec 04             	sub    $0x4,%esp
- 533:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 536:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 53a:	6a 01                	push   $0x1
- 53c:	52                   	push   %edx
- 53d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 540:	57                   	push   %edi
- 541:	e8 2d fe ff ff       	call   373 <write>
- 546:	83 c4 0c             	add    $0xc,%esp
- 549:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 54c:	6a 01                	push   $0x1
- 54e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 551:	52                   	push   %edx
- 552:	57                   	push   %edi
- 553:	e8 1b fe ff ff       	call   373 <write>
-        putc(fd, c);
- 558:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 55b:	31 d2                	xor    %edx,%edx
- 55d:	eb 8e                	jmp    4ed <printf+0x4d>
- 55f:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 560:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 563:	83 ec 0c             	sub    $0xc,%esp
- 566:	b9 10 00 00 00       	mov    $0x10,%ecx
- 56b:	8b 13                	mov    (%ebx),%edx
- 56d:	6a 00                	push   $0x0
- 56f:	89 f8                	mov    %edi,%eax
-        ap++;
- 571:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 574:	e8 87 fe ff ff       	call   400 <printint>
-        ap++;
- 579:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 57c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 57f:	31 d2                	xor    %edx,%edx
- 581:	e9 67 ff ff ff       	jmp    4ed <printf+0x4d>
-        s = (char*)*ap;
- 586:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 589:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 58b:	83 c0 04             	add    $0x4,%eax
- 58e:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 591:	85 db                	test   %ebx,%ebx
- 593:	0f 84 87 00 00 00    	je     620 <printf+0x180>
-        while(*s != 0){
- 599:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 59c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 59e:	84 c0                	test   %al,%al
- 5a0:	0f 84 47 ff ff ff    	je     4ed <printf+0x4d>
- 5a6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 5a9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5ac:	89 de                	mov    %ebx,%esi
- 5ae:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 5b0:	83 ec 04             	sub    $0x4,%esp
- 5b3:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 5b6:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 5b9:	6a 01                	push   $0x1
- 5bb:	53                   	push   %ebx
- 5bc:	57                   	push   %edi
- 5bd:	e8 b1 fd ff ff       	call   373 <write>
-        while(*s != 0){
- 5c2:	0f b6 06             	movzbl (%esi),%eax
- 5c5:	83 c4 10             	add    $0x10,%esp
- 5c8:	84 c0                	test   %al,%al
- 5ca:	75 e4                	jne    5b0 <printf+0x110>
-      state = 0;
- 5cc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 5cf:	31 d2                	xor    %edx,%edx
- 5d1:	e9 17 ff ff ff       	jmp    4ed <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 5d6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5d9:	83 ec 0c             	sub    $0xc,%esp
- 5dc:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5e1:	8b 13                	mov    (%ebx),%edx
- 5e3:	6a 01                	push   $0x1
- 5e5:	eb 88                	jmp    56f <printf+0xcf>
-        putc(fd, *ap);
- 5e7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 5ea:	83 ec 04             	sub    $0x4,%esp
- 5ed:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 5f0:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 5f2:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 5f5:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 5f8:	6a 01                	push   $0x1
- 5fa:	52                   	push   %edx
- 5fb:	57                   	push   %edi
- 5fc:	e8 72 fd ff ff       	call   373 <write>
-        ap++;
- 601:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 604:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 607:	31 d2                	xor    %edx,%edx
- 609:	e9 df fe ff ff       	jmp    4ed <printf+0x4d>
- 60e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 610:	83 ec 04             	sub    $0x4,%esp
- 613:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 616:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 619:	6a 01                	push   $0x1
- 61b:	e9 31 ff ff ff       	jmp    551 <printf+0xb1>
- 620:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 625:	bb e0 07 00 00       	mov    $0x7e0,%ebx
- 62a:	e9 77 ff ff ff       	jmp    5a6 <printf+0x106>
- 62f:	90                   	nop
-
-00000630 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 630:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 631:	a1 20 0d 00 00       	mov    0xd20,%eax
-{
- 636:	89 e5                	mov    %esp,%ebp
- 638:	57                   	push   %edi
- 639:	56                   	push   %esi
- 63a:	53                   	push   %ebx
- 63b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 63e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 641:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 648:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 64a:	39 c8                	cmp    %ecx,%eax
- 64c:	73 32                	jae    680 <free+0x50>
- 64e:	39 d1                	cmp    %edx,%ecx
- 650:	72 04                	jb     656 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 652:	39 d0                	cmp    %edx,%eax
- 654:	72 32                	jb     688 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 656:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 659:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 65c:	39 fa                	cmp    %edi,%edx
- 65e:	74 30                	je     690 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 660:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 663:	8b 50 04             	mov    0x4(%eax),%edx
- 666:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 669:	39 f1                	cmp    %esi,%ecx
- 66b:	74 3a                	je     6a7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 66d:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 66f:	5b                   	pop    %ebx
-  freep = p;
- 670:	a3 20 0d 00 00       	mov    %eax,0xd20
-}
- 675:	5e                   	pop    %esi
- 676:	5f                   	pop    %edi
- 677:	5d                   	pop    %ebp
- 678:	c3                   	ret
- 679:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 680:	39 d0                	cmp    %edx,%eax
- 682:	72 04                	jb     688 <free+0x58>
- 684:	39 d1                	cmp    %edx,%ecx
- 686:	72 ce                	jb     656 <free+0x26>
-{
- 688:	89 d0                	mov    %edx,%eax
- 68a:	eb bc                	jmp    648 <free+0x18>
- 68c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 690:	03 72 04             	add    0x4(%edx),%esi
- 693:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 696:	8b 10                	mov    (%eax),%edx
- 698:	8b 12                	mov    (%edx),%edx
- 69a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 69d:	8b 50 04             	mov    0x4(%eax),%edx
- 6a0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6a3:	39 f1                	cmp    %esi,%ecx
- 6a5:	75 c6                	jne    66d <free+0x3d>
-    p->s.size += bp->s.size;
- 6a7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 6aa:	a3 20 0d 00 00       	mov    %eax,0xd20
-    p->s.size += bp->s.size;
- 6af:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6b2:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 6b5:	89 08                	mov    %ecx,(%eax)
-}
- 6b7:	5b                   	pop    %ebx
- 6b8:	5e                   	pop    %esi
- 6b9:	5f                   	pop    %edi
- 6ba:	5d                   	pop    %ebp
- 6bb:	c3                   	ret
- 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006c0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6c0:	55                   	push   %ebp
- 6c1:	89 e5                	mov    %esp,%ebp
- 6c3:	57                   	push   %edi
- 6c4:	56                   	push   %esi
- 6c5:	53                   	push   %ebx
- 6c6:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6c9:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6cc:	8b 15 20 0d 00 00    	mov    0xd20,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6d2:	8d 78 07             	lea    0x7(%eax),%edi
- 6d5:	c1 ef 03             	shr    $0x3,%edi
- 6d8:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 6db:	85 d2                	test   %edx,%edx
- 6dd:	0f 84 8d 00 00 00    	je     770 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e3:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 6e5:	8b 48 04             	mov    0x4(%eax),%ecx
- 6e8:	39 f9                	cmp    %edi,%ecx
- 6ea:	73 64                	jae    750 <malloc+0x90>
-  if(nu < 4096)
- 6ec:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6f1:	39 df                	cmp    %ebx,%edi
- 6f3:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6f6:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6fd:	eb 0a                	jmp    709 <malloc+0x49>
- 6ff:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 700:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 702:	8b 48 04             	mov    0x4(%eax),%ecx
- 705:	39 f9                	cmp    %edi,%ecx
- 707:	73 47                	jae    750 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 709:	89 c2                	mov    %eax,%edx
- 70b:	3b 05 20 0d 00 00    	cmp    0xd20,%eax
- 711:	75 ed                	jne    700 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 713:	83 ec 0c             	sub    $0xc,%esp
- 716:	56                   	push   %esi
- 717:	e8 bf fc ff ff       	call   3db <sbrk>
-  if(p == (char*)-1)
- 71c:	83 c4 10             	add    $0x10,%esp
- 71f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 722:	74 1c                	je     740 <malloc+0x80>
-  hp->s.size = nu;
- 724:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 727:	83 ec 0c             	sub    $0xc,%esp
- 72a:	83 c0 08             	add    $0x8,%eax
- 72d:	50                   	push   %eax
- 72e:	e8 fd fe ff ff       	call   630 <free>
-  return freep;
- 733:	8b 15 20 0d 00 00    	mov    0xd20,%edx
-      if((p = morecore(nunits)) == 0)
- 739:	83 c4 10             	add    $0x10,%esp
- 73c:	85 d2                	test   %edx,%edx
- 73e:	75 c0                	jne    700 <malloc+0x40>
-        return 0;
-  }
-}
- 740:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 743:	31 c0                	xor    %eax,%eax
-}
- 745:	5b                   	pop    %ebx
- 746:	5e                   	pop    %esi
- 747:	5f                   	pop    %edi
- 748:	5d                   	pop    %ebp
- 749:	c3                   	ret
- 74a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 750:	39 cf                	cmp    %ecx,%edi
- 752:	74 4c                	je     7a0 <malloc+0xe0>
-        p->s.size -= nunits;
- 754:	29 f9                	sub    %edi,%ecx
- 756:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 759:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 75c:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 75f:	89 15 20 0d 00 00    	mov    %edx,0xd20
-}
- 765:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 768:	83 c0 08             	add    $0x8,%eax
-}
- 76b:	5b                   	pop    %ebx
- 76c:	5e                   	pop    %esi
- 76d:	5f                   	pop    %edi
- 76e:	5d                   	pop    %ebp
- 76f:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 770:	c7 05 20 0d 00 00 24 	movl   $0xd24,0xd20
- 777:	0d 00 00 
-    base.s.size = 0;
- 77a:	b8 24 0d 00 00       	mov    $0xd24,%eax
-    base.s.ptr = freep = prevp = &base;
- 77f:	c7 05 24 0d 00 00 24 	movl   $0xd24,0xd24
- 786:	0d 00 00 
-    base.s.size = 0;
- 789:	c7 05 28 0d 00 00 00 	movl   $0x0,0xd28
- 790:	00 00 00 
-    if(p->s.size >= nunits){
- 793:	e9 54 ff ff ff       	jmp    6ec <malloc+0x2c>
- 798:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 79f:	00 
-        prevp->s.ptr = p->s.ptr;
- 7a0:	8b 08                	mov    (%eax),%ecx
- 7a2:	89 0a                	mov    %ecx,(%edx)
- 7a4:	eb b9                	jmp    75f <malloc+0x9f>
diff --git a/cat.d b/cat.d
deleted file mode 100644
index 8f55acc..0000000
--- a/cat.d
+++ /dev/null
@@ -1 +0,0 @@
-cat.o: cat.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/cat.o b/cat.o
deleted file mode 100644
index 7052d99..0000000
Binary files a/cat.o and /dev/null differ
diff --git a/cat.sym b/cat.sym
deleted file mode 100644
index 03ae662..0000000
--- a/cat.sym
+++ /dev/null
@@ -1,47 +0,0 @@
-00000000 cat.c
-00000000 ulib.c
-00000000 printf.c
-00000400 printint
-00000840 digits.0
-00000000 umalloc.c
-00000d20 freep
-00000d24 base
-00000110 strcpy
-000004a0 printf
-00000320 memmove
-0000039b mknod
-00000230 gets
-000003d3 getpid
-00000090 cat
-000006c0 malloc
-000003e3 sleep
-00000363 pipe
-00000373 write
-000003ab fstat
-00000383 kill
-000003c3 chdir
-0000038b exec
-0000035b wait
-0000036b read
-000003a3 unlink
-0000034b fork
-000003db sbrk
-000003eb uptime
-00000b20 __bss_start
-000001d0 memset
-00000000 main
-00000140 strcmp
-000003cb dup
-00000b20 buf
-00000290 stat
-00000b18 _edata
-00000d2c _end
-000003b3 link
-00000353 exit
-000002e0 atoi
-000001a0 strlen
-00000393 open
-000001f0 strchr
-000003bb mkdir
-0000037b close
-00000630 free
diff --git a/console.d b/console.d
deleted file mode 100644
index 7b5564c..0000000
--- a/console.d
+++ /dev/null
@@ -1,3 +0,0 @@
-console.o: console.c /usr/include/stdc-predef.h types.h defs.h param.h \
- traps.h spinlock.h sleeplock.h fs.h file.h memlayout.h mmu.h proc.h \
- x86.h
diff --git a/console.o b/console.o
deleted file mode 100644
index 0516477..0000000
Binary files a/console.o and /dev/null differ
diff --git a/defs.h b/defs.h
index 82fb982..187cef7 100644
--- a/defs.h
+++ b/defs.h
@@ -10,6 +10,7 @@ struct sleeplock;
 struct stat;
 struct superblock;
 
+int get_free_pages(void);
 // bio.c
 void            binit(void);
 struct buf*     bread(uint, uint);
diff --git a/echo.asm b/echo.asm
deleted file mode 100644
index 68439c2..0000000
--- a/echo.asm
+++ /dev/null
@@ -1,1123 +0,0 @@
-
-_echo:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	57                   	push   %edi
-   e:	56                   	push   %esi
-   f:	53                   	push   %ebx
-  10:	51                   	push   %ecx
-  11:	83 ec 08             	sub    $0x8,%esp
-  14:	8b 31                	mov    (%ecx),%esi
-  16:	8b 79 04             	mov    0x4(%ecx),%edi
-  int i;
-
-  for(i = 1; i < argc; i++)
-  19:	83 fe 01             	cmp    $0x1,%esi
-  1c:	7e 47                	jle    65 <main+0x65>
-    printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  1e:	8b 47 04             	mov    0x4(%edi),%eax
-  21:	83 fe 02             	cmp    $0x2,%esi
-  24:	74 2a                	je     50 <main+0x50>
-  26:	bb 02 00 00 00       	mov    $0x2,%ebx
-  2b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  30:	68 08 07 00 00       	push   $0x708
-  35:	83 c3 01             	add    $0x1,%ebx
-  38:	50                   	push   %eax
-  39:	68 0a 07 00 00       	push   $0x70a
-  3e:	6a 01                	push   $0x1
-  40:	e8 bb 03 00 00       	call   400 <printf>
-  45:	8b 44 9f fc          	mov    -0x4(%edi,%ebx,4),%eax
-  49:	83 c4 10             	add    $0x10,%esp
-  4c:	39 de                	cmp    %ebx,%esi
-  4e:	75 e0                	jne    30 <main+0x30>
-  50:	68 0f 07 00 00       	push   $0x70f
-  55:	50                   	push   %eax
-  56:	68 0a 07 00 00       	push   $0x70a
-  5b:	6a 01                	push   $0x1
-  5d:	e8 9e 03 00 00       	call   400 <printf>
-  62:	83 c4 10             	add    $0x10,%esp
-  exit();
-  65:	e8 49 02 00 00       	call   2b3 <exit>
-  6a:	66 90                	xchg   %ax,%ax
-  6c:	66 90                	xchg   %ax,%ax
-  6e:	66 90                	xchg   %ax,%ax
-
-00000070 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  70:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  71:	31 c0                	xor    %eax,%eax
-{
-  73:	89 e5                	mov    %esp,%ebp
-  75:	53                   	push   %ebx
-  76:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  79:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
-  80:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  84:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  87:	83 c0 01             	add    $0x1,%eax
-  8a:	84 d2                	test   %dl,%dl
-  8c:	75 f2                	jne    80 <strcpy+0x10>
-    ;
-  return os;
-}
-  8e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  91:	89 c8                	mov    %ecx,%eax
-  93:	c9                   	leave
-  94:	c3                   	ret
-  95:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  9c:	00 
-  9d:	8d 76 00             	lea    0x0(%esi),%esi
-
-000000a0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  a0:	55                   	push   %ebp
-  a1:	89 e5                	mov    %esp,%ebp
-  a3:	53                   	push   %ebx
-  a4:	8b 55 08             	mov    0x8(%ebp),%edx
-  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-  aa:	0f b6 02             	movzbl (%edx),%eax
-  ad:	84 c0                	test   %al,%al
-  af:	75 17                	jne    c8 <strcmp+0x28>
-  b1:	eb 3a                	jmp    ed <strcmp+0x4d>
-  b3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  b8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
-  bc:	83 c2 01             	add    $0x1,%edx
-  bf:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
-  c2:	84 c0                	test   %al,%al
-  c4:	74 1a                	je     e0 <strcmp+0x40>
-  c6:	89 d9                	mov    %ebx,%ecx
-  c8:	0f b6 19             	movzbl (%ecx),%ebx
-  cb:	38 c3                	cmp    %al,%bl
-  cd:	74 e9                	je     b8 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
-  cf:	29 d8                	sub    %ebx,%eax
-}
-  d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  d4:	c9                   	leave
-  d5:	c3                   	ret
-  d6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  dd:	00 
-  de:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
-  e0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
-  e4:	31 c0                	xor    %eax,%eax
-  e6:	29 d8                	sub    %ebx,%eax
-}
-  e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  eb:	c9                   	leave
-  ec:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
-  ed:	0f b6 19             	movzbl (%ecx),%ebx
-  f0:	31 c0                	xor    %eax,%eax
-  f2:	eb db                	jmp    cf <strcmp+0x2f>
-  f4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  fb:	00 
-  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000100 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 100:	55                   	push   %ebp
- 101:	89 e5                	mov    %esp,%ebp
- 103:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 106:	80 3a 00             	cmpb   $0x0,(%edx)
- 109:	74 15                	je     120 <strlen+0x20>
- 10b:	31 c0                	xor    %eax,%eax
- 10d:	8d 76 00             	lea    0x0(%esi),%esi
- 110:	83 c0 01             	add    $0x1,%eax
- 113:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 117:	89 c1                	mov    %eax,%ecx
- 119:	75 f5                	jne    110 <strlen+0x10>
-    ;
-  return n;
-}
- 11b:	89 c8                	mov    %ecx,%eax
- 11d:	5d                   	pop    %ebp
- 11e:	c3                   	ret
- 11f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 120:	31 c9                	xor    %ecx,%ecx
-}
- 122:	5d                   	pop    %ebp
- 123:	89 c8                	mov    %ecx,%eax
- 125:	c3                   	ret
- 126:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 12d:	00 
- 12e:	66 90                	xchg   %ax,%ax
-
-00000130 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 130:	55                   	push   %ebp
- 131:	89 e5                	mov    %esp,%ebp
- 133:	57                   	push   %edi
- 134:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 137:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 13a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 13d:	89 d7                	mov    %edx,%edi
- 13f:	fc                   	cld
- 140:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 142:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 145:	89 d0                	mov    %edx,%eax
- 147:	c9                   	leave
- 148:	c3                   	ret
- 149:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000150 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 150:	55                   	push   %ebp
- 151:	89 e5                	mov    %esp,%ebp
- 153:	8b 45 08             	mov    0x8(%ebp),%eax
- 156:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 15a:	0f b6 10             	movzbl (%eax),%edx
- 15d:	84 d2                	test   %dl,%dl
- 15f:	75 12                	jne    173 <strchr+0x23>
- 161:	eb 1d                	jmp    180 <strchr+0x30>
- 163:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 168:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 16c:	83 c0 01             	add    $0x1,%eax
- 16f:	84 d2                	test   %dl,%dl
- 171:	74 0d                	je     180 <strchr+0x30>
-    if(*s == c)
- 173:	38 d1                	cmp    %dl,%cl
- 175:	75 f1                	jne    168 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 177:	5d                   	pop    %ebp
- 178:	c3                   	ret
- 179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 180:	31 c0                	xor    %eax,%eax
-}
- 182:	5d                   	pop    %ebp
- 183:	c3                   	ret
- 184:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 18b:	00 
- 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000190 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 190:	55                   	push   %ebp
- 191:	89 e5                	mov    %esp,%ebp
- 193:	57                   	push   %edi
- 194:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 195:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 198:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 199:	31 db                	xor    %ebx,%ebx
-{
- 19b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 19e:	eb 27                	jmp    1c7 <gets+0x37>
-    cc = read(0, &c, 1);
- 1a0:	83 ec 04             	sub    $0x4,%esp
- 1a3:	6a 01                	push   $0x1
- 1a5:	56                   	push   %esi
- 1a6:	6a 00                	push   $0x0
- 1a8:	e8 1e 01 00 00       	call   2cb <read>
-    if(cc < 1)
- 1ad:	83 c4 10             	add    $0x10,%esp
- 1b0:	85 c0                	test   %eax,%eax
- 1b2:	7e 1d                	jle    1d1 <gets+0x41>
-      break;
-    buf[i++] = c;
- 1b4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1b8:	8b 55 08             	mov    0x8(%ebp),%edx
- 1bb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 1bf:	3c 0a                	cmp    $0xa,%al
- 1c1:	74 10                	je     1d3 <gets+0x43>
- 1c3:	3c 0d                	cmp    $0xd,%al
- 1c5:	74 0c                	je     1d3 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 1c7:	89 df                	mov    %ebx,%edi
- 1c9:	83 c3 01             	add    $0x1,%ebx
- 1cc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1cf:	7c cf                	jl     1a0 <gets+0x10>
- 1d1:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1d6:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 1da:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1dd:	5b                   	pop    %ebx
- 1de:	5e                   	pop    %esi
- 1df:	5f                   	pop    %edi
- 1e0:	5d                   	pop    %ebp
- 1e1:	c3                   	ret
- 1e2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1e9:	00 
- 1ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000001f0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 1f0:	55                   	push   %ebp
- 1f1:	89 e5                	mov    %esp,%ebp
- 1f3:	56                   	push   %esi
- 1f4:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1f5:	83 ec 08             	sub    $0x8,%esp
- 1f8:	6a 00                	push   $0x0
- 1fa:	ff 75 08             	push   0x8(%ebp)
- 1fd:	e8 f1 00 00 00       	call   2f3 <open>
-  if(fd < 0)
- 202:	83 c4 10             	add    $0x10,%esp
- 205:	85 c0                	test   %eax,%eax
- 207:	78 27                	js     230 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 209:	83 ec 08             	sub    $0x8,%esp
- 20c:	ff 75 0c             	push   0xc(%ebp)
- 20f:	89 c3                	mov    %eax,%ebx
- 211:	50                   	push   %eax
- 212:	e8 f4 00 00 00       	call   30b <fstat>
-  close(fd);
- 217:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 21a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 21c:	e8 ba 00 00 00       	call   2db <close>
-  return r;
- 221:	83 c4 10             	add    $0x10,%esp
-}
- 224:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 227:	89 f0                	mov    %esi,%eax
- 229:	5b                   	pop    %ebx
- 22a:	5e                   	pop    %esi
- 22b:	5d                   	pop    %ebp
- 22c:	c3                   	ret
- 22d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 230:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 235:	eb ed                	jmp    224 <stat+0x34>
- 237:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 23e:	00 
- 23f:	90                   	nop
-
-00000240 <atoi>:
-
-int
-atoi(const char *s)
-{
- 240:	55                   	push   %ebp
- 241:	89 e5                	mov    %esp,%ebp
- 243:	53                   	push   %ebx
- 244:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 247:	0f be 02             	movsbl (%edx),%eax
- 24a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 24d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 250:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 255:	77 1e                	ja     275 <atoi+0x35>
- 257:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 25e:	00 
- 25f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 260:	83 c2 01             	add    $0x1,%edx
- 263:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 266:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 26a:	0f be 02             	movsbl (%edx),%eax
- 26d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 270:	80 fb 09             	cmp    $0x9,%bl
- 273:	76 eb                	jbe    260 <atoi+0x20>
-  return n;
-}
- 275:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 278:	89 c8                	mov    %ecx,%eax
- 27a:	c9                   	leave
- 27b:	c3                   	ret
- 27c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000280 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 280:	55                   	push   %ebp
- 281:	89 e5                	mov    %esp,%ebp
- 283:	57                   	push   %edi
- 284:	8b 45 10             	mov    0x10(%ebp),%eax
- 287:	8b 55 08             	mov    0x8(%ebp),%edx
- 28a:	56                   	push   %esi
- 28b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 28e:	85 c0                	test   %eax,%eax
- 290:	7e 13                	jle    2a5 <memmove+0x25>
- 292:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 294:	89 d7                	mov    %edx,%edi
- 296:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 29d:	00 
- 29e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 2a0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2a1:	39 f8                	cmp    %edi,%eax
- 2a3:	75 fb                	jne    2a0 <memmove+0x20>
-  return vdst;
-}
- 2a5:	5e                   	pop    %esi
- 2a6:	89 d0                	mov    %edx,%eax
- 2a8:	5f                   	pop    %edi
- 2a9:	5d                   	pop    %ebp
- 2aa:	c3                   	ret
-
-000002ab <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2ab:	b8 01 00 00 00       	mov    $0x1,%eax
- 2b0:	cd 40                	int    $0x40
- 2b2:	c3                   	ret
-
-000002b3 <exit>:
-SYSCALL(exit)
- 2b3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2b8:	cd 40                	int    $0x40
- 2ba:	c3                   	ret
-
-000002bb <wait>:
-SYSCALL(wait)
- 2bb:	b8 03 00 00 00       	mov    $0x3,%eax
- 2c0:	cd 40                	int    $0x40
- 2c2:	c3                   	ret
-
-000002c3 <pipe>:
-SYSCALL(pipe)
- 2c3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2c8:	cd 40                	int    $0x40
- 2ca:	c3                   	ret
-
-000002cb <read>:
-SYSCALL(read)
- 2cb:	b8 05 00 00 00       	mov    $0x5,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret
-
-000002d3 <write>:
-SYSCALL(write)
- 2d3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret
-
-000002db <close>:
-SYSCALL(close)
- 2db:	b8 15 00 00 00       	mov    $0x15,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret
-
-000002e3 <kill>:
-SYSCALL(kill)
- 2e3:	b8 06 00 00 00       	mov    $0x6,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret
-
-000002eb <exec>:
-SYSCALL(exec)
- 2eb:	b8 07 00 00 00       	mov    $0x7,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret
-
-000002f3 <open>:
-SYSCALL(open)
- 2f3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret
-
-000002fb <mknod>:
-SYSCALL(mknod)
- 2fb:	b8 11 00 00 00       	mov    $0x11,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret
-
-00000303 <unlink>:
-SYSCALL(unlink)
- 303:	b8 12 00 00 00       	mov    $0x12,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret
-
-0000030b <fstat>:
-SYSCALL(fstat)
- 30b:	b8 08 00 00 00       	mov    $0x8,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret
-
-00000313 <link>:
-SYSCALL(link)
- 313:	b8 13 00 00 00       	mov    $0x13,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret
-
-0000031b <mkdir>:
-SYSCALL(mkdir)
- 31b:	b8 14 00 00 00       	mov    $0x14,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret
-
-00000323 <chdir>:
-SYSCALL(chdir)
- 323:	b8 09 00 00 00       	mov    $0x9,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret
-
-0000032b <dup>:
-SYSCALL(dup)
- 32b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret
-
-00000333 <getpid>:
-SYSCALL(getpid)
- 333:	b8 0b 00 00 00       	mov    $0xb,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret
-
-0000033b <sbrk>:
-SYSCALL(sbrk)
- 33b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret
-
-00000343 <sleep>:
-SYSCALL(sleep)
- 343:	b8 0d 00 00 00       	mov    $0xd,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret
-
-0000034b <uptime>:
-SYSCALL(uptime)
- 34b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret
- 353:	66 90                	xchg   %ax,%ax
- 355:	66 90                	xchg   %ax,%ax
- 357:	66 90                	xchg   %ax,%ax
- 359:	66 90                	xchg   %ax,%ax
- 35b:	66 90                	xchg   %ax,%ax
- 35d:	66 90                	xchg   %ax,%ax
- 35f:	90                   	nop
-
-00000360 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 360:	55                   	push   %ebp
- 361:	89 e5                	mov    %esp,%ebp
- 363:	57                   	push   %edi
- 364:	56                   	push   %esi
- 365:	53                   	push   %ebx
- 366:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 368:	89 d1                	mov    %edx,%ecx
-{
- 36a:	83 ec 3c             	sub    $0x3c,%esp
- 36d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 370:	85 d2                	test   %edx,%edx
- 372:	0f 89 80 00 00 00    	jns    3f8 <printint+0x98>
- 378:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 37c:	74 7a                	je     3f8 <printint+0x98>
-    x = -xx;
- 37e:	f7 d9                	neg    %ecx
-    neg = 1;
- 380:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 385:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 388:	31 f6                	xor    %esi,%esi
- 38a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 390:	89 c8                	mov    %ecx,%eax
- 392:	31 d2                	xor    %edx,%edx
- 394:	89 f7                	mov    %esi,%edi
- 396:	f7 f3                	div    %ebx
- 398:	8d 76 01             	lea    0x1(%esi),%esi
- 39b:	0f b6 92 70 07 00 00 	movzbl 0x770(%edx),%edx
- 3a2:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 3a6:	89 ca                	mov    %ecx,%edx
- 3a8:	89 c1                	mov    %eax,%ecx
- 3aa:	39 da                	cmp    %ebx,%edx
- 3ac:	73 e2                	jae    390 <printint+0x30>
-  if(neg)
- 3ae:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3b1:	85 c0                	test   %eax,%eax
- 3b3:	74 07                	je     3bc <printint+0x5c>
-    buf[i++] = '-';
- 3b5:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 3ba:	89 f7                	mov    %esi,%edi
- 3bc:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 3bf:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 3c2:	01 df                	add    %ebx,%edi
- 3c4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 3c8:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 3cb:	83 ec 04             	sub    $0x4,%esp
- 3ce:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3d1:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 3d4:	6a 01                	push   $0x1
- 3d6:	50                   	push   %eax
- 3d7:	56                   	push   %esi
- 3d8:	e8 f6 fe ff ff       	call   2d3 <write>
-  while(--i >= 0)
- 3dd:	89 f8                	mov    %edi,%eax
- 3df:	83 c4 10             	add    $0x10,%esp
- 3e2:	83 ef 01             	sub    $0x1,%edi
- 3e5:	39 c3                	cmp    %eax,%ebx
- 3e7:	75 df                	jne    3c8 <printint+0x68>
-}
- 3e9:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ec:	5b                   	pop    %ebx
- 3ed:	5e                   	pop    %esi
- 3ee:	5f                   	pop    %edi
- 3ef:	5d                   	pop    %ebp
- 3f0:	c3                   	ret
- 3f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 3f8:	31 c0                	xor    %eax,%eax
- 3fa:	eb 89                	jmp    385 <printint+0x25>
- 3fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000400 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 400:	55                   	push   %ebp
- 401:	89 e5                	mov    %esp,%ebp
- 403:	57                   	push   %edi
- 404:	56                   	push   %esi
- 405:	53                   	push   %ebx
- 406:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 409:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 40c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 40f:	0f b6 1e             	movzbl (%esi),%ebx
- 412:	83 c6 01             	add    $0x1,%esi
- 415:	84 db                	test   %bl,%bl
- 417:	74 67                	je     480 <printf+0x80>
- 419:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 41c:	31 d2                	xor    %edx,%edx
- 41e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 421:	eb 34                	jmp    457 <printf+0x57>
- 423:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 428:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 42b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 430:	83 f8 25             	cmp    $0x25,%eax
- 433:	74 18                	je     44d <printf+0x4d>
-  write(fd, &c, 1);
- 435:	83 ec 04             	sub    $0x4,%esp
- 438:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 43b:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 43e:	6a 01                	push   $0x1
- 440:	50                   	push   %eax
- 441:	57                   	push   %edi
- 442:	e8 8c fe ff ff       	call   2d3 <write>
- 447:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 44a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 44d:	0f b6 1e             	movzbl (%esi),%ebx
- 450:	83 c6 01             	add    $0x1,%esi
- 453:	84 db                	test   %bl,%bl
- 455:	74 29                	je     480 <printf+0x80>
-    c = fmt[i] & 0xff;
- 457:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 45a:	85 d2                	test   %edx,%edx
- 45c:	74 ca                	je     428 <printf+0x28>
-      }
-    } else if(state == '%'){
- 45e:	83 fa 25             	cmp    $0x25,%edx
- 461:	75 ea                	jne    44d <printf+0x4d>
-      if(c == 'd'){
- 463:	83 f8 25             	cmp    $0x25,%eax
- 466:	0f 84 04 01 00 00    	je     570 <printf+0x170>
- 46c:	83 e8 63             	sub    $0x63,%eax
- 46f:	83 f8 15             	cmp    $0x15,%eax
- 472:	77 1c                	ja     490 <printf+0x90>
- 474:	ff 24 85 18 07 00 00 	jmp    *0x718(,%eax,4)
- 47b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 480:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 483:	5b                   	pop    %ebx
- 484:	5e                   	pop    %esi
- 485:	5f                   	pop    %edi
- 486:	5d                   	pop    %ebp
- 487:	c3                   	ret
- 488:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 48f:	00 
-  write(fd, &c, 1);
- 490:	83 ec 04             	sub    $0x4,%esp
- 493:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 496:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 49a:	6a 01                	push   $0x1
- 49c:	52                   	push   %edx
- 49d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 4a0:	57                   	push   %edi
- 4a1:	e8 2d fe ff ff       	call   2d3 <write>
- 4a6:	83 c4 0c             	add    $0xc,%esp
- 4a9:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4ac:	6a 01                	push   $0x1
- 4ae:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 4b1:	52                   	push   %edx
- 4b2:	57                   	push   %edi
- 4b3:	e8 1b fe ff ff       	call   2d3 <write>
-        putc(fd, c);
- 4b8:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4bb:	31 d2                	xor    %edx,%edx
- 4bd:	eb 8e                	jmp    44d <printf+0x4d>
- 4bf:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 4c0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4c3:	83 ec 0c             	sub    $0xc,%esp
- 4c6:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4cb:	8b 13                	mov    (%ebx),%edx
- 4cd:	6a 00                	push   $0x0
- 4cf:	89 f8                	mov    %edi,%eax
-        ap++;
- 4d1:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 4d4:	e8 87 fe ff ff       	call   360 <printint>
-        ap++;
- 4d9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 4dc:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4df:	31 d2                	xor    %edx,%edx
- 4e1:	e9 67 ff ff ff       	jmp    44d <printf+0x4d>
-        s = (char*)*ap;
- 4e6:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4e9:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 4eb:	83 c0 04             	add    $0x4,%eax
- 4ee:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 4f1:	85 db                	test   %ebx,%ebx
- 4f3:	0f 84 87 00 00 00    	je     580 <printf+0x180>
-        while(*s != 0){
- 4f9:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 4fc:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 4fe:	84 c0                	test   %al,%al
- 500:	0f 84 47 ff ff ff    	je     44d <printf+0x4d>
- 506:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 509:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 50c:	89 de                	mov    %ebx,%esi
- 50e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 510:	83 ec 04             	sub    $0x4,%esp
- 513:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 516:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 519:	6a 01                	push   $0x1
- 51b:	53                   	push   %ebx
- 51c:	57                   	push   %edi
- 51d:	e8 b1 fd ff ff       	call   2d3 <write>
-        while(*s != 0){
- 522:	0f b6 06             	movzbl (%esi),%eax
- 525:	83 c4 10             	add    $0x10,%esp
- 528:	84 c0                	test   %al,%al
- 52a:	75 e4                	jne    510 <printf+0x110>
-      state = 0;
- 52c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 52f:	31 d2                	xor    %edx,%edx
- 531:	e9 17 ff ff ff       	jmp    44d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 536:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 539:	83 ec 0c             	sub    $0xc,%esp
- 53c:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 541:	8b 13                	mov    (%ebx),%edx
- 543:	6a 01                	push   $0x1
- 545:	eb 88                	jmp    4cf <printf+0xcf>
-        putc(fd, *ap);
- 547:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 54a:	83 ec 04             	sub    $0x4,%esp
- 54d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 550:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 552:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 555:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 558:	6a 01                	push   $0x1
- 55a:	52                   	push   %edx
- 55b:	57                   	push   %edi
- 55c:	e8 72 fd ff ff       	call   2d3 <write>
-        ap++;
- 561:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 564:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 567:	31 d2                	xor    %edx,%edx
- 569:	e9 df fe ff ff       	jmp    44d <printf+0x4d>
- 56e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 570:	83 ec 04             	sub    $0x4,%esp
- 573:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 576:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 579:	6a 01                	push   $0x1
- 57b:	e9 31 ff ff ff       	jmp    4b1 <printf+0xb1>
- 580:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 585:	bb 11 07 00 00       	mov    $0x711,%ebx
- 58a:	e9 77 ff ff ff       	jmp    506 <printf+0x106>
- 58f:	90                   	nop
-
-00000590 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 590:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 591:	a1 18 0a 00 00       	mov    0xa18,%eax
-{
- 596:	89 e5                	mov    %esp,%ebp
- 598:	57                   	push   %edi
- 599:	56                   	push   %esi
- 59a:	53                   	push   %ebx
- 59b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 59e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5a8:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5aa:	39 c8                	cmp    %ecx,%eax
- 5ac:	73 32                	jae    5e0 <free+0x50>
- 5ae:	39 d1                	cmp    %edx,%ecx
- 5b0:	72 04                	jb     5b6 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5b2:	39 d0                	cmp    %edx,%eax
- 5b4:	72 32                	jb     5e8 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 5b6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5b9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5bc:	39 fa                	cmp    %edi,%edx
- 5be:	74 30                	je     5f0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5c0:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 5c3:	8b 50 04             	mov    0x4(%eax),%edx
- 5c6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5c9:	39 f1                	cmp    %esi,%ecx
- 5cb:	74 3a                	je     607 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 5cd:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 5cf:	5b                   	pop    %ebx
-  freep = p;
- 5d0:	a3 18 0a 00 00       	mov    %eax,0xa18
-}
- 5d5:	5e                   	pop    %esi
- 5d6:	5f                   	pop    %edi
- 5d7:	5d                   	pop    %ebp
- 5d8:	c3                   	ret
- 5d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5e0:	39 d0                	cmp    %edx,%eax
- 5e2:	72 04                	jb     5e8 <free+0x58>
- 5e4:	39 d1                	cmp    %edx,%ecx
- 5e6:	72 ce                	jb     5b6 <free+0x26>
-{
- 5e8:	89 d0                	mov    %edx,%eax
- 5ea:	eb bc                	jmp    5a8 <free+0x18>
- 5ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 5f0:	03 72 04             	add    0x4(%edx),%esi
- 5f3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5f6:	8b 10                	mov    (%eax),%edx
- 5f8:	8b 12                	mov    (%edx),%edx
- 5fa:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 5fd:	8b 50 04             	mov    0x4(%eax),%edx
- 600:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 603:	39 f1                	cmp    %esi,%ecx
- 605:	75 c6                	jne    5cd <free+0x3d>
-    p->s.size += bp->s.size;
- 607:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 60a:	a3 18 0a 00 00       	mov    %eax,0xa18
-    p->s.size += bp->s.size;
- 60f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 612:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 615:	89 08                	mov    %ecx,(%eax)
-}
- 617:	5b                   	pop    %ebx
- 618:	5e                   	pop    %esi
- 619:	5f                   	pop    %edi
- 61a:	5d                   	pop    %ebp
- 61b:	c3                   	ret
- 61c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000620 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 620:	55                   	push   %ebp
- 621:	89 e5                	mov    %esp,%ebp
- 623:	57                   	push   %edi
- 624:	56                   	push   %esi
- 625:	53                   	push   %ebx
- 626:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 629:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 62c:	8b 15 18 0a 00 00    	mov    0xa18,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 632:	8d 78 07             	lea    0x7(%eax),%edi
- 635:	c1 ef 03             	shr    $0x3,%edi
- 638:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 63b:	85 d2                	test   %edx,%edx
- 63d:	0f 84 8d 00 00 00    	je     6d0 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 643:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 645:	8b 48 04             	mov    0x4(%eax),%ecx
- 648:	39 f9                	cmp    %edi,%ecx
- 64a:	73 64                	jae    6b0 <malloc+0x90>
-  if(nu < 4096)
- 64c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 651:	39 df                	cmp    %ebx,%edi
- 653:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 656:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 65d:	eb 0a                	jmp    669 <malloc+0x49>
- 65f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 660:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 662:	8b 48 04             	mov    0x4(%eax),%ecx
- 665:	39 f9                	cmp    %edi,%ecx
- 667:	73 47                	jae    6b0 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 669:	89 c2                	mov    %eax,%edx
- 66b:	3b 05 18 0a 00 00    	cmp    0xa18,%eax
- 671:	75 ed                	jne    660 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 673:	83 ec 0c             	sub    $0xc,%esp
- 676:	56                   	push   %esi
- 677:	e8 bf fc ff ff       	call   33b <sbrk>
-  if(p == (char*)-1)
- 67c:	83 c4 10             	add    $0x10,%esp
- 67f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 682:	74 1c                	je     6a0 <malloc+0x80>
-  hp->s.size = nu;
- 684:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 687:	83 ec 0c             	sub    $0xc,%esp
- 68a:	83 c0 08             	add    $0x8,%eax
- 68d:	50                   	push   %eax
- 68e:	e8 fd fe ff ff       	call   590 <free>
-  return freep;
- 693:	8b 15 18 0a 00 00    	mov    0xa18,%edx
-      if((p = morecore(nunits)) == 0)
- 699:	83 c4 10             	add    $0x10,%esp
- 69c:	85 d2                	test   %edx,%edx
- 69e:	75 c0                	jne    660 <malloc+0x40>
-        return 0;
-  }
-}
- 6a0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 6a3:	31 c0                	xor    %eax,%eax
-}
- 6a5:	5b                   	pop    %ebx
- 6a6:	5e                   	pop    %esi
- 6a7:	5f                   	pop    %edi
- 6a8:	5d                   	pop    %ebp
- 6a9:	c3                   	ret
- 6aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 6b0:	39 cf                	cmp    %ecx,%edi
- 6b2:	74 4c                	je     700 <malloc+0xe0>
-        p->s.size -= nunits;
- 6b4:	29 f9                	sub    %edi,%ecx
- 6b6:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 6b9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 6bc:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 6bf:	89 15 18 0a 00 00    	mov    %edx,0xa18
-}
- 6c5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 6c8:	83 c0 08             	add    $0x8,%eax
-}
- 6cb:	5b                   	pop    %ebx
- 6cc:	5e                   	pop    %esi
- 6cd:	5f                   	pop    %edi
- 6ce:	5d                   	pop    %ebp
- 6cf:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 6d0:	c7 05 18 0a 00 00 1c 	movl   $0xa1c,0xa18
- 6d7:	0a 00 00 
-    base.s.size = 0;
- 6da:	b8 1c 0a 00 00       	mov    $0xa1c,%eax
-    base.s.ptr = freep = prevp = &base;
- 6df:	c7 05 1c 0a 00 00 1c 	movl   $0xa1c,0xa1c
- 6e6:	0a 00 00 
-    base.s.size = 0;
- 6e9:	c7 05 20 0a 00 00 00 	movl   $0x0,0xa20
- 6f0:	00 00 00 
-    if(p->s.size >= nunits){
- 6f3:	e9 54 ff ff ff       	jmp    64c <malloc+0x2c>
- 6f8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 6ff:	00 
-        prevp->s.ptr = p->s.ptr;
- 700:	8b 08                	mov    (%eax),%ecx
- 702:	89 0a                	mov    %ecx,(%edx)
- 704:	eb b9                	jmp    6bf <malloc+0x9f>
diff --git a/echo.d b/echo.d
deleted file mode 100644
index 16a6098..0000000
--- a/echo.d
+++ /dev/null
@@ -1 +0,0 @@
-echo.o: echo.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/echo.o b/echo.o
deleted file mode 100644
index 4888b29..0000000
Binary files a/echo.o and /dev/null differ
diff --git a/echo.sym b/echo.sym
deleted file mode 100644
index 2c9ba05..0000000
--- a/echo.sym
+++ /dev/null
@@ -1,45 +0,0 @@
-00000000 echo.c
-00000000 ulib.c
-00000000 printf.c
-00000360 printint
-00000770 digits.0
-00000000 umalloc.c
-00000a18 freep
-00000a1c base
-00000070 strcpy
-00000400 printf
-00000280 memmove
-000002fb mknod
-00000190 gets
-00000333 getpid
-00000620 malloc
-00000343 sleep
-000002c3 pipe
-000002d3 write
-0000030b fstat
-000002e3 kill
-00000323 chdir
-000002eb exec
-000002bb wait
-000002cb read
-00000303 unlink
-000002ab fork
-0000033b sbrk
-0000034b uptime
-00000a18 __bss_start
-00000130 memset
-00000000 main
-000000a0 strcmp
-0000032b dup
-000001f0 stat
-00000a18 _edata
-00000a24 _end
-00000313 link
-000002b3 exit
-00000240 atoi
-00000100 strlen
-000002f3 open
-00000150 strchr
-0000031b mkdir
-000002db close
-00000590 free
diff --git a/entry.o b/entry.o
deleted file mode 100644
index ce202b0..0000000
Binary files a/entry.o and /dev/null differ
diff --git a/entryother b/entryother
deleted file mode 100755
index a7673de..0000000
Binary files a/entryother and /dev/null differ
diff --git a/entryother.asm b/entryother.asm
deleted file mode 100644
index 3f97a6a..0000000
--- a/entryother.asm
+++ /dev/null
@@ -1,125 +0,0 @@
-
-bootblockother.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00007000 <start>:
-# This code combines elements of bootasm.S and entry.S.
-
-.code16           
-.globl start
-start:
-  cli            
-    7000:	fa                   	cli
-
-  # Zero data segment registers DS, ES, and SS.
-  xorw    %ax,%ax
-    7001:	31 c0                	xor    %eax,%eax
-  movw    %ax,%ds
-    7003:	8e d8                	mov    %eax,%ds
-  movw    %ax,%es
-    7005:	8e c0                	mov    %eax,%es
-  movw    %ax,%ss
-    7007:	8e d0                	mov    %eax,%ss
-
-  # Switch from real to protected mode.  Use a bootstrap GDT that makes
-  # virtual addresses map directly to physical addresses so that the
-  # effective memory map doesn't change during the transition.
-  lgdt    gdtdesc
-    7009:	0f 01 16             	lgdtl  (%esi)
-    700c:	84 70 0f             	test   %dh,0xf(%eax)
-  movl    %cr0, %eax
-    700f:	20 c0                	and    %al,%al
-  orl     $CR0_PE, %eax
-    7011:	66 83 c8 01          	or     $0x1,%ax
-  movl    %eax, %cr0
-    7015:	0f 22 c0             	mov    %eax,%cr0
-
-  # Complete the transition to 32-bit protected mode by using a long jmp
-  # to reload %cs and %eip.  The segment descriptors are set up with no
-  # translation, so that the mapping is still the identity mapping.
-  ljmpl    $(SEG_KCODE<<3), $(start32)
-    7018:	66 ea 20 70 00 00    	ljmpw  $0x0,$0x7020
-    701e:	08 00                	or     %al,(%eax)
-
-00007020 <start32>:
-
-//PAGEBREAK!
-.code32  # Tell assembler to generate 32-bit code now.
-start32:
-  # Set up the protected-mode data segment registers
-  movw    $(SEG_KDATA<<3), %ax    # Our data segment selector
-    7020:	66 b8 10 00          	mov    $0x10,%ax
-  movw    %ax, %ds                # -> DS: Data Segment
-    7024:	8e d8                	mov    %eax,%ds
-  movw    %ax, %es                # -> ES: Extra Segment
-    7026:	8e c0                	mov    %eax,%es
-  movw    %ax, %ss                # -> SS: Stack Segment
-    7028:	8e d0                	mov    %eax,%ss
-  movw    $0, %ax                 # Zero segments not ready for use
-    702a:	66 b8 00 00          	mov    $0x0,%ax
-  movw    %ax, %fs                # -> FS
-    702e:	8e e0                	mov    %eax,%fs
-  movw    %ax, %gs                # -> GS
-    7030:	8e e8                	mov    %eax,%gs
-
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-    7032:	0f 20 e0             	mov    %cr4,%eax
-  orl     $(CR4_PSE), %eax
-    7035:	83 c8 10             	or     $0x10,%eax
-  movl    %eax, %cr4
-    7038:	0f 22 e0             	mov    %eax,%cr4
-  # Use entrypgdir as our initial page table
-  movl    (start-12), %eax
-    703b:	a1 f4 6f 00 00       	mov    0x6ff4,%eax
-  movl    %eax, %cr3
-    7040:	0f 22 d8             	mov    %eax,%cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-    7043:	0f 20 c0             	mov    %cr0,%eax
-  orl     $(CR0_PE|CR0_PG|CR0_WP), %eax
-    7046:	0d 01 00 01 80       	or     $0x80010001,%eax
-  movl    %eax, %cr0
-    704b:	0f 22 c0             	mov    %eax,%cr0
-
-  # Switch to the stack allocated by startothers()
-  movl    (start-4), %esp
-    704e:	8b 25 fc 6f 00 00    	mov    0x6ffc,%esp
-  # Call mpenter()
-  call	 *(start-8)
-    7054:	ff 15 f8 6f 00 00    	call   *0x6ff8
-
-  movw    $0x8a00, %ax
-    705a:	66 b8 00 8a          	mov    $0x8a00,%ax
-  movw    %ax, %dx
-    705e:	66 89 c2             	mov    %ax,%dx
-  outw    %ax, %dx
-    7061:	66 ef                	out    %ax,(%dx)
-  movw    $0x8ae0, %ax
-    7063:	66 b8 e0 8a          	mov    $0x8ae0,%ax
-  outw    %ax, %dx
-    7067:	66 ef                	out    %ax,(%dx)
-
-00007069 <spin>:
-spin:
-  jmp     spin
-    7069:	eb fe                	jmp    7069 <spin>
-    706b:	90                   	nop
-
-0000706c <gdt>:
-	...
-    7074:	ff                   	(bad)
-    7075:	ff 00                	incl   (%eax)
-    7077:	00 00                	add    %al,(%eax)
-    7079:	9a cf 00 ff ff 00 00 	lcall  $0x0,$0xffff00cf
-    7080:	00                   	.byte 0
-    7081:	92                   	xchg   %eax,%edx
-    7082:	cf                   	iret
-	...
-
-00007084 <gdtdesc>:
-    7084:	17                   	pop    %ss
-    7085:	00 6c 70 00          	add    %ch,0x0(%eax,%esi,2)
-	...
diff --git a/entryother.d b/entryother.d
deleted file mode 100644
index a140303..0000000
--- a/entryother.d
+++ /dev/null
@@ -1 +0,0 @@
-entryother.o: entryother.S asm.h memlayout.h mmu.h
diff --git a/entryother.o b/entryother.o
deleted file mode 100644
index 09675a0..0000000
Binary files a/entryother.o and /dev/null differ
diff --git a/exec.c b/exec.c
index b40134f..a6ca6be 100644
--- a/exec.c
+++ b/exec.c
@@ -7,6 +7,7 @@
 #include "x86.h"
 #include "elf.h"
 
+extern int count_mem_pages(struct proc*);
 int
 exec(char *path, char **argv)
 {
@@ -99,6 +100,8 @@ exec(char *path, char **argv)
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+  int x=count_mem_pages(curproc);
+  curproc->rss=x;
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
diff --git a/exec.d b/exec.d
deleted file mode 100644
index 0400275..0000000
--- a/exec.d
+++ /dev/null
@@ -1,2 +0,0 @@
-exec.o: exec.c /usr/include/stdc-predef.h types.h param.h memlayout.h \
- mmu.h proc.h defs.h x86.h elf.h
diff --git a/exec.o b/exec.o
deleted file mode 100644
index 107fcdb..0000000
Binary files a/exec.o and /dev/null differ
diff --git a/file.d b/file.d
deleted file mode 100644
index fea73d1..0000000
--- a/file.d
+++ /dev/null
@@ -1,2 +0,0 @@
-file.o: file.c /usr/include/stdc-predef.h types.h defs.h param.h fs.h \
- spinlock.h sleeplock.h file.h
diff --git a/file.o b/file.o
deleted file mode 100644
index 26a4dde..0000000
Binary files a/file.o and /dev/null differ
diff --git a/forktest.asm b/forktest.asm
deleted file mode 100644
index 01e4a11..0000000
--- a/forktest.asm
+++ /dev/null
@@ -1,654 +0,0 @@
-
-_forktest:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  printf(1, "fork test OK\n");
-}
-
-int
-main(void)
-{
-   0:	55                   	push   %ebp
-   1:	89 e5                	mov    %esp,%ebp
-   3:	83 e4 f0             	and    $0xfffffff0,%esp
-  forktest();
-   6:	e8 35 00 00 00       	call   40 <forktest>
-  exit();
-   b:	e8 53 03 00 00       	call   363 <exit>
-
-00000010 <printf>:
-{
-  10:	55                   	push   %ebp
-  11:	89 e5                	mov    %esp,%ebp
-  13:	53                   	push   %ebx
-  14:	83 ec 10             	sub    $0x10,%esp
-  17:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  write(fd, s, strlen(s));
-  1a:	53                   	push   %ebx
-  1b:	e8 90 01 00 00       	call   1b0 <strlen>
-  20:	83 c4 0c             	add    $0xc,%esp
-  23:	50                   	push   %eax
-  24:	53                   	push   %ebx
-  25:	ff 75 08             	push   0x8(%ebp)
-  28:	e8 56 03 00 00       	call   383 <write>
-}
-  2d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  30:	83 c4 10             	add    $0x10,%esp
-  33:	c9                   	leave
-  34:	c3                   	ret
-  35:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  3c:	00 
-  3d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000040 <forktest>:
-{
-  40:	55                   	push   %ebp
-  41:	89 e5                	mov    %esp,%ebp
-  43:	53                   	push   %ebx
-  for(n=0; n<N; n++){
-  44:	31 db                	xor    %ebx,%ebx
-{
-  46:	83 ec 10             	sub    $0x10,%esp
-  write(fd, s, strlen(s));
-  49:	68 04 04 00 00       	push   $0x404
-  4e:	e8 5d 01 00 00       	call   1b0 <strlen>
-  53:	83 c4 0c             	add    $0xc,%esp
-  56:	50                   	push   %eax
-  57:	68 04 04 00 00       	push   $0x404
-  5c:	6a 01                	push   $0x1
-  5e:	e8 20 03 00 00       	call   383 <write>
-  63:	83 c4 10             	add    $0x10,%esp
-  66:	eb 19                	jmp    81 <forktest+0x41>
-  68:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  6f:	00 
-    if(pid == 0)
-  70:	74 58                	je     ca <forktest+0x8a>
-  for(n=0; n<N; n++){
-  72:	83 c3 01             	add    $0x1,%ebx
-  75:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
-  7b:	0f 84 83 00 00 00    	je     104 <forktest+0xc4>
-    pid = fork();
-  81:	e8 d5 02 00 00       	call   35b <fork>
-    if(pid < 0)
-  86:	85 c0                	test   %eax,%eax
-  88:	79 e6                	jns    70 <forktest+0x30>
-  for(; n > 0; n--){
-  8a:	85 db                	test   %ebx,%ebx
-  8c:	74 10                	je     9e <forktest+0x5e>
-  8e:	66 90                	xchg   %ax,%ax
-    if(wait() < 0){
-  90:	e8 d6 02 00 00       	call   36b <wait>
-  95:	85 c0                	test   %eax,%eax
-  97:	78 36                	js     cf <forktest+0x8f>
-  for(; n > 0; n--){
-  99:	83 eb 01             	sub    $0x1,%ebx
-  9c:	75 f2                	jne    90 <forktest+0x50>
-  if(wait() != -1){
-  9e:	e8 c8 02 00 00       	call   36b <wait>
-  a3:	83 f8 ff             	cmp    $0xffffffff,%eax
-  a6:	75 49                	jne    f1 <forktest+0xb1>
-  write(fd, s, strlen(s));
-  a8:	83 ec 0c             	sub    $0xc,%esp
-  ab:	68 36 04 00 00       	push   $0x436
-  b0:	e8 fb 00 00 00       	call   1b0 <strlen>
-  b5:	83 c4 0c             	add    $0xc,%esp
-  b8:	50                   	push   %eax
-  b9:	68 36 04 00 00       	push   $0x436
-  be:	6a 01                	push   $0x1
-  c0:	e8 be 02 00 00       	call   383 <write>
-}
-  c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  c8:	c9                   	leave
-  c9:	c3                   	ret
-      exit();
-  ca:	e8 94 02 00 00       	call   363 <exit>
-  write(fd, s, strlen(s));
-  cf:	83 ec 0c             	sub    $0xc,%esp
-  d2:	68 0f 04 00 00       	push   $0x40f
-  d7:	e8 d4 00 00 00       	call   1b0 <strlen>
-  dc:	83 c4 0c             	add    $0xc,%esp
-  df:	50                   	push   %eax
-  e0:	68 0f 04 00 00       	push   $0x40f
-  e5:	6a 01                	push   $0x1
-  e7:	e8 97 02 00 00       	call   383 <write>
-      exit();
-  ec:	e8 72 02 00 00       	call   363 <exit>
-    printf(1, "wait got too many\n");
-  f1:	52                   	push   %edx
-  f2:	52                   	push   %edx
-  f3:	68 23 04 00 00       	push   $0x423
-  f8:	6a 01                	push   $0x1
-  fa:	e8 11 ff ff ff       	call   10 <printf>
-    exit();
-  ff:	e8 5f 02 00 00       	call   363 <exit>
-    printf(1, "fork claimed to work N times!\n", N);
- 104:	50                   	push   %eax
- 105:	68 e8 03 00 00       	push   $0x3e8
- 10a:	68 44 04 00 00       	push   $0x444
- 10f:	6a 01                	push   $0x1
- 111:	e8 fa fe ff ff       	call   10 <printf>
-    exit();
- 116:	e8 48 02 00 00       	call   363 <exit>
- 11b:	66 90                	xchg   %ax,%ax
- 11d:	66 90                	xchg   %ax,%ax
- 11f:	90                   	nop
-
-00000120 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 120:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 121:	31 c0                	xor    %eax,%eax
-{
- 123:	89 e5                	mov    %esp,%ebp
- 125:	53                   	push   %ebx
- 126:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 129:	8b 5d 0c             	mov    0xc(%ebp),%ebx
- 12c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
- 130:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 134:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 137:	83 c0 01             	add    $0x1,%eax
- 13a:	84 d2                	test   %dl,%dl
- 13c:	75 f2                	jne    130 <strcpy+0x10>
-    ;
-  return os;
-}
- 13e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 141:	89 c8                	mov    %ecx,%eax
- 143:	c9                   	leave
- 144:	c3                   	ret
- 145:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 14c:	00 
- 14d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000150 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 150:	55                   	push   %ebp
- 151:	89 e5                	mov    %esp,%ebp
- 153:	53                   	push   %ebx
- 154:	8b 55 08             	mov    0x8(%ebp),%edx
- 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 15a:	0f b6 02             	movzbl (%edx),%eax
- 15d:	84 c0                	test   %al,%al
- 15f:	75 17                	jne    178 <strcmp+0x28>
- 161:	eb 3a                	jmp    19d <strcmp+0x4d>
- 163:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 168:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
- 16c:	83 c2 01             	add    $0x1,%edx
- 16f:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
- 172:	84 c0                	test   %al,%al
- 174:	74 1a                	je     190 <strcmp+0x40>
- 176:	89 d9                	mov    %ebx,%ecx
- 178:	0f b6 19             	movzbl (%ecx),%ebx
- 17b:	38 c3                	cmp    %al,%bl
- 17d:	74 e9                	je     168 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
- 17f:	29 d8                	sub    %ebx,%eax
-}
- 181:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 184:	c9                   	leave
- 185:	c3                   	ret
- 186:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 18d:	00 
- 18e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
- 190:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 194:	31 c0                	xor    %eax,%eax
- 196:	29 d8                	sub    %ebx,%eax
-}
- 198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 19b:	c9                   	leave
- 19c:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
- 19d:	0f b6 19             	movzbl (%ecx),%ebx
- 1a0:	31 c0                	xor    %eax,%eax
- 1a2:	eb db                	jmp    17f <strcmp+0x2f>
- 1a4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1ab:	00 
- 1ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001b0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 1b0:	55                   	push   %ebp
- 1b1:	89 e5                	mov    %esp,%ebp
- 1b3:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1b6:	80 3a 00             	cmpb   $0x0,(%edx)
- 1b9:	74 15                	je     1d0 <strlen+0x20>
- 1bb:	31 c0                	xor    %eax,%eax
- 1bd:	8d 76 00             	lea    0x0(%esi),%esi
- 1c0:	83 c0 01             	add    $0x1,%eax
- 1c3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 1c7:	89 c1                	mov    %eax,%ecx
- 1c9:	75 f5                	jne    1c0 <strlen+0x10>
-    ;
-  return n;
-}
- 1cb:	89 c8                	mov    %ecx,%eax
- 1cd:	5d                   	pop    %ebp
- 1ce:	c3                   	ret
- 1cf:	90                   	nop
-  for(n = 0; s[n]; n++)
- 1d0:	31 c9                	xor    %ecx,%ecx
-}
- 1d2:	5d                   	pop    %ebp
- 1d3:	89 c8                	mov    %ecx,%eax
- 1d5:	c3                   	ret
- 1d6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1dd:	00 
- 1de:	66 90                	xchg   %ax,%ax
-
-000001e0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1e0:	55                   	push   %ebp
- 1e1:	89 e5                	mov    %esp,%ebp
- 1e3:	57                   	push   %edi
- 1e4:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 1e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 1ea:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1ed:	89 d7                	mov    %edx,%edi
- 1ef:	fc                   	cld
- 1f0:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 1f2:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 1f5:	89 d0                	mov    %edx,%eax
- 1f7:	c9                   	leave
- 1f8:	c3                   	ret
- 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000200 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 200:	55                   	push   %ebp
- 201:	89 e5                	mov    %esp,%ebp
- 203:	8b 45 08             	mov    0x8(%ebp),%eax
- 206:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 20a:	0f b6 10             	movzbl (%eax),%edx
- 20d:	84 d2                	test   %dl,%dl
- 20f:	75 12                	jne    223 <strchr+0x23>
- 211:	eb 1d                	jmp    230 <strchr+0x30>
- 213:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 218:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 21c:	83 c0 01             	add    $0x1,%eax
- 21f:	84 d2                	test   %dl,%dl
- 221:	74 0d                	je     230 <strchr+0x30>
-    if(*s == c)
- 223:	38 d1                	cmp    %dl,%cl
- 225:	75 f1                	jne    218 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 227:	5d                   	pop    %ebp
- 228:	c3                   	ret
- 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 230:	31 c0                	xor    %eax,%eax
-}
- 232:	5d                   	pop    %ebp
- 233:	c3                   	ret
- 234:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 23b:	00 
- 23c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000240 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 240:	55                   	push   %ebp
- 241:	89 e5                	mov    %esp,%ebp
- 243:	57                   	push   %edi
- 244:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 245:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 248:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 249:	31 db                	xor    %ebx,%ebx
-{
- 24b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 24e:	eb 27                	jmp    277 <gets+0x37>
-    cc = read(0, &c, 1);
- 250:	83 ec 04             	sub    $0x4,%esp
- 253:	6a 01                	push   $0x1
- 255:	56                   	push   %esi
- 256:	6a 00                	push   $0x0
- 258:	e8 1e 01 00 00       	call   37b <read>
-    if(cc < 1)
- 25d:	83 c4 10             	add    $0x10,%esp
- 260:	85 c0                	test   %eax,%eax
- 262:	7e 1d                	jle    281 <gets+0x41>
-      break;
-    buf[i++] = c;
- 264:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 268:	8b 55 08             	mov    0x8(%ebp),%edx
- 26b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 26f:	3c 0a                	cmp    $0xa,%al
- 271:	74 10                	je     283 <gets+0x43>
- 273:	3c 0d                	cmp    $0xd,%al
- 275:	74 0c                	je     283 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 277:	89 df                	mov    %ebx,%edi
- 279:	83 c3 01             	add    $0x1,%ebx
- 27c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 27f:	7c cf                	jl     250 <gets+0x10>
- 281:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 283:	8b 45 08             	mov    0x8(%ebp),%eax
- 286:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 28a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 28d:	5b                   	pop    %ebx
- 28e:	5e                   	pop    %esi
- 28f:	5f                   	pop    %edi
- 290:	5d                   	pop    %ebp
- 291:	c3                   	ret
- 292:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 299:	00 
- 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002a0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 2a0:	55                   	push   %ebp
- 2a1:	89 e5                	mov    %esp,%ebp
- 2a3:	56                   	push   %esi
- 2a4:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2a5:	83 ec 08             	sub    $0x8,%esp
- 2a8:	6a 00                	push   $0x0
- 2aa:	ff 75 08             	push   0x8(%ebp)
- 2ad:	e8 f1 00 00 00       	call   3a3 <open>
-  if(fd < 0)
- 2b2:	83 c4 10             	add    $0x10,%esp
- 2b5:	85 c0                	test   %eax,%eax
- 2b7:	78 27                	js     2e0 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 2b9:	83 ec 08             	sub    $0x8,%esp
- 2bc:	ff 75 0c             	push   0xc(%ebp)
- 2bf:	89 c3                	mov    %eax,%ebx
- 2c1:	50                   	push   %eax
- 2c2:	e8 f4 00 00 00       	call   3bb <fstat>
-  close(fd);
- 2c7:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 2ca:	89 c6                	mov    %eax,%esi
-  close(fd);
- 2cc:	e8 ba 00 00 00       	call   38b <close>
-  return r;
- 2d1:	83 c4 10             	add    $0x10,%esp
-}
- 2d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 2d7:	89 f0                	mov    %esi,%eax
- 2d9:	5b                   	pop    %ebx
- 2da:	5e                   	pop    %esi
- 2db:	5d                   	pop    %ebp
- 2dc:	c3                   	ret
- 2dd:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 2e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 2e5:	eb ed                	jmp    2d4 <stat+0x34>
- 2e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2ee:	00 
- 2ef:	90                   	nop
-
-000002f0 <atoi>:
-
-int
-atoi(const char *s)
-{
- 2f0:	55                   	push   %ebp
- 2f1:	89 e5                	mov    %esp,%ebp
- 2f3:	53                   	push   %ebx
- 2f4:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2f7:	0f be 02             	movsbl (%edx),%eax
- 2fa:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 2fd:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 300:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 305:	77 1e                	ja     325 <atoi+0x35>
- 307:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 30e:	00 
- 30f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 310:	83 c2 01             	add    $0x1,%edx
- 313:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 316:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 31a:	0f be 02             	movsbl (%edx),%eax
- 31d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 320:	80 fb 09             	cmp    $0x9,%bl
- 323:	76 eb                	jbe    310 <atoi+0x20>
-  return n;
-}
- 325:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 328:	89 c8                	mov    %ecx,%eax
- 32a:	c9                   	leave
- 32b:	c3                   	ret
- 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000330 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 330:	55                   	push   %ebp
- 331:	89 e5                	mov    %esp,%ebp
- 333:	57                   	push   %edi
- 334:	8b 45 10             	mov    0x10(%ebp),%eax
- 337:	8b 55 08             	mov    0x8(%ebp),%edx
- 33a:	56                   	push   %esi
- 33b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 33e:	85 c0                	test   %eax,%eax
- 340:	7e 13                	jle    355 <memmove+0x25>
- 342:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 344:	89 d7                	mov    %edx,%edi
- 346:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 34d:	00 
- 34e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 350:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 351:	39 f8                	cmp    %edi,%eax
- 353:	75 fb                	jne    350 <memmove+0x20>
-  return vdst;
-}
- 355:	5e                   	pop    %esi
- 356:	89 d0                	mov    %edx,%eax
- 358:	5f                   	pop    %edi
- 359:	5d                   	pop    %ebp
- 35a:	c3                   	ret
-
-0000035b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 35b:	b8 01 00 00 00       	mov    $0x1,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret
-
-00000363 <exit>:
-SYSCALL(exit)
- 363:	b8 02 00 00 00       	mov    $0x2,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret
-
-0000036b <wait>:
-SYSCALL(wait)
- 36b:	b8 03 00 00 00       	mov    $0x3,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret
-
-00000373 <pipe>:
-SYSCALL(pipe)
- 373:	b8 04 00 00 00       	mov    $0x4,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret
-
-0000037b <read>:
-SYSCALL(read)
- 37b:	b8 05 00 00 00       	mov    $0x5,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret
-
-00000383 <write>:
-SYSCALL(write)
- 383:	b8 10 00 00 00       	mov    $0x10,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret
-
-0000038b <close>:
-SYSCALL(close)
- 38b:	b8 15 00 00 00       	mov    $0x15,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret
-
-00000393 <kill>:
-SYSCALL(kill)
- 393:	b8 06 00 00 00       	mov    $0x6,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret
-
-0000039b <exec>:
-SYSCALL(exec)
- 39b:	b8 07 00 00 00       	mov    $0x7,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret
-
-000003a3 <open>:
-SYSCALL(open)
- 3a3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret
-
-000003ab <mknod>:
-SYSCALL(mknod)
- 3ab:	b8 11 00 00 00       	mov    $0x11,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret
-
-000003b3 <unlink>:
-SYSCALL(unlink)
- 3b3:	b8 12 00 00 00       	mov    $0x12,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret
-
-000003bb <fstat>:
-SYSCALL(fstat)
- 3bb:	b8 08 00 00 00       	mov    $0x8,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret
-
-000003c3 <link>:
-SYSCALL(link)
- 3c3:	b8 13 00 00 00       	mov    $0x13,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret
-
-000003cb <mkdir>:
-SYSCALL(mkdir)
- 3cb:	b8 14 00 00 00       	mov    $0x14,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret
-
-000003d3 <chdir>:
-SYSCALL(chdir)
- 3d3:	b8 09 00 00 00       	mov    $0x9,%eax
- 3d8:	cd 40                	int    $0x40
- 3da:	c3                   	ret
-
-000003db <dup>:
-SYSCALL(dup)
- 3db:	b8 0a 00 00 00       	mov    $0xa,%eax
- 3e0:	cd 40                	int    $0x40
- 3e2:	c3                   	ret
-
-000003e3 <getpid>:
-SYSCALL(getpid)
- 3e3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret
-
-000003eb <sbrk>:
-SYSCALL(sbrk)
- 3eb:	b8 0c 00 00 00       	mov    $0xc,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret
-
-000003f3 <sleep>:
-SYSCALL(sleep)
- 3f3:	b8 0d 00 00 00       	mov    $0xd,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret
-
-000003fb <uptime>:
-SYSCALL(uptime)
- 3fb:	b8 0e 00 00 00       	mov    $0xe,%eax
- 400:	cd 40                	int    $0x40
- 402:	c3                   	ret
diff --git a/forktest.d b/forktest.d
deleted file mode 100644
index d31a0c2..0000000
--- a/forktest.d
+++ /dev/null
@@ -1 +0,0 @@
-forktest.o: forktest.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/forktest.o b/forktest.o
deleted file mode 100644
index 3d971ad..0000000
Binary files a/forktest.o and /dev/null differ
diff --git a/fs.d b/fs.d
deleted file mode 100644
index a1d05cc..0000000
--- a/fs.d
+++ /dev/null
@@ -1,2 +0,0 @@
-fs.o: fs.c /usr/include/stdc-predef.h types.h defs.h param.h stat.h mmu.h \
- proc.h spinlock.h sleeplock.h fs.h buf.h file.h
diff --git a/fs.h b/fs.h
index 3214f1d..615f7ec 100644
--- a/fs.h
+++ b/fs.h
@@ -19,6 +19,8 @@ struct superblock {
   uint logstart;     // Block number of first log block
   uint inodestart;   // Block number of first inode block
   uint bmapstart;    // Block number of first free map block
+  uint swapstart;
+  uint nswapblocks;
 };
 
 #define NDIRECT 12
diff --git a/fs.img b/fs.img
deleted file mode 100644
index 9e5a88a..0000000
Binary files a/fs.img and /dev/null differ
diff --git a/fs.o b/fs.o
deleted file mode 100644
index f7c5b20..0000000
Binary files a/fs.o and /dev/null differ
diff --git a/grep.asm b/grep.asm
deleted file mode 100644
index 4cd697c..0000000
--- a/grep.asm
+++ /dev/null
@@ -1,1561 +0,0 @@
-
-_grep:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  }
-}
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	57                   	push   %edi
-   e:	56                   	push   %esi
-   f:	53                   	push   %ebx
-  10:	51                   	push   %ecx
-  11:	83 ec 18             	sub    $0x18,%esp
-  14:	8b 01                	mov    (%ecx),%eax
-  16:	8b 59 04             	mov    0x4(%ecx),%ebx
-  19:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  int fd, i;
-  char *pattern;
-
-  if(argc <= 1){
-  1c:	83 f8 01             	cmp    $0x1,%eax
-  1f:	7e 6f                	jle    90 <main+0x90>
-    printf(2, "usage: grep pattern [file ...]\n");
-    exit();
-  }
-  pattern = argv[1];
-  21:	8b 43 04             	mov    0x4(%ebx),%eax
-  24:	83 c3 08             	add    $0x8,%ebx
-
-  if(argc <= 2){
-  27:	83 7d e4 02          	cmpl   $0x2,-0x1c(%ebp)
-    grep(pattern, 0);
-    exit();
-  }
-
-  for(i = 2; i < argc; i++){
-  2b:	be 02 00 00 00       	mov    $0x2,%esi
-  pattern = argv[1];
-  30:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  if(argc <= 2){
-  33:	75 2d                	jne    62 <main+0x62>
-  35:	eb 6c                	jmp    a3 <main+0xa3>
-  37:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  3e:	00 
-  3f:	90                   	nop
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "grep: cannot open %s\n", argv[i]);
-      exit();
-    }
-    grep(pattern, fd);
-  40:	83 ec 08             	sub    $0x8,%esp
-  for(i = 2; i < argc; i++){
-  43:	83 c6 01             	add    $0x1,%esi
-  46:	83 c3 04             	add    $0x4,%ebx
-    grep(pattern, fd);
-  49:	50                   	push   %eax
-  4a:	ff 75 e0             	push   -0x20(%ebp)
-  4d:	e8 9e 01 00 00       	call   1f0 <grep>
-    close(fd);
-  52:	89 3c 24             	mov    %edi,(%esp)
-  55:	e8 b1 05 00 00       	call   60b <close>
-  for(i = 2; i < argc; i++){
-  5a:	83 c4 10             	add    $0x10,%esp
-  5d:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
-  60:	7e 29                	jle    8b <main+0x8b>
-    if((fd = open(argv[i], 0)) < 0){
-  62:	83 ec 08             	sub    $0x8,%esp
-  65:	6a 00                	push   $0x0
-  67:	ff 33                	push   (%ebx)
-  69:	e8 b5 05 00 00       	call   623 <open>
-  6e:	83 c4 10             	add    $0x10,%esp
-  71:	89 c7                	mov    %eax,%edi
-  73:	85 c0                	test   %eax,%eax
-  75:	79 c9                	jns    40 <main+0x40>
-      printf(1, "grep: cannot open %s\n", argv[i]);
-  77:	50                   	push   %eax
-  78:	ff 33                	push   (%ebx)
-  7a:	68 58 0a 00 00       	push   $0xa58
-  7f:	6a 01                	push   $0x1
-  81:	e8 aa 06 00 00       	call   730 <printf>
-      exit();
-  86:	e8 58 05 00 00       	call   5e3 <exit>
-  }
-  exit();
-  8b:	e8 53 05 00 00       	call   5e3 <exit>
-    printf(2, "usage: grep pattern [file ...]\n");
-  90:	51                   	push   %ecx
-  91:	51                   	push   %ecx
-  92:	68 38 0a 00 00       	push   $0xa38
-  97:	6a 02                	push   $0x2
-  99:	e8 92 06 00 00       	call   730 <printf>
-    exit();
-  9e:	e8 40 05 00 00       	call   5e3 <exit>
-    grep(pattern, 0);
-  a3:	52                   	push   %edx
-  a4:	52                   	push   %edx
-  a5:	6a 00                	push   $0x0
-  a7:	50                   	push   %eax
-  a8:	e8 43 01 00 00       	call   1f0 <grep>
-    exit();
-  ad:	e8 31 05 00 00       	call   5e3 <exit>
-  b2:	66 90                	xchg   %ax,%ax
-  b4:	66 90                	xchg   %ax,%ax
-  b6:	66 90                	xchg   %ax,%ax
-  b8:	66 90                	xchg   %ax,%ax
-  ba:	66 90                	xchg   %ax,%ax
-  bc:	66 90                	xchg   %ax,%ax
-  be:	66 90                	xchg   %ax,%ax
-
-000000c0 <matchhere>:
-  return 0;
-}
-
-// matchhere: search for re at beginning of text
-int matchhere(char *re, char *text)
-{
-  c0:	55                   	push   %ebp
-  c1:	89 e5                	mov    %esp,%ebp
-  c3:	57                   	push   %edi
-  c4:	56                   	push   %esi
-  c5:	53                   	push   %ebx
-  c6:	83 ec 0c             	sub    $0xc,%esp
-  c9:	8b 7d 08             	mov    0x8(%ebp),%edi
-  cc:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  if(re[0] == '\0')
-  cf:	0f b6 0f             	movzbl (%edi),%ecx
-  d2:	84 c9                	test   %cl,%cl
-  d4:	0f 84 96 00 00 00    	je     170 <matchhere+0xb0>
-    return 1;
-  if(re[1] == '*')
-  da:	0f b6 47 01          	movzbl 0x1(%edi),%eax
-  de:	3c 2a                	cmp    $0x2a,%al
-  e0:	74 2d                	je     10f <matchhere+0x4f>
-  e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return matchstar(re[0], re+2, text);
-  if(re[0] == '$' && re[1] == '\0')
-    return *text == '\0';
-  e8:	0f b6 33             	movzbl (%ebx),%esi
-  if(re[0] == '$' && re[1] == '\0')
-  eb:	80 f9 24             	cmp    $0x24,%cl
-  ee:	74 50                	je     140 <matchhere+0x80>
-  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
-  f0:	89 f2                	mov    %esi,%edx
-  f2:	84 d2                	test   %dl,%dl
-  f4:	74 6e                	je     164 <matchhere+0xa4>
-  f6:	80 f9 2e             	cmp    $0x2e,%cl
-  f9:	75 65                	jne    160 <matchhere+0xa0>
-    return matchhere(re+1, text+1);
-  fb:	83 c3 01             	add    $0x1,%ebx
-  fe:	83 c7 01             	add    $0x1,%edi
-  if(re[0] == '\0')
- 101:	84 c0                	test   %al,%al
- 103:	74 6b                	je     170 <matchhere+0xb0>
-{
- 105:	89 c1                	mov    %eax,%ecx
-  if(re[1] == '*')
- 107:	0f b6 47 01          	movzbl 0x1(%edi),%eax
- 10b:	3c 2a                	cmp    $0x2a,%al
- 10d:	75 d9                	jne    e8 <matchhere+0x28>
-    return matchstar(re[0], re+2, text);
- 10f:	8d 77 02             	lea    0x2(%edi),%esi
- 112:	0f be f9             	movsbl %cl,%edi
-  return 0;
-}
-
-// matchstar: search for c*re at beginning of text
-int matchstar(int c, char *re, char *text)
- 115:	8d 76 00             	lea    0x0(%esi),%esi
-{
-  do{  // a * matches zero or more instances
-    if(matchhere(re, text))
- 118:	83 ec 08             	sub    $0x8,%esp
- 11b:	53                   	push   %ebx
- 11c:	56                   	push   %esi
- 11d:	e8 9e ff ff ff       	call   c0 <matchhere>
- 122:	83 c4 10             	add    $0x10,%esp
- 125:	85 c0                	test   %eax,%eax
- 127:	75 47                	jne    170 <matchhere+0xb0>
-      return 1;
-  }while(*text!='\0' && (*text++==c || c=='.'));
- 129:	0f be 13             	movsbl (%ebx),%edx
- 12c:	84 d2                	test   %dl,%dl
- 12e:	74 45                	je     175 <matchhere+0xb5>
- 130:	83 c3 01             	add    $0x1,%ebx
- 133:	39 fa                	cmp    %edi,%edx
- 135:	74 e1                	je     118 <matchhere+0x58>
- 137:	83 ff 2e             	cmp    $0x2e,%edi
- 13a:	74 dc                	je     118 <matchhere+0x58>
- 13c:	eb 37                	jmp    175 <matchhere+0xb5>
- 13e:	66 90                	xchg   %ax,%ax
-  if(re[0] == '$' && re[1] == '\0')
- 140:	84 c0                	test   %al,%al
- 142:	74 39                	je     17d <matchhere+0xbd>
-  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
- 144:	89 f2                	mov    %esi,%edx
- 146:	84 d2                	test   %dl,%dl
- 148:	74 1a                	je     164 <matchhere+0xa4>
- 14a:	80 fa 24             	cmp    $0x24,%dl
- 14d:	75 15                	jne    164 <matchhere+0xa4>
-    return matchhere(re+1, text+1);
- 14f:	83 c3 01             	add    $0x1,%ebx
- 152:	83 c7 01             	add    $0x1,%edi
-{
- 155:	89 c1                	mov    %eax,%ecx
- 157:	eb ae                	jmp    107 <matchhere+0x47>
- 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  if(*text!='\0' && (re[0]=='.' || re[0]==*text))
- 160:	38 ca                	cmp    %cl,%dl
- 162:	74 97                	je     fb <matchhere+0x3b>
-}
- 164:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
- 167:	31 c0                	xor    %eax,%eax
-}
- 169:	5b                   	pop    %ebx
- 16a:	5e                   	pop    %esi
- 16b:	5f                   	pop    %edi
- 16c:	5d                   	pop    %ebp
- 16d:	c3                   	ret
- 16e:	66 90                	xchg   %ax,%ax
-    return 1;
- 170:	b8 01 00 00 00       	mov    $0x1,%eax
-}
- 175:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 178:	5b                   	pop    %ebx
- 179:	5e                   	pop    %esi
- 17a:	5f                   	pop    %edi
- 17b:	5d                   	pop    %ebp
- 17c:	c3                   	ret
-    return *text == '\0';
- 17d:	89 f0                	mov    %esi,%eax
- 17f:	84 c0                	test   %al,%al
- 181:	0f 94 c0             	sete   %al
- 184:	0f b6 c0             	movzbl %al,%eax
- 187:	eb ec                	jmp    175 <matchhere+0xb5>
- 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000190 <match>:
-{
- 190:	55                   	push   %ebp
- 191:	89 e5                	mov    %esp,%ebp
- 193:	56                   	push   %esi
- 194:	53                   	push   %ebx
- 195:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 198:	8b 75 0c             	mov    0xc(%ebp),%esi
-  if(re[0] == '^')
- 19b:	80 3b 5e             	cmpb   $0x5e,(%ebx)
- 19e:	75 11                	jne    1b1 <match+0x21>
- 1a0:	eb 2e                	jmp    1d0 <match+0x40>
- 1a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  }while(*text++ != '\0');
- 1a8:	83 c6 01             	add    $0x1,%esi
- 1ab:	80 7e ff 00          	cmpb   $0x0,-0x1(%esi)
- 1af:	74 16                	je     1c7 <match+0x37>
-    if(matchhere(re, text))
- 1b1:	83 ec 08             	sub    $0x8,%esp
- 1b4:	56                   	push   %esi
- 1b5:	53                   	push   %ebx
- 1b6:	e8 05 ff ff ff       	call   c0 <matchhere>
- 1bb:	83 c4 10             	add    $0x10,%esp
- 1be:	85 c0                	test   %eax,%eax
- 1c0:	74 e6                	je     1a8 <match+0x18>
-      return 1;
- 1c2:	b8 01 00 00 00       	mov    $0x1,%eax
-}
- 1c7:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 1ca:	5b                   	pop    %ebx
- 1cb:	5e                   	pop    %esi
- 1cc:	5d                   	pop    %ebp
- 1cd:	c3                   	ret
- 1ce:	66 90                	xchg   %ax,%ax
-    return matchhere(re+1, text);
- 1d0:	83 c3 01             	add    $0x1,%ebx
- 1d3:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
- 1d6:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 1d9:	5b                   	pop    %ebx
- 1da:	5e                   	pop    %esi
- 1db:	5d                   	pop    %ebp
-    return matchhere(re+1, text);
- 1dc:	e9 df fe ff ff       	jmp    c0 <matchhere>
- 1e1:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1e8:	00 
- 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000001f0 <grep>:
-{
- 1f0:	55                   	push   %ebp
- 1f1:	89 e5                	mov    %esp,%ebp
- 1f3:	57                   	push   %edi
-  m = 0;
- 1f4:	31 ff                	xor    %edi,%edi
-{
- 1f6:	56                   	push   %esi
- 1f7:	53                   	push   %ebx
- 1f8:	83 ec 1c             	sub    $0x1c,%esp
- 1fb:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 1fe:	89 7d e0             	mov    %edi,-0x20(%ebp)
-    return matchhere(re+1, text);
- 201:	8d 43 01             	lea    0x1(%ebx),%eax
- 204:	89 45 dc             	mov    %eax,-0x24(%ebp)
- 207:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 20e:	00 
- 20f:	90                   	nop
-  while((n = read(fd, buf+m, sizeof(buf)-m-1)) > 0){
- 210:	8b 4d e0             	mov    -0x20(%ebp),%ecx
- 213:	b8 ff 03 00 00       	mov    $0x3ff,%eax
- 218:	83 ec 04             	sub    $0x4,%esp
- 21b:	29 c8                	sub    %ecx,%eax
- 21d:	50                   	push   %eax
- 21e:	8d 81 60 0e 00 00    	lea    0xe60(%ecx),%eax
- 224:	50                   	push   %eax
- 225:	ff 75 0c             	push   0xc(%ebp)
- 228:	e8 ce 03 00 00       	call   5fb <read>
- 22d:	83 c4 10             	add    $0x10,%esp
- 230:	85 c0                	test   %eax,%eax
- 232:	0f 8e fd 00 00 00    	jle    335 <grep+0x145>
-    m += n;
- 238:	01 45 e0             	add    %eax,-0x20(%ebp)
- 23b:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-    buf[m] = '\0';
- 23e:	bf 60 0e 00 00       	mov    $0xe60,%edi
- 243:	89 de                	mov    %ebx,%esi
- 245:	c6 81 60 0e 00 00 00 	movb   $0x0,0xe60(%ecx)
-    while((q = strchr(p, '\n')) != 0){
- 24c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 250:	83 ec 08             	sub    $0x8,%esp
- 253:	6a 0a                	push   $0xa
- 255:	57                   	push   %edi
- 256:	e8 25 02 00 00       	call   480 <strchr>
- 25b:	83 c4 10             	add    $0x10,%esp
- 25e:	89 c2                	mov    %eax,%edx
- 260:	85 c0                	test   %eax,%eax
- 262:	0f 84 88 00 00 00    	je     2f0 <grep+0x100>
-      *q = 0;
- 268:	c6 02 00             	movb   $0x0,(%edx)
-  if(re[0] == '^')
- 26b:	80 3e 5e             	cmpb   $0x5e,(%esi)
- 26e:	74 58                	je     2c8 <grep+0xd8>
- 270:	89 7d e4             	mov    %edi,-0x1c(%ebp)
- 273:	89 d3                	mov    %edx,%ebx
- 275:	eb 12                	jmp    289 <grep+0x99>
- 277:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 27e:	00 
- 27f:	90                   	nop
-  }while(*text++ != '\0');
- 280:	83 c7 01             	add    $0x1,%edi
- 283:	80 7f ff 00          	cmpb   $0x0,-0x1(%edi)
- 287:	74 37                	je     2c0 <grep+0xd0>
-    if(matchhere(re, text))
- 289:	83 ec 08             	sub    $0x8,%esp
- 28c:	57                   	push   %edi
- 28d:	56                   	push   %esi
- 28e:	e8 2d fe ff ff       	call   c0 <matchhere>
- 293:	83 c4 10             	add    $0x10,%esp
- 296:	85 c0                	test   %eax,%eax
- 298:	74 e6                	je     280 <grep+0x90>
-        write(1, p, q+1 - p);
- 29a:	8b 7d e4             	mov    -0x1c(%ebp),%edi
- 29d:	89 da                	mov    %ebx,%edx
- 29f:	8d 5b 01             	lea    0x1(%ebx),%ebx
- 2a2:	89 d8                	mov    %ebx,%eax
- 2a4:	83 ec 04             	sub    $0x4,%esp
-        *q = '\n';
- 2a7:	c6 02 0a             	movb   $0xa,(%edx)
-        write(1, p, q+1 - p);
- 2aa:	29 f8                	sub    %edi,%eax
- 2ac:	50                   	push   %eax
- 2ad:	57                   	push   %edi
- 2ae:	89 df                	mov    %ebx,%edi
- 2b0:	6a 01                	push   $0x1
- 2b2:	e8 4c 03 00 00       	call   603 <write>
- 2b7:	83 c4 10             	add    $0x10,%esp
- 2ba:	eb 94                	jmp    250 <grep+0x60>
- 2bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 2c0:	8d 7b 01             	lea    0x1(%ebx),%edi
-      p = q+1;
- 2c3:	eb 8b                	jmp    250 <grep+0x60>
- 2c5:	8d 76 00             	lea    0x0(%esi),%esi
-    return matchhere(re+1, text);
- 2c8:	83 ec 08             	sub    $0x8,%esp
- 2cb:	89 55 e4             	mov    %edx,-0x1c(%ebp)
- 2ce:	57                   	push   %edi
- 2cf:	ff 75 dc             	push   -0x24(%ebp)
- 2d2:	e8 e9 fd ff ff       	call   c0 <matchhere>
-        write(1, p, q+1 - p);
- 2d7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-    return matchhere(re+1, text);
- 2da:	83 c4 10             	add    $0x10,%esp
-        write(1, p, q+1 - p);
- 2dd:	8d 5a 01             	lea    0x1(%edx),%ebx
-      if(match(pattern, p)){
- 2e0:	85 c0                	test   %eax,%eax
- 2e2:	75 be                	jne    2a2 <grep+0xb2>
-        write(1, p, q+1 - p);
- 2e4:	89 df                	mov    %ebx,%edi
- 2e6:	e9 65 ff ff ff       	jmp    250 <grep+0x60>
- 2eb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    if(p == buf)
- 2f0:	89 f3                	mov    %esi,%ebx
- 2f2:	81 ff 60 0e 00 00    	cmp    $0xe60,%edi
- 2f8:	74 2f                	je     329 <grep+0x139>
-    if(m > 0){
- 2fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
- 2fd:	85 c0                	test   %eax,%eax
- 2ff:	0f 8e 0b ff ff ff    	jle    210 <grep+0x20>
-      m -= p - buf;
- 305:	89 f8                	mov    %edi,%eax
-      memmove(buf, p, m);
- 307:	83 ec 04             	sub    $0x4,%esp
-      m -= p - buf;
- 30a:	2d 60 0e 00 00       	sub    $0xe60,%eax
- 30f:	29 45 e0             	sub    %eax,-0x20(%ebp)
- 312:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-      memmove(buf, p, m);
- 315:	51                   	push   %ecx
- 316:	57                   	push   %edi
- 317:	68 60 0e 00 00       	push   $0xe60
- 31c:	e8 8f 02 00 00       	call   5b0 <memmove>
- 321:	83 c4 10             	add    $0x10,%esp
- 324:	e9 e7 fe ff ff       	jmp    210 <grep+0x20>
-      m = 0;
- 329:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
- 330:	e9 db fe ff ff       	jmp    210 <grep+0x20>
-}
- 335:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 338:	5b                   	pop    %ebx
- 339:	5e                   	pop    %esi
- 33a:	5f                   	pop    %edi
- 33b:	5d                   	pop    %ebp
- 33c:	c3                   	ret
- 33d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000340 <matchstar>:
-{
- 340:	55                   	push   %ebp
- 341:	89 e5                	mov    %esp,%ebp
- 343:	57                   	push   %edi
- 344:	56                   	push   %esi
- 345:	53                   	push   %ebx
- 346:	83 ec 0c             	sub    $0xc,%esp
- 349:	8b 5d 08             	mov    0x8(%ebp),%ebx
- 34c:	8b 75 0c             	mov    0xc(%ebp),%esi
- 34f:	8b 7d 10             	mov    0x10(%ebp),%edi
- 352:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(matchhere(re, text))
- 358:	83 ec 08             	sub    $0x8,%esp
- 35b:	57                   	push   %edi
- 35c:	56                   	push   %esi
- 35d:	e8 5e fd ff ff       	call   c0 <matchhere>
- 362:	83 c4 10             	add    $0x10,%esp
- 365:	85 c0                	test   %eax,%eax
- 367:	75 1f                	jne    388 <matchstar+0x48>
-  }while(*text!='\0' && (*text++==c || c=='.'));
- 369:	0f be 17             	movsbl (%edi),%edx
- 36c:	84 d2                	test   %dl,%dl
- 36e:	74 0c                	je     37c <matchstar+0x3c>
- 370:	83 c7 01             	add    $0x1,%edi
- 373:	83 fb 2e             	cmp    $0x2e,%ebx
- 376:	74 e0                	je     358 <matchstar+0x18>
- 378:	39 da                	cmp    %ebx,%edx
- 37a:	74 dc                	je     358 <matchstar+0x18>
-}
- 37c:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 37f:	5b                   	pop    %ebx
- 380:	5e                   	pop    %esi
- 381:	5f                   	pop    %edi
- 382:	5d                   	pop    %ebp
- 383:	c3                   	ret
- 384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 388:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return 1;
- 38b:	b8 01 00 00 00       	mov    $0x1,%eax
-}
- 390:	5b                   	pop    %ebx
- 391:	5e                   	pop    %esi
- 392:	5f                   	pop    %edi
- 393:	5d                   	pop    %ebp
- 394:	c3                   	ret
- 395:	66 90                	xchg   %ax,%ax
- 397:	66 90                	xchg   %ax,%ax
- 399:	66 90                	xchg   %ax,%ax
- 39b:	66 90                	xchg   %ax,%ax
- 39d:	66 90                	xchg   %ax,%ax
- 39f:	90                   	nop
-
-000003a0 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 3a0:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 3a1:	31 c0                	xor    %eax,%eax
-{
- 3a3:	89 e5                	mov    %esp,%ebp
- 3a5:	53                   	push   %ebx
- 3a6:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 3a9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
- 3ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
- 3b0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 3b4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 3b7:	83 c0 01             	add    $0x1,%eax
- 3ba:	84 d2                	test   %dl,%dl
- 3bc:	75 f2                	jne    3b0 <strcpy+0x10>
-    ;
-  return os;
-}
- 3be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 3c1:	89 c8                	mov    %ecx,%eax
- 3c3:	c9                   	leave
- 3c4:	c3                   	ret
- 3c5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 3cc:	00 
- 3cd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000003d0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 3d0:	55                   	push   %ebp
- 3d1:	89 e5                	mov    %esp,%ebp
- 3d3:	53                   	push   %ebx
- 3d4:	8b 55 08             	mov    0x8(%ebp),%edx
- 3d7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 3da:	0f b6 02             	movzbl (%edx),%eax
- 3dd:	84 c0                	test   %al,%al
- 3df:	75 17                	jne    3f8 <strcmp+0x28>
- 3e1:	eb 3a                	jmp    41d <strcmp+0x4d>
- 3e3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 3e8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
- 3ec:	83 c2 01             	add    $0x1,%edx
- 3ef:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
- 3f2:	84 c0                	test   %al,%al
- 3f4:	74 1a                	je     410 <strcmp+0x40>
- 3f6:	89 d9                	mov    %ebx,%ecx
- 3f8:	0f b6 19             	movzbl (%ecx),%ebx
- 3fb:	38 c3                	cmp    %al,%bl
- 3fd:	74 e9                	je     3e8 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
- 3ff:	29 d8                	sub    %ebx,%eax
-}
- 401:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 404:	c9                   	leave
- 405:	c3                   	ret
- 406:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 40d:	00 
- 40e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
- 410:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 414:	31 c0                	xor    %eax,%eax
- 416:	29 d8                	sub    %ebx,%eax
-}
- 418:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 41b:	c9                   	leave
- 41c:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
- 41d:	0f b6 19             	movzbl (%ecx),%ebx
- 420:	31 c0                	xor    %eax,%eax
- 422:	eb db                	jmp    3ff <strcmp+0x2f>
- 424:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 42b:	00 
- 42c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000430 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 430:	55                   	push   %ebp
- 431:	89 e5                	mov    %esp,%ebp
- 433:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 436:	80 3a 00             	cmpb   $0x0,(%edx)
- 439:	74 15                	je     450 <strlen+0x20>
- 43b:	31 c0                	xor    %eax,%eax
- 43d:	8d 76 00             	lea    0x0(%esi),%esi
- 440:	83 c0 01             	add    $0x1,%eax
- 443:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 447:	89 c1                	mov    %eax,%ecx
- 449:	75 f5                	jne    440 <strlen+0x10>
-    ;
-  return n;
-}
- 44b:	89 c8                	mov    %ecx,%eax
- 44d:	5d                   	pop    %ebp
- 44e:	c3                   	ret
- 44f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 450:	31 c9                	xor    %ecx,%ecx
-}
- 452:	5d                   	pop    %ebp
- 453:	89 c8                	mov    %ecx,%eax
- 455:	c3                   	ret
- 456:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 45d:	00 
- 45e:	66 90                	xchg   %ax,%ax
-
-00000460 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 460:	55                   	push   %ebp
- 461:	89 e5                	mov    %esp,%ebp
- 463:	57                   	push   %edi
- 464:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 467:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 46a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 46d:	89 d7                	mov    %edx,%edi
- 46f:	fc                   	cld
- 470:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 472:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 475:	89 d0                	mov    %edx,%eax
- 477:	c9                   	leave
- 478:	c3                   	ret
- 479:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000480 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 480:	55                   	push   %ebp
- 481:	89 e5                	mov    %esp,%ebp
- 483:	8b 45 08             	mov    0x8(%ebp),%eax
- 486:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 48a:	0f b6 10             	movzbl (%eax),%edx
- 48d:	84 d2                	test   %dl,%dl
- 48f:	75 12                	jne    4a3 <strchr+0x23>
- 491:	eb 1d                	jmp    4b0 <strchr+0x30>
- 493:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 498:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 49c:	83 c0 01             	add    $0x1,%eax
- 49f:	84 d2                	test   %dl,%dl
- 4a1:	74 0d                	je     4b0 <strchr+0x30>
-    if(*s == c)
- 4a3:	38 d1                	cmp    %dl,%cl
- 4a5:	75 f1                	jne    498 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 4a7:	5d                   	pop    %ebp
- 4a8:	c3                   	ret
- 4a9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 4b0:	31 c0                	xor    %eax,%eax
-}
- 4b2:	5d                   	pop    %ebp
- 4b3:	c3                   	ret
- 4b4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 4bb:	00 
- 4bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000004c0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 4c0:	55                   	push   %ebp
- 4c1:	89 e5                	mov    %esp,%ebp
- 4c3:	57                   	push   %edi
- 4c4:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 4c5:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 4c8:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 4c9:	31 db                	xor    %ebx,%ebx
-{
- 4cb:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 4ce:	eb 27                	jmp    4f7 <gets+0x37>
-    cc = read(0, &c, 1);
- 4d0:	83 ec 04             	sub    $0x4,%esp
- 4d3:	6a 01                	push   $0x1
- 4d5:	56                   	push   %esi
- 4d6:	6a 00                	push   $0x0
- 4d8:	e8 1e 01 00 00       	call   5fb <read>
-    if(cc < 1)
- 4dd:	83 c4 10             	add    $0x10,%esp
- 4e0:	85 c0                	test   %eax,%eax
- 4e2:	7e 1d                	jle    501 <gets+0x41>
-      break;
-    buf[i++] = c;
- 4e4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 4e8:	8b 55 08             	mov    0x8(%ebp),%edx
- 4eb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 4ef:	3c 0a                	cmp    $0xa,%al
- 4f1:	74 10                	je     503 <gets+0x43>
- 4f3:	3c 0d                	cmp    $0xd,%al
- 4f5:	74 0c                	je     503 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 4f7:	89 df                	mov    %ebx,%edi
- 4f9:	83 c3 01             	add    $0x1,%ebx
- 4fc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 4ff:	7c cf                	jl     4d0 <gets+0x10>
- 501:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 503:	8b 45 08             	mov    0x8(%ebp),%eax
- 506:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 50a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 50d:	5b                   	pop    %ebx
- 50e:	5e                   	pop    %esi
- 50f:	5f                   	pop    %edi
- 510:	5d                   	pop    %ebp
- 511:	c3                   	ret
- 512:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 519:	00 
- 51a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000520 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 520:	55                   	push   %ebp
- 521:	89 e5                	mov    %esp,%ebp
- 523:	56                   	push   %esi
- 524:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 525:	83 ec 08             	sub    $0x8,%esp
- 528:	6a 00                	push   $0x0
- 52a:	ff 75 08             	push   0x8(%ebp)
- 52d:	e8 f1 00 00 00       	call   623 <open>
-  if(fd < 0)
- 532:	83 c4 10             	add    $0x10,%esp
- 535:	85 c0                	test   %eax,%eax
- 537:	78 27                	js     560 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 539:	83 ec 08             	sub    $0x8,%esp
- 53c:	ff 75 0c             	push   0xc(%ebp)
- 53f:	89 c3                	mov    %eax,%ebx
- 541:	50                   	push   %eax
- 542:	e8 f4 00 00 00       	call   63b <fstat>
-  close(fd);
- 547:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 54a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 54c:	e8 ba 00 00 00       	call   60b <close>
-  return r;
- 551:	83 c4 10             	add    $0x10,%esp
-}
- 554:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 557:	89 f0                	mov    %esi,%eax
- 559:	5b                   	pop    %ebx
- 55a:	5e                   	pop    %esi
- 55b:	5d                   	pop    %ebp
- 55c:	c3                   	ret
- 55d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 560:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 565:	eb ed                	jmp    554 <stat+0x34>
- 567:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 56e:	00 
- 56f:	90                   	nop
-
-00000570 <atoi>:
-
-int
-atoi(const char *s)
-{
- 570:	55                   	push   %ebp
- 571:	89 e5                	mov    %esp,%ebp
- 573:	53                   	push   %ebx
- 574:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 577:	0f be 02             	movsbl (%edx),%eax
- 57a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 57d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 580:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 585:	77 1e                	ja     5a5 <atoi+0x35>
- 587:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 58e:	00 
- 58f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 590:	83 c2 01             	add    $0x1,%edx
- 593:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 596:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 59a:	0f be 02             	movsbl (%edx),%eax
- 59d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 5a0:	80 fb 09             	cmp    $0x9,%bl
- 5a3:	76 eb                	jbe    590 <atoi+0x20>
-  return n;
-}
- 5a5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 5a8:	89 c8                	mov    %ecx,%eax
- 5aa:	c9                   	leave
- 5ab:	c3                   	ret
- 5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000005b0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 5b0:	55                   	push   %ebp
- 5b1:	89 e5                	mov    %esp,%ebp
- 5b3:	57                   	push   %edi
- 5b4:	8b 45 10             	mov    0x10(%ebp),%eax
- 5b7:	8b 55 08             	mov    0x8(%ebp),%edx
- 5ba:	56                   	push   %esi
- 5bb:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 5be:	85 c0                	test   %eax,%eax
- 5c0:	7e 13                	jle    5d5 <memmove+0x25>
- 5c2:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 5c4:	89 d7                	mov    %edx,%edi
- 5c6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 5cd:	00 
- 5ce:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 5d0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 5d1:	39 f8                	cmp    %edi,%eax
- 5d3:	75 fb                	jne    5d0 <memmove+0x20>
-  return vdst;
-}
- 5d5:	5e                   	pop    %esi
- 5d6:	89 d0                	mov    %edx,%eax
- 5d8:	5f                   	pop    %edi
- 5d9:	5d                   	pop    %ebp
- 5da:	c3                   	ret
-
-000005db <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 5db:	b8 01 00 00 00       	mov    $0x1,%eax
- 5e0:	cd 40                	int    $0x40
- 5e2:	c3                   	ret
-
-000005e3 <exit>:
-SYSCALL(exit)
- 5e3:	b8 02 00 00 00       	mov    $0x2,%eax
- 5e8:	cd 40                	int    $0x40
- 5ea:	c3                   	ret
-
-000005eb <wait>:
-SYSCALL(wait)
- 5eb:	b8 03 00 00 00       	mov    $0x3,%eax
- 5f0:	cd 40                	int    $0x40
- 5f2:	c3                   	ret
-
-000005f3 <pipe>:
-SYSCALL(pipe)
- 5f3:	b8 04 00 00 00       	mov    $0x4,%eax
- 5f8:	cd 40                	int    $0x40
- 5fa:	c3                   	ret
-
-000005fb <read>:
-SYSCALL(read)
- 5fb:	b8 05 00 00 00       	mov    $0x5,%eax
- 600:	cd 40                	int    $0x40
- 602:	c3                   	ret
-
-00000603 <write>:
-SYSCALL(write)
- 603:	b8 10 00 00 00       	mov    $0x10,%eax
- 608:	cd 40                	int    $0x40
- 60a:	c3                   	ret
-
-0000060b <close>:
-SYSCALL(close)
- 60b:	b8 15 00 00 00       	mov    $0x15,%eax
- 610:	cd 40                	int    $0x40
- 612:	c3                   	ret
-
-00000613 <kill>:
-SYSCALL(kill)
- 613:	b8 06 00 00 00       	mov    $0x6,%eax
- 618:	cd 40                	int    $0x40
- 61a:	c3                   	ret
-
-0000061b <exec>:
-SYSCALL(exec)
- 61b:	b8 07 00 00 00       	mov    $0x7,%eax
- 620:	cd 40                	int    $0x40
- 622:	c3                   	ret
-
-00000623 <open>:
-SYSCALL(open)
- 623:	b8 0f 00 00 00       	mov    $0xf,%eax
- 628:	cd 40                	int    $0x40
- 62a:	c3                   	ret
-
-0000062b <mknod>:
-SYSCALL(mknod)
- 62b:	b8 11 00 00 00       	mov    $0x11,%eax
- 630:	cd 40                	int    $0x40
- 632:	c3                   	ret
-
-00000633 <unlink>:
-SYSCALL(unlink)
- 633:	b8 12 00 00 00       	mov    $0x12,%eax
- 638:	cd 40                	int    $0x40
- 63a:	c3                   	ret
-
-0000063b <fstat>:
-SYSCALL(fstat)
- 63b:	b8 08 00 00 00       	mov    $0x8,%eax
- 640:	cd 40                	int    $0x40
- 642:	c3                   	ret
-
-00000643 <link>:
-SYSCALL(link)
- 643:	b8 13 00 00 00       	mov    $0x13,%eax
- 648:	cd 40                	int    $0x40
- 64a:	c3                   	ret
-
-0000064b <mkdir>:
-SYSCALL(mkdir)
- 64b:	b8 14 00 00 00       	mov    $0x14,%eax
- 650:	cd 40                	int    $0x40
- 652:	c3                   	ret
-
-00000653 <chdir>:
-SYSCALL(chdir)
- 653:	b8 09 00 00 00       	mov    $0x9,%eax
- 658:	cd 40                	int    $0x40
- 65a:	c3                   	ret
-
-0000065b <dup>:
-SYSCALL(dup)
- 65b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 660:	cd 40                	int    $0x40
- 662:	c3                   	ret
-
-00000663 <getpid>:
-SYSCALL(getpid)
- 663:	b8 0b 00 00 00       	mov    $0xb,%eax
- 668:	cd 40                	int    $0x40
- 66a:	c3                   	ret
-
-0000066b <sbrk>:
-SYSCALL(sbrk)
- 66b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 670:	cd 40                	int    $0x40
- 672:	c3                   	ret
-
-00000673 <sleep>:
-SYSCALL(sleep)
- 673:	b8 0d 00 00 00       	mov    $0xd,%eax
- 678:	cd 40                	int    $0x40
- 67a:	c3                   	ret
-
-0000067b <uptime>:
-SYSCALL(uptime)
- 67b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 680:	cd 40                	int    $0x40
- 682:	c3                   	ret
- 683:	66 90                	xchg   %ax,%ax
- 685:	66 90                	xchg   %ax,%ax
- 687:	66 90                	xchg   %ax,%ax
- 689:	66 90                	xchg   %ax,%ax
- 68b:	66 90                	xchg   %ax,%ax
- 68d:	66 90                	xchg   %ax,%ax
- 68f:	90                   	nop
-
-00000690 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 690:	55                   	push   %ebp
- 691:	89 e5                	mov    %esp,%ebp
- 693:	57                   	push   %edi
- 694:	56                   	push   %esi
- 695:	53                   	push   %ebx
- 696:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 698:	89 d1                	mov    %edx,%ecx
-{
- 69a:	83 ec 3c             	sub    $0x3c,%esp
- 69d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 6a0:	85 d2                	test   %edx,%edx
- 6a2:	0f 89 80 00 00 00    	jns    728 <printint+0x98>
- 6a8:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 6ac:	74 7a                	je     728 <printint+0x98>
-    x = -xx;
- 6ae:	f7 d9                	neg    %ecx
-    neg = 1;
- 6b0:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 6b5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 6b8:	31 f6                	xor    %esi,%esi
- 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 6c0:	89 c8                	mov    %ecx,%eax
- 6c2:	31 d2                	xor    %edx,%edx
- 6c4:	89 f7                	mov    %esi,%edi
- 6c6:	f7 f3                	div    %ebx
- 6c8:	8d 76 01             	lea    0x1(%esi),%esi
- 6cb:	0f b6 92 d0 0a 00 00 	movzbl 0xad0(%edx),%edx
- 6d2:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 6d6:	89 ca                	mov    %ecx,%edx
- 6d8:	89 c1                	mov    %eax,%ecx
- 6da:	39 da                	cmp    %ebx,%edx
- 6dc:	73 e2                	jae    6c0 <printint+0x30>
-  if(neg)
- 6de:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 6e1:	85 c0                	test   %eax,%eax
- 6e3:	74 07                	je     6ec <printint+0x5c>
-    buf[i++] = '-';
- 6e5:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 6ea:	89 f7                	mov    %esi,%edi
- 6ec:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 6ef:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 6f2:	01 df                	add    %ebx,%edi
- 6f4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 6f8:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 6fb:	83 ec 04             	sub    $0x4,%esp
- 6fe:	88 45 d7             	mov    %al,-0x29(%ebp)
- 701:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 704:	6a 01                	push   $0x1
- 706:	50                   	push   %eax
- 707:	56                   	push   %esi
- 708:	e8 f6 fe ff ff       	call   603 <write>
-  while(--i >= 0)
- 70d:	89 f8                	mov    %edi,%eax
- 70f:	83 c4 10             	add    $0x10,%esp
- 712:	83 ef 01             	sub    $0x1,%edi
- 715:	39 c3                	cmp    %eax,%ebx
- 717:	75 df                	jne    6f8 <printint+0x68>
-}
- 719:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 71c:	5b                   	pop    %ebx
- 71d:	5e                   	pop    %esi
- 71e:	5f                   	pop    %edi
- 71f:	5d                   	pop    %ebp
- 720:	c3                   	ret
- 721:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 728:	31 c0                	xor    %eax,%eax
- 72a:	eb 89                	jmp    6b5 <printint+0x25>
- 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000730 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 730:	55                   	push   %ebp
- 731:	89 e5                	mov    %esp,%ebp
- 733:	57                   	push   %edi
- 734:	56                   	push   %esi
- 735:	53                   	push   %ebx
- 736:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 739:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 73c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 73f:	0f b6 1e             	movzbl (%esi),%ebx
- 742:	83 c6 01             	add    $0x1,%esi
- 745:	84 db                	test   %bl,%bl
- 747:	74 67                	je     7b0 <printf+0x80>
- 749:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 74c:	31 d2                	xor    %edx,%edx
- 74e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 751:	eb 34                	jmp    787 <printf+0x57>
- 753:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 758:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 75b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 760:	83 f8 25             	cmp    $0x25,%eax
- 763:	74 18                	je     77d <printf+0x4d>
-  write(fd, &c, 1);
- 765:	83 ec 04             	sub    $0x4,%esp
- 768:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 76b:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 76e:	6a 01                	push   $0x1
- 770:	50                   	push   %eax
- 771:	57                   	push   %edi
- 772:	e8 8c fe ff ff       	call   603 <write>
- 777:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 77a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 77d:	0f b6 1e             	movzbl (%esi),%ebx
- 780:	83 c6 01             	add    $0x1,%esi
- 783:	84 db                	test   %bl,%bl
- 785:	74 29                	je     7b0 <printf+0x80>
-    c = fmt[i] & 0xff;
- 787:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 78a:	85 d2                	test   %edx,%edx
- 78c:	74 ca                	je     758 <printf+0x28>
-      }
-    } else if(state == '%'){
- 78e:	83 fa 25             	cmp    $0x25,%edx
- 791:	75 ea                	jne    77d <printf+0x4d>
-      if(c == 'd'){
- 793:	83 f8 25             	cmp    $0x25,%eax
- 796:	0f 84 04 01 00 00    	je     8a0 <printf+0x170>
- 79c:	83 e8 63             	sub    $0x63,%eax
- 79f:	83 f8 15             	cmp    $0x15,%eax
- 7a2:	77 1c                	ja     7c0 <printf+0x90>
- 7a4:	ff 24 85 78 0a 00 00 	jmp    *0xa78(,%eax,4)
- 7ab:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 7b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 7b3:	5b                   	pop    %ebx
- 7b4:	5e                   	pop    %esi
- 7b5:	5f                   	pop    %edi
- 7b6:	5d                   	pop    %ebp
- 7b7:	c3                   	ret
- 7b8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 7bf:	00 
-  write(fd, &c, 1);
- 7c0:	83 ec 04             	sub    $0x4,%esp
- 7c3:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 7c6:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 7ca:	6a 01                	push   $0x1
- 7cc:	52                   	push   %edx
- 7cd:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 7d0:	57                   	push   %edi
- 7d1:	e8 2d fe ff ff       	call   603 <write>
- 7d6:	83 c4 0c             	add    $0xc,%esp
- 7d9:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 7dc:	6a 01                	push   $0x1
- 7de:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 7e1:	52                   	push   %edx
- 7e2:	57                   	push   %edi
- 7e3:	e8 1b fe ff ff       	call   603 <write>
-        putc(fd, c);
- 7e8:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 7eb:	31 d2                	xor    %edx,%edx
- 7ed:	eb 8e                	jmp    77d <printf+0x4d>
- 7ef:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 7f0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 7f3:	83 ec 0c             	sub    $0xc,%esp
- 7f6:	b9 10 00 00 00       	mov    $0x10,%ecx
- 7fb:	8b 13                	mov    (%ebx),%edx
- 7fd:	6a 00                	push   $0x0
- 7ff:	89 f8                	mov    %edi,%eax
-        ap++;
- 801:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 804:	e8 87 fe ff ff       	call   690 <printint>
-        ap++;
- 809:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 80c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 80f:	31 d2                	xor    %edx,%edx
- 811:	e9 67 ff ff ff       	jmp    77d <printf+0x4d>
-        s = (char*)*ap;
- 816:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 819:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 81b:	83 c0 04             	add    $0x4,%eax
- 81e:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 821:	85 db                	test   %ebx,%ebx
- 823:	0f 84 87 00 00 00    	je     8b0 <printf+0x180>
-        while(*s != 0){
- 829:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 82c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 82e:	84 c0                	test   %al,%al
- 830:	0f 84 47 ff ff ff    	je     77d <printf+0x4d>
- 836:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 839:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 83c:	89 de                	mov    %ebx,%esi
- 83e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 840:	83 ec 04             	sub    $0x4,%esp
- 843:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 846:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 849:	6a 01                	push   $0x1
- 84b:	53                   	push   %ebx
- 84c:	57                   	push   %edi
- 84d:	e8 b1 fd ff ff       	call   603 <write>
-        while(*s != 0){
- 852:	0f b6 06             	movzbl (%esi),%eax
- 855:	83 c4 10             	add    $0x10,%esp
- 858:	84 c0                	test   %al,%al
- 85a:	75 e4                	jne    840 <printf+0x110>
-      state = 0;
- 85c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 85f:	31 d2                	xor    %edx,%edx
- 861:	e9 17 ff ff ff       	jmp    77d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 866:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 869:	83 ec 0c             	sub    $0xc,%esp
- 86c:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 871:	8b 13                	mov    (%ebx),%edx
- 873:	6a 01                	push   $0x1
- 875:	eb 88                	jmp    7ff <printf+0xcf>
-        putc(fd, *ap);
- 877:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 87a:	83 ec 04             	sub    $0x4,%esp
- 87d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 880:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 882:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 885:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 888:	6a 01                	push   $0x1
- 88a:	52                   	push   %edx
- 88b:	57                   	push   %edi
- 88c:	e8 72 fd ff ff       	call   603 <write>
-        ap++;
- 891:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 894:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 897:	31 d2                	xor    %edx,%edx
- 899:	e9 df fe ff ff       	jmp    77d <printf+0x4d>
- 89e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 8a0:	83 ec 04             	sub    $0x4,%esp
- 8a3:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 8a6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 8a9:	6a 01                	push   $0x1
- 8ab:	e9 31 ff ff ff       	jmp    7e1 <printf+0xb1>
- 8b0:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 8b5:	bb 6e 0a 00 00       	mov    $0xa6e,%ebx
- 8ba:	e9 77 ff ff ff       	jmp    836 <printf+0x106>
- 8bf:	90                   	nop
-
-000008c0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 8c0:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8c1:	a1 60 12 00 00       	mov    0x1260,%eax
-{
- 8c6:	89 e5                	mov    %esp,%ebp
- 8c8:	57                   	push   %edi
- 8c9:	56                   	push   %esi
- 8ca:	53                   	push   %ebx
- 8cb:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 8ce:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8d8:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 8da:	39 c8                	cmp    %ecx,%eax
- 8dc:	73 32                	jae    910 <free+0x50>
- 8de:	39 d1                	cmp    %edx,%ecx
- 8e0:	72 04                	jb     8e6 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8e2:	39 d0                	cmp    %edx,%eax
- 8e4:	72 32                	jb     918 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 8e6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 8e9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 8ec:	39 fa                	cmp    %edi,%edx
- 8ee:	74 30                	je     920 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 8f0:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 8f3:	8b 50 04             	mov    0x4(%eax),%edx
- 8f6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 8f9:	39 f1                	cmp    %esi,%ecx
- 8fb:	74 3a                	je     937 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 8fd:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 8ff:	5b                   	pop    %ebx
-  freep = p;
- 900:	a3 60 12 00 00       	mov    %eax,0x1260
-}
- 905:	5e                   	pop    %esi
- 906:	5f                   	pop    %edi
- 907:	5d                   	pop    %ebp
- 908:	c3                   	ret
- 909:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 910:	39 d0                	cmp    %edx,%eax
- 912:	72 04                	jb     918 <free+0x58>
- 914:	39 d1                	cmp    %edx,%ecx
- 916:	72 ce                	jb     8e6 <free+0x26>
-{
- 918:	89 d0                	mov    %edx,%eax
- 91a:	eb bc                	jmp    8d8 <free+0x18>
- 91c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 920:	03 72 04             	add    0x4(%edx),%esi
- 923:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 926:	8b 10                	mov    (%eax),%edx
- 928:	8b 12                	mov    (%edx),%edx
- 92a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 92d:	8b 50 04             	mov    0x4(%eax),%edx
- 930:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 933:	39 f1                	cmp    %esi,%ecx
- 935:	75 c6                	jne    8fd <free+0x3d>
-    p->s.size += bp->s.size;
- 937:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 93a:	a3 60 12 00 00       	mov    %eax,0x1260
-    p->s.size += bp->s.size;
- 93f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 942:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 945:	89 08                	mov    %ecx,(%eax)
-}
- 947:	5b                   	pop    %ebx
- 948:	5e                   	pop    %esi
- 949:	5f                   	pop    %edi
- 94a:	5d                   	pop    %ebp
- 94b:	c3                   	ret
- 94c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000950 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 950:	55                   	push   %ebp
- 951:	89 e5                	mov    %esp,%ebp
- 953:	57                   	push   %edi
- 954:	56                   	push   %esi
- 955:	53                   	push   %ebx
- 956:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 959:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 95c:	8b 15 60 12 00 00    	mov    0x1260,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 962:	8d 78 07             	lea    0x7(%eax),%edi
- 965:	c1 ef 03             	shr    $0x3,%edi
- 968:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 96b:	85 d2                	test   %edx,%edx
- 96d:	0f 84 8d 00 00 00    	je     a00 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 973:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 975:	8b 48 04             	mov    0x4(%eax),%ecx
- 978:	39 f9                	cmp    %edi,%ecx
- 97a:	73 64                	jae    9e0 <malloc+0x90>
-  if(nu < 4096)
- 97c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 981:	39 df                	cmp    %ebx,%edi
- 983:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 986:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 98d:	eb 0a                	jmp    999 <malloc+0x49>
- 98f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 990:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 992:	8b 48 04             	mov    0x4(%eax),%ecx
- 995:	39 f9                	cmp    %edi,%ecx
- 997:	73 47                	jae    9e0 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 999:	89 c2                	mov    %eax,%edx
- 99b:	3b 05 60 12 00 00    	cmp    0x1260,%eax
- 9a1:	75 ed                	jne    990 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 9a3:	83 ec 0c             	sub    $0xc,%esp
- 9a6:	56                   	push   %esi
- 9a7:	e8 bf fc ff ff       	call   66b <sbrk>
-  if(p == (char*)-1)
- 9ac:	83 c4 10             	add    $0x10,%esp
- 9af:	83 f8 ff             	cmp    $0xffffffff,%eax
- 9b2:	74 1c                	je     9d0 <malloc+0x80>
-  hp->s.size = nu;
- 9b4:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 9b7:	83 ec 0c             	sub    $0xc,%esp
- 9ba:	83 c0 08             	add    $0x8,%eax
- 9bd:	50                   	push   %eax
- 9be:	e8 fd fe ff ff       	call   8c0 <free>
-  return freep;
- 9c3:	8b 15 60 12 00 00    	mov    0x1260,%edx
-      if((p = morecore(nunits)) == 0)
- 9c9:	83 c4 10             	add    $0x10,%esp
- 9cc:	85 d2                	test   %edx,%edx
- 9ce:	75 c0                	jne    990 <malloc+0x40>
-        return 0;
-  }
-}
- 9d0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 9d3:	31 c0                	xor    %eax,%eax
-}
- 9d5:	5b                   	pop    %ebx
- 9d6:	5e                   	pop    %esi
- 9d7:	5f                   	pop    %edi
- 9d8:	5d                   	pop    %ebp
- 9d9:	c3                   	ret
- 9da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 9e0:	39 cf                	cmp    %ecx,%edi
- 9e2:	74 4c                	je     a30 <malloc+0xe0>
-        p->s.size -= nunits;
- 9e4:	29 f9                	sub    %edi,%ecx
- 9e6:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 9e9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 9ec:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 9ef:	89 15 60 12 00 00    	mov    %edx,0x1260
-}
- 9f5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 9f8:	83 c0 08             	add    $0x8,%eax
-}
- 9fb:	5b                   	pop    %ebx
- 9fc:	5e                   	pop    %esi
- 9fd:	5f                   	pop    %edi
- 9fe:	5d                   	pop    %ebp
- 9ff:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- a00:	c7 05 60 12 00 00 64 	movl   $0x1264,0x1260
- a07:	12 00 00 
-    base.s.size = 0;
- a0a:	b8 64 12 00 00       	mov    $0x1264,%eax
-    base.s.ptr = freep = prevp = &base;
- a0f:	c7 05 64 12 00 00 64 	movl   $0x1264,0x1264
- a16:	12 00 00 
-    base.s.size = 0;
- a19:	c7 05 68 12 00 00 00 	movl   $0x0,0x1268
- a20:	00 00 00 
-    if(p->s.size >= nunits){
- a23:	e9 54 ff ff ff       	jmp    97c <malloc+0x2c>
- a28:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- a2f:	00 
-        prevp->s.ptr = p->s.ptr;
- a30:	8b 08                	mov    (%eax),%ecx
- a32:	89 0a                	mov    %ecx,(%edx)
- a34:	eb b9                	jmp    9ef <malloc+0x9f>
diff --git a/grep.d b/grep.d
deleted file mode 100644
index 15fc65b..0000000
--- a/grep.d
+++ /dev/null
@@ -1 +0,0 @@
-grep.o: grep.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/grep.o b/grep.o
deleted file mode 100644
index 579564b..0000000
Binary files a/grep.o and /dev/null differ
diff --git a/grep.sym b/grep.sym
deleted file mode 100644
index 4c5ff1b..0000000
--- a/grep.sym
+++ /dev/null
@@ -1,50 +0,0 @@
-00000000 grep.c
-00000000 ulib.c
-00000000 printf.c
-00000690 printint
-00000ad0 digits.0
-00000000 umalloc.c
-00001260 freep
-00001264 base
-000003a0 strcpy
-00000730 printf
-000005b0 memmove
-000000c0 matchhere
-0000062b mknod
-000004c0 gets
-00000663 getpid
-000001f0 grep
-00000950 malloc
-00000673 sleep
-000005f3 pipe
-00000603 write
-0000063b fstat
-00000613 kill
-00000653 chdir
-0000061b exec
-000005eb wait
-000005fb read
-00000633 unlink
-000005db fork
-0000066b sbrk
-0000067b uptime
-00000e60 __bss_start
-00000460 memset
-00000000 main
-00000340 matchstar
-000003d0 strcmp
-0000065b dup
-00000e60 buf
-00000520 stat
-00000e58 _edata
-0000126c _end
-00000190 match
-00000643 link
-000005e3 exit
-00000570 atoi
-00000430 strlen
-00000623 open
-00000480 strchr
-0000064b mkdir
-0000060b close
-000008c0 free
diff --git a/ide.d b/ide.d
deleted file mode 100644
index 21155b9..0000000
--- a/ide.d
+++ /dev/null
@@ -1,2 +0,0 @@
-ide.o: ide.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h traps.h spinlock.h sleeplock.h fs.h buf.h
diff --git a/ide.o b/ide.o
deleted file mode 100644
index 0ab53d6..0000000
Binary files a/ide.o and /dev/null differ
diff --git a/inf.asm b/inf.asm
deleted file mode 100644
index 29e92b7..0000000
--- a/inf.asm
+++ /dev/null
@@ -1,1198 +0,0 @@
-
-_inf:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-#define NUM_PROCS 3  // Number of processes to create
-
-int main() {
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	56                   	push   %esi
-   e:	53                   	push   %ebx
-    // int pids[NUM_PROCS];
-
-    // Create child processes using custom_fork with start_later = 1
-    for (int i = 0; i < NUM_PROCS; i++) {
-   f:	31 db                	xor    %ebx,%ebx
-int main() {
-  11:	51                   	push   %ecx
-  12:	83 ec 1c             	sub    $0x1c,%esp
-        int t = i+1;
-  15:	89 de                	mov    %ebx,%esi
-  17:	83 c3 01             	add    $0x1,%ebx
-        int pid = fork(); // Start later, execution time 50
-  1a:	e8 0c 03 00 00       	call   32b <fork>
-        if (pid < 0) {
-  1f:	85 c0                	test   %eax,%eax
-  21:	78 46                	js     69 <main+0x69>
-            printf(1, "Failed to fork process %d\n", i);
-            exit();
-        } else if (pid == 0) {
-  23:	74 57                	je     7c <main+0x7c>
-    for (int i = 0; i < NUM_PROCS; i++) {
-  25:	83 fb 03             	cmp    $0x3,%ebx
-  28:	75 eb                	jne    15 <main+0x15>
-            // pids[i] = pid;
-
-        }
-    }
-
-    printf(1, "All child processes created with start_later flag set.\n");
-  2a:	83 ec 08             	sub    $0x8,%esp
-  2d:	68 fc 07 00 00       	push   $0x7fc
-  32:	6a 01                	push   $0x1
-  34:	e8 47 04 00 00       	call   480 <printf>
-    // sleep(400);
-
-    // Start scheduling these processes
-    printf(1, "Calling sys_scheduler_start() to allow execution.\n");
-  39:	58                   	pop    %eax
-  3a:	5a                   	pop    %edx
-  3b:	68 34 08 00 00       	push   $0x834
-  40:	6a 01                	push   $0x1
-  42:	e8 39 04 00 00       	call   480 <printf>
-    // scheduler_start();
-
-    // Wait for children to finish
-    for (int i = 0; i < NUM_PROCS; i++) {
-        wait();
-  47:	e8 ef 02 00 00       	call   33b <wait>
-  4c:	e8 ea 02 00 00       	call   33b <wait>
-  51:	e8 e5 02 00 00       	call   33b <wait>
-
-    }
-
-    printf(1, "All child processes completed.\n");
-  56:	59                   	pop    %ecx
-  57:	5b                   	pop    %ebx
-  58:	68 68 08 00 00       	push   $0x868
-  5d:	6a 01                	push   $0x1
-  5f:	e8 1c 04 00 00       	call   480 <printf>
-    exit();
-  64:	e8 ca 02 00 00       	call   333 <exit>
-            printf(1, "Failed to fork process %d\n", i);
-  69:	50                   	push   %eax
-  6a:	56                   	push   %esi
-  6b:	68 88 07 00 00       	push   $0x788
-  70:	6a 01                	push   $0x1
-  72:	e8 09 04 00 00       	call   480 <printf>
-            exit();
-  77:	e8 b7 02 00 00       	call   333 <exit>
-            sleep(100 *t);
-  7c:	6b c3 64             	imul   $0x64,%ebx,%eax
-  7f:	83 ec 0c             	sub    $0xc,%esp
-  82:	50                   	push   %eax
-  83:	e8 3b 03 00 00       	call   3c3 <sleep>
-            printf(1, "Child %d (PID: %d) started but should not run yet.\n", i, getpid());
-  88:	e8 26 03 00 00       	call   3b3 <getpid>
-  8d:	50                   	push   %eax
-  8e:	56                   	push   %esi
-  8f:	68 c8 07 00 00       	push   $0x7c8
-  94:	6a 01                	push   $0x1
-  96:	e8 e5 03 00 00       	call   480 <printf>
-            for (volatile int j = 0; j < 100000000; j++); // Simulated work
-  9b:	31 c0                	xor    %eax,%eax
-  9d:	83 c4 20             	add    $0x20,%esp
-  a0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-  a6:	3d ff e0 f5 05       	cmp    $0x5f5e0ff,%eax
-  ab:	7f 16                	jg     c3 <main+0xc3>
-  ad:	8d 76 00             	lea    0x0(%esi),%esi
-  b0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-  b3:	83 c0 01             	add    $0x1,%eax
-  b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  b9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-  bc:	3d ff e0 f5 05       	cmp    $0x5f5e0ff,%eax
-  c1:	7e ed                	jle    b0 <main+0xb0>
-            sleep(200 *t);
-  c3:	69 db c8 00 00 00    	imul   $0xc8,%ebx,%ebx
-  c9:	83 ec 0c             	sub    $0xc,%esp
-  cc:	53                   	push   %ebx
-  cd:	e8 f1 02 00 00       	call   3c3 <sleep>
-            printf(1, "Child %d (PID: %d) exiting.\n", i, getpid());
-  d2:	e8 dc 02 00 00       	call   3b3 <getpid>
-  d7:	50                   	push   %eax
-  d8:	56                   	push   %esi
-  d9:	68 a3 07 00 00       	push   $0x7a3
-  de:	6a 01                	push   $0x1
-  e0:	e8 9b 03 00 00       	call   480 <printf>
-            exit();
-  e5:	83 c4 20             	add    $0x20,%esp
-  e8:	e8 46 02 00 00       	call   333 <exit>
-  ed:	66 90                	xchg   %ax,%ax
-  ef:	90                   	nop
-
-000000f0 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  f0:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  f1:	31 c0                	xor    %eax,%eax
-{
-  f3:	89 e5                	mov    %esp,%ebp
-  f5:	53                   	push   %ebx
-  f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
- 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 107:	83 c0 01             	add    $0x1,%eax
- 10a:	84 d2                	test   %dl,%dl
- 10c:	75 f2                	jne    100 <strcpy+0x10>
-    ;
-  return os;
-}
- 10e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 111:	89 c8                	mov    %ecx,%eax
- 113:	c9                   	leave
- 114:	c3                   	ret
- 115:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 11c:	00 
- 11d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000120 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 120:	55                   	push   %ebp
- 121:	89 e5                	mov    %esp,%ebp
- 123:	53                   	push   %ebx
- 124:	8b 55 08             	mov    0x8(%ebp),%edx
- 127:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 12a:	0f b6 02             	movzbl (%edx),%eax
- 12d:	84 c0                	test   %al,%al
- 12f:	75 17                	jne    148 <strcmp+0x28>
- 131:	eb 3a                	jmp    16d <strcmp+0x4d>
- 133:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 138:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
- 13c:	83 c2 01             	add    $0x1,%edx
- 13f:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
- 142:	84 c0                	test   %al,%al
- 144:	74 1a                	je     160 <strcmp+0x40>
- 146:	89 d9                	mov    %ebx,%ecx
- 148:	0f b6 19             	movzbl (%ecx),%ebx
- 14b:	38 c3                	cmp    %al,%bl
- 14d:	74 e9                	je     138 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
- 14f:	29 d8                	sub    %ebx,%eax
-}
- 151:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 154:	c9                   	leave
- 155:	c3                   	ret
- 156:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 15d:	00 
- 15e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
- 160:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 164:	31 c0                	xor    %eax,%eax
- 166:	29 d8                	sub    %ebx,%eax
-}
- 168:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 16b:	c9                   	leave
- 16c:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
- 16d:	0f b6 19             	movzbl (%ecx),%ebx
- 170:	31 c0                	xor    %eax,%eax
- 172:	eb db                	jmp    14f <strcmp+0x2f>
- 174:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 17b:	00 
- 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000180 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 180:	55                   	push   %ebp
- 181:	89 e5                	mov    %esp,%ebp
- 183:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 186:	80 3a 00             	cmpb   $0x0,(%edx)
- 189:	74 15                	je     1a0 <strlen+0x20>
- 18b:	31 c0                	xor    %eax,%eax
- 18d:	8d 76 00             	lea    0x0(%esi),%esi
- 190:	83 c0 01             	add    $0x1,%eax
- 193:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 197:	89 c1                	mov    %eax,%ecx
- 199:	75 f5                	jne    190 <strlen+0x10>
-    ;
-  return n;
-}
- 19b:	89 c8                	mov    %ecx,%eax
- 19d:	5d                   	pop    %ebp
- 19e:	c3                   	ret
- 19f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 1a0:	31 c9                	xor    %ecx,%ecx
-}
- 1a2:	5d                   	pop    %ebp
- 1a3:	89 c8                	mov    %ecx,%eax
- 1a5:	c3                   	ret
- 1a6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1ad:	00 
- 1ae:	66 90                	xchg   %ax,%ax
-
-000001b0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1b0:	55                   	push   %ebp
- 1b1:	89 e5                	mov    %esp,%ebp
- 1b3:	57                   	push   %edi
- 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 1b7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 1ba:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1bd:	89 d7                	mov    %edx,%edi
- 1bf:	fc                   	cld
- 1c0:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 1c2:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 1c5:	89 d0                	mov    %edx,%eax
- 1c7:	c9                   	leave
- 1c8:	c3                   	ret
- 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000001d0 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 1d0:	55                   	push   %ebp
- 1d1:	89 e5                	mov    %esp,%ebp
- 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1d6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 1da:	0f b6 10             	movzbl (%eax),%edx
- 1dd:	84 d2                	test   %dl,%dl
- 1df:	75 12                	jne    1f3 <strchr+0x23>
- 1e1:	eb 1d                	jmp    200 <strchr+0x30>
- 1e3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1e8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 1ec:	83 c0 01             	add    $0x1,%eax
- 1ef:	84 d2                	test   %dl,%dl
- 1f1:	74 0d                	je     200 <strchr+0x30>
-    if(*s == c)
- 1f3:	38 d1                	cmp    %dl,%cl
- 1f5:	75 f1                	jne    1e8 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 1f7:	5d                   	pop    %ebp
- 1f8:	c3                   	ret
- 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 200:	31 c0                	xor    %eax,%eax
-}
- 202:	5d                   	pop    %ebp
- 203:	c3                   	ret
- 204:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 20b:	00 
- 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000210 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 210:	55                   	push   %ebp
- 211:	89 e5                	mov    %esp,%ebp
- 213:	57                   	push   %edi
- 214:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 215:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 218:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 219:	31 db                	xor    %ebx,%ebx
-{
- 21b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 21e:	eb 27                	jmp    247 <gets+0x37>
-    cc = read(0, &c, 1);
- 220:	83 ec 04             	sub    $0x4,%esp
- 223:	6a 01                	push   $0x1
- 225:	56                   	push   %esi
- 226:	6a 00                	push   $0x0
- 228:	e8 1e 01 00 00       	call   34b <read>
-    if(cc < 1)
- 22d:	83 c4 10             	add    $0x10,%esp
- 230:	85 c0                	test   %eax,%eax
- 232:	7e 1d                	jle    251 <gets+0x41>
-      break;
-    buf[i++] = c;
- 234:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 238:	8b 55 08             	mov    0x8(%ebp),%edx
- 23b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 23f:	3c 0a                	cmp    $0xa,%al
- 241:	74 10                	je     253 <gets+0x43>
- 243:	3c 0d                	cmp    $0xd,%al
- 245:	74 0c                	je     253 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 247:	89 df                	mov    %ebx,%edi
- 249:	83 c3 01             	add    $0x1,%ebx
- 24c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 24f:	7c cf                	jl     220 <gets+0x10>
- 251:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 253:	8b 45 08             	mov    0x8(%ebp),%eax
- 256:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 25a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 25d:	5b                   	pop    %ebx
- 25e:	5e                   	pop    %esi
- 25f:	5f                   	pop    %edi
- 260:	5d                   	pop    %ebp
- 261:	c3                   	ret
- 262:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 269:	00 
- 26a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000270 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 270:	55                   	push   %ebp
- 271:	89 e5                	mov    %esp,%ebp
- 273:	56                   	push   %esi
- 274:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 275:	83 ec 08             	sub    $0x8,%esp
- 278:	6a 00                	push   $0x0
- 27a:	ff 75 08             	push   0x8(%ebp)
- 27d:	e8 f1 00 00 00       	call   373 <open>
-  if(fd < 0)
- 282:	83 c4 10             	add    $0x10,%esp
- 285:	85 c0                	test   %eax,%eax
- 287:	78 27                	js     2b0 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 289:	83 ec 08             	sub    $0x8,%esp
- 28c:	ff 75 0c             	push   0xc(%ebp)
- 28f:	89 c3                	mov    %eax,%ebx
- 291:	50                   	push   %eax
- 292:	e8 f4 00 00 00       	call   38b <fstat>
-  close(fd);
- 297:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 29a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 29c:	e8 ba 00 00 00       	call   35b <close>
-  return r;
- 2a1:	83 c4 10             	add    $0x10,%esp
-}
- 2a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 2a7:	89 f0                	mov    %esi,%eax
- 2a9:	5b                   	pop    %ebx
- 2aa:	5e                   	pop    %esi
- 2ab:	5d                   	pop    %ebp
- 2ac:	c3                   	ret
- 2ad:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 2b0:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 2b5:	eb ed                	jmp    2a4 <stat+0x34>
- 2b7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2be:	00 
- 2bf:	90                   	nop
-
-000002c0 <atoi>:
-
-int
-atoi(const char *s)
-{
- 2c0:	55                   	push   %ebp
- 2c1:	89 e5                	mov    %esp,%ebp
- 2c3:	53                   	push   %ebx
- 2c4:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2c7:	0f be 02             	movsbl (%edx),%eax
- 2ca:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 2cd:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 2d0:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 2d5:	77 1e                	ja     2f5 <atoi+0x35>
- 2d7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2de:	00 
- 2df:	90                   	nop
-    n = n*10 + *s++ - '0';
- 2e0:	83 c2 01             	add    $0x1,%edx
- 2e3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 2e6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 2ea:	0f be 02             	movsbl (%edx),%eax
- 2ed:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 2f0:	80 fb 09             	cmp    $0x9,%bl
- 2f3:	76 eb                	jbe    2e0 <atoi+0x20>
-  return n;
-}
- 2f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 2f8:	89 c8                	mov    %ecx,%eax
- 2fa:	c9                   	leave
- 2fb:	c3                   	ret
- 2fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000300 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 300:	55                   	push   %ebp
- 301:	89 e5                	mov    %esp,%ebp
- 303:	57                   	push   %edi
- 304:	8b 45 10             	mov    0x10(%ebp),%eax
- 307:	8b 55 08             	mov    0x8(%ebp),%edx
- 30a:	56                   	push   %esi
- 30b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 30e:	85 c0                	test   %eax,%eax
- 310:	7e 13                	jle    325 <memmove+0x25>
- 312:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 314:	89 d7                	mov    %edx,%edi
- 316:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 31d:	00 
- 31e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 320:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 321:	39 f8                	cmp    %edi,%eax
- 323:	75 fb                	jne    320 <memmove+0x20>
-  return vdst;
-}
- 325:	5e                   	pop    %esi
- 326:	89 d0                	mov    %edx,%eax
- 328:	5f                   	pop    %edi
- 329:	5d                   	pop    %ebp
- 32a:	c3                   	ret
-
-0000032b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 32b:	b8 01 00 00 00       	mov    $0x1,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret
-
-00000333 <exit>:
-SYSCALL(exit)
- 333:	b8 02 00 00 00       	mov    $0x2,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret
-
-0000033b <wait>:
-SYSCALL(wait)
- 33b:	b8 03 00 00 00       	mov    $0x3,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret
-
-00000343 <pipe>:
-SYSCALL(pipe)
- 343:	b8 04 00 00 00       	mov    $0x4,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret
-
-0000034b <read>:
-SYSCALL(read)
- 34b:	b8 05 00 00 00       	mov    $0x5,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret
-
-00000353 <write>:
-SYSCALL(write)
- 353:	b8 10 00 00 00       	mov    $0x10,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret
-
-0000035b <close>:
-SYSCALL(close)
- 35b:	b8 15 00 00 00       	mov    $0x15,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret
-
-00000363 <kill>:
-SYSCALL(kill)
- 363:	b8 06 00 00 00       	mov    $0x6,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret
-
-0000036b <exec>:
-SYSCALL(exec)
- 36b:	b8 07 00 00 00       	mov    $0x7,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret
-
-00000373 <open>:
-SYSCALL(open)
- 373:	b8 0f 00 00 00       	mov    $0xf,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret
-
-0000037b <mknod>:
-SYSCALL(mknod)
- 37b:	b8 11 00 00 00       	mov    $0x11,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret
-
-00000383 <unlink>:
-SYSCALL(unlink)
- 383:	b8 12 00 00 00       	mov    $0x12,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret
-
-0000038b <fstat>:
-SYSCALL(fstat)
- 38b:	b8 08 00 00 00       	mov    $0x8,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret
-
-00000393 <link>:
-SYSCALL(link)
- 393:	b8 13 00 00 00       	mov    $0x13,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret
-
-0000039b <mkdir>:
-SYSCALL(mkdir)
- 39b:	b8 14 00 00 00       	mov    $0x14,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret
-
-000003a3 <chdir>:
-SYSCALL(chdir)
- 3a3:	b8 09 00 00 00       	mov    $0x9,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret
-
-000003ab <dup>:
-SYSCALL(dup)
- 3ab:	b8 0a 00 00 00       	mov    $0xa,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret
-
-000003b3 <getpid>:
-SYSCALL(getpid)
- 3b3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret
-
-000003bb <sbrk>:
-SYSCALL(sbrk)
- 3bb:	b8 0c 00 00 00       	mov    $0xc,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret
-
-000003c3 <sleep>:
-SYSCALL(sleep)
- 3c3:	b8 0d 00 00 00       	mov    $0xd,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret
-
-000003cb <uptime>:
-SYSCALL(uptime)
- 3cb:	b8 0e 00 00 00       	mov    $0xe,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret
- 3d3:	66 90                	xchg   %ax,%ax
- 3d5:	66 90                	xchg   %ax,%ax
- 3d7:	66 90                	xchg   %ax,%ax
- 3d9:	66 90                	xchg   %ax,%ax
- 3db:	66 90                	xchg   %ax,%ax
- 3dd:	66 90                	xchg   %ax,%ax
- 3df:	90                   	nop
-
-000003e0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3e0:	55                   	push   %ebp
- 3e1:	89 e5                	mov    %esp,%ebp
- 3e3:	57                   	push   %edi
- 3e4:	56                   	push   %esi
- 3e5:	53                   	push   %ebx
- 3e6:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 3e8:	89 d1                	mov    %edx,%ecx
-{
- 3ea:	83 ec 3c             	sub    $0x3c,%esp
- 3ed:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 3f0:	85 d2                	test   %edx,%edx
- 3f2:	0f 89 80 00 00 00    	jns    478 <printint+0x98>
- 3f8:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3fc:	74 7a                	je     478 <printint+0x98>
-    x = -xx;
- 3fe:	f7 d9                	neg    %ecx
-    neg = 1;
- 400:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 405:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 408:	31 f6                	xor    %esi,%esi
- 40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 410:	89 c8                	mov    %ecx,%eax
- 412:	31 d2                	xor    %edx,%edx
- 414:	89 f7                	mov    %esi,%edi
- 416:	f7 f3                	div    %ebx
- 418:	8d 76 01             	lea    0x1(%esi),%esi
- 41b:	0f b6 92 e0 08 00 00 	movzbl 0x8e0(%edx),%edx
- 422:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 426:	89 ca                	mov    %ecx,%edx
- 428:	89 c1                	mov    %eax,%ecx
- 42a:	39 da                	cmp    %ebx,%edx
- 42c:	73 e2                	jae    410 <printint+0x30>
-  if(neg)
- 42e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 431:	85 c0                	test   %eax,%eax
- 433:	74 07                	je     43c <printint+0x5c>
-    buf[i++] = '-';
- 435:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 43a:	89 f7                	mov    %esi,%edi
- 43c:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 43f:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 442:	01 df                	add    %ebx,%edi
- 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 448:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 44b:	83 ec 04             	sub    $0x4,%esp
- 44e:	88 45 d7             	mov    %al,-0x29(%ebp)
- 451:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 454:	6a 01                	push   $0x1
- 456:	50                   	push   %eax
- 457:	56                   	push   %esi
- 458:	e8 f6 fe ff ff       	call   353 <write>
-  while(--i >= 0)
- 45d:	89 f8                	mov    %edi,%eax
- 45f:	83 c4 10             	add    $0x10,%esp
- 462:	83 ef 01             	sub    $0x1,%edi
- 465:	39 c3                	cmp    %eax,%ebx
- 467:	75 df                	jne    448 <printint+0x68>
-}
- 469:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 46c:	5b                   	pop    %ebx
- 46d:	5e                   	pop    %esi
- 46e:	5f                   	pop    %edi
- 46f:	5d                   	pop    %ebp
- 470:	c3                   	ret
- 471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 478:	31 c0                	xor    %eax,%eax
- 47a:	eb 89                	jmp    405 <printint+0x25>
- 47c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000480 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 480:	55                   	push   %ebp
- 481:	89 e5                	mov    %esp,%ebp
- 483:	57                   	push   %edi
- 484:	56                   	push   %esi
- 485:	53                   	push   %ebx
- 486:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 489:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 48c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 48f:	0f b6 1e             	movzbl (%esi),%ebx
- 492:	83 c6 01             	add    $0x1,%esi
- 495:	84 db                	test   %bl,%bl
- 497:	74 67                	je     500 <printf+0x80>
- 499:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 49c:	31 d2                	xor    %edx,%edx
- 49e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 4a1:	eb 34                	jmp    4d7 <printf+0x57>
- 4a3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 4a8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 4ab:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 4b0:	83 f8 25             	cmp    $0x25,%eax
- 4b3:	74 18                	je     4cd <printf+0x4d>
-  write(fd, &c, 1);
- 4b5:	83 ec 04             	sub    $0x4,%esp
- 4b8:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4bb:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4be:	6a 01                	push   $0x1
- 4c0:	50                   	push   %eax
- 4c1:	57                   	push   %edi
- 4c2:	e8 8c fe ff ff       	call   353 <write>
- 4c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4ca:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4cd:	0f b6 1e             	movzbl (%esi),%ebx
- 4d0:	83 c6 01             	add    $0x1,%esi
- 4d3:	84 db                	test   %bl,%bl
- 4d5:	74 29                	je     500 <printf+0x80>
-    c = fmt[i] & 0xff;
- 4d7:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4da:	85 d2                	test   %edx,%edx
- 4dc:	74 ca                	je     4a8 <printf+0x28>
-      }
-    } else if(state == '%'){
- 4de:	83 fa 25             	cmp    $0x25,%edx
- 4e1:	75 ea                	jne    4cd <printf+0x4d>
-      if(c == 'd'){
- 4e3:	83 f8 25             	cmp    $0x25,%eax
- 4e6:	0f 84 04 01 00 00    	je     5f0 <printf+0x170>
- 4ec:	83 e8 63             	sub    $0x63,%eax
- 4ef:	83 f8 15             	cmp    $0x15,%eax
- 4f2:	77 1c                	ja     510 <printf+0x90>
- 4f4:	ff 24 85 88 08 00 00 	jmp    *0x888(,%eax,4)
- 4fb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 500:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 503:	5b                   	pop    %ebx
- 504:	5e                   	pop    %esi
- 505:	5f                   	pop    %edi
- 506:	5d                   	pop    %ebp
- 507:	c3                   	ret
- 508:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 50f:	00 
-  write(fd, &c, 1);
- 510:	83 ec 04             	sub    $0x4,%esp
- 513:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 516:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 51a:	6a 01                	push   $0x1
- 51c:	52                   	push   %edx
- 51d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 520:	57                   	push   %edi
- 521:	e8 2d fe ff ff       	call   353 <write>
- 526:	83 c4 0c             	add    $0xc,%esp
- 529:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 52c:	6a 01                	push   $0x1
- 52e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 531:	52                   	push   %edx
- 532:	57                   	push   %edi
- 533:	e8 1b fe ff ff       	call   353 <write>
-        putc(fd, c);
- 538:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 53b:	31 d2                	xor    %edx,%edx
- 53d:	eb 8e                	jmp    4cd <printf+0x4d>
- 53f:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 543:	83 ec 0c             	sub    $0xc,%esp
- 546:	b9 10 00 00 00       	mov    $0x10,%ecx
- 54b:	8b 13                	mov    (%ebx),%edx
- 54d:	6a 00                	push   $0x0
- 54f:	89 f8                	mov    %edi,%eax
-        ap++;
- 551:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 554:	e8 87 fe ff ff       	call   3e0 <printint>
-        ap++;
- 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 55c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 55f:	31 d2                	xor    %edx,%edx
- 561:	e9 67 ff ff ff       	jmp    4cd <printf+0x4d>
-        s = (char*)*ap;
- 566:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 569:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 56b:	83 c0 04             	add    $0x4,%eax
- 56e:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 571:	85 db                	test   %ebx,%ebx
- 573:	0f 84 87 00 00 00    	je     600 <printf+0x180>
-        while(*s != 0){
- 579:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 57c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 57e:	84 c0                	test   %al,%al
- 580:	0f 84 47 ff ff ff    	je     4cd <printf+0x4d>
- 586:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 589:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 58c:	89 de                	mov    %ebx,%esi
- 58e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 590:	83 ec 04             	sub    $0x4,%esp
- 593:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 596:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 599:	6a 01                	push   $0x1
- 59b:	53                   	push   %ebx
- 59c:	57                   	push   %edi
- 59d:	e8 b1 fd ff ff       	call   353 <write>
-        while(*s != 0){
- 5a2:	0f b6 06             	movzbl (%esi),%eax
- 5a5:	83 c4 10             	add    $0x10,%esp
- 5a8:	84 c0                	test   %al,%al
- 5aa:	75 e4                	jne    590 <printf+0x110>
-      state = 0;
- 5ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 5af:	31 d2                	xor    %edx,%edx
- 5b1:	e9 17 ff ff ff       	jmp    4cd <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 5b6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5b9:	83 ec 0c             	sub    $0xc,%esp
- 5bc:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5c1:	8b 13                	mov    (%ebx),%edx
- 5c3:	6a 01                	push   $0x1
- 5c5:	eb 88                	jmp    54f <printf+0xcf>
-        putc(fd, *ap);
- 5c7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 5ca:	83 ec 04             	sub    $0x4,%esp
- 5cd:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 5d0:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 5d2:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 5d5:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 5d8:	6a 01                	push   $0x1
- 5da:	52                   	push   %edx
- 5db:	57                   	push   %edi
- 5dc:	e8 72 fd ff ff       	call   353 <write>
-        ap++;
- 5e1:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 5e4:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 5e7:	31 d2                	xor    %edx,%edx
- 5e9:	e9 df fe ff ff       	jmp    4cd <printf+0x4d>
- 5ee:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 5f0:	83 ec 04             	sub    $0x4,%esp
- 5f3:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 5f6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 5f9:	6a 01                	push   $0x1
- 5fb:	e9 31 ff ff ff       	jmp    531 <printf+0xb1>
- 600:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 605:	bb c0 07 00 00       	mov    $0x7c0,%ebx
- 60a:	e9 77 ff ff ff       	jmp    586 <printf+0x106>
- 60f:	90                   	nop
-
-00000610 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 610:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 611:	a1 84 0b 00 00       	mov    0xb84,%eax
-{
- 616:	89 e5                	mov    %esp,%ebp
- 618:	57                   	push   %edi
- 619:	56                   	push   %esi
- 61a:	53                   	push   %ebx
- 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 628:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 62a:	39 c8                	cmp    %ecx,%eax
- 62c:	73 32                	jae    660 <free+0x50>
- 62e:	39 d1                	cmp    %edx,%ecx
- 630:	72 04                	jb     636 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 632:	39 d0                	cmp    %edx,%eax
- 634:	72 32                	jb     668 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 636:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 639:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 63c:	39 fa                	cmp    %edi,%edx
- 63e:	74 30                	je     670 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 640:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 643:	8b 50 04             	mov    0x4(%eax),%edx
- 646:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 649:	39 f1                	cmp    %esi,%ecx
- 64b:	74 3a                	je     687 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 64d:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 64f:	5b                   	pop    %ebx
-  freep = p;
- 650:	a3 84 0b 00 00       	mov    %eax,0xb84
-}
- 655:	5e                   	pop    %esi
- 656:	5f                   	pop    %edi
- 657:	5d                   	pop    %ebp
- 658:	c3                   	ret
- 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 660:	39 d0                	cmp    %edx,%eax
- 662:	72 04                	jb     668 <free+0x58>
- 664:	39 d1                	cmp    %edx,%ecx
- 666:	72 ce                	jb     636 <free+0x26>
-{
- 668:	89 d0                	mov    %edx,%eax
- 66a:	eb bc                	jmp    628 <free+0x18>
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 c6                	jne    64d <free+0x3d>
-    p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 68a:	a3 84 0b 00 00       	mov    %eax,0xb84
-    p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 692:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 695:	89 08                	mov    %ecx,(%eax)
-}
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006a0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6a0:	55                   	push   %ebp
- 6a1:	89 e5                	mov    %esp,%ebp
- 6a3:	57                   	push   %edi
- 6a4:	56                   	push   %esi
- 6a5:	53                   	push   %ebx
- 6a6:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6ac:	8b 15 84 0b 00 00    	mov    0xb84,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b2:	8d 78 07             	lea    0x7(%eax),%edi
- 6b5:	c1 ef 03             	shr    $0x3,%edi
- 6b8:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 6bb:	85 d2                	test   %edx,%edx
- 6bd:	0f 84 8d 00 00 00    	je     750 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c3:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 6c5:	8b 48 04             	mov    0x4(%eax),%ecx
- 6c8:	39 f9                	cmp    %edi,%ecx
- 6ca:	73 64                	jae    730 <malloc+0x90>
-  if(nu < 4096)
- 6cc:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6d1:	39 df                	cmp    %ebx,%edi
- 6d3:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6d6:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6dd:	eb 0a                	jmp    6e9 <malloc+0x49>
- 6df:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e0:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 6e2:	8b 48 04             	mov    0x4(%eax),%ecx
- 6e5:	39 f9                	cmp    %edi,%ecx
- 6e7:	73 47                	jae    730 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 6e9:	89 c2                	mov    %eax,%edx
- 6eb:	3b 05 84 0b 00 00    	cmp    0xb84,%eax
- 6f1:	75 ed                	jne    6e0 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 6f3:	83 ec 0c             	sub    $0xc,%esp
- 6f6:	56                   	push   %esi
- 6f7:	e8 bf fc ff ff       	call   3bb <sbrk>
-  if(p == (char*)-1)
- 6fc:	83 c4 10             	add    $0x10,%esp
- 6ff:	83 f8 ff             	cmp    $0xffffffff,%eax
- 702:	74 1c                	je     720 <malloc+0x80>
-  hp->s.size = nu;
- 704:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 707:	83 ec 0c             	sub    $0xc,%esp
- 70a:	83 c0 08             	add    $0x8,%eax
- 70d:	50                   	push   %eax
- 70e:	e8 fd fe ff ff       	call   610 <free>
-  return freep;
- 713:	8b 15 84 0b 00 00    	mov    0xb84,%edx
-      if((p = morecore(nunits)) == 0)
- 719:	83 c4 10             	add    $0x10,%esp
- 71c:	85 d2                	test   %edx,%edx
- 71e:	75 c0                	jne    6e0 <malloc+0x40>
-        return 0;
-  }
-}
- 720:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 723:	31 c0                	xor    %eax,%eax
-}
- 725:	5b                   	pop    %ebx
- 726:	5e                   	pop    %esi
- 727:	5f                   	pop    %edi
- 728:	5d                   	pop    %ebp
- 729:	c3                   	ret
- 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 730:	39 cf                	cmp    %ecx,%edi
- 732:	74 4c                	je     780 <malloc+0xe0>
-        p->s.size -= nunits;
- 734:	29 f9                	sub    %edi,%ecx
- 736:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 739:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 73c:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 73f:	89 15 84 0b 00 00    	mov    %edx,0xb84
-}
- 745:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 748:	83 c0 08             	add    $0x8,%eax
-}
- 74b:	5b                   	pop    %ebx
- 74c:	5e                   	pop    %esi
- 74d:	5f                   	pop    %edi
- 74e:	5d                   	pop    %ebp
- 74f:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 750:	c7 05 84 0b 00 00 88 	movl   $0xb88,0xb84
- 757:	0b 00 00 
-    base.s.size = 0;
- 75a:	b8 88 0b 00 00       	mov    $0xb88,%eax
-    base.s.ptr = freep = prevp = &base;
- 75f:	c7 05 88 0b 00 00 88 	movl   $0xb88,0xb88
- 766:	0b 00 00 
-    base.s.size = 0;
- 769:	c7 05 8c 0b 00 00 00 	movl   $0x0,0xb8c
- 770:	00 00 00 
-    if(p->s.size >= nunits){
- 773:	e9 54 ff ff ff       	jmp    6cc <malloc+0x2c>
- 778:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 77f:	00 
-        prevp->s.ptr = p->s.ptr;
- 780:	8b 08                	mov    (%eax),%ecx
- 782:	89 0a                	mov    %ecx,(%edx)
- 784:	eb b9                	jmp    73f <malloc+0x9f>
diff --git a/inf.d b/inf.d
deleted file mode 100644
index ec28bb9..0000000
--- a/inf.d
+++ /dev/null
@@ -1 +0,0 @@
-inf.o: inf.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/inf.o b/inf.o
deleted file mode 100644
index 1798748..0000000
Binary files a/inf.o and /dev/null differ
diff --git a/inf.sym b/inf.sym
deleted file mode 100644
index 0fdef7f..0000000
--- a/inf.sym
+++ /dev/null
@@ -1,45 +0,0 @@
-00000000 inf.c
-00000000 ulib.c
-00000000 printf.c
-000003e0 printint
-000008e0 digits.0
-00000000 umalloc.c
-00000b84 freep
-00000b88 base
-000000f0 strcpy
-00000480 printf
-00000300 memmove
-0000037b mknod
-00000210 gets
-000003b3 getpid
-000006a0 malloc
-000003c3 sleep
-00000343 pipe
-00000353 write
-0000038b fstat
-00000363 kill
-000003a3 chdir
-0000036b exec
-0000033b wait
-0000034b read
-00000383 unlink
-0000032b fork
-000003bb sbrk
-000003cb uptime
-00000b84 __bss_start
-000001b0 memset
-00000000 main
-00000120 strcmp
-000003ab dup
-00000270 stat
-00000b84 _edata
-00000b90 _end
-00000393 link
-00000333 exit
-000002c0 atoi
-00000180 strlen
-00000373 open
-000001d0 strchr
-0000039b mkdir
-0000035b close
-00000610 free
diff --git a/init.asm b/init.asm
deleted file mode 100644
index dedc924..0000000
--- a/init.asm
+++ /dev/null
@@ -1,1187 +0,0 @@
-
-_init:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-
-char *argv[] = { "sh", 0 };
-
-int
-main(void)
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	53                   	push   %ebx
-   e:	51                   	push   %ecx
-  int pid, wpid;
-
-  if(open("console", O_RDWR) < 0){
-   f:	83 ec 08             	sub    $0x8,%esp
-  12:	6a 02                	push   $0x2
-  14:	68 88 07 00 00       	push   $0x788
-  19:	e8 55 03 00 00       	call   373 <open>
-  1e:	83 c4 10             	add    $0x10,%esp
-  21:	85 c0                	test   %eax,%eax
-  23:	0f 88 9f 00 00 00    	js     c8 <main+0xc8>
-    mknod("console", 1, 1);
-    open("console", O_RDWR);
-  }
-  dup(0);  // stdout
-  29:	83 ec 0c             	sub    $0xc,%esp
-  2c:	6a 00                	push   $0x0
-  2e:	e8 78 03 00 00       	call   3ab <dup>
-  dup(0);  // stderr
-  33:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  3a:	e8 6c 03 00 00       	call   3ab <dup>
-  3f:	83 c4 10             	add    $0x10,%esp
-  42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-  for(;;){
-    printf(1, "init: starting sh\n");
-  48:	83 ec 08             	sub    $0x8,%esp
-  4b:	68 90 07 00 00       	push   $0x790
-  50:	6a 01                	push   $0x1
-  52:	e8 29 04 00 00       	call   480 <printf>
-    pid = fork();
-  57:	e8 cf 02 00 00       	call   32b <fork>
-    if(pid < 0){
-  5c:	83 c4 10             	add    $0x10,%esp
-    pid = fork();
-  5f:	89 c3                	mov    %eax,%ebx
-    if(pid < 0){
-  61:	85 c0                	test   %eax,%eax
-  63:	78 2c                	js     91 <main+0x91>
-      printf(1, "init: fork failed\n");
-      exit();
-    }
-    if(pid == 0){
-  65:	74 3d                	je     a4 <main+0xa4>
-  67:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  6e:	00 
-  6f:	90                   	nop
-      exec("sh", argv);
-      printf(1, "init: exec sh failed\n");
-      exit();
-    }
-    while((wpid=wait()) >= 0 && wpid != pid)
-  70:	e8 c6 02 00 00       	call   33b <wait>
-  75:	85 c0                	test   %eax,%eax
-  77:	78 cf                	js     48 <main+0x48>
-  79:	39 c3                	cmp    %eax,%ebx
-  7b:	74 cb                	je     48 <main+0x48>
-      printf(1, "zombie!\n");
-  7d:	83 ec 08             	sub    $0x8,%esp
-  80:	68 cf 07 00 00       	push   $0x7cf
-  85:	6a 01                	push   $0x1
-  87:	e8 f4 03 00 00       	call   480 <printf>
-  8c:	83 c4 10             	add    $0x10,%esp
-  8f:	eb df                	jmp    70 <main+0x70>
-      printf(1, "init: fork failed\n");
-  91:	53                   	push   %ebx
-  92:	53                   	push   %ebx
-  93:	68 a3 07 00 00       	push   $0x7a3
-  98:	6a 01                	push   $0x1
-  9a:	e8 e1 03 00 00       	call   480 <printf>
-      exit();
-  9f:	e8 8f 02 00 00       	call   333 <exit>
-      exec("sh", argv);
-  a4:	50                   	push   %eax
-  a5:	50                   	push   %eax
-  a6:	68 d8 0a 00 00       	push   $0xad8
-  ab:	68 b6 07 00 00       	push   $0x7b6
-  b0:	e8 b6 02 00 00       	call   36b <exec>
-      printf(1, "init: exec sh failed\n");
-  b5:	5a                   	pop    %edx
-  b6:	59                   	pop    %ecx
-  b7:	68 b9 07 00 00       	push   $0x7b9
-  bc:	6a 01                	push   $0x1
-  be:	e8 bd 03 00 00       	call   480 <printf>
-      exit();
-  c3:	e8 6b 02 00 00       	call   333 <exit>
-    mknod("console", 1, 1);
-  c8:	50                   	push   %eax
-  c9:	6a 01                	push   $0x1
-  cb:	6a 01                	push   $0x1
-  cd:	68 88 07 00 00       	push   $0x788
-  d2:	e8 a4 02 00 00       	call   37b <mknod>
-    open("console", O_RDWR);
-  d7:	58                   	pop    %eax
-  d8:	5a                   	pop    %edx
-  d9:	6a 02                	push   $0x2
-  db:	68 88 07 00 00       	push   $0x788
-  e0:	e8 8e 02 00 00       	call   373 <open>
-  e5:	83 c4 10             	add    $0x10,%esp
-  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>
-  ed:	66 90                	xchg   %ax,%ax
-  ef:	90                   	nop
-
-000000f0 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  f0:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  f1:	31 c0                	xor    %eax,%eax
-{
-  f3:	89 e5                	mov    %esp,%ebp
-  f5:	53                   	push   %ebx
-  f6:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
- 100:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 104:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 107:	83 c0 01             	add    $0x1,%eax
- 10a:	84 d2                	test   %dl,%dl
- 10c:	75 f2                	jne    100 <strcpy+0x10>
-    ;
-  return os;
-}
- 10e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 111:	89 c8                	mov    %ecx,%eax
- 113:	c9                   	leave
- 114:	c3                   	ret
- 115:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 11c:	00 
- 11d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000120 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 120:	55                   	push   %ebp
- 121:	89 e5                	mov    %esp,%ebp
- 123:	53                   	push   %ebx
- 124:	8b 55 08             	mov    0x8(%ebp),%edx
- 127:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 12a:	0f b6 02             	movzbl (%edx),%eax
- 12d:	84 c0                	test   %al,%al
- 12f:	75 17                	jne    148 <strcmp+0x28>
- 131:	eb 3a                	jmp    16d <strcmp+0x4d>
- 133:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 138:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
- 13c:	83 c2 01             	add    $0x1,%edx
- 13f:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
- 142:	84 c0                	test   %al,%al
- 144:	74 1a                	je     160 <strcmp+0x40>
- 146:	89 d9                	mov    %ebx,%ecx
- 148:	0f b6 19             	movzbl (%ecx),%ebx
- 14b:	38 c3                	cmp    %al,%bl
- 14d:	74 e9                	je     138 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
- 14f:	29 d8                	sub    %ebx,%eax
-}
- 151:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 154:	c9                   	leave
- 155:	c3                   	ret
- 156:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 15d:	00 
- 15e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
- 160:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 164:	31 c0                	xor    %eax,%eax
- 166:	29 d8                	sub    %ebx,%eax
-}
- 168:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 16b:	c9                   	leave
- 16c:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
- 16d:	0f b6 19             	movzbl (%ecx),%ebx
- 170:	31 c0                	xor    %eax,%eax
- 172:	eb db                	jmp    14f <strcmp+0x2f>
- 174:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 17b:	00 
- 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000180 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 180:	55                   	push   %ebp
- 181:	89 e5                	mov    %esp,%ebp
- 183:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 186:	80 3a 00             	cmpb   $0x0,(%edx)
- 189:	74 15                	je     1a0 <strlen+0x20>
- 18b:	31 c0                	xor    %eax,%eax
- 18d:	8d 76 00             	lea    0x0(%esi),%esi
- 190:	83 c0 01             	add    $0x1,%eax
- 193:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 197:	89 c1                	mov    %eax,%ecx
- 199:	75 f5                	jne    190 <strlen+0x10>
-    ;
-  return n;
-}
- 19b:	89 c8                	mov    %ecx,%eax
- 19d:	5d                   	pop    %ebp
- 19e:	c3                   	ret
- 19f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 1a0:	31 c9                	xor    %ecx,%ecx
-}
- 1a2:	5d                   	pop    %ebp
- 1a3:	89 c8                	mov    %ecx,%eax
- 1a5:	c3                   	ret
- 1a6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1ad:	00 
- 1ae:	66 90                	xchg   %ax,%ax
-
-000001b0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1b0:	55                   	push   %ebp
- 1b1:	89 e5                	mov    %esp,%ebp
- 1b3:	57                   	push   %edi
- 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 1b7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 1ba:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1bd:	89 d7                	mov    %edx,%edi
- 1bf:	fc                   	cld
- 1c0:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 1c2:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 1c5:	89 d0                	mov    %edx,%eax
- 1c7:	c9                   	leave
- 1c8:	c3                   	ret
- 1c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000001d0 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 1d0:	55                   	push   %ebp
- 1d1:	89 e5                	mov    %esp,%ebp
- 1d3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1d6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 1da:	0f b6 10             	movzbl (%eax),%edx
- 1dd:	84 d2                	test   %dl,%dl
- 1df:	75 12                	jne    1f3 <strchr+0x23>
- 1e1:	eb 1d                	jmp    200 <strchr+0x30>
- 1e3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1e8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 1ec:	83 c0 01             	add    $0x1,%eax
- 1ef:	84 d2                	test   %dl,%dl
- 1f1:	74 0d                	je     200 <strchr+0x30>
-    if(*s == c)
- 1f3:	38 d1                	cmp    %dl,%cl
- 1f5:	75 f1                	jne    1e8 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 1f7:	5d                   	pop    %ebp
- 1f8:	c3                   	ret
- 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 200:	31 c0                	xor    %eax,%eax
-}
- 202:	5d                   	pop    %ebp
- 203:	c3                   	ret
- 204:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 20b:	00 
- 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000210 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 210:	55                   	push   %ebp
- 211:	89 e5                	mov    %esp,%ebp
- 213:	57                   	push   %edi
- 214:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 215:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 218:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 219:	31 db                	xor    %ebx,%ebx
-{
- 21b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 21e:	eb 27                	jmp    247 <gets+0x37>
-    cc = read(0, &c, 1);
- 220:	83 ec 04             	sub    $0x4,%esp
- 223:	6a 01                	push   $0x1
- 225:	56                   	push   %esi
- 226:	6a 00                	push   $0x0
- 228:	e8 1e 01 00 00       	call   34b <read>
-    if(cc < 1)
- 22d:	83 c4 10             	add    $0x10,%esp
- 230:	85 c0                	test   %eax,%eax
- 232:	7e 1d                	jle    251 <gets+0x41>
-      break;
-    buf[i++] = c;
- 234:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 238:	8b 55 08             	mov    0x8(%ebp),%edx
- 23b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 23f:	3c 0a                	cmp    $0xa,%al
- 241:	74 10                	je     253 <gets+0x43>
- 243:	3c 0d                	cmp    $0xd,%al
- 245:	74 0c                	je     253 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 247:	89 df                	mov    %ebx,%edi
- 249:	83 c3 01             	add    $0x1,%ebx
- 24c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 24f:	7c cf                	jl     220 <gets+0x10>
- 251:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 253:	8b 45 08             	mov    0x8(%ebp),%eax
- 256:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 25a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 25d:	5b                   	pop    %ebx
- 25e:	5e                   	pop    %esi
- 25f:	5f                   	pop    %edi
- 260:	5d                   	pop    %ebp
- 261:	c3                   	ret
- 262:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 269:	00 
- 26a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000270 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 270:	55                   	push   %ebp
- 271:	89 e5                	mov    %esp,%ebp
- 273:	56                   	push   %esi
- 274:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 275:	83 ec 08             	sub    $0x8,%esp
- 278:	6a 00                	push   $0x0
- 27a:	ff 75 08             	push   0x8(%ebp)
- 27d:	e8 f1 00 00 00       	call   373 <open>
-  if(fd < 0)
- 282:	83 c4 10             	add    $0x10,%esp
- 285:	85 c0                	test   %eax,%eax
- 287:	78 27                	js     2b0 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 289:	83 ec 08             	sub    $0x8,%esp
- 28c:	ff 75 0c             	push   0xc(%ebp)
- 28f:	89 c3                	mov    %eax,%ebx
- 291:	50                   	push   %eax
- 292:	e8 f4 00 00 00       	call   38b <fstat>
-  close(fd);
- 297:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 29a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 29c:	e8 ba 00 00 00       	call   35b <close>
-  return r;
- 2a1:	83 c4 10             	add    $0x10,%esp
-}
- 2a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 2a7:	89 f0                	mov    %esi,%eax
- 2a9:	5b                   	pop    %ebx
- 2aa:	5e                   	pop    %esi
- 2ab:	5d                   	pop    %ebp
- 2ac:	c3                   	ret
- 2ad:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 2b0:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 2b5:	eb ed                	jmp    2a4 <stat+0x34>
- 2b7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2be:	00 
- 2bf:	90                   	nop
-
-000002c0 <atoi>:
-
-int
-atoi(const char *s)
-{
- 2c0:	55                   	push   %ebp
- 2c1:	89 e5                	mov    %esp,%ebp
- 2c3:	53                   	push   %ebx
- 2c4:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2c7:	0f be 02             	movsbl (%edx),%eax
- 2ca:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 2cd:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 2d0:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 2d5:	77 1e                	ja     2f5 <atoi+0x35>
- 2d7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2de:	00 
- 2df:	90                   	nop
-    n = n*10 + *s++ - '0';
- 2e0:	83 c2 01             	add    $0x1,%edx
- 2e3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 2e6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 2ea:	0f be 02             	movsbl (%edx),%eax
- 2ed:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 2f0:	80 fb 09             	cmp    $0x9,%bl
- 2f3:	76 eb                	jbe    2e0 <atoi+0x20>
-  return n;
-}
- 2f5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 2f8:	89 c8                	mov    %ecx,%eax
- 2fa:	c9                   	leave
- 2fb:	c3                   	ret
- 2fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000300 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 300:	55                   	push   %ebp
- 301:	89 e5                	mov    %esp,%ebp
- 303:	57                   	push   %edi
- 304:	8b 45 10             	mov    0x10(%ebp),%eax
- 307:	8b 55 08             	mov    0x8(%ebp),%edx
- 30a:	56                   	push   %esi
- 30b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 30e:	85 c0                	test   %eax,%eax
- 310:	7e 13                	jle    325 <memmove+0x25>
- 312:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 314:	89 d7                	mov    %edx,%edi
- 316:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 31d:	00 
- 31e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 320:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 321:	39 f8                	cmp    %edi,%eax
- 323:	75 fb                	jne    320 <memmove+0x20>
-  return vdst;
-}
- 325:	5e                   	pop    %esi
- 326:	89 d0                	mov    %edx,%eax
- 328:	5f                   	pop    %edi
- 329:	5d                   	pop    %ebp
- 32a:	c3                   	ret
-
-0000032b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 32b:	b8 01 00 00 00       	mov    $0x1,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret
-
-00000333 <exit>:
-SYSCALL(exit)
- 333:	b8 02 00 00 00       	mov    $0x2,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret
-
-0000033b <wait>:
-SYSCALL(wait)
- 33b:	b8 03 00 00 00       	mov    $0x3,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret
-
-00000343 <pipe>:
-SYSCALL(pipe)
- 343:	b8 04 00 00 00       	mov    $0x4,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret
-
-0000034b <read>:
-SYSCALL(read)
- 34b:	b8 05 00 00 00       	mov    $0x5,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret
-
-00000353 <write>:
-SYSCALL(write)
- 353:	b8 10 00 00 00       	mov    $0x10,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret
-
-0000035b <close>:
-SYSCALL(close)
- 35b:	b8 15 00 00 00       	mov    $0x15,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret
-
-00000363 <kill>:
-SYSCALL(kill)
- 363:	b8 06 00 00 00       	mov    $0x6,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret
-
-0000036b <exec>:
-SYSCALL(exec)
- 36b:	b8 07 00 00 00       	mov    $0x7,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret
-
-00000373 <open>:
-SYSCALL(open)
- 373:	b8 0f 00 00 00       	mov    $0xf,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret
-
-0000037b <mknod>:
-SYSCALL(mknod)
- 37b:	b8 11 00 00 00       	mov    $0x11,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret
-
-00000383 <unlink>:
-SYSCALL(unlink)
- 383:	b8 12 00 00 00       	mov    $0x12,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret
-
-0000038b <fstat>:
-SYSCALL(fstat)
- 38b:	b8 08 00 00 00       	mov    $0x8,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret
-
-00000393 <link>:
-SYSCALL(link)
- 393:	b8 13 00 00 00       	mov    $0x13,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret
-
-0000039b <mkdir>:
-SYSCALL(mkdir)
- 39b:	b8 14 00 00 00       	mov    $0x14,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret
-
-000003a3 <chdir>:
-SYSCALL(chdir)
- 3a3:	b8 09 00 00 00       	mov    $0x9,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret
-
-000003ab <dup>:
-SYSCALL(dup)
- 3ab:	b8 0a 00 00 00       	mov    $0xa,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret
-
-000003b3 <getpid>:
-SYSCALL(getpid)
- 3b3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret
-
-000003bb <sbrk>:
-SYSCALL(sbrk)
- 3bb:	b8 0c 00 00 00       	mov    $0xc,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret
-
-000003c3 <sleep>:
-SYSCALL(sleep)
- 3c3:	b8 0d 00 00 00       	mov    $0xd,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret
-
-000003cb <uptime>:
-SYSCALL(uptime)
- 3cb:	b8 0e 00 00 00       	mov    $0xe,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret
- 3d3:	66 90                	xchg   %ax,%ax
- 3d5:	66 90                	xchg   %ax,%ax
- 3d7:	66 90                	xchg   %ax,%ax
- 3d9:	66 90                	xchg   %ax,%ax
- 3db:	66 90                	xchg   %ax,%ax
- 3dd:	66 90                	xchg   %ax,%ax
- 3df:	90                   	nop
-
-000003e0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 3e0:	55                   	push   %ebp
- 3e1:	89 e5                	mov    %esp,%ebp
- 3e3:	57                   	push   %edi
- 3e4:	56                   	push   %esi
- 3e5:	53                   	push   %ebx
- 3e6:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 3e8:	89 d1                	mov    %edx,%ecx
-{
- 3ea:	83 ec 3c             	sub    $0x3c,%esp
- 3ed:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 3f0:	85 d2                	test   %edx,%edx
- 3f2:	0f 89 80 00 00 00    	jns    478 <printint+0x98>
- 3f8:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 3fc:	74 7a                	je     478 <printint+0x98>
-    x = -xx;
- 3fe:	f7 d9                	neg    %ecx
-    neg = 1;
- 400:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 405:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 408:	31 f6                	xor    %esi,%esi
- 40a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 410:	89 c8                	mov    %ecx,%eax
- 412:	31 d2                	xor    %edx,%edx
- 414:	89 f7                	mov    %esi,%edi
- 416:	f7 f3                	div    %ebx
- 418:	8d 76 01             	lea    0x1(%esi),%esi
- 41b:	0f b6 92 38 08 00 00 	movzbl 0x838(%edx),%edx
- 422:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 426:	89 ca                	mov    %ecx,%edx
- 428:	89 c1                	mov    %eax,%ecx
- 42a:	39 da                	cmp    %ebx,%edx
- 42c:	73 e2                	jae    410 <printint+0x30>
-  if(neg)
- 42e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 431:	85 c0                	test   %eax,%eax
- 433:	74 07                	je     43c <printint+0x5c>
-    buf[i++] = '-';
- 435:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 43a:	89 f7                	mov    %esi,%edi
- 43c:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 43f:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 442:	01 df                	add    %ebx,%edi
- 444:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 448:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 44b:	83 ec 04             	sub    $0x4,%esp
- 44e:	88 45 d7             	mov    %al,-0x29(%ebp)
- 451:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 454:	6a 01                	push   $0x1
- 456:	50                   	push   %eax
- 457:	56                   	push   %esi
- 458:	e8 f6 fe ff ff       	call   353 <write>
-  while(--i >= 0)
- 45d:	89 f8                	mov    %edi,%eax
- 45f:	83 c4 10             	add    $0x10,%esp
- 462:	83 ef 01             	sub    $0x1,%edi
- 465:	39 c3                	cmp    %eax,%ebx
- 467:	75 df                	jne    448 <printint+0x68>
-}
- 469:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 46c:	5b                   	pop    %ebx
- 46d:	5e                   	pop    %esi
- 46e:	5f                   	pop    %edi
- 46f:	5d                   	pop    %ebp
- 470:	c3                   	ret
- 471:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 478:	31 c0                	xor    %eax,%eax
- 47a:	eb 89                	jmp    405 <printint+0x25>
- 47c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000480 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 480:	55                   	push   %ebp
- 481:	89 e5                	mov    %esp,%ebp
- 483:	57                   	push   %edi
- 484:	56                   	push   %esi
- 485:	53                   	push   %ebx
- 486:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 489:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 48c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 48f:	0f b6 1e             	movzbl (%esi),%ebx
- 492:	83 c6 01             	add    $0x1,%esi
- 495:	84 db                	test   %bl,%bl
- 497:	74 67                	je     500 <printf+0x80>
- 499:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 49c:	31 d2                	xor    %edx,%edx
- 49e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 4a1:	eb 34                	jmp    4d7 <printf+0x57>
- 4a3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 4a8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 4ab:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 4b0:	83 f8 25             	cmp    $0x25,%eax
- 4b3:	74 18                	je     4cd <printf+0x4d>
-  write(fd, &c, 1);
- 4b5:	83 ec 04             	sub    $0x4,%esp
- 4b8:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4bb:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4be:	6a 01                	push   $0x1
- 4c0:	50                   	push   %eax
- 4c1:	57                   	push   %edi
- 4c2:	e8 8c fe ff ff       	call   353 <write>
- 4c7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4ca:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4cd:	0f b6 1e             	movzbl (%esi),%ebx
- 4d0:	83 c6 01             	add    $0x1,%esi
- 4d3:	84 db                	test   %bl,%bl
- 4d5:	74 29                	je     500 <printf+0x80>
-    c = fmt[i] & 0xff;
- 4d7:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 4da:	85 d2                	test   %edx,%edx
- 4dc:	74 ca                	je     4a8 <printf+0x28>
-      }
-    } else if(state == '%'){
- 4de:	83 fa 25             	cmp    $0x25,%edx
- 4e1:	75 ea                	jne    4cd <printf+0x4d>
-      if(c == 'd'){
- 4e3:	83 f8 25             	cmp    $0x25,%eax
- 4e6:	0f 84 04 01 00 00    	je     5f0 <printf+0x170>
- 4ec:	83 e8 63             	sub    $0x63,%eax
- 4ef:	83 f8 15             	cmp    $0x15,%eax
- 4f2:	77 1c                	ja     510 <printf+0x90>
- 4f4:	ff 24 85 e0 07 00 00 	jmp    *0x7e0(,%eax,4)
- 4fb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 500:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 503:	5b                   	pop    %ebx
- 504:	5e                   	pop    %esi
- 505:	5f                   	pop    %edi
- 506:	5d                   	pop    %ebp
- 507:	c3                   	ret
- 508:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 50f:	00 
-  write(fd, &c, 1);
- 510:	83 ec 04             	sub    $0x4,%esp
- 513:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 516:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 51a:	6a 01                	push   $0x1
- 51c:	52                   	push   %edx
- 51d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 520:	57                   	push   %edi
- 521:	e8 2d fe ff ff       	call   353 <write>
- 526:	83 c4 0c             	add    $0xc,%esp
- 529:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 52c:	6a 01                	push   $0x1
- 52e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 531:	52                   	push   %edx
- 532:	57                   	push   %edi
- 533:	e8 1b fe ff ff       	call   353 <write>
-        putc(fd, c);
- 538:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 53b:	31 d2                	xor    %edx,%edx
- 53d:	eb 8e                	jmp    4cd <printf+0x4d>
- 53f:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 540:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 543:	83 ec 0c             	sub    $0xc,%esp
- 546:	b9 10 00 00 00       	mov    $0x10,%ecx
- 54b:	8b 13                	mov    (%ebx),%edx
- 54d:	6a 00                	push   $0x0
- 54f:	89 f8                	mov    %edi,%eax
-        ap++;
- 551:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 554:	e8 87 fe ff ff       	call   3e0 <printint>
-        ap++;
- 559:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 55c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 55f:	31 d2                	xor    %edx,%edx
- 561:	e9 67 ff ff ff       	jmp    4cd <printf+0x4d>
-        s = (char*)*ap;
- 566:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 569:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 56b:	83 c0 04             	add    $0x4,%eax
- 56e:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 571:	85 db                	test   %ebx,%ebx
- 573:	0f 84 87 00 00 00    	je     600 <printf+0x180>
-        while(*s != 0){
- 579:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 57c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 57e:	84 c0                	test   %al,%al
- 580:	0f 84 47 ff ff ff    	je     4cd <printf+0x4d>
- 586:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 589:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 58c:	89 de                	mov    %ebx,%esi
- 58e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 590:	83 ec 04             	sub    $0x4,%esp
- 593:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 596:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 599:	6a 01                	push   $0x1
- 59b:	53                   	push   %ebx
- 59c:	57                   	push   %edi
- 59d:	e8 b1 fd ff ff       	call   353 <write>
-        while(*s != 0){
- 5a2:	0f b6 06             	movzbl (%esi),%eax
- 5a5:	83 c4 10             	add    $0x10,%esp
- 5a8:	84 c0                	test   %al,%al
- 5aa:	75 e4                	jne    590 <printf+0x110>
-      state = 0;
- 5ac:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 5af:	31 d2                	xor    %edx,%edx
- 5b1:	e9 17 ff ff ff       	jmp    4cd <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 5b6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5b9:	83 ec 0c             	sub    $0xc,%esp
- 5bc:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5c1:	8b 13                	mov    (%ebx),%edx
- 5c3:	6a 01                	push   $0x1
- 5c5:	eb 88                	jmp    54f <printf+0xcf>
-        putc(fd, *ap);
- 5c7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 5ca:	83 ec 04             	sub    $0x4,%esp
- 5cd:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 5d0:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 5d2:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 5d5:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 5d8:	6a 01                	push   $0x1
- 5da:	52                   	push   %edx
- 5db:	57                   	push   %edi
- 5dc:	e8 72 fd ff ff       	call   353 <write>
-        ap++;
- 5e1:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 5e4:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 5e7:	31 d2                	xor    %edx,%edx
- 5e9:	e9 df fe ff ff       	jmp    4cd <printf+0x4d>
- 5ee:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 5f0:	83 ec 04             	sub    $0x4,%esp
- 5f3:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 5f6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 5f9:	6a 01                	push   $0x1
- 5fb:	e9 31 ff ff ff       	jmp    531 <printf+0xb1>
- 600:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 605:	bb d8 07 00 00       	mov    $0x7d8,%ebx
- 60a:	e9 77 ff ff ff       	jmp    586 <printf+0x106>
- 60f:	90                   	nop
-
-00000610 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 610:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 611:	a1 e0 0a 00 00       	mov    0xae0,%eax
-{
- 616:	89 e5                	mov    %esp,%ebp
- 618:	57                   	push   %edi
- 619:	56                   	push   %esi
- 61a:	53                   	push   %ebx
- 61b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 61e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 628:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 62a:	39 c8                	cmp    %ecx,%eax
- 62c:	73 32                	jae    660 <free+0x50>
- 62e:	39 d1                	cmp    %edx,%ecx
- 630:	72 04                	jb     636 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 632:	39 d0                	cmp    %edx,%eax
- 634:	72 32                	jb     668 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 636:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 639:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 63c:	39 fa                	cmp    %edi,%edx
- 63e:	74 30                	je     670 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 640:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 643:	8b 50 04             	mov    0x4(%eax),%edx
- 646:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 649:	39 f1                	cmp    %esi,%ecx
- 64b:	74 3a                	je     687 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 64d:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 64f:	5b                   	pop    %ebx
-  freep = p;
- 650:	a3 e0 0a 00 00       	mov    %eax,0xae0
-}
- 655:	5e                   	pop    %esi
- 656:	5f                   	pop    %edi
- 657:	5d                   	pop    %ebp
- 658:	c3                   	ret
- 659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 660:	39 d0                	cmp    %edx,%eax
- 662:	72 04                	jb     668 <free+0x58>
- 664:	39 d1                	cmp    %edx,%ecx
- 666:	72 ce                	jb     636 <free+0x26>
-{
- 668:	89 d0                	mov    %edx,%eax
- 66a:	eb bc                	jmp    628 <free+0x18>
- 66c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 670:	03 72 04             	add    0x4(%edx),%esi
- 673:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 676:	8b 10                	mov    (%eax),%edx
- 678:	8b 12                	mov    (%edx),%edx
- 67a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 67d:	8b 50 04             	mov    0x4(%eax),%edx
- 680:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 683:	39 f1                	cmp    %esi,%ecx
- 685:	75 c6                	jne    64d <free+0x3d>
-    p->s.size += bp->s.size;
- 687:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 68a:	a3 e0 0a 00 00       	mov    %eax,0xae0
-    p->s.size += bp->s.size;
- 68f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 692:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 695:	89 08                	mov    %ecx,(%eax)
-}
- 697:	5b                   	pop    %ebx
- 698:	5e                   	pop    %esi
- 699:	5f                   	pop    %edi
- 69a:	5d                   	pop    %ebp
- 69b:	c3                   	ret
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006a0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6a0:	55                   	push   %ebp
- 6a1:	89 e5                	mov    %esp,%ebp
- 6a3:	57                   	push   %edi
- 6a4:	56                   	push   %esi
- 6a5:	53                   	push   %ebx
- 6a6:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6a9:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6ac:	8b 15 e0 0a 00 00    	mov    0xae0,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6b2:	8d 78 07             	lea    0x7(%eax),%edi
- 6b5:	c1 ef 03             	shr    $0x3,%edi
- 6b8:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 6bb:	85 d2                	test   %edx,%edx
- 6bd:	0f 84 8d 00 00 00    	je     750 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6c3:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 6c5:	8b 48 04             	mov    0x4(%eax),%ecx
- 6c8:	39 f9                	cmp    %edi,%ecx
- 6ca:	73 64                	jae    730 <malloc+0x90>
-  if(nu < 4096)
- 6cc:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 6d1:	39 df                	cmp    %ebx,%edi
- 6d3:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 6d6:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 6dd:	eb 0a                	jmp    6e9 <malloc+0x49>
- 6df:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6e0:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 6e2:	8b 48 04             	mov    0x4(%eax),%ecx
- 6e5:	39 f9                	cmp    %edi,%ecx
- 6e7:	73 47                	jae    730 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 6e9:	89 c2                	mov    %eax,%edx
- 6eb:	3b 05 e0 0a 00 00    	cmp    0xae0,%eax
- 6f1:	75 ed                	jne    6e0 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 6f3:	83 ec 0c             	sub    $0xc,%esp
- 6f6:	56                   	push   %esi
- 6f7:	e8 bf fc ff ff       	call   3bb <sbrk>
-  if(p == (char*)-1)
- 6fc:	83 c4 10             	add    $0x10,%esp
- 6ff:	83 f8 ff             	cmp    $0xffffffff,%eax
- 702:	74 1c                	je     720 <malloc+0x80>
-  hp->s.size = nu;
- 704:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 707:	83 ec 0c             	sub    $0xc,%esp
- 70a:	83 c0 08             	add    $0x8,%eax
- 70d:	50                   	push   %eax
- 70e:	e8 fd fe ff ff       	call   610 <free>
-  return freep;
- 713:	8b 15 e0 0a 00 00    	mov    0xae0,%edx
-      if((p = morecore(nunits)) == 0)
- 719:	83 c4 10             	add    $0x10,%esp
- 71c:	85 d2                	test   %edx,%edx
- 71e:	75 c0                	jne    6e0 <malloc+0x40>
-        return 0;
-  }
-}
- 720:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 723:	31 c0                	xor    %eax,%eax
-}
- 725:	5b                   	pop    %ebx
- 726:	5e                   	pop    %esi
- 727:	5f                   	pop    %edi
- 728:	5d                   	pop    %ebp
- 729:	c3                   	ret
- 72a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 730:	39 cf                	cmp    %ecx,%edi
- 732:	74 4c                	je     780 <malloc+0xe0>
-        p->s.size -= nunits;
- 734:	29 f9                	sub    %edi,%ecx
- 736:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 739:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 73c:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 73f:	89 15 e0 0a 00 00    	mov    %edx,0xae0
-}
- 745:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 748:	83 c0 08             	add    $0x8,%eax
-}
- 74b:	5b                   	pop    %ebx
- 74c:	5e                   	pop    %esi
- 74d:	5f                   	pop    %edi
- 74e:	5d                   	pop    %ebp
- 74f:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 750:	c7 05 e0 0a 00 00 e4 	movl   $0xae4,0xae0
- 757:	0a 00 00 
-    base.s.size = 0;
- 75a:	b8 e4 0a 00 00       	mov    $0xae4,%eax
-    base.s.ptr = freep = prevp = &base;
- 75f:	c7 05 e4 0a 00 00 e4 	movl   $0xae4,0xae4
- 766:	0a 00 00 
-    base.s.size = 0;
- 769:	c7 05 e8 0a 00 00 00 	movl   $0x0,0xae8
- 770:	00 00 00 
-    if(p->s.size >= nunits){
- 773:	e9 54 ff ff ff       	jmp    6cc <malloc+0x2c>
- 778:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 77f:	00 
-        prevp->s.ptr = p->s.ptr;
- 780:	8b 08                	mov    (%eax),%ecx
- 782:	89 0a                	mov    %ecx,(%edx)
- 784:	eb b9                	jmp    73f <malloc+0x9f>
diff --git a/init.d b/init.d
deleted file mode 100644
index ee304c8..0000000
--- a/init.d
+++ /dev/null
@@ -1 +0,0 @@
-init.o: init.c /usr/include/stdc-predef.h types.h stat.h user.h fcntl.h
diff --git a/init.o b/init.o
deleted file mode 100644
index e5f1f72..0000000
Binary files a/init.o and /dev/null differ
diff --git a/init.sym b/init.sym
deleted file mode 100644
index fa0a7a0..0000000
--- a/init.sym
+++ /dev/null
@@ -1,46 +0,0 @@
-00000000 init.c
-00000000 ulib.c
-00000000 printf.c
-000003e0 printint
-00000838 digits.0
-00000000 umalloc.c
-00000ae0 freep
-00000ae4 base
-000000f0 strcpy
-00000480 printf
-00000ad8 argv
-00000300 memmove
-0000037b mknod
-00000210 gets
-000003b3 getpid
-000006a0 malloc
-000003c3 sleep
-00000343 pipe
-00000353 write
-0000038b fstat
-00000363 kill
-000003a3 chdir
-0000036b exec
-0000033b wait
-0000034b read
-00000383 unlink
-0000032b fork
-000003bb sbrk
-000003cb uptime
-00000ae0 __bss_start
-000001b0 memset
-00000000 main
-00000120 strcmp
-000003ab dup
-00000270 stat
-00000ae0 _edata
-00000aec _end
-00000393 link
-00000333 exit
-000002c0 atoi
-00000180 strlen
-00000373 open
-000001d0 strchr
-0000039b mkdir
-0000035b close
-00000610 free
diff --git a/initcode b/initcode
deleted file mode 100755
index 773d26c..0000000
Binary files a/initcode and /dev/null differ
diff --git a/initcode.asm b/initcode.asm
deleted file mode 100644
index 788a27d..0000000
--- a/initcode.asm
+++ /dev/null
@@ -1,43 +0,0 @@
-
-initcode.o:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <start>:
-
-
-# exec(init, argv)
-.globl start
-start:
-  pushl $argv
-   0:	68 24 00 00 00       	push   $0x24
-  pushl $init
-   5:	68 1c 00 00 00       	push   $0x1c
-  pushl $0  // where caller pc would be
-   a:	6a 00                	push   $0x0
-  movl $SYS_exec, %eax
-   c:	b8 07 00 00 00       	mov    $0x7,%eax
-  int $T_SYSCALL
-  11:	cd 40                	int    $0x40
-
-00000013 <exit>:
-
-# for(;;) exit();
-exit:
-  movl $SYS_exit, %eax
-  13:	b8 02 00 00 00       	mov    $0x2,%eax
-  int $T_SYSCALL
-  18:	cd 40                	int    $0x40
-  jmp exit
-  1a:	eb f7                	jmp    13 <exit>
-
-0000001c <init>:
-  1c:	2f                   	das
-  1d:	69 6e 69 74 00 00 90 	imul   $0x90000074,0x69(%esi),%ebp
-
-00000024 <argv>:
-  24:	1c 00                	sbb    $0x0,%al
-  26:	00 00                	add    %al,(%eax)
-  28:	00 00                	add    %al,(%eax)
-	...
diff --git a/initcode.d b/initcode.d
deleted file mode 100644
index ab1af4d..0000000
--- a/initcode.d
+++ /dev/null
@@ -1 +0,0 @@
-initcode.o: initcode.S syscall.h traps.h
diff --git a/initcode.o b/initcode.o
deleted file mode 100644
index ec1bb29..0000000
Binary files a/initcode.o and /dev/null differ
diff --git a/initcode.out b/initcode.out
deleted file mode 100755
index a4cee7d..0000000
Binary files a/initcode.out and /dev/null differ
diff --git a/ioapic.d b/ioapic.d
deleted file mode 100644
index 997e68a..0000000
--- a/ioapic.d
+++ /dev/null
@@ -1 +0,0 @@
-ioapic.o: ioapic.c /usr/include/stdc-predef.h types.h defs.h traps.h
diff --git a/ioapic.o b/ioapic.o
deleted file mode 100644
index 38c08ec..0000000
Binary files a/ioapic.o and /dev/null differ
diff --git a/kalloc.c b/kalloc.c
index 14cd4f4..822dd00 100644
--- a/kalloc.c
+++ b/kalloc.c
@@ -94,3 +94,28 @@ kalloc(void)
   return (char*)r;
 }
 
+// int get_free_pages(void)
+// {
+  
+//     int temp=0;
+//     struct run* r;
+//     acquire(&kmem.lock);
+//     for(r=kmem.freelist;r;r=r->next) temp++;
+//     release(&kmem.lock);
+//     return temp;
+// }
+
+int get_free_pages(void)
+{
+    int temp=0;
+    struct run* r;
+
+    acquire(&kmem.lock);
+    r=kmem.freelist;
+    while(r)
+    {
+      temp++;r=r->next;
+    }
+    release(&kmem.lock);
+    return temp;
+}
diff --git a/kalloc.d b/kalloc.d
deleted file mode 100644
index 512c5db..0000000
--- a/kalloc.d
+++ /dev/null
@@ -1,2 +0,0 @@
-kalloc.o: kalloc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h spinlock.h
diff --git a/kalloc.o b/kalloc.o
deleted file mode 100644
index 2404864..0000000
Binary files a/kalloc.o and /dev/null differ
diff --git a/kbd.d b/kbd.d
deleted file mode 100644
index 92532ba..0000000
--- a/kbd.d
+++ /dev/null
@@ -1 +0,0 @@
-kbd.o: kbd.c /usr/include/stdc-predef.h types.h x86.h defs.h kbd.h
diff --git a/kbd.o b/kbd.o
deleted file mode 100644
index 4b41354..0000000
Binary files a/kbd.o and /dev/null differ
diff --git a/kernel b/kernel
deleted file mode 100755
index db7fe82..0000000
Binary files a/kernel and /dev/null differ
diff --git a/kernel.asm b/kernel.asm
deleted file mode 100644
index 74930da..0000000
--- a/kernel.asm
+++ /dev/null
@@ -1,15784 +0,0 @@
-
-kernel:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-80100000 <multiboot_header>:
-80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%eax),%dh
-80100006:	00 00                	add    %al,(%eax)
-80100008:	fe 4f 52             	decb   0x52(%edi)
-8010000b:	e4                   	.byte 0xe4
-
-8010000c <entry>:
-
-# Entering xv6 on boot processor, with paging off.
-.globl entry
-entry:
-  # Turn on page size extension for 4Mbyte pages
-  movl    %cr4, %eax
-8010000c:	0f 20 e0             	mov    %cr4,%eax
-  orl     $(CR4_PSE), %eax
-8010000f:	83 c8 10             	or     $0x10,%eax
-  movl    %eax, %cr4
-80100012:	0f 22 e0             	mov    %eax,%cr4
-  # Set page directory
-  movl    $(V2P_WO(entrypgdir)), %eax
-80100015:	b8 00 90 10 00       	mov    $0x109000,%eax
-  movl    %eax, %cr3
-8010001a:	0f 22 d8             	mov    %eax,%cr3
-  # Turn on paging.
-  movl    %cr0, %eax
-8010001d:	0f 20 c0             	mov    %cr0,%eax
-  orl     $(CR0_PG|CR0_WP), %eax
-80100020:	0d 00 00 01 80       	or     $0x80010000,%eax
-  movl    %eax, %cr0
-80100025:	0f 22 c0             	mov    %eax,%cr0
-
-  # Set up the stack pointer.
-  movl $(stack + KSTACKSIZE), %esp
-80100028:	bc f0 54 11 80       	mov    $0x801154f0,%esp
-
-  # Jump to main(), and switch to executing at
-  # high addresses. The indirect call is needed because
-  # the assembler produces a PC-relative instruction
-  # for a direct jump.
-  mov $main, %eax
-8010002d:	b8 a0 30 10 80       	mov    $0x801030a0,%eax
-  jmp *%eax
-80100032:	ff e0                	jmp    *%eax
-80100034:	66 90                	xchg   %ax,%ax
-80100036:	66 90                	xchg   %ax,%ax
-80100038:	66 90                	xchg   %ax,%ax
-8010003a:	66 90                	xchg   %ax,%ax
-8010003c:	66 90                	xchg   %ax,%ax
-8010003e:	66 90                	xchg   %ax,%ax
-
-80100040 <binit>:
-  struct buf head;
-} bcache;
-
-void
-binit(void)
-{
-80100040:	55                   	push   %ebp
-80100041:	89 e5                	mov    %esp,%ebp
-80100043:	53                   	push   %ebx
-
-//PAGEBREAK!
-  // Create linked list of buffers
-  bcache.head.prev = &bcache.head;
-  bcache.head.next = &bcache.head;
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100044:	bb 54 a5 10 80       	mov    $0x8010a554,%ebx
-{
-80100049:	83 ec 0c             	sub    $0xc,%esp
-  initlock(&bcache.lock, "bcache");
-8010004c:	68 40 72 10 80       	push   $0x80107240
-80100051:	68 20 a5 10 80       	push   $0x8010a520
-80100056:	e8 35 44 00 00       	call   80104490 <initlock>
-  bcache.head.next = &bcache.head;
-8010005b:	83 c4 10             	add    $0x10,%esp
-8010005e:	b8 1c ec 10 80       	mov    $0x8010ec1c,%eax
-  bcache.head.prev = &bcache.head;
-80100063:	c7 05 6c ec 10 80 1c 	movl   $0x8010ec1c,0x8010ec6c
-8010006a:	ec 10 80 
-  bcache.head.next = &bcache.head;
-8010006d:	c7 05 70 ec 10 80 1c 	movl   $0x8010ec1c,0x8010ec70
-80100074:	ec 10 80 
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-80100077:	eb 09                	jmp    80100082 <binit+0x42>
-80100079:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100080:	89 d3                	mov    %edx,%ebx
-    b->next = bcache.head.next;
-80100082:	89 43 54             	mov    %eax,0x54(%ebx)
-    b->prev = &bcache.head;
-    initsleeplock(&b->lock, "buffer");
-80100085:	83 ec 08             	sub    $0x8,%esp
-80100088:	8d 43 0c             	lea    0xc(%ebx),%eax
-    b->prev = &bcache.head;
-8010008b:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
-    initsleeplock(&b->lock, "buffer");
-80100092:	68 47 72 10 80       	push   $0x80107247
-80100097:	50                   	push   %eax
-80100098:	e8 c3 42 00 00       	call   80104360 <initsleeplock>
-    bcache.head.next->prev = b;
-8010009d:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000a2:	8d 93 5c 02 00 00    	lea    0x25c(%ebx),%edx
-801000a8:	83 c4 10             	add    $0x10,%esp
-    bcache.head.next->prev = b;
-801000ab:	89 58 50             	mov    %ebx,0x50(%eax)
-    bcache.head.next = b;
-801000ae:	89 d8                	mov    %ebx,%eax
-801000b0:	89 1d 70 ec 10 80    	mov    %ebx,0x8010ec70
-  for(b = bcache.buf; b < bcache.buf+NBUF; b++){
-801000b6:	81 fb c0 e9 10 80    	cmp    $0x8010e9c0,%ebx
-801000bc:	75 c2                	jne    80100080 <binit+0x40>
-  }
-}
-801000be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801000c1:	c9                   	leave
-801000c2:	c3                   	ret
-801000c3:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801000ca:	00 
-801000cb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-801000d0 <bread>:
-}
-
-// Return a locked buf with the contents of the indicated block.
-struct buf*
-bread(uint dev, uint blockno)
-{
-801000d0:	55                   	push   %ebp
-801000d1:	89 e5                	mov    %esp,%ebp
-801000d3:	57                   	push   %edi
-801000d4:	56                   	push   %esi
-801000d5:	53                   	push   %ebx
-801000d6:	83 ec 18             	sub    $0x18,%esp
-801000d9:	8b 75 08             	mov    0x8(%ebp),%esi
-801000dc:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  acquire(&bcache.lock);
-801000df:	68 20 a5 10 80       	push   $0x8010a520
-801000e4:	e8 97 45 00 00       	call   80104680 <acquire>
-  for(b = bcache.head.next; b != &bcache.head; b = b->next){
-801000e9:	8b 1d 70 ec 10 80    	mov    0x8010ec70,%ebx
-801000ef:	83 c4 10             	add    $0x10,%esp
-801000f2:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
-801000f8:	75 11                	jne    8010010b <bread+0x3b>
-801000fa:	eb 24                	jmp    80100120 <bread+0x50>
-801000fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80100100:	8b 5b 54             	mov    0x54(%ebx),%ebx
-80100103:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
-80100109:	74 15                	je     80100120 <bread+0x50>
-    if(b->dev == dev && b->blockno == blockno){
-8010010b:	3b 73 04             	cmp    0x4(%ebx),%esi
-8010010e:	75 f0                	jne    80100100 <bread+0x30>
-80100110:	3b 7b 08             	cmp    0x8(%ebx),%edi
-80100113:	75 eb                	jne    80100100 <bread+0x30>
-      b->refcnt++;
-80100115:	83 43 4c 01          	addl   $0x1,0x4c(%ebx)
-      release(&bcache.lock);
-80100119:	eb 3f                	jmp    8010015a <bread+0x8a>
-8010011b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  for(b = bcache.head.prev; b != &bcache.head; b = b->prev){
-80100120:	8b 1d 6c ec 10 80    	mov    0x8010ec6c,%ebx
-80100126:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
-8010012c:	75 0d                	jne    8010013b <bread+0x6b>
-8010012e:	eb 6e                	jmp    8010019e <bread+0xce>
-80100130:	8b 5b 50             	mov    0x50(%ebx),%ebx
-80100133:	81 fb 1c ec 10 80    	cmp    $0x8010ec1c,%ebx
-80100139:	74 63                	je     8010019e <bread+0xce>
-    if(b->refcnt == 0 && (b->flags & B_DIRTY) == 0) {
-8010013b:	8b 43 4c             	mov    0x4c(%ebx),%eax
-8010013e:	85 c0                	test   %eax,%eax
-80100140:	75 ee                	jne    80100130 <bread+0x60>
-80100142:	f6 03 04             	testb  $0x4,(%ebx)
-80100145:	75 e9                	jne    80100130 <bread+0x60>
-      b->dev = dev;
-80100147:	89 73 04             	mov    %esi,0x4(%ebx)
-      b->blockno = blockno;
-8010014a:	89 7b 08             	mov    %edi,0x8(%ebx)
-      b->flags = 0;
-8010014d:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-      b->refcnt = 1;
-80100153:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
-      release(&bcache.lock);
-8010015a:	83 ec 0c             	sub    $0xc,%esp
-8010015d:	68 20 a5 10 80       	push   $0x8010a520
-80100162:	e8 b9 44 00 00       	call   80104620 <release>
-      acquiresleep(&b->lock);
-80100167:	8d 43 0c             	lea    0xc(%ebx),%eax
-8010016a:	89 04 24             	mov    %eax,(%esp)
-8010016d:	e8 2e 42 00 00       	call   801043a0 <acquiresleep>
-      return b;
-80100172:	83 c4 10             	add    $0x10,%esp
-  struct buf *b;
-
-  b = bget(dev, blockno);
-  if((b->flags & B_VALID) == 0) {
-80100175:	f6 03 02             	testb  $0x2,(%ebx)
-80100178:	74 0e                	je     80100188 <bread+0xb8>
-    iderw(b);
-  }
-  return b;
-}
-8010017a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010017d:	89 d8                	mov    %ebx,%eax
-8010017f:	5b                   	pop    %ebx
-80100180:	5e                   	pop    %esi
-80100181:	5f                   	pop    %edi
-80100182:	5d                   	pop    %ebp
-80100183:	c3                   	ret
-80100184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    iderw(b);
-80100188:	83 ec 0c             	sub    $0xc,%esp
-8010018b:	53                   	push   %ebx
-8010018c:	e8 af 21 00 00       	call   80102340 <iderw>
-80100191:	83 c4 10             	add    $0x10,%esp
-}
-80100194:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100197:	89 d8                	mov    %ebx,%eax
-80100199:	5b                   	pop    %ebx
-8010019a:	5e                   	pop    %esi
-8010019b:	5f                   	pop    %edi
-8010019c:	5d                   	pop    %ebp
-8010019d:	c3                   	ret
-  panic("bget: no buffers");
-8010019e:	83 ec 0c             	sub    $0xc,%esp
-801001a1:	68 4e 72 10 80       	push   $0x8010724e
-801001a6:	e8 d5 01 00 00       	call   80100380 <panic>
-801001ab:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-801001b0 <bwrite>:
-
-// Write b's contents to disk.  Must be locked.
-void
-bwrite(struct buf *b)
-{
-801001b0:	55                   	push   %ebp
-801001b1:	89 e5                	mov    %esp,%ebp
-801001b3:	53                   	push   %ebx
-801001b4:	83 ec 10             	sub    $0x10,%esp
-801001b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(!holdingsleep(&b->lock))
-801001ba:	8d 43 0c             	lea    0xc(%ebx),%eax
-801001bd:	50                   	push   %eax
-801001be:	e8 7d 42 00 00       	call   80104440 <holdingsleep>
-801001c3:	83 c4 10             	add    $0x10,%esp
-801001c6:	85 c0                	test   %eax,%eax
-801001c8:	74 0f                	je     801001d9 <bwrite+0x29>
-    panic("bwrite");
-  b->flags |= B_DIRTY;
-801001ca:	83 0b 04             	orl    $0x4,(%ebx)
-  iderw(b);
-801001cd:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-801001d0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801001d3:	c9                   	leave
-  iderw(b);
-801001d4:	e9 67 21 00 00       	jmp    80102340 <iderw>
-    panic("bwrite");
-801001d9:	83 ec 0c             	sub    $0xc,%esp
-801001dc:	68 5f 72 10 80       	push   $0x8010725f
-801001e1:	e8 9a 01 00 00       	call   80100380 <panic>
-801001e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801001ed:	00 
-801001ee:	66 90                	xchg   %ax,%ax
-
-801001f0 <brelse>:
-
-// Release a locked buffer.
-// Move to the head of the MRU list.
-void
-brelse(struct buf *b)
-{
-801001f0:	55                   	push   %ebp
-801001f1:	89 e5                	mov    %esp,%ebp
-801001f3:	56                   	push   %esi
-801001f4:	53                   	push   %ebx
-801001f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(!holdingsleep(&b->lock))
-801001f8:	8d 73 0c             	lea    0xc(%ebx),%esi
-801001fb:	83 ec 0c             	sub    $0xc,%esp
-801001fe:	56                   	push   %esi
-801001ff:	e8 3c 42 00 00       	call   80104440 <holdingsleep>
-80100204:	83 c4 10             	add    $0x10,%esp
-80100207:	85 c0                	test   %eax,%eax
-80100209:	74 63                	je     8010026e <brelse+0x7e>
-    panic("brelse");
-
-  releasesleep(&b->lock);
-8010020b:	83 ec 0c             	sub    $0xc,%esp
-8010020e:	56                   	push   %esi
-8010020f:	e8 ec 41 00 00       	call   80104400 <releasesleep>
-
-  acquire(&bcache.lock);
-80100214:	c7 04 24 20 a5 10 80 	movl   $0x8010a520,(%esp)
-8010021b:	e8 60 44 00 00       	call   80104680 <acquire>
-  b->refcnt--;
-80100220:	8b 43 4c             	mov    0x4c(%ebx),%eax
-  if (b->refcnt == 0) {
-80100223:	83 c4 10             	add    $0x10,%esp
-  b->refcnt--;
-80100226:	83 e8 01             	sub    $0x1,%eax
-80100229:	89 43 4c             	mov    %eax,0x4c(%ebx)
-  if (b->refcnt == 0) {
-8010022c:	85 c0                	test   %eax,%eax
-8010022e:	75 2c                	jne    8010025c <brelse+0x6c>
-    // no one is waiting for it.
-    b->next->prev = b->prev;
-80100230:	8b 53 54             	mov    0x54(%ebx),%edx
-80100233:	8b 43 50             	mov    0x50(%ebx),%eax
-80100236:	89 42 50             	mov    %eax,0x50(%edx)
-    b->prev->next = b->next;
-80100239:	8b 53 54             	mov    0x54(%ebx),%edx
-8010023c:	89 50 54             	mov    %edx,0x54(%eax)
-    b->next = bcache.head.next;
-8010023f:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
-    b->prev = &bcache.head;
-80100244:	c7 43 50 1c ec 10 80 	movl   $0x8010ec1c,0x50(%ebx)
-    b->next = bcache.head.next;
-8010024b:	89 43 54             	mov    %eax,0x54(%ebx)
-    bcache.head.next->prev = b;
-8010024e:	a1 70 ec 10 80       	mov    0x8010ec70,%eax
-80100253:	89 58 50             	mov    %ebx,0x50(%eax)
-    bcache.head.next = b;
-80100256:	89 1d 70 ec 10 80    	mov    %ebx,0x8010ec70
-  }
-  
-  release(&bcache.lock);
-8010025c:	c7 45 08 20 a5 10 80 	movl   $0x8010a520,0x8(%ebp)
-}
-80100263:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80100266:	5b                   	pop    %ebx
-80100267:	5e                   	pop    %esi
-80100268:	5d                   	pop    %ebp
-  release(&bcache.lock);
-80100269:	e9 b2 43 00 00       	jmp    80104620 <release>
-    panic("brelse");
-8010026e:	83 ec 0c             	sub    $0xc,%esp
-80100271:	68 66 72 10 80       	push   $0x80107266
-80100276:	e8 05 01 00 00       	call   80100380 <panic>
-8010027b:	66 90                	xchg   %ax,%ax
-8010027d:	66 90                	xchg   %ax,%ax
-8010027f:	90                   	nop
-
-80100280 <consoleread>:
-  }
-}
-
-int
-consoleread(struct inode *ip, char *dst, int n)
-{
-80100280:	55                   	push   %ebp
-80100281:	89 e5                	mov    %esp,%ebp
-80100283:	57                   	push   %edi
-80100284:	56                   	push   %esi
-80100285:	53                   	push   %ebx
-80100286:	83 ec 18             	sub    $0x18,%esp
-80100289:	8b 5d 10             	mov    0x10(%ebp),%ebx
-8010028c:	8b 75 0c             	mov    0xc(%ebp),%esi
-  uint target;
-  int c;
-
-  iunlock(ip);
-8010028f:	ff 75 08             	push   0x8(%ebp)
-  target = n;
-80100292:	89 df                	mov    %ebx,%edi
-  iunlock(ip);
-80100294:	e8 57 16 00 00       	call   801018f0 <iunlock>
-  acquire(&cons.lock);
-80100299:	c7 04 24 40 ef 10 80 	movl   $0x8010ef40,(%esp)
-801002a0:	e8 db 43 00 00       	call   80104680 <acquire>
-  while(n > 0){
-801002a5:	83 c4 10             	add    $0x10,%esp
-801002a8:	85 db                	test   %ebx,%ebx
-801002aa:	0f 8e 94 00 00 00    	jle    80100344 <consoleread+0xc4>
-    while(input.r == input.w){
-801002b0:	a1 20 ef 10 80       	mov    0x8010ef20,%eax
-801002b5:	39 05 24 ef 10 80    	cmp    %eax,0x8010ef24
-801002bb:	74 25                	je     801002e2 <consoleread+0x62>
-801002bd:	eb 59                	jmp    80100318 <consoleread+0x98>
-801002bf:	90                   	nop
-      if(myproc()->killed){
-        release(&cons.lock);
-        ilock(ip);
-        return -1;
-      }
-      sleep(&input.r, &cons.lock);
-801002c0:	83 ec 08             	sub    $0x8,%esp
-801002c3:	68 40 ef 10 80       	push   $0x8010ef40
-801002c8:	68 20 ef 10 80       	push   $0x8010ef20
-801002cd:	e8 2e 3e 00 00       	call   80104100 <sleep>
-    while(input.r == input.w){
-801002d2:	a1 20 ef 10 80       	mov    0x8010ef20,%eax
-801002d7:	83 c4 10             	add    $0x10,%esp
-801002da:	3b 05 24 ef 10 80    	cmp    0x8010ef24,%eax
-801002e0:	75 36                	jne    80100318 <consoleread+0x98>
-      if(myproc()->killed){
-801002e2:	e8 59 37 00 00       	call   80103a40 <myproc>
-801002e7:	8b 48 24             	mov    0x24(%eax),%ecx
-801002ea:	85 c9                	test   %ecx,%ecx
-801002ec:	74 d2                	je     801002c0 <consoleread+0x40>
-        release(&cons.lock);
-801002ee:	83 ec 0c             	sub    $0xc,%esp
-801002f1:	68 40 ef 10 80       	push   $0x8010ef40
-801002f6:	e8 25 43 00 00       	call   80104620 <release>
-        ilock(ip);
-801002fb:	5a                   	pop    %edx
-801002fc:	ff 75 08             	push   0x8(%ebp)
-801002ff:	e8 0c 15 00 00       	call   80101810 <ilock>
-        return -1;
-80100304:	83 c4 10             	add    $0x10,%esp
-  }
-  release(&cons.lock);
-  ilock(ip);
-
-  return target - n;
-}
-80100307:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return -1;
-8010030a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-8010030f:	5b                   	pop    %ebx
-80100310:	5e                   	pop    %esi
-80100311:	5f                   	pop    %edi
-80100312:	5d                   	pop    %ebp
-80100313:	c3                   	ret
-80100314:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    c = input.buf[input.r++ % INPUT_BUF];
-80100318:	8d 50 01             	lea    0x1(%eax),%edx
-8010031b:	89 15 20 ef 10 80    	mov    %edx,0x8010ef20
-80100321:	89 c2                	mov    %eax,%edx
-80100323:	83 e2 7f             	and    $0x7f,%edx
-80100326:	0f be 8a a0 ee 10 80 	movsbl -0x7fef1160(%edx),%ecx
-    if(c == C('D')){  // EOF
-8010032d:	80 f9 04             	cmp    $0x4,%cl
-80100330:	74 37                	je     80100369 <consoleread+0xe9>
-    *dst++ = c;
-80100332:	83 c6 01             	add    $0x1,%esi
-    --n;
-80100335:	83 eb 01             	sub    $0x1,%ebx
-    *dst++ = c;
-80100338:	88 4e ff             	mov    %cl,-0x1(%esi)
-    if(c == '\n')
-8010033b:	83 f9 0a             	cmp    $0xa,%ecx
-8010033e:	0f 85 64 ff ff ff    	jne    801002a8 <consoleread+0x28>
-  release(&cons.lock);
-80100344:	83 ec 0c             	sub    $0xc,%esp
-80100347:	68 40 ef 10 80       	push   $0x8010ef40
-8010034c:	e8 cf 42 00 00       	call   80104620 <release>
-  ilock(ip);
-80100351:	58                   	pop    %eax
-80100352:	ff 75 08             	push   0x8(%ebp)
-80100355:	e8 b6 14 00 00       	call   80101810 <ilock>
-  return target - n;
-8010035a:	89 f8                	mov    %edi,%eax
-8010035c:	83 c4 10             	add    $0x10,%esp
-}
-8010035f:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return target - n;
-80100362:	29 d8                	sub    %ebx,%eax
-}
-80100364:	5b                   	pop    %ebx
-80100365:	5e                   	pop    %esi
-80100366:	5f                   	pop    %edi
-80100367:	5d                   	pop    %ebp
-80100368:	c3                   	ret
-      if(n < target){
-80100369:	39 fb                	cmp    %edi,%ebx
-8010036b:	73 d7                	jae    80100344 <consoleread+0xc4>
-        input.r--;
-8010036d:	a3 20 ef 10 80       	mov    %eax,0x8010ef20
-80100372:	eb d0                	jmp    80100344 <consoleread+0xc4>
-80100374:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010037b:	00 
-8010037c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80100380 <panic>:
-{
-80100380:	55                   	push   %ebp
-80100381:	89 e5                	mov    %esp,%ebp
-80100383:	56                   	push   %esi
-80100384:	53                   	push   %ebx
-80100385:	83 ec 30             	sub    $0x30,%esp
-}
-
-static inline void
-cli(void)
-{
-  asm volatile("cli");
-80100388:	fa                   	cli
-  cons.locking = 0;
-80100389:	c7 05 74 ef 10 80 00 	movl   $0x0,0x8010ef74
-80100390:	00 00 00 
-  getcallerpcs(&s, pcs);
-80100393:	8d 5d d0             	lea    -0x30(%ebp),%ebx
-80100396:	8d 75 f8             	lea    -0x8(%ebp),%esi
-  cprintf("lapicid %d: panic: ", lapicid());
-80100399:	e8 a2 25 00 00       	call   80102940 <lapicid>
-8010039e:	83 ec 08             	sub    $0x8,%esp
-801003a1:	50                   	push   %eax
-801003a2:	68 6d 72 10 80       	push   $0x8010726d
-801003a7:	e8 04 03 00 00       	call   801006b0 <cprintf>
-  cprintf(s);
-801003ac:	58                   	pop    %eax
-801003ad:	ff 75 08             	push   0x8(%ebp)
-801003b0:	e8 fb 02 00 00       	call   801006b0 <cprintf>
-  cprintf("\n");
-801003b5:	c7 04 24 38 77 10 80 	movl   $0x80107738,(%esp)
-801003bc:	e8 ef 02 00 00       	call   801006b0 <cprintf>
-  getcallerpcs(&s, pcs);
-801003c1:	8d 45 08             	lea    0x8(%ebp),%eax
-801003c4:	5a                   	pop    %edx
-801003c5:	59                   	pop    %ecx
-801003c6:	53                   	push   %ebx
-801003c7:	50                   	push   %eax
-801003c8:	e8 e3 40 00 00       	call   801044b0 <getcallerpcs>
-  for(i=0; i<10; i++)
-801003cd:	83 c4 10             	add    $0x10,%esp
-    cprintf(" %p", pcs[i]);
-801003d0:	83 ec 08             	sub    $0x8,%esp
-801003d3:	ff 33                	push   (%ebx)
-  for(i=0; i<10; i++)
-801003d5:	83 c3 04             	add    $0x4,%ebx
-    cprintf(" %p", pcs[i]);
-801003d8:	68 81 72 10 80       	push   $0x80107281
-801003dd:	e8 ce 02 00 00       	call   801006b0 <cprintf>
-  for(i=0; i<10; i++)
-801003e2:	83 c4 10             	add    $0x10,%esp
-801003e5:	39 f3                	cmp    %esi,%ebx
-801003e7:	75 e7                	jne    801003d0 <panic+0x50>
-  panicked = 1; // freeze other CPU
-801003e9:	c7 05 78 ef 10 80 01 	movl   $0x1,0x8010ef78
-801003f0:	00 00 00 
-  for(;;)
-801003f3:	eb fe                	jmp    801003f3 <panic+0x73>
-801003f5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801003fc:	00 
-801003fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-80100400 <consputc.part.0>:
-consputc(int c)
-80100400:	55                   	push   %ebp
-80100401:	89 e5                	mov    %esp,%ebp
-80100403:	57                   	push   %edi
-80100404:	56                   	push   %esi
-80100405:	53                   	push   %ebx
-80100406:	83 ec 1c             	sub    $0x1c,%esp
-  if(c == BACKSPACE){
-80100409:	3d 00 01 00 00       	cmp    $0x100,%eax
-8010040e:	0f 84 cc 00 00 00    	je     801004e0 <consputc.part.0+0xe0>
-    uartputc(c);
-80100414:	83 ec 0c             	sub    $0xc,%esp
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80100417:	bf d4 03 00 00       	mov    $0x3d4,%edi
-8010041c:	89 c3                	mov    %eax,%ebx
-8010041e:	50                   	push   %eax
-8010041f:	e8 6c 59 00 00       	call   80105d90 <uartputc>
-80100424:	b8 0e 00 00 00       	mov    $0xe,%eax
-80100429:	89 fa                	mov    %edi,%edx
-8010042b:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010042c:	be d5 03 00 00       	mov    $0x3d5,%esi
-80100431:	89 f2                	mov    %esi,%edx
-80100433:	ec                   	in     (%dx),%al
-  pos = inb(CRTPORT+1) << 8;
-80100434:	0f b6 c8             	movzbl %al,%ecx
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80100437:	89 fa                	mov    %edi,%edx
-80100439:	b8 0f 00 00 00       	mov    $0xf,%eax
-8010043e:	c1 e1 08             	shl    $0x8,%ecx
-80100441:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80100442:	89 f2                	mov    %esi,%edx
-80100444:	ec                   	in     (%dx),%al
-  pos |= inb(CRTPORT+1);
-80100445:	0f b6 c0             	movzbl %al,%eax
-  if(c == '\n')
-80100448:	83 c4 10             	add    $0x10,%esp
-  pos |= inb(CRTPORT+1);
-8010044b:	09 c8                	or     %ecx,%eax
-  if(c == '\n')
-8010044d:	83 fb 0a             	cmp    $0xa,%ebx
-80100450:	75 76                	jne    801004c8 <consputc.part.0+0xc8>
-    pos += 80 - pos%80;
-80100452:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
-80100457:	f7 e2                	mul    %edx
-80100459:	c1 ea 06             	shr    $0x6,%edx
-8010045c:	8d 04 92             	lea    (%edx,%edx,4),%eax
-8010045f:	c1 e0 04             	shl    $0x4,%eax
-80100462:	8d 70 50             	lea    0x50(%eax),%esi
-  if(pos < 0 || pos > 25*80)
-80100465:	81 fe d0 07 00 00    	cmp    $0x7d0,%esi
-8010046b:	0f 8f 2f 01 00 00    	jg     801005a0 <consputc.part.0+0x1a0>
-  if((pos/80) >= 24){  // Scroll up.
-80100471:	81 fe 7f 07 00 00    	cmp    $0x77f,%esi
-80100477:	0f 8f c3 00 00 00    	jg     80100540 <consputc.part.0+0x140>
-  outb(CRTPORT+1, pos>>8);
-8010047d:	89 f0                	mov    %esi,%eax
-  crt[pos] = ' ' | 0x0700;
-8010047f:	8d b4 36 00 80 0b 80 	lea    -0x7ff48000(%esi,%esi,1),%esi
-  outb(CRTPORT+1, pos);
-80100486:	88 45 e7             	mov    %al,-0x19(%ebp)
-  outb(CRTPORT+1, pos>>8);
-80100489:	0f b6 fc             	movzbl %ah,%edi
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010048c:	bb d4 03 00 00       	mov    $0x3d4,%ebx
-80100491:	b8 0e 00 00 00       	mov    $0xe,%eax
-80100496:	89 da                	mov    %ebx,%edx
-80100498:	ee                   	out    %al,(%dx)
-80100499:	b9 d5 03 00 00       	mov    $0x3d5,%ecx
-8010049e:	89 f8                	mov    %edi,%eax
-801004a0:	89 ca                	mov    %ecx,%edx
-801004a2:	ee                   	out    %al,(%dx)
-801004a3:	b8 0f 00 00 00       	mov    $0xf,%eax
-801004a8:	89 da                	mov    %ebx,%edx
-801004aa:	ee                   	out    %al,(%dx)
-801004ab:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-801004af:	89 ca                	mov    %ecx,%edx
-801004b1:	ee                   	out    %al,(%dx)
-  crt[pos] = ' ' | 0x0700;
-801004b2:	b8 20 07 00 00       	mov    $0x720,%eax
-801004b7:	66 89 06             	mov    %ax,(%esi)
-}
-801004ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801004bd:	5b                   	pop    %ebx
-801004be:	5e                   	pop    %esi
-801004bf:	5f                   	pop    %edi
-801004c0:	5d                   	pop    %ebp
-801004c1:	c3                   	ret
-801004c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    crt[pos++] = (c&0xff) | 0x0700;  // black on white
-801004c8:	0f b6 db             	movzbl %bl,%ebx
-801004cb:	8d 70 01             	lea    0x1(%eax),%esi
-801004ce:	80 cf 07             	or     $0x7,%bh
-801004d1:	66 89 9c 00 00 80 0b 	mov    %bx,-0x7ff48000(%eax,%eax,1)
-801004d8:	80 
-801004d9:	eb 8a                	jmp    80100465 <consputc.part.0+0x65>
-801004db:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    uartputc('\b'); uartputc(' '); uartputc('\b');
-801004e0:	83 ec 0c             	sub    $0xc,%esp
-801004e3:	be d4 03 00 00       	mov    $0x3d4,%esi
-801004e8:	6a 08                	push   $0x8
-801004ea:	e8 a1 58 00 00       	call   80105d90 <uartputc>
-801004ef:	c7 04 24 20 00 00 00 	movl   $0x20,(%esp)
-801004f6:	e8 95 58 00 00       	call   80105d90 <uartputc>
-801004fb:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-80100502:	e8 89 58 00 00       	call   80105d90 <uartputc>
-80100507:	b8 0e 00 00 00       	mov    $0xe,%eax
-8010050c:	89 f2                	mov    %esi,%edx
-8010050e:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010050f:	bb d5 03 00 00       	mov    $0x3d5,%ebx
-80100514:	89 da                	mov    %ebx,%edx
-80100516:	ec                   	in     (%dx),%al
-  pos = inb(CRTPORT+1) << 8;
-80100517:	0f b6 c8             	movzbl %al,%ecx
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010051a:	89 f2                	mov    %esi,%edx
-8010051c:	b8 0f 00 00 00       	mov    $0xf,%eax
-80100521:	c1 e1 08             	shl    $0x8,%ecx
-80100524:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80100525:	89 da                	mov    %ebx,%edx
-80100527:	ec                   	in     (%dx),%al
-  pos |= inb(CRTPORT+1);
-80100528:	0f b6 f0             	movzbl %al,%esi
-    if(pos > 0) --pos;
-8010052b:	83 c4 10             	add    $0x10,%esp
-8010052e:	09 ce                	or     %ecx,%esi
-80100530:	74 5e                	je     80100590 <consputc.part.0+0x190>
-80100532:	83 ee 01             	sub    $0x1,%esi
-80100535:	e9 2b ff ff ff       	jmp    80100465 <consputc.part.0+0x65>
-8010053a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
-80100540:	83 ec 04             	sub    $0x4,%esp
-    pos -= 80;
-80100543:	8d 5e b0             	lea    -0x50(%esi),%ebx
-    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
-80100546:	8d b4 36 60 7f 0b 80 	lea    -0x7ff480a0(%esi,%esi,1),%esi
-  outb(CRTPORT+1, pos);
-8010054d:	bf 07 00 00 00       	mov    $0x7,%edi
-    memmove(crt, crt+80, sizeof(crt[0])*23*80);
-80100552:	68 60 0e 00 00       	push   $0xe60
-80100557:	68 a0 80 0b 80       	push   $0x800b80a0
-8010055c:	68 00 80 0b 80       	push   $0x800b8000
-80100561:	e8 aa 42 00 00       	call   80104810 <memmove>
-    memset(crt+pos, 0, sizeof(crt[0])*(24*80 - pos));
-80100566:	b8 80 07 00 00       	mov    $0x780,%eax
-8010056b:	83 c4 0c             	add    $0xc,%esp
-8010056e:	29 d8                	sub    %ebx,%eax
-80100570:	01 c0                	add    %eax,%eax
-80100572:	50                   	push   %eax
-80100573:	6a 00                	push   $0x0
-80100575:	56                   	push   %esi
-80100576:	e8 05 42 00 00       	call   80104780 <memset>
-  outb(CRTPORT+1, pos);
-8010057b:	88 5d e7             	mov    %bl,-0x19(%ebp)
-8010057e:	83 c4 10             	add    $0x10,%esp
-80100581:	e9 06 ff ff ff       	jmp    8010048c <consputc.part.0+0x8c>
-80100586:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010058d:	00 
-8010058e:	66 90                	xchg   %ax,%ax
-80100590:	c6 45 e7 00          	movb   $0x0,-0x19(%ebp)
-80100594:	be 00 80 0b 80       	mov    $0x800b8000,%esi
-80100599:	31 ff                	xor    %edi,%edi
-8010059b:	e9 ec fe ff ff       	jmp    8010048c <consputc.part.0+0x8c>
-    panic("pos under/overflow");
-801005a0:	83 ec 0c             	sub    $0xc,%esp
-801005a3:	68 85 72 10 80       	push   $0x80107285
-801005a8:	e8 d3 fd ff ff       	call   80100380 <panic>
-801005ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801005b0 <consolewrite>:
-
-int
-consolewrite(struct inode *ip, char *buf, int n)
-{
-801005b0:	55                   	push   %ebp
-801005b1:	89 e5                	mov    %esp,%ebp
-801005b3:	57                   	push   %edi
-801005b4:	56                   	push   %esi
-801005b5:	53                   	push   %ebx
-801005b6:	83 ec 18             	sub    $0x18,%esp
-801005b9:	8b 75 10             	mov    0x10(%ebp),%esi
-  int i;
-
-  iunlock(ip);
-801005bc:	ff 75 08             	push   0x8(%ebp)
-801005bf:	e8 2c 13 00 00       	call   801018f0 <iunlock>
-  acquire(&cons.lock);
-801005c4:	c7 04 24 40 ef 10 80 	movl   $0x8010ef40,(%esp)
-801005cb:	e8 b0 40 00 00       	call   80104680 <acquire>
-  for(i = 0; i < n; i++)
-801005d0:	83 c4 10             	add    $0x10,%esp
-801005d3:	85 f6                	test   %esi,%esi
-801005d5:	7e 25                	jle    801005fc <consolewrite+0x4c>
-801005d7:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-801005da:	8d 3c 33             	lea    (%ebx,%esi,1),%edi
-  if(panicked){
-801005dd:	8b 15 78 ef 10 80    	mov    0x8010ef78,%edx
-    consputc(buf[i] & 0xff);
-801005e3:	0f b6 03             	movzbl (%ebx),%eax
-  if(panicked){
-801005e6:	85 d2                	test   %edx,%edx
-801005e8:	74 06                	je     801005f0 <consolewrite+0x40>
-  asm volatile("cli");
-801005ea:	fa                   	cli
-    for(;;)
-801005eb:	eb fe                	jmp    801005eb <consolewrite+0x3b>
-801005ed:	8d 76 00             	lea    0x0(%esi),%esi
-801005f0:	e8 0b fe ff ff       	call   80100400 <consputc.part.0>
-  for(i = 0; i < n; i++)
-801005f5:	83 c3 01             	add    $0x1,%ebx
-801005f8:	39 fb                	cmp    %edi,%ebx
-801005fa:	75 e1                	jne    801005dd <consolewrite+0x2d>
-  release(&cons.lock);
-801005fc:	83 ec 0c             	sub    $0xc,%esp
-801005ff:	68 40 ef 10 80       	push   $0x8010ef40
-80100604:	e8 17 40 00 00       	call   80104620 <release>
-  ilock(ip);
-80100609:	58                   	pop    %eax
-8010060a:	ff 75 08             	push   0x8(%ebp)
-8010060d:	e8 fe 11 00 00       	call   80101810 <ilock>
-
-  return n;
-}
-80100612:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100615:	89 f0                	mov    %esi,%eax
-80100617:	5b                   	pop    %ebx
-80100618:	5e                   	pop    %esi
-80100619:	5f                   	pop    %edi
-8010061a:	5d                   	pop    %ebp
-8010061b:	c3                   	ret
-8010061c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80100620 <printint>:
-{
-80100620:	55                   	push   %ebp
-80100621:	89 e5                	mov    %esp,%ebp
-80100623:	57                   	push   %edi
-80100624:	56                   	push   %esi
-80100625:	53                   	push   %ebx
-80100626:	89 d3                	mov    %edx,%ebx
-80100628:	83 ec 2c             	sub    $0x2c,%esp
-  if(sign && (sign = xx < 0))
-8010062b:	85 c0                	test   %eax,%eax
-8010062d:	79 05                	jns    80100634 <printint+0x14>
-8010062f:	83 e1 01             	and    $0x1,%ecx
-80100632:	75 64                	jne    80100698 <printint+0x78>
-    x = xx;
-80100634:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
-8010063b:	89 c1                	mov    %eax,%ecx
-  i = 0;
-8010063d:	31 f6                	xor    %esi,%esi
-8010063f:	90                   	nop
-    buf[i++] = digits[x % base];
-80100640:	89 c8                	mov    %ecx,%eax
-80100642:	31 d2                	xor    %edx,%edx
-80100644:	89 f7                	mov    %esi,%edi
-80100646:	f7 f3                	div    %ebx
-80100648:	8d 76 01             	lea    0x1(%esi),%esi
-8010064b:	0f b6 92 8c 77 10 80 	movzbl -0x7fef8874(%edx),%edx
-80100652:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
-80100656:	89 ca                	mov    %ecx,%edx
-80100658:	89 c1                	mov    %eax,%ecx
-8010065a:	39 da                	cmp    %ebx,%edx
-8010065c:	73 e2                	jae    80100640 <printint+0x20>
-  if(sign)
-8010065e:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
-80100661:	85 c9                	test   %ecx,%ecx
-80100663:	74 07                	je     8010066c <printint+0x4c>
-    buf[i++] = '-';
-80100665:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-  while(--i >= 0)
-8010066a:	89 f7                	mov    %esi,%edi
-8010066c:	8d 5d d8             	lea    -0x28(%ebp),%ebx
-8010066f:	01 df                	add    %ebx,%edi
-  if(panicked){
-80100671:	8b 15 78 ef 10 80    	mov    0x8010ef78,%edx
-    consputc(buf[i]);
-80100677:	0f be 07             	movsbl (%edi),%eax
-  if(panicked){
-8010067a:	85 d2                	test   %edx,%edx
-8010067c:	74 0a                	je     80100688 <printint+0x68>
-8010067e:	fa                   	cli
-    for(;;)
-8010067f:	eb fe                	jmp    8010067f <printint+0x5f>
-80100681:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80100688:	e8 73 fd ff ff       	call   80100400 <consputc.part.0>
-  while(--i >= 0)
-8010068d:	8d 47 ff             	lea    -0x1(%edi),%eax
-80100690:	39 df                	cmp    %ebx,%edi
-80100692:	74 11                	je     801006a5 <printint+0x85>
-80100694:	89 c7                	mov    %eax,%edi
-80100696:	eb d9                	jmp    80100671 <printint+0x51>
-    x = -xx;
-80100698:	f7 d8                	neg    %eax
-  if(sign && (sign = xx < 0))
-8010069a:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
-    x = -xx;
-801006a1:	89 c1                	mov    %eax,%ecx
-801006a3:	eb 98                	jmp    8010063d <printint+0x1d>
-}
-801006a5:	83 c4 2c             	add    $0x2c,%esp
-801006a8:	5b                   	pop    %ebx
-801006a9:	5e                   	pop    %esi
-801006aa:	5f                   	pop    %edi
-801006ab:	5d                   	pop    %ebp
-801006ac:	c3                   	ret
-801006ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801006b0 <cprintf>:
-{
-801006b0:	55                   	push   %ebp
-801006b1:	89 e5                	mov    %esp,%ebp
-801006b3:	57                   	push   %edi
-801006b4:	56                   	push   %esi
-801006b5:	53                   	push   %ebx
-801006b6:	83 ec 1c             	sub    $0x1c,%esp
-  locking = cons.locking;
-801006b9:	8b 3d 74 ef 10 80    	mov    0x8010ef74,%edi
-  if (fmt == 0)
-801006bf:	8b 75 08             	mov    0x8(%ebp),%esi
-  if(locking)
-801006c2:	85 ff                	test   %edi,%edi
-801006c4:	0f 85 06 01 00 00    	jne    801007d0 <cprintf+0x120>
-  if (fmt == 0)
-801006ca:	85 f6                	test   %esi,%esi
-801006cc:	0f 84 b7 01 00 00    	je     80100889 <cprintf+0x1d9>
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-801006d2:	0f b6 06             	movzbl (%esi),%eax
-801006d5:	85 c0                	test   %eax,%eax
-801006d7:	74 5f                	je     80100738 <cprintf+0x88>
-  argp = (uint*)(void*)(&fmt + 1);
-801006d9:	8d 55 0c             	lea    0xc(%ebp),%edx
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-801006dc:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-801006df:	31 db                	xor    %ebx,%ebx
-801006e1:	89 d7                	mov    %edx,%edi
-    if(c != '%'){
-801006e3:	83 f8 25             	cmp    $0x25,%eax
-801006e6:	75 58                	jne    80100740 <cprintf+0x90>
-    c = fmt[++i] & 0xff;
-801006e8:	83 c3 01             	add    $0x1,%ebx
-801006eb:	0f b6 0c 1e          	movzbl (%esi,%ebx,1),%ecx
-    if(c == 0)
-801006ef:	85 c9                	test   %ecx,%ecx
-801006f1:	74 3a                	je     8010072d <cprintf+0x7d>
-    switch(c){
-801006f3:	83 f9 70             	cmp    $0x70,%ecx
-801006f6:	0f 84 b4 00 00 00    	je     801007b0 <cprintf+0x100>
-801006fc:	7f 72                	jg     80100770 <cprintf+0xc0>
-801006fe:	83 f9 25             	cmp    $0x25,%ecx
-80100701:	74 4d                	je     80100750 <cprintf+0xa0>
-80100703:	83 f9 64             	cmp    $0x64,%ecx
-80100706:	75 76                	jne    8010077e <cprintf+0xce>
-      printint(*argp++, 10, 1);
-80100708:	8d 47 04             	lea    0x4(%edi),%eax
-8010070b:	b9 01 00 00 00       	mov    $0x1,%ecx
-80100710:	ba 0a 00 00 00       	mov    $0xa,%edx
-80100715:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80100718:	8b 07                	mov    (%edi),%eax
-8010071a:	e8 01 ff ff ff       	call   80100620 <printint>
-8010071f:	8b 7d e0             	mov    -0x20(%ebp),%edi
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-80100722:	83 c3 01             	add    $0x1,%ebx
-80100725:	0f b6 04 1e          	movzbl (%esi,%ebx,1),%eax
-80100729:	85 c0                	test   %eax,%eax
-8010072b:	75 b6                	jne    801006e3 <cprintf+0x33>
-8010072d:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-  if(locking)
-80100730:	85 ff                	test   %edi,%edi
-80100732:	0f 85 bb 00 00 00    	jne    801007f3 <cprintf+0x143>
-}
-80100738:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010073b:	5b                   	pop    %ebx
-8010073c:	5e                   	pop    %esi
-8010073d:	5f                   	pop    %edi
-8010073e:	5d                   	pop    %ebp
-8010073f:	c3                   	ret
-  if(panicked){
-80100740:	8b 0d 78 ef 10 80    	mov    0x8010ef78,%ecx
-80100746:	85 c9                	test   %ecx,%ecx
-80100748:	74 19                	je     80100763 <cprintf+0xb3>
-8010074a:	fa                   	cli
-    for(;;)
-8010074b:	eb fe                	jmp    8010074b <cprintf+0x9b>
-8010074d:	8d 76 00             	lea    0x0(%esi),%esi
-  if(panicked){
-80100750:	8b 0d 78 ef 10 80    	mov    0x8010ef78,%ecx
-80100756:	85 c9                	test   %ecx,%ecx
-80100758:	0f 85 f2 00 00 00    	jne    80100850 <cprintf+0x1a0>
-8010075e:	b8 25 00 00 00       	mov    $0x25,%eax
-80100763:	e8 98 fc ff ff       	call   80100400 <consputc.part.0>
-      break;
-80100768:	eb b8                	jmp    80100722 <cprintf+0x72>
-8010076a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    switch(c){
-80100770:	83 f9 73             	cmp    $0x73,%ecx
-80100773:	0f 84 8f 00 00 00    	je     80100808 <cprintf+0x158>
-80100779:	83 f9 78             	cmp    $0x78,%ecx
-8010077c:	74 32                	je     801007b0 <cprintf+0x100>
-  if(panicked){
-8010077e:	8b 15 78 ef 10 80    	mov    0x8010ef78,%edx
-80100784:	85 d2                	test   %edx,%edx
-80100786:	0f 85 b8 00 00 00    	jne    80100844 <cprintf+0x194>
-8010078c:	b8 25 00 00 00       	mov    $0x25,%eax
-80100791:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-80100794:	e8 67 fc ff ff       	call   80100400 <consputc.part.0>
-80100799:	a1 78 ef 10 80       	mov    0x8010ef78,%eax
-8010079e:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-801007a1:	85 c0                	test   %eax,%eax
-801007a3:	0f 84 cd 00 00 00    	je     80100876 <cprintf+0x1c6>
-801007a9:	fa                   	cli
-    for(;;)
-801007aa:	eb fe                	jmp    801007aa <cprintf+0xfa>
-801007ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      printint(*argp++, 16, 0);
-801007b0:	8d 47 04             	lea    0x4(%edi),%eax
-801007b3:	31 c9                	xor    %ecx,%ecx
-801007b5:	ba 10 00 00 00       	mov    $0x10,%edx
-801007ba:	89 45 e0             	mov    %eax,-0x20(%ebp)
-801007bd:	8b 07                	mov    (%edi),%eax
-801007bf:	e8 5c fe ff ff       	call   80100620 <printint>
-801007c4:	8b 7d e0             	mov    -0x20(%ebp),%edi
-      break;
-801007c7:	e9 56 ff ff ff       	jmp    80100722 <cprintf+0x72>
-801007cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    acquire(&cons.lock);
-801007d0:	83 ec 0c             	sub    $0xc,%esp
-801007d3:	68 40 ef 10 80       	push   $0x8010ef40
-801007d8:	e8 a3 3e 00 00       	call   80104680 <acquire>
-  if (fmt == 0)
-801007dd:	83 c4 10             	add    $0x10,%esp
-801007e0:	85 f6                	test   %esi,%esi
-801007e2:	0f 84 a1 00 00 00    	je     80100889 <cprintf+0x1d9>
-  for(i = 0; (c = fmt[i] & 0xff) != 0; i++){
-801007e8:	0f b6 06             	movzbl (%esi),%eax
-801007eb:	85 c0                	test   %eax,%eax
-801007ed:	0f 85 e6 fe ff ff    	jne    801006d9 <cprintf+0x29>
-    release(&cons.lock);
-801007f3:	83 ec 0c             	sub    $0xc,%esp
-801007f6:	68 40 ef 10 80       	push   $0x8010ef40
-801007fb:	e8 20 3e 00 00       	call   80104620 <release>
-80100800:	83 c4 10             	add    $0x10,%esp
-80100803:	e9 30 ff ff ff       	jmp    80100738 <cprintf+0x88>
-      if((s = (char*)*argp++) == 0)
-80100808:	8b 17                	mov    (%edi),%edx
-8010080a:	8d 47 04             	lea    0x4(%edi),%eax
-8010080d:	85 d2                	test   %edx,%edx
-8010080f:	74 27                	je     80100838 <cprintf+0x188>
-      for(; *s; s++)
-80100811:	0f b6 0a             	movzbl (%edx),%ecx
-      if((s = (char*)*argp++) == 0)
-80100814:	89 d7                	mov    %edx,%edi
-      for(; *s; s++)
-80100816:	84 c9                	test   %cl,%cl
-80100818:	74 68                	je     80100882 <cprintf+0x1d2>
-8010081a:	89 5d e0             	mov    %ebx,-0x20(%ebp)
-8010081d:	89 fb                	mov    %edi,%ebx
-8010081f:	89 f7                	mov    %esi,%edi
-80100821:	89 c6                	mov    %eax,%esi
-80100823:	0f be c1             	movsbl %cl,%eax
-  if(panicked){
-80100826:	8b 15 78 ef 10 80    	mov    0x8010ef78,%edx
-8010082c:	85 d2                	test   %edx,%edx
-8010082e:	74 28                	je     80100858 <cprintf+0x1a8>
-80100830:	fa                   	cli
-    for(;;)
-80100831:	eb fe                	jmp    80100831 <cprintf+0x181>
-80100833:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-80100838:	b9 28 00 00 00       	mov    $0x28,%ecx
-        s = "(null)";
-8010083d:	bf 98 72 10 80       	mov    $0x80107298,%edi
-80100842:	eb d6                	jmp    8010081a <cprintf+0x16a>
-80100844:	fa                   	cli
-    for(;;)
-80100845:	eb fe                	jmp    80100845 <cprintf+0x195>
-80100847:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010084e:	00 
-8010084f:	90                   	nop
-80100850:	fa                   	cli
-80100851:	eb fe                	jmp    80100851 <cprintf+0x1a1>
-80100853:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-80100858:	e8 a3 fb ff ff       	call   80100400 <consputc.part.0>
-      for(; *s; s++)
-8010085d:	0f be 43 01          	movsbl 0x1(%ebx),%eax
-80100861:	83 c3 01             	add    $0x1,%ebx
-80100864:	84 c0                	test   %al,%al
-80100866:	75 be                	jne    80100826 <cprintf+0x176>
-      if((s = (char*)*argp++) == 0)
-80100868:	89 f0                	mov    %esi,%eax
-8010086a:	8b 5d e0             	mov    -0x20(%ebp),%ebx
-8010086d:	89 fe                	mov    %edi,%esi
-8010086f:	89 c7                	mov    %eax,%edi
-80100871:	e9 ac fe ff ff       	jmp    80100722 <cprintf+0x72>
-80100876:	89 c8                	mov    %ecx,%eax
-80100878:	e8 83 fb ff ff       	call   80100400 <consputc.part.0>
-      break;
-8010087d:	e9 a0 fe ff ff       	jmp    80100722 <cprintf+0x72>
-      if((s = (char*)*argp++) == 0)
-80100882:	89 c7                	mov    %eax,%edi
-80100884:	e9 99 fe ff ff       	jmp    80100722 <cprintf+0x72>
-    panic("null fmt");
-80100889:	83 ec 0c             	sub    $0xc,%esp
-8010088c:	68 9f 72 10 80       	push   $0x8010729f
-80100891:	e8 ea fa ff ff       	call   80100380 <panic>
-80100896:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010089d:	00 
-8010089e:	66 90                	xchg   %ax,%ax
-
-801008a0 <consoleintr>:
-{
-801008a0:	55                   	push   %ebp
-801008a1:	89 e5                	mov    %esp,%ebp
-801008a3:	57                   	push   %edi
-  int c, doprocdump = 0;
-801008a4:	31 ff                	xor    %edi,%edi
-{
-801008a6:	56                   	push   %esi
-801008a7:	53                   	push   %ebx
-801008a8:	83 ec 18             	sub    $0x18,%esp
-801008ab:	8b 75 08             	mov    0x8(%ebp),%esi
-  acquire(&cons.lock);
-801008ae:	68 40 ef 10 80       	push   $0x8010ef40
-801008b3:	e8 c8 3d 00 00       	call   80104680 <acquire>
-  while((c = getc()) >= 0){
-801008b8:	83 c4 10             	add    $0x10,%esp
-801008bb:	ff d6                	call   *%esi
-801008bd:	89 c3                	mov    %eax,%ebx
-801008bf:	85 c0                	test   %eax,%eax
-801008c1:	78 2f                	js     801008f2 <consoleintr+0x52>
-    switch(c){
-801008c3:	83 fb 10             	cmp    $0x10,%ebx
-801008c6:	0f 84 44 01 00 00    	je     80100a10 <consoleintr+0x170>
-801008cc:	7f 52                	jg     80100920 <consoleintr+0x80>
-801008ce:	83 fb 08             	cmp    $0x8,%ebx
-801008d1:	0f 84 11 01 00 00    	je     801009e8 <consoleintr+0x148>
-801008d7:	83 fb 09             	cmp    $0x9,%ebx
-801008da:	0f 85 3a 01 00 00    	jne    80100a1a <consoleintr+0x17a>
-      check_cntrl_i=1;
-801008e0:	c7 05 80 ee 10 80 01 	movl   $0x1,0x8010ee80
-801008e7:	00 00 00 
-  while((c = getc()) >= 0){
-801008ea:	ff d6                	call   *%esi
-801008ec:	89 c3                	mov    %eax,%ebx
-801008ee:	85 c0                	test   %eax,%eax
-801008f0:	79 d1                	jns    801008c3 <consoleintr+0x23>
-  release(&cons.lock);
-801008f2:	83 ec 0c             	sub    $0xc,%esp
-801008f5:	68 40 ef 10 80       	push   $0x8010ef40
-801008fa:	e8 21 3d 00 00       	call   80104620 <release>
-  if(check_cntrl_i)
-801008ff:	a1 80 ee 10 80       	mov    0x8010ee80,%eax
-80100904:	83 c4 10             	add    $0x10,%esp
-80100907:	85 c0                	test   %eax,%eax
-80100909:	0f 85 9d 01 00 00    	jne    80100aac <consoleintr+0x20c>
-  if(doprocdump) {
-8010090f:	85 ff                	test   %edi,%edi
-80100911:	0f 85 89 01 00 00    	jne    80100aa0 <consoleintr+0x200>
-}
-80100917:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010091a:	5b                   	pop    %ebx
-8010091b:	5e                   	pop    %esi
-8010091c:	5f                   	pop    %edi
-8010091d:	5d                   	pop    %ebp
-8010091e:	c3                   	ret
-8010091f:	90                   	nop
-    switch(c){
-80100920:	83 fb 15             	cmp    $0x15,%ebx
-80100923:	0f 84 81 00 00 00    	je     801009aa <consoleintr+0x10a>
-80100929:	83 fb 7f             	cmp    $0x7f,%ebx
-8010092c:	0f 84 b6 00 00 00    	je     801009e8 <consoleintr+0x148>
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-80100932:	a1 28 ef 10 80       	mov    0x8010ef28,%eax
-80100937:	89 c2                	mov    %eax,%edx
-80100939:	2b 15 20 ef 10 80    	sub    0x8010ef20,%edx
-8010093f:	83 fa 7f             	cmp    $0x7f,%edx
-80100942:	0f 87 73 ff ff ff    	ja     801008bb <consoleintr+0x1b>
-  if(panicked){
-80100948:	8b 0d 78 ef 10 80    	mov    0x8010ef78,%ecx
-        input.buf[input.e++ % INPUT_BUF] = c;
-8010094e:	8d 50 01             	lea    0x1(%eax),%edx
-80100951:	83 e0 7f             	and    $0x7f,%eax
-80100954:	89 15 28 ef 10 80    	mov    %edx,0x8010ef28
-8010095a:	88 98 a0 ee 10 80    	mov    %bl,-0x7fef1160(%eax)
-  if(panicked){
-80100960:	85 c9                	test   %ecx,%ecx
-80100962:	0f 85 2e 01 00 00    	jne    80100a96 <consoleintr+0x1f6>
-80100968:	89 d8                	mov    %ebx,%eax
-8010096a:	e8 91 fa ff ff       	call   80100400 <consputc.part.0>
-        if(c == '\n' || c == C('D') || input.e == input.r+INPUT_BUF){
-8010096f:	83 fb 0a             	cmp    $0xa,%ebx
-80100972:	0f 84 f0 00 00 00    	je     80100a68 <consoleintr+0x1c8>
-80100978:	83 fb 04             	cmp    $0x4,%ebx
-8010097b:	0f 84 e7 00 00 00    	je     80100a68 <consoleintr+0x1c8>
-80100981:	a1 20 ef 10 80       	mov    0x8010ef20,%eax
-80100986:	83 e8 80             	sub    $0xffffff80,%eax
-80100989:	39 05 28 ef 10 80    	cmp    %eax,0x8010ef28
-8010098f:	0f 85 26 ff ff ff    	jne    801008bb <consoleintr+0x1b>
-80100995:	e9 d3 00 00 00       	jmp    80100a6d <consoleintr+0x1cd>
-8010099a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801009a0:	b8 00 01 00 00       	mov    $0x100,%eax
-801009a5:	e8 56 fa ff ff       	call   80100400 <consputc.part.0>
-      while(input.e != input.w &&
-801009aa:	a1 28 ef 10 80       	mov    0x8010ef28,%eax
-801009af:	3b 05 24 ef 10 80    	cmp    0x8010ef24,%eax
-801009b5:	0f 84 00 ff ff ff    	je     801008bb <consoleintr+0x1b>
-            input.buf[(input.e-1) % INPUT_BUF] != '\n'){
-801009bb:	83 e8 01             	sub    $0x1,%eax
-801009be:	89 c2                	mov    %eax,%edx
-801009c0:	83 e2 7f             	and    $0x7f,%edx
-      while(input.e != input.w &&
-801009c3:	80 ba a0 ee 10 80 0a 	cmpb   $0xa,-0x7fef1160(%edx)
-801009ca:	0f 84 eb fe ff ff    	je     801008bb <consoleintr+0x1b>
-  if(panicked){
-801009d0:	8b 0d 78 ef 10 80    	mov    0x8010ef78,%ecx
-        input.e--;
-801009d6:	a3 28 ef 10 80       	mov    %eax,0x8010ef28
-  if(panicked){
-801009db:	85 c9                	test   %ecx,%ecx
-801009dd:	74 c1                	je     801009a0 <consoleintr+0x100>
-801009df:	fa                   	cli
-    for(;;)
-801009e0:	eb fe                	jmp    801009e0 <consoleintr+0x140>
-801009e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(input.e != input.w){
-801009e8:	a1 28 ef 10 80       	mov    0x8010ef28,%eax
-801009ed:	3b 05 24 ef 10 80    	cmp    0x8010ef24,%eax
-801009f3:	0f 84 c2 fe ff ff    	je     801008bb <consoleintr+0x1b>
-  if(panicked){
-801009f9:	8b 15 78 ef 10 80    	mov    0x8010ef78,%edx
-        input.e--;
-801009ff:	83 e8 01             	sub    $0x1,%eax
-80100a02:	a3 28 ef 10 80       	mov    %eax,0x8010ef28
-  if(panicked){
-80100a07:	85 d2                	test   %edx,%edx
-80100a09:	74 7c                	je     80100a87 <consoleintr+0x1e7>
-80100a0b:	fa                   	cli
-    for(;;)
-80100a0c:	eb fe                	jmp    80100a0c <consoleintr+0x16c>
-80100a0e:	66 90                	xchg   %ax,%ax
-    switch(c){
-80100a10:	bf 01 00 00 00       	mov    $0x1,%edi
-80100a15:	e9 a1 fe ff ff       	jmp    801008bb <consoleintr+0x1b>
-      if(c != 0 && input.e-input.r < INPUT_BUF){
-80100a1a:	85 db                	test   %ebx,%ebx
-80100a1c:	0f 84 99 fe ff ff    	je     801008bb <consoleintr+0x1b>
-80100a22:	a1 28 ef 10 80       	mov    0x8010ef28,%eax
-80100a27:	89 c2                	mov    %eax,%edx
-80100a29:	2b 15 20 ef 10 80    	sub    0x8010ef20,%edx
-80100a2f:	83 fa 7f             	cmp    $0x7f,%edx
-80100a32:	0f 87 83 fe ff ff    	ja     801008bb <consoleintr+0x1b>
-        input.buf[input.e++ % INPUT_BUF] = c;
-80100a38:	8d 50 01             	lea    0x1(%eax),%edx
-  if(panicked){
-80100a3b:	8b 0d 78 ef 10 80    	mov    0x8010ef78,%ecx
-        input.buf[input.e++ % INPUT_BUF] = c;
-80100a41:	83 e0 7f             	and    $0x7f,%eax
-        c = (c == '\r') ? '\n' : c;
-80100a44:	83 fb 0d             	cmp    $0xd,%ebx
-80100a47:	0f 85 07 ff ff ff    	jne    80100954 <consoleintr+0xb4>
-        input.buf[input.e++ % INPUT_BUF] = c;
-80100a4d:	89 15 28 ef 10 80    	mov    %edx,0x8010ef28
-80100a53:	c6 80 a0 ee 10 80 0a 	movb   $0xa,-0x7fef1160(%eax)
-  if(panicked){
-80100a5a:	85 c9                	test   %ecx,%ecx
-80100a5c:	75 38                	jne    80100a96 <consoleintr+0x1f6>
-80100a5e:	b8 0a 00 00 00       	mov    $0xa,%eax
-80100a63:	e8 98 f9 ff ff       	call   80100400 <consputc.part.0>
-          input.w = input.e;
-80100a68:	a1 28 ef 10 80       	mov    0x8010ef28,%eax
-          wakeup(&input.r);
-80100a6d:	83 ec 0c             	sub    $0xc,%esp
-          input.w = input.e;
-80100a70:	a3 24 ef 10 80       	mov    %eax,0x8010ef24
-          wakeup(&input.r);
-80100a75:	68 20 ef 10 80       	push   $0x8010ef20
-80100a7a:	e8 41 37 00 00       	call   801041c0 <wakeup>
-80100a7f:	83 c4 10             	add    $0x10,%esp
-80100a82:	e9 34 fe ff ff       	jmp    801008bb <consoleintr+0x1b>
-80100a87:	b8 00 01 00 00       	mov    $0x100,%eax
-80100a8c:	e8 6f f9 ff ff       	call   80100400 <consputc.part.0>
-80100a91:	e9 25 fe ff ff       	jmp    801008bb <consoleintr+0x1b>
-80100a96:	fa                   	cli
-    for(;;)
-80100a97:	eb fe                	jmp    80100a97 <consoleintr+0x1f7>
-80100a99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-}
-80100aa0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100aa3:	5b                   	pop    %ebx
-80100aa4:	5e                   	pop    %esi
-80100aa5:	5f                   	pop    %edi
-80100aa6:	5d                   	pop    %ebp
-    procdump();  // now call procdump() wo. cons.lock held
-80100aa7:	e9 f4 37 00 00       	jmp    801042a0 <procdump>
-    cprintf("Ctrl+I is detected by xv6\n");
-80100aac:	83 ec 0c             	sub    $0xc,%esp
-80100aaf:	68 a8 72 10 80       	push   $0x801072a8
-80100ab4:	e8 f7 fb ff ff       	call   801006b0 <cprintf>
-    print_mem_layout();
-80100ab9:	e8 72 2e 00 00       	call   80103930 <print_mem_layout>
-    check_cntrl_i=0;
-80100abe:	83 c4 10             	add    $0x10,%esp
-80100ac1:	c7 05 80 ee 10 80 00 	movl   $0x0,0x8010ee80
-80100ac8:	00 00 00 
-80100acb:	e9 3f fe ff ff       	jmp    8010090f <consoleintr+0x6f>
-
-80100ad0 <consoleinit>:
-
-void
-consoleinit(void)
-{
-80100ad0:	55                   	push   %ebp
-80100ad1:	89 e5                	mov    %esp,%ebp
-80100ad3:	83 ec 10             	sub    $0x10,%esp
-  initlock(&cons.lock, "console");
-80100ad6:	68 c3 72 10 80       	push   $0x801072c3
-80100adb:	68 40 ef 10 80       	push   $0x8010ef40
-80100ae0:	e8 ab 39 00 00       	call   80104490 <initlock>
-
-  devsw[CONSOLE].write = consolewrite;
-  devsw[CONSOLE].read = consoleread;
-  cons.locking = 1;
-
-  ioapicenable(IRQ_KBD, 0);
-80100ae5:	58                   	pop    %eax
-80100ae6:	5a                   	pop    %edx
-80100ae7:	6a 00                	push   $0x0
-80100ae9:	6a 01                	push   $0x1
-  devsw[CONSOLE].write = consolewrite;
-80100aeb:	c7 05 2c f9 10 80 b0 	movl   $0x801005b0,0x8010f92c
-80100af2:	05 10 80 
-  devsw[CONSOLE].read = consoleread;
-80100af5:	c7 05 28 f9 10 80 80 	movl   $0x80100280,0x8010f928
-80100afc:	02 10 80 
-  cons.locking = 1;
-80100aff:	c7 05 74 ef 10 80 01 	movl   $0x1,0x8010ef74
-80100b06:	00 00 00 
-  ioapicenable(IRQ_KBD, 0);
-80100b09:	e8 c2 19 00 00       	call   801024d0 <ioapicenable>
-}
-80100b0e:	83 c4 10             	add    $0x10,%esp
-80100b11:	c9                   	leave
-80100b12:	c3                   	ret
-80100b13:	66 90                	xchg   %ax,%ax
-80100b15:	66 90                	xchg   %ax,%ax
-80100b17:	66 90                	xchg   %ax,%ax
-80100b19:	66 90                	xchg   %ax,%ax
-80100b1b:	66 90                	xchg   %ax,%ax
-80100b1d:	66 90                	xchg   %ax,%ax
-80100b1f:	90                   	nop
-
-80100b20 <exec>:
-#include "x86.h"
-#include "elf.h"
-
-int
-exec(char *path, char **argv)
-{
-80100b20:	55                   	push   %ebp
-80100b21:	89 e5                	mov    %esp,%ebp
-80100b23:	57                   	push   %edi
-80100b24:	56                   	push   %esi
-80100b25:	53                   	push   %ebx
-80100b26:	81 ec 0c 01 00 00    	sub    $0x10c,%esp
-  uint argc, sz, sp, ustack[3+MAXARG+1];
-  struct elfhdr elf;
-  struct inode *ip;
-  struct proghdr ph;
-  pde_t *pgdir, *oldpgdir;
-  struct proc *curproc = myproc();
-80100b2c:	e8 0f 2f 00 00       	call   80103a40 <myproc>
-80100b31:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
-
-  begin_op();
-80100b37:	e8 74 22 00 00       	call   80102db0 <begin_op>
-
-  if((ip = namei(path)) == 0){
-80100b3c:	83 ec 0c             	sub    $0xc,%esp
-80100b3f:	ff 75 08             	push   0x8(%ebp)
-80100b42:	e8 a9 15 00 00       	call   801020f0 <namei>
-80100b47:	83 c4 10             	add    $0x10,%esp
-80100b4a:	85 c0                	test   %eax,%eax
-80100b4c:	0f 84 30 03 00 00    	je     80100e82 <exec+0x362>
-    end_op();
-    cprintf("exec: fail\n");
-    return -1;
-  }
-  ilock(ip);
-80100b52:	83 ec 0c             	sub    $0xc,%esp
-80100b55:	89 c7                	mov    %eax,%edi
-80100b57:	50                   	push   %eax
-80100b58:	e8 b3 0c 00 00       	call   80101810 <ilock>
-  pgdir = 0;
-
-  // Check ELF header
-  if(readi(ip, (char*)&elf, 0, sizeof(elf)) != sizeof(elf))
-80100b5d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
-80100b63:	6a 34                	push   $0x34
-80100b65:	6a 00                	push   $0x0
-80100b67:	50                   	push   %eax
-80100b68:	57                   	push   %edi
-80100b69:	e8 b2 0f 00 00       	call   80101b20 <readi>
-80100b6e:	83 c4 20             	add    $0x20,%esp
-80100b71:	83 f8 34             	cmp    $0x34,%eax
-80100b74:	0f 85 01 01 00 00    	jne    80100c7b <exec+0x15b>
-    goto bad;
-  if(elf.magic != ELF_MAGIC)
-80100b7a:	81 bd 24 ff ff ff 7f 	cmpl   $0x464c457f,-0xdc(%ebp)
-80100b81:	45 4c 46 
-80100b84:	0f 85 f1 00 00 00    	jne    80100c7b <exec+0x15b>
-    goto bad;
-
-  if((pgdir = setupkvm()) == 0)
-80100b8a:	e8 71 63 00 00       	call   80106f00 <setupkvm>
-80100b8f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
-80100b95:	85 c0                	test   %eax,%eax
-80100b97:	0f 84 de 00 00 00    	je     80100c7b <exec+0x15b>
-    goto bad;
-
-  // Load program into memory.
-  sz = 0;
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100b9d:	66 83 bd 50 ff ff ff 	cmpw   $0x0,-0xb0(%ebp)
-80100ba4:	00 
-80100ba5:	8b b5 40 ff ff ff    	mov    -0xc0(%ebp),%esi
-80100bab:	0f 84 a1 02 00 00    	je     80100e52 <exec+0x332>
-  sz = 0;
-80100bb1:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
-80100bb8:	00 00 00 
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100bbb:	31 db                	xor    %ebx,%ebx
-80100bbd:	e9 8c 00 00 00       	jmp    80100c4e <exec+0x12e>
-80100bc2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-      goto bad;
-    if(ph.type != ELF_PROG_LOAD)
-80100bc8:	83 bd 04 ff ff ff 01 	cmpl   $0x1,-0xfc(%ebp)
-80100bcf:	75 6c                	jne    80100c3d <exec+0x11d>
-      continue;
-    if(ph.memsz < ph.filesz)
-80100bd1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
-80100bd7:	3b 85 14 ff ff ff    	cmp    -0xec(%ebp),%eax
-80100bdd:	0f 82 87 00 00 00    	jb     80100c6a <exec+0x14a>
-      goto bad;
-    if(ph.vaddr + ph.memsz < ph.vaddr)
-80100be3:	03 85 0c ff ff ff    	add    -0xf4(%ebp),%eax
-80100be9:	72 7f                	jb     80100c6a <exec+0x14a>
-      goto bad;
-    if((sz = allocuvm(pgdir, sz, ph.vaddr + ph.memsz)) == 0)
-80100beb:	83 ec 04             	sub    $0x4,%esp
-80100bee:	50                   	push   %eax
-80100bef:	ff b5 f0 fe ff ff    	push   -0x110(%ebp)
-80100bf5:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100bfb:	e8 30 61 00 00       	call   80106d30 <allocuvm>
-80100c00:	83 c4 10             	add    $0x10,%esp
-80100c03:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
-80100c09:	85 c0                	test   %eax,%eax
-80100c0b:	74 5d                	je     80100c6a <exec+0x14a>
-      goto bad;
-    if(ph.vaddr % PGSIZE != 0)
-80100c0d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
-80100c13:	a9 ff 0f 00 00       	test   $0xfff,%eax
-80100c18:	75 50                	jne    80100c6a <exec+0x14a>
-      goto bad;
-    if(loaduvm(pgdir, (char*)ph.vaddr, ip, ph.off, ph.filesz) < 0)
-80100c1a:	83 ec 0c             	sub    $0xc,%esp
-80100c1d:	ff b5 14 ff ff ff    	push   -0xec(%ebp)
-80100c23:	ff b5 08 ff ff ff    	push   -0xf8(%ebp)
-80100c29:	57                   	push   %edi
-80100c2a:	50                   	push   %eax
-80100c2b:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100c31:	e8 2a 60 00 00       	call   80106c60 <loaduvm>
-80100c36:	83 c4 20             	add    $0x20,%esp
-80100c39:	85 c0                	test   %eax,%eax
-80100c3b:	78 2d                	js     80100c6a <exec+0x14a>
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100c3d:	0f b7 85 50 ff ff ff 	movzwl -0xb0(%ebp),%eax
-80100c44:	83 c3 01             	add    $0x1,%ebx
-80100c47:	83 c6 20             	add    $0x20,%esi
-80100c4a:	39 d8                	cmp    %ebx,%eax
-80100c4c:	7e 52                	jle    80100ca0 <exec+0x180>
-    if(readi(ip, (char*)&ph, off, sizeof(ph)) != sizeof(ph))
-80100c4e:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
-80100c54:	6a 20                	push   $0x20
-80100c56:	56                   	push   %esi
-80100c57:	50                   	push   %eax
-80100c58:	57                   	push   %edi
-80100c59:	e8 c2 0e 00 00       	call   80101b20 <readi>
-80100c5e:	83 c4 10             	add    $0x10,%esp
-80100c61:	83 f8 20             	cmp    $0x20,%eax
-80100c64:	0f 84 5e ff ff ff    	je     80100bc8 <exec+0xa8>
-  freevm(oldpgdir);
-  return 0;
-
- bad:
-  if(pgdir)
-    freevm(pgdir);
-80100c6a:	83 ec 0c             	sub    $0xc,%esp
-80100c6d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100c73:	e8 08 62 00 00       	call   80106e80 <freevm>
-  if(ip){
-80100c78:	83 c4 10             	add    $0x10,%esp
-    iunlockput(ip);
-80100c7b:	83 ec 0c             	sub    $0xc,%esp
-80100c7e:	57                   	push   %edi
-80100c7f:	e8 1c 0e 00 00       	call   80101aa0 <iunlockput>
-    end_op();
-80100c84:	e8 97 21 00 00       	call   80102e20 <end_op>
-80100c89:	83 c4 10             	add    $0x10,%esp
-    return -1;
-80100c8c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-  }
-  return -1;
-}
-80100c91:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100c94:	5b                   	pop    %ebx
-80100c95:	5e                   	pop    %esi
-80100c96:	5f                   	pop    %edi
-80100c97:	5d                   	pop    %ebp
-80100c98:	c3                   	ret
-80100c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  sz = PGROUNDUP(sz);
-80100ca0:	8b b5 f0 fe ff ff    	mov    -0x110(%ebp),%esi
-80100ca6:	81 c6 ff 0f 00 00    	add    $0xfff,%esi
-80100cac:	81 e6 00 f0 ff ff    	and    $0xfffff000,%esi
-  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
-80100cb2:	8d 9e 00 20 00 00    	lea    0x2000(%esi),%ebx
-  iunlockput(ip);
-80100cb8:	83 ec 0c             	sub    $0xc,%esp
-80100cbb:	57                   	push   %edi
-80100cbc:	e8 df 0d 00 00       	call   80101aa0 <iunlockput>
-  end_op();
-80100cc1:	e8 5a 21 00 00       	call   80102e20 <end_op>
-  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
-80100cc6:	83 c4 0c             	add    $0xc,%esp
-80100cc9:	53                   	push   %ebx
-80100cca:	56                   	push   %esi
-80100ccb:	8b b5 f4 fe ff ff    	mov    -0x10c(%ebp),%esi
-80100cd1:	56                   	push   %esi
-80100cd2:	e8 59 60 00 00       	call   80106d30 <allocuvm>
-80100cd7:	83 c4 10             	add    $0x10,%esp
-80100cda:	89 c7                	mov    %eax,%edi
-80100cdc:	85 c0                	test   %eax,%eax
-80100cde:	0f 84 86 00 00 00    	je     80100d6a <exec+0x24a>
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100ce4:	83 ec 08             	sub    $0x8,%esp
-80100ce7:	8d 80 00 e0 ff ff    	lea    -0x2000(%eax),%eax
-  sp = sz;
-80100ced:	89 fb                	mov    %edi,%ebx
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100cef:	50                   	push   %eax
-80100cf0:	56                   	push   %esi
-  for(argc = 0; argv[argc]; argc++) {
-80100cf1:	31 f6                	xor    %esi,%esi
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-80100cf3:	e8 a8 62 00 00       	call   80106fa0 <clearpteu>
-  for(argc = 0; argv[argc]; argc++) {
-80100cf8:	8b 45 0c             	mov    0xc(%ebp),%eax
-80100cfb:	83 c4 10             	add    $0x10,%esp
-80100cfe:	8b 10                	mov    (%eax),%edx
-80100d00:	85 d2                	test   %edx,%edx
-80100d02:	0f 84 56 01 00 00    	je     80100e5e <exec+0x33e>
-80100d08:	89 bd f0 fe ff ff    	mov    %edi,-0x110(%ebp)
-80100d0e:	8b 7d 0c             	mov    0xc(%ebp),%edi
-80100d11:	eb 23                	jmp    80100d36 <exec+0x216>
-80100d13:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-80100d18:	8d 46 01             	lea    0x1(%esi),%eax
-    ustack[3+argc] = sp;
-80100d1b:	89 9c b5 64 ff ff ff 	mov    %ebx,-0x9c(%ebp,%esi,4)
-80100d22:	8d 8d 58 ff ff ff    	lea    -0xa8(%ebp),%ecx
-  for(argc = 0; argv[argc]; argc++) {
-80100d28:	8b 14 87             	mov    (%edi,%eax,4),%edx
-80100d2b:	85 d2                	test   %edx,%edx
-80100d2d:	74 51                	je     80100d80 <exec+0x260>
-    if(argc >= MAXARG)
-80100d2f:	83 f8 20             	cmp    $0x20,%eax
-80100d32:	74 36                	je     80100d6a <exec+0x24a>
-80100d34:	89 c6                	mov    %eax,%esi
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-80100d36:	83 ec 0c             	sub    $0xc,%esp
-80100d39:	52                   	push   %edx
-80100d3a:	e8 31 3c 00 00       	call   80104970 <strlen>
-80100d3f:	29 c3                	sub    %eax,%ebx
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80100d41:	58                   	pop    %eax
-80100d42:	ff 34 b7             	push   (%edi,%esi,4)
-    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;
-80100d45:	83 eb 01             	sub    $0x1,%ebx
-80100d48:	83 e3 fc             	and    $0xfffffffc,%ebx
-    if(copyout(pgdir, sp, argv[argc], strlen(argv[argc]) + 1) < 0)
-80100d4b:	e8 20 3c 00 00       	call   80104970 <strlen>
-80100d50:	83 c0 01             	add    $0x1,%eax
-80100d53:	50                   	push   %eax
-80100d54:	ff 34 b7             	push   (%edi,%esi,4)
-80100d57:	53                   	push   %ebx
-80100d58:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100d5e:	e8 0d 64 00 00       	call   80107170 <copyout>
-80100d63:	83 c4 20             	add    $0x20,%esp
-80100d66:	85 c0                	test   %eax,%eax
-80100d68:	79 ae                	jns    80100d18 <exec+0x1f8>
-    freevm(pgdir);
-80100d6a:	83 ec 0c             	sub    $0xc,%esp
-80100d6d:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100d73:	e8 08 61 00 00       	call   80106e80 <freevm>
-80100d78:	83 c4 10             	add    $0x10,%esp
-80100d7b:	e9 0c ff ff ff       	jmp    80100c8c <exec+0x16c>
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-80100d80:	8d 14 b5 08 00 00 00 	lea    0x8(,%esi,4),%edx
-  ustack[3+argc] = 0;
-80100d87:	8b bd f0 fe ff ff    	mov    -0x110(%ebp),%edi
-80100d8d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
-80100d93:	8d 46 04             	lea    0x4(%esi),%eax
-  sp -= (3+argc+1) * 4;
-80100d96:	8d 72 0c             	lea    0xc(%edx),%esi
-  ustack[3+argc] = 0;
-80100d99:	c7 84 85 58 ff ff ff 	movl   $0x0,-0xa8(%ebp,%eax,4)
-80100da0:	00 00 00 00 
-  ustack[1] = argc;
-80100da4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
-  ustack[0] = 0xffffffff;  // fake return PC
-80100daa:	c7 85 58 ff ff ff ff 	movl   $0xffffffff,-0xa8(%ebp)
-80100db1:	ff ff ff 
-  ustack[1] = argc;
-80100db4:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-80100dba:	89 d8                	mov    %ebx,%eax
-  sp -= (3+argc+1) * 4;
-80100dbc:	29 f3                	sub    %esi,%ebx
-  ustack[2] = sp - (argc+1)*4;  // argv pointer
-80100dbe:	29 d0                	sub    %edx,%eax
-80100dc0:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
-  if(copyout(pgdir, sp, ustack, (3+argc+1)*4) < 0)
-80100dc6:	56                   	push   %esi
-80100dc7:	51                   	push   %ecx
-80100dc8:	53                   	push   %ebx
-80100dc9:	ff b5 f4 fe ff ff    	push   -0x10c(%ebp)
-80100dcf:	e8 9c 63 00 00       	call   80107170 <copyout>
-80100dd4:	83 c4 10             	add    $0x10,%esp
-80100dd7:	85 c0                	test   %eax,%eax
-80100dd9:	78 8f                	js     80100d6a <exec+0x24a>
-  for(last=s=path; *s; s++)
-80100ddb:	8b 45 08             	mov    0x8(%ebp),%eax
-80100dde:	8b 55 08             	mov    0x8(%ebp),%edx
-80100de1:	0f b6 00             	movzbl (%eax),%eax
-80100de4:	84 c0                	test   %al,%al
-80100de6:	74 17                	je     80100dff <exec+0x2df>
-80100de8:	89 d1                	mov    %edx,%ecx
-80100dea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      last = s+1;
-80100df0:	83 c1 01             	add    $0x1,%ecx
-80100df3:	3c 2f                	cmp    $0x2f,%al
-  for(last=s=path; *s; s++)
-80100df5:	0f b6 01             	movzbl (%ecx),%eax
-      last = s+1;
-80100df8:	0f 44 d1             	cmove  %ecx,%edx
-  for(last=s=path; *s; s++)
-80100dfb:	84 c0                	test   %al,%al
-80100dfd:	75 f1                	jne    80100df0 <exec+0x2d0>
-  safestrcpy(curproc->name, last, sizeof(curproc->name));
-80100dff:	83 ec 04             	sub    $0x4,%esp
-80100e02:	6a 10                	push   $0x10
-80100e04:	52                   	push   %edx
-80100e05:	8b b5 ec fe ff ff    	mov    -0x114(%ebp),%esi
-80100e0b:	8d 46 6c             	lea    0x6c(%esi),%eax
-80100e0e:	50                   	push   %eax
-80100e0f:	e8 1c 3b 00 00       	call   80104930 <safestrcpy>
-  curproc->pgdir = pgdir;
-80100e14:	8b 8d f4 fe ff ff    	mov    -0x10c(%ebp),%ecx
-  oldpgdir = curproc->pgdir;
-80100e1a:	89 f0                	mov    %esi,%eax
-80100e1c:	8b 76 04             	mov    0x4(%esi),%esi
-  curproc->sz = sz;
-80100e1f:	89 38                	mov    %edi,(%eax)
-  curproc->pgdir = pgdir;
-80100e21:	89 48 04             	mov    %ecx,0x4(%eax)
-  curproc->tf->eip = elf.entry;  // main
-80100e24:	89 c1                	mov    %eax,%ecx
-80100e26:	8b 95 3c ff ff ff    	mov    -0xc4(%ebp),%edx
-80100e2c:	8b 40 18             	mov    0x18(%eax),%eax
-80100e2f:	89 50 38             	mov    %edx,0x38(%eax)
-  curproc->tf->esp = sp;
-80100e32:	8b 41 18             	mov    0x18(%ecx),%eax
-80100e35:	89 58 44             	mov    %ebx,0x44(%eax)
-  switchuvm(curproc);
-80100e38:	89 0c 24             	mov    %ecx,(%esp)
-80100e3b:	e8 90 5c 00 00       	call   80106ad0 <switchuvm>
-  freevm(oldpgdir);
-80100e40:	89 34 24             	mov    %esi,(%esp)
-80100e43:	e8 38 60 00 00       	call   80106e80 <freevm>
-  return 0;
-80100e48:	83 c4 10             	add    $0x10,%esp
-80100e4b:	31 c0                	xor    %eax,%eax
-80100e4d:	e9 3f fe ff ff       	jmp    80100c91 <exec+0x171>
-  for(i=0, off=elf.phoff; i<elf.phnum; i++, off+=sizeof(ph)){
-80100e52:	bb 00 20 00 00       	mov    $0x2000,%ebx
-80100e57:	31 f6                	xor    %esi,%esi
-80100e59:	e9 5a fe ff ff       	jmp    80100cb8 <exec+0x198>
-  for(argc = 0; argv[argc]; argc++) {
-80100e5e:	be 10 00 00 00       	mov    $0x10,%esi
-80100e63:	ba 04 00 00 00       	mov    $0x4,%edx
-80100e68:	b8 03 00 00 00       	mov    $0x3,%eax
-80100e6d:	c7 85 f0 fe ff ff 00 	movl   $0x0,-0x110(%ebp)
-80100e74:	00 00 00 
-80100e77:	8d 8d 58 ff ff ff    	lea    -0xa8(%ebp),%ecx
-80100e7d:	e9 17 ff ff ff       	jmp    80100d99 <exec+0x279>
-    end_op();
-80100e82:	e8 99 1f 00 00       	call   80102e20 <end_op>
-    cprintf("exec: fail\n");
-80100e87:	83 ec 0c             	sub    $0xc,%esp
-80100e8a:	68 cb 72 10 80       	push   $0x801072cb
-80100e8f:	e8 1c f8 ff ff       	call   801006b0 <cprintf>
-    return -1;
-80100e94:	83 c4 10             	add    $0x10,%esp
-80100e97:	e9 f0 fd ff ff       	jmp    80100c8c <exec+0x16c>
-80100e9c:	66 90                	xchg   %ax,%ax
-80100e9e:	66 90                	xchg   %ax,%ax
-
-80100ea0 <fileinit>:
-  struct file file[NFILE];
-} ftable;
-
-void
-fileinit(void)
-{
-80100ea0:	55                   	push   %ebp
-80100ea1:	89 e5                	mov    %esp,%ebp
-80100ea3:	83 ec 10             	sub    $0x10,%esp
-  initlock(&ftable.lock, "ftable");
-80100ea6:	68 d7 72 10 80       	push   $0x801072d7
-80100eab:	68 80 ef 10 80       	push   $0x8010ef80
-80100eb0:	e8 db 35 00 00       	call   80104490 <initlock>
-}
-80100eb5:	83 c4 10             	add    $0x10,%esp
-80100eb8:	c9                   	leave
-80100eb9:	c3                   	ret
-80100eba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80100ec0 <filealloc>:
-
-// Allocate a file structure.
-struct file*
-filealloc(void)
-{
-80100ec0:	55                   	push   %ebp
-80100ec1:	89 e5                	mov    %esp,%ebp
-80100ec3:	53                   	push   %ebx
-  struct file *f;
-
-  acquire(&ftable.lock);
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100ec4:	bb b4 ef 10 80       	mov    $0x8010efb4,%ebx
-{
-80100ec9:	83 ec 10             	sub    $0x10,%esp
-  acquire(&ftable.lock);
-80100ecc:	68 80 ef 10 80       	push   $0x8010ef80
-80100ed1:	e8 aa 37 00 00       	call   80104680 <acquire>
-80100ed6:	83 c4 10             	add    $0x10,%esp
-80100ed9:	eb 10                	jmp    80100eeb <filealloc+0x2b>
-80100edb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  for(f = ftable.file; f < ftable.file + NFILE; f++){
-80100ee0:	83 c3 18             	add    $0x18,%ebx
-80100ee3:	81 fb 14 f9 10 80    	cmp    $0x8010f914,%ebx
-80100ee9:	74 25                	je     80100f10 <filealloc+0x50>
-    if(f->ref == 0){
-80100eeb:	8b 43 04             	mov    0x4(%ebx),%eax
-80100eee:	85 c0                	test   %eax,%eax
-80100ef0:	75 ee                	jne    80100ee0 <filealloc+0x20>
-      f->ref = 1;
-      release(&ftable.lock);
-80100ef2:	83 ec 0c             	sub    $0xc,%esp
-      f->ref = 1;
-80100ef5:	c7 43 04 01 00 00 00 	movl   $0x1,0x4(%ebx)
-      release(&ftable.lock);
-80100efc:	68 80 ef 10 80       	push   $0x8010ef80
-80100f01:	e8 1a 37 00 00       	call   80104620 <release>
-      return f;
-    }
-  }
-  release(&ftable.lock);
-  return 0;
-}
-80100f06:	89 d8                	mov    %ebx,%eax
-      return f;
-80100f08:	83 c4 10             	add    $0x10,%esp
-}
-80100f0b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80100f0e:	c9                   	leave
-80100f0f:	c3                   	ret
-  release(&ftable.lock);
-80100f10:	83 ec 0c             	sub    $0xc,%esp
-  return 0;
-80100f13:	31 db                	xor    %ebx,%ebx
-  release(&ftable.lock);
-80100f15:	68 80 ef 10 80       	push   $0x8010ef80
-80100f1a:	e8 01 37 00 00       	call   80104620 <release>
-}
-80100f1f:	89 d8                	mov    %ebx,%eax
-  return 0;
-80100f21:	83 c4 10             	add    $0x10,%esp
-}
-80100f24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80100f27:	c9                   	leave
-80100f28:	c3                   	ret
-80100f29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80100f30 <filedup>:
-
-// Increment ref count for file f.
-struct file*
-filedup(struct file *f)
-{
-80100f30:	55                   	push   %ebp
-80100f31:	89 e5                	mov    %esp,%ebp
-80100f33:	53                   	push   %ebx
-80100f34:	83 ec 10             	sub    $0x10,%esp
-80100f37:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&ftable.lock);
-80100f3a:	68 80 ef 10 80       	push   $0x8010ef80
-80100f3f:	e8 3c 37 00 00       	call   80104680 <acquire>
-  if(f->ref < 1)
-80100f44:	8b 43 04             	mov    0x4(%ebx),%eax
-80100f47:	83 c4 10             	add    $0x10,%esp
-80100f4a:	85 c0                	test   %eax,%eax
-80100f4c:	7e 1a                	jle    80100f68 <filedup+0x38>
-    panic("filedup");
-  f->ref++;
-80100f4e:	83 c0 01             	add    $0x1,%eax
-  release(&ftable.lock);
-80100f51:	83 ec 0c             	sub    $0xc,%esp
-  f->ref++;
-80100f54:	89 43 04             	mov    %eax,0x4(%ebx)
-  release(&ftable.lock);
-80100f57:	68 80 ef 10 80       	push   $0x8010ef80
-80100f5c:	e8 bf 36 00 00       	call   80104620 <release>
-  return f;
-}
-80100f61:	89 d8                	mov    %ebx,%eax
-80100f63:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80100f66:	c9                   	leave
-80100f67:	c3                   	ret
-    panic("filedup");
-80100f68:	83 ec 0c             	sub    $0xc,%esp
-80100f6b:	68 de 72 10 80       	push   $0x801072de
-80100f70:	e8 0b f4 ff ff       	call   80100380 <panic>
-80100f75:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80100f7c:	00 
-80100f7d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80100f80 <fileclose>:
-
-// Close file f.  (Decrement ref count, close when reaches 0.)
-void
-fileclose(struct file *f)
-{
-80100f80:	55                   	push   %ebp
-80100f81:	89 e5                	mov    %esp,%ebp
-80100f83:	57                   	push   %edi
-80100f84:	56                   	push   %esi
-80100f85:	53                   	push   %ebx
-80100f86:	83 ec 28             	sub    $0x28,%esp
-80100f89:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct file ff;
-
-  acquire(&ftable.lock);
-80100f8c:	68 80 ef 10 80       	push   $0x8010ef80
-80100f91:	e8 ea 36 00 00       	call   80104680 <acquire>
-  if(f->ref < 1)
-80100f96:	8b 53 04             	mov    0x4(%ebx),%edx
-80100f99:	83 c4 10             	add    $0x10,%esp
-80100f9c:	85 d2                	test   %edx,%edx
-80100f9e:	0f 8e a5 00 00 00    	jle    80101049 <fileclose+0xc9>
-    panic("fileclose");
-  if(--f->ref > 0){
-80100fa4:	83 ea 01             	sub    $0x1,%edx
-80100fa7:	89 53 04             	mov    %edx,0x4(%ebx)
-80100faa:	75 44                	jne    80100ff0 <fileclose+0x70>
-    release(&ftable.lock);
-    return;
-  }
-  ff = *f;
-80100fac:	0f b6 43 09          	movzbl 0x9(%ebx),%eax
-  f->ref = 0;
-  f->type = FD_NONE;
-  release(&ftable.lock);
-80100fb0:	83 ec 0c             	sub    $0xc,%esp
-  ff = *f;
-80100fb3:	8b 3b                	mov    (%ebx),%edi
-  f->type = FD_NONE;
-80100fb5:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-  ff = *f;
-80100fbb:	8b 73 0c             	mov    0xc(%ebx),%esi
-80100fbe:	88 45 e7             	mov    %al,-0x19(%ebp)
-80100fc1:	8b 43 10             	mov    0x10(%ebx),%eax
-80100fc4:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  release(&ftable.lock);
-80100fc7:	68 80 ef 10 80       	push   $0x8010ef80
-80100fcc:	e8 4f 36 00 00       	call   80104620 <release>
-
-  if(ff.type == FD_PIPE)
-80100fd1:	83 c4 10             	add    $0x10,%esp
-80100fd4:	83 ff 01             	cmp    $0x1,%edi
-80100fd7:	74 57                	je     80101030 <fileclose+0xb0>
-    pipeclose(ff.pipe, ff.writable);
-  else if(ff.type == FD_INODE){
-80100fd9:	83 ff 02             	cmp    $0x2,%edi
-80100fdc:	74 2a                	je     80101008 <fileclose+0x88>
-    begin_op();
-    iput(ff.ip);
-    end_op();
-  }
-}
-80100fde:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100fe1:	5b                   	pop    %ebx
-80100fe2:	5e                   	pop    %esi
-80100fe3:	5f                   	pop    %edi
-80100fe4:	5d                   	pop    %ebp
-80100fe5:	c3                   	ret
-80100fe6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80100fed:	00 
-80100fee:	66 90                	xchg   %ax,%ax
-    release(&ftable.lock);
-80100ff0:	c7 45 08 80 ef 10 80 	movl   $0x8010ef80,0x8(%ebp)
-}
-80100ff7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80100ffa:	5b                   	pop    %ebx
-80100ffb:	5e                   	pop    %esi
-80100ffc:	5f                   	pop    %edi
-80100ffd:	5d                   	pop    %ebp
-    release(&ftable.lock);
-80100ffe:	e9 1d 36 00 00       	jmp    80104620 <release>
-80101003:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    begin_op();
-80101008:	e8 a3 1d 00 00       	call   80102db0 <begin_op>
-    iput(ff.ip);
-8010100d:	83 ec 0c             	sub    $0xc,%esp
-80101010:	ff 75 e0             	push   -0x20(%ebp)
-80101013:	e8 28 09 00 00       	call   80101940 <iput>
-    end_op();
-80101018:	83 c4 10             	add    $0x10,%esp
-}
-8010101b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010101e:	5b                   	pop    %ebx
-8010101f:	5e                   	pop    %esi
-80101020:	5f                   	pop    %edi
-80101021:	5d                   	pop    %ebp
-    end_op();
-80101022:	e9 f9 1d 00 00       	jmp    80102e20 <end_op>
-80101027:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010102e:	00 
-8010102f:	90                   	nop
-    pipeclose(ff.pipe, ff.writable);
-80101030:	0f be 5d e7          	movsbl -0x19(%ebp),%ebx
-80101034:	83 ec 08             	sub    $0x8,%esp
-80101037:	53                   	push   %ebx
-80101038:	56                   	push   %esi
-80101039:	e8 32 25 00 00       	call   80103570 <pipeclose>
-8010103e:	83 c4 10             	add    $0x10,%esp
-}
-80101041:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101044:	5b                   	pop    %ebx
-80101045:	5e                   	pop    %esi
-80101046:	5f                   	pop    %edi
-80101047:	5d                   	pop    %ebp
-80101048:	c3                   	ret
-    panic("fileclose");
-80101049:	83 ec 0c             	sub    $0xc,%esp
-8010104c:	68 e6 72 10 80       	push   $0x801072e6
-80101051:	e8 2a f3 ff ff       	call   80100380 <panic>
-80101056:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010105d:	00 
-8010105e:	66 90                	xchg   %ax,%ax
-
-80101060 <filestat>:
-
-// Get metadata about file f.
-int
-filestat(struct file *f, struct stat *st)
-{
-80101060:	55                   	push   %ebp
-80101061:	89 e5                	mov    %esp,%ebp
-80101063:	53                   	push   %ebx
-80101064:	83 ec 04             	sub    $0x4,%esp
-80101067:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(f->type == FD_INODE){
-8010106a:	83 3b 02             	cmpl   $0x2,(%ebx)
-8010106d:	75 31                	jne    801010a0 <filestat+0x40>
-    ilock(f->ip);
-8010106f:	83 ec 0c             	sub    $0xc,%esp
-80101072:	ff 73 10             	push   0x10(%ebx)
-80101075:	e8 96 07 00 00       	call   80101810 <ilock>
-    stati(f->ip, st);
-8010107a:	58                   	pop    %eax
-8010107b:	5a                   	pop    %edx
-8010107c:	ff 75 0c             	push   0xc(%ebp)
-8010107f:	ff 73 10             	push   0x10(%ebx)
-80101082:	e8 69 0a 00 00       	call   80101af0 <stati>
-    iunlock(f->ip);
-80101087:	59                   	pop    %ecx
-80101088:	ff 73 10             	push   0x10(%ebx)
-8010108b:	e8 60 08 00 00       	call   801018f0 <iunlock>
-    return 0;
-  }
-  return -1;
-}
-80101090:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    return 0;
-80101093:	83 c4 10             	add    $0x10,%esp
-80101096:	31 c0                	xor    %eax,%eax
-}
-80101098:	c9                   	leave
-80101099:	c3                   	ret
-8010109a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801010a0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  return -1;
-801010a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801010a8:	c9                   	leave
-801010a9:	c3                   	ret
-801010aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801010b0 <fileread>:
-
-// Read from file f.
-int
-fileread(struct file *f, char *addr, int n)
-{
-801010b0:	55                   	push   %ebp
-801010b1:	89 e5                	mov    %esp,%ebp
-801010b3:	57                   	push   %edi
-801010b4:	56                   	push   %esi
-801010b5:	53                   	push   %ebx
-801010b6:	83 ec 0c             	sub    $0xc,%esp
-801010b9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801010bc:	8b 75 0c             	mov    0xc(%ebp),%esi
-801010bf:	8b 7d 10             	mov    0x10(%ebp),%edi
-  int r;
-
-  if(f->readable == 0)
-801010c2:	80 7b 08 00          	cmpb   $0x0,0x8(%ebx)
-801010c6:	74 60                	je     80101128 <fileread+0x78>
-    return -1;
-  if(f->type == FD_PIPE)
-801010c8:	8b 03                	mov    (%ebx),%eax
-801010ca:	83 f8 01             	cmp    $0x1,%eax
-801010cd:	74 41                	je     80101110 <fileread+0x60>
-    return piperead(f->pipe, addr, n);
-  if(f->type == FD_INODE){
-801010cf:	83 f8 02             	cmp    $0x2,%eax
-801010d2:	75 5b                	jne    8010112f <fileread+0x7f>
-    ilock(f->ip);
-801010d4:	83 ec 0c             	sub    $0xc,%esp
-801010d7:	ff 73 10             	push   0x10(%ebx)
-801010da:	e8 31 07 00 00       	call   80101810 <ilock>
-    if((r = readi(f->ip, addr, f->off, n)) > 0)
-801010df:	57                   	push   %edi
-801010e0:	ff 73 14             	push   0x14(%ebx)
-801010e3:	56                   	push   %esi
-801010e4:	ff 73 10             	push   0x10(%ebx)
-801010e7:	e8 34 0a 00 00       	call   80101b20 <readi>
-801010ec:	83 c4 20             	add    $0x20,%esp
-801010ef:	89 c6                	mov    %eax,%esi
-801010f1:	85 c0                	test   %eax,%eax
-801010f3:	7e 03                	jle    801010f8 <fileread+0x48>
-      f->off += r;
-801010f5:	01 43 14             	add    %eax,0x14(%ebx)
-    iunlock(f->ip);
-801010f8:	83 ec 0c             	sub    $0xc,%esp
-801010fb:	ff 73 10             	push   0x10(%ebx)
-801010fe:	e8 ed 07 00 00       	call   801018f0 <iunlock>
-    return r;
-80101103:	83 c4 10             	add    $0x10,%esp
-  }
-  panic("fileread");
-}
-80101106:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101109:	89 f0                	mov    %esi,%eax
-8010110b:	5b                   	pop    %ebx
-8010110c:	5e                   	pop    %esi
-8010110d:	5f                   	pop    %edi
-8010110e:	5d                   	pop    %ebp
-8010110f:	c3                   	ret
-    return piperead(f->pipe, addr, n);
-80101110:	8b 43 0c             	mov    0xc(%ebx),%eax
-80101113:	89 45 08             	mov    %eax,0x8(%ebp)
-}
-80101116:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101119:	5b                   	pop    %ebx
-8010111a:	5e                   	pop    %esi
-8010111b:	5f                   	pop    %edi
-8010111c:	5d                   	pop    %ebp
-    return piperead(f->pipe, addr, n);
-8010111d:	e9 0e 26 00 00       	jmp    80103730 <piperead>
-80101122:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-80101128:	be ff ff ff ff       	mov    $0xffffffff,%esi
-8010112d:	eb d7                	jmp    80101106 <fileread+0x56>
-  panic("fileread");
-8010112f:	83 ec 0c             	sub    $0xc,%esp
-80101132:	68 f0 72 10 80       	push   $0x801072f0
-80101137:	e8 44 f2 ff ff       	call   80100380 <panic>
-8010113c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80101140 <filewrite>:
-
-//PAGEBREAK!
-// Write to file f.
-int
-filewrite(struct file *f, char *addr, int n)
-{
-80101140:	55                   	push   %ebp
-80101141:	89 e5                	mov    %esp,%ebp
-80101143:	57                   	push   %edi
-80101144:	56                   	push   %esi
-80101145:	53                   	push   %ebx
-80101146:	83 ec 1c             	sub    $0x1c,%esp
-80101149:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010114c:	8b 5d 08             	mov    0x8(%ebp),%ebx
-8010114f:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80101152:	8b 45 10             	mov    0x10(%ebp),%eax
-  int r;
-
-  if(f->writable == 0)
-80101155:	80 7b 09 00          	cmpb   $0x0,0x9(%ebx)
-{
-80101159:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(f->writable == 0)
-8010115c:	0f 84 bb 00 00 00    	je     8010121d <filewrite+0xdd>
-    return -1;
-  if(f->type == FD_PIPE)
-80101162:	8b 03                	mov    (%ebx),%eax
-80101164:	83 f8 01             	cmp    $0x1,%eax
-80101167:	0f 84 bf 00 00 00    	je     8010122c <filewrite+0xec>
-    return pipewrite(f->pipe, addr, n);
-  if(f->type == FD_INODE){
-8010116d:	83 f8 02             	cmp    $0x2,%eax
-80101170:	0f 85 c8 00 00 00    	jne    8010123e <filewrite+0xfe>
-    // and 2 blocks of slop for non-aligned writes.
-    // this really belongs lower down, since writei()
-    // might be writing a device like the console.
-    int max = ((MAXOPBLOCKS-1-1-2) / 2) * 512;
-    int i = 0;
-    while(i < n){
-80101176:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    int i = 0;
-80101179:	31 f6                	xor    %esi,%esi
-    while(i < n){
-8010117b:	85 c0                	test   %eax,%eax
-8010117d:	7f 30                	jg     801011af <filewrite+0x6f>
-8010117f:	e9 94 00 00 00       	jmp    80101218 <filewrite+0xd8>
-80101184:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        n1 = max;
-
-      begin_op();
-      ilock(f->ip);
-      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
-        f->off += r;
-80101188:	01 43 14             	add    %eax,0x14(%ebx)
-      iunlock(f->ip);
-8010118b:	83 ec 0c             	sub    $0xc,%esp
-        f->off += r;
-8010118e:	89 45 e0             	mov    %eax,-0x20(%ebp)
-      iunlock(f->ip);
-80101191:	ff 73 10             	push   0x10(%ebx)
-80101194:	e8 57 07 00 00       	call   801018f0 <iunlock>
-      end_op();
-80101199:	e8 82 1c 00 00       	call   80102e20 <end_op>
-
-      if(r < 0)
-        break;
-      if(r != n1)
-8010119e:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801011a1:	83 c4 10             	add    $0x10,%esp
-801011a4:	39 c7                	cmp    %eax,%edi
-801011a6:	75 5c                	jne    80101204 <filewrite+0xc4>
-        panic("short filewrite");
-      i += r;
-801011a8:	01 fe                	add    %edi,%esi
-    while(i < n){
-801011aa:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
-801011ad:	7e 69                	jle    80101218 <filewrite+0xd8>
-      int n1 = n - i;
-801011af:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-      if(n1 > max)
-801011b2:	b8 00 06 00 00       	mov    $0x600,%eax
-      int n1 = n - i;
-801011b7:	29 f7                	sub    %esi,%edi
-      if(n1 > max)
-801011b9:	39 c7                	cmp    %eax,%edi
-801011bb:	0f 4f f8             	cmovg  %eax,%edi
-      begin_op();
-801011be:	e8 ed 1b 00 00       	call   80102db0 <begin_op>
-      ilock(f->ip);
-801011c3:	83 ec 0c             	sub    $0xc,%esp
-801011c6:	ff 73 10             	push   0x10(%ebx)
-801011c9:	e8 42 06 00 00       	call   80101810 <ilock>
-      if ((r = writei(f->ip, addr + i, f->off, n1)) > 0)
-801011ce:	57                   	push   %edi
-801011cf:	ff 73 14             	push   0x14(%ebx)
-801011d2:	8b 45 dc             	mov    -0x24(%ebp),%eax
-801011d5:	01 f0                	add    %esi,%eax
-801011d7:	50                   	push   %eax
-801011d8:	ff 73 10             	push   0x10(%ebx)
-801011db:	e8 40 0a 00 00       	call   80101c20 <writei>
-801011e0:	83 c4 20             	add    $0x20,%esp
-801011e3:	85 c0                	test   %eax,%eax
-801011e5:	7f a1                	jg     80101188 <filewrite+0x48>
-801011e7:	89 45 e0             	mov    %eax,-0x20(%ebp)
-      iunlock(f->ip);
-801011ea:	83 ec 0c             	sub    $0xc,%esp
-801011ed:	ff 73 10             	push   0x10(%ebx)
-801011f0:	e8 fb 06 00 00       	call   801018f0 <iunlock>
-      end_op();
-801011f5:	e8 26 1c 00 00       	call   80102e20 <end_op>
-      if(r < 0)
-801011fa:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801011fd:	83 c4 10             	add    $0x10,%esp
-80101200:	85 c0                	test   %eax,%eax
-80101202:	75 14                	jne    80101218 <filewrite+0xd8>
-        panic("short filewrite");
-80101204:	83 ec 0c             	sub    $0xc,%esp
-80101207:	68 f9 72 10 80       	push   $0x801072f9
-8010120c:	e8 6f f1 ff ff       	call   80100380 <panic>
-80101211:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    }
-    return i == n ? n : -1;
-80101218:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
-8010121b:	74 05                	je     80101222 <filewrite+0xe2>
-8010121d:	be ff ff ff ff       	mov    $0xffffffff,%esi
-  }
-  panic("filewrite");
-}
-80101222:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101225:	89 f0                	mov    %esi,%eax
-80101227:	5b                   	pop    %ebx
-80101228:	5e                   	pop    %esi
-80101229:	5f                   	pop    %edi
-8010122a:	5d                   	pop    %ebp
-8010122b:	c3                   	ret
-    return pipewrite(f->pipe, addr, n);
-8010122c:	8b 43 0c             	mov    0xc(%ebx),%eax
-8010122f:	89 45 08             	mov    %eax,0x8(%ebp)
-}
-80101232:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101235:	5b                   	pop    %ebx
-80101236:	5e                   	pop    %esi
-80101237:	5f                   	pop    %edi
-80101238:	5d                   	pop    %ebp
-    return pipewrite(f->pipe, addr, n);
-80101239:	e9 d2 23 00 00       	jmp    80103610 <pipewrite>
-  panic("filewrite");
-8010123e:	83 ec 0c             	sub    $0xc,%esp
-80101241:	68 ff 72 10 80       	push   $0x801072ff
-80101246:	e8 35 f1 ff ff       	call   80100380 <panic>
-8010124b:	66 90                	xchg   %ax,%ax
-8010124d:	66 90                	xchg   %ax,%ax
-8010124f:	90                   	nop
-
-80101250 <balloc>:
-// Blocks.
-
-// Allocate a zeroed disk block.
-static uint
-balloc(uint dev)
-{
-80101250:	55                   	push   %ebp
-80101251:	89 e5                	mov    %esp,%ebp
-80101253:	57                   	push   %edi
-80101254:	56                   	push   %esi
-80101255:	53                   	push   %ebx
-80101256:	83 ec 1c             	sub    $0x1c,%esp
-  int b, bi, m;
-  struct buf *bp;
-
-  bp = 0;
-  for(b = 0; b < sb.size; b += BPB){
-80101259:	8b 0d d4 15 11 80    	mov    0x801115d4,%ecx
-{
-8010125f:	89 45 dc             	mov    %eax,-0x24(%ebp)
-  for(b = 0; b < sb.size; b += BPB){
-80101262:	85 c9                	test   %ecx,%ecx
-80101264:	0f 84 8c 00 00 00    	je     801012f6 <balloc+0xa6>
-8010126a:	31 ff                	xor    %edi,%edi
-    bp = bread(dev, BBLOCK(b, sb));
-8010126c:	89 f8                	mov    %edi,%eax
-8010126e:	83 ec 08             	sub    $0x8,%esp
-80101271:	89 fe                	mov    %edi,%esi
-80101273:	c1 f8 0c             	sar    $0xc,%eax
-80101276:	03 05 ec 15 11 80    	add    0x801115ec,%eax
-8010127c:	50                   	push   %eax
-8010127d:	ff 75 dc             	push   -0x24(%ebp)
-80101280:	e8 4b ee ff ff       	call   801000d0 <bread>
-80101285:	83 c4 10             	add    $0x10,%esp
-80101288:	89 7d d8             	mov    %edi,-0x28(%ebp)
-8010128b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-8010128e:	a1 d4 15 11 80       	mov    0x801115d4,%eax
-80101293:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80101296:	31 c0                	xor    %eax,%eax
-80101298:	eb 32                	jmp    801012cc <balloc+0x7c>
-8010129a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      m = 1 << (bi % 8);
-801012a0:	89 c1                	mov    %eax,%ecx
-801012a2:	bb 01 00 00 00       	mov    $0x1,%ebx
-      if((bp->data[bi/8] & m) == 0){  // Is block free?
-801012a7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-      m = 1 << (bi % 8);
-801012aa:	83 e1 07             	and    $0x7,%ecx
-801012ad:	d3 e3                	shl    %cl,%ebx
-      if((bp->data[bi/8] & m) == 0){  // Is block free?
-801012af:	89 c1                	mov    %eax,%ecx
-801012b1:	c1 f9 03             	sar    $0x3,%ecx
-801012b4:	0f b6 7c 0f 5c       	movzbl 0x5c(%edi,%ecx,1),%edi
-801012b9:	89 fa                	mov    %edi,%edx
-801012bb:	85 df                	test   %ebx,%edi
-801012bd:	74 49                	je     80101308 <balloc+0xb8>
-    for(bi = 0; bi < BPB && b + bi < sb.size; bi++){
-801012bf:	83 c0 01             	add    $0x1,%eax
-801012c2:	83 c6 01             	add    $0x1,%esi
-801012c5:	3d 00 10 00 00       	cmp    $0x1000,%eax
-801012ca:	74 07                	je     801012d3 <balloc+0x83>
-801012cc:	8b 55 e0             	mov    -0x20(%ebp),%edx
-801012cf:	39 d6                	cmp    %edx,%esi
-801012d1:	72 cd                	jb     801012a0 <balloc+0x50>
-        brelse(bp);
-        bzero(dev, b + bi);
-        return b + bi;
-      }
-    }
-    brelse(bp);
-801012d3:	8b 7d d8             	mov    -0x28(%ebp),%edi
-801012d6:	83 ec 0c             	sub    $0xc,%esp
-801012d9:	ff 75 e4             	push   -0x1c(%ebp)
-  for(b = 0; b < sb.size; b += BPB){
-801012dc:	81 c7 00 10 00 00    	add    $0x1000,%edi
-    brelse(bp);
-801012e2:	e8 09 ef ff ff       	call   801001f0 <brelse>
-  for(b = 0; b < sb.size; b += BPB){
-801012e7:	83 c4 10             	add    $0x10,%esp
-801012ea:	3b 3d d4 15 11 80    	cmp    0x801115d4,%edi
-801012f0:	0f 82 76 ff ff ff    	jb     8010126c <balloc+0x1c>
-  }
-  panic("balloc: out of blocks");
-801012f6:	83 ec 0c             	sub    $0xc,%esp
-801012f9:	68 09 73 10 80       	push   $0x80107309
-801012fe:	e8 7d f0 ff ff       	call   80100380 <panic>
-80101303:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        bp->data[bi/8] |= m;  // Mark block in use.
-80101308:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-        log_write(bp);
-8010130b:	83 ec 0c             	sub    $0xc,%esp
-        bp->data[bi/8] |= m;  // Mark block in use.
-8010130e:	09 da                	or     %ebx,%edx
-80101310:	88 54 0f 5c          	mov    %dl,0x5c(%edi,%ecx,1)
-        log_write(bp);
-80101314:	57                   	push   %edi
-80101315:	e8 76 1c 00 00       	call   80102f90 <log_write>
-        brelse(bp);
-8010131a:	89 3c 24             	mov    %edi,(%esp)
-8010131d:	e8 ce ee ff ff       	call   801001f0 <brelse>
-  bp = bread(dev, bno);
-80101322:	58                   	pop    %eax
-80101323:	5a                   	pop    %edx
-80101324:	56                   	push   %esi
-80101325:	ff 75 dc             	push   -0x24(%ebp)
-80101328:	e8 a3 ed ff ff       	call   801000d0 <bread>
-  memset(bp->data, 0, BSIZE);
-8010132d:	83 c4 0c             	add    $0xc,%esp
-  bp = bread(dev, bno);
-80101330:	89 c3                	mov    %eax,%ebx
-  memset(bp->data, 0, BSIZE);
-80101332:	8d 40 5c             	lea    0x5c(%eax),%eax
-80101335:	68 00 02 00 00       	push   $0x200
-8010133a:	6a 00                	push   $0x0
-8010133c:	50                   	push   %eax
-8010133d:	e8 3e 34 00 00       	call   80104780 <memset>
-  log_write(bp);
-80101342:	89 1c 24             	mov    %ebx,(%esp)
-80101345:	e8 46 1c 00 00       	call   80102f90 <log_write>
-  brelse(bp);
-8010134a:	89 1c 24             	mov    %ebx,(%esp)
-8010134d:	e8 9e ee ff ff       	call   801001f0 <brelse>
-}
-80101352:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101355:	89 f0                	mov    %esi,%eax
-80101357:	5b                   	pop    %ebx
-80101358:	5e                   	pop    %esi
-80101359:	5f                   	pop    %edi
-8010135a:	5d                   	pop    %ebp
-8010135b:	c3                   	ret
-8010135c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80101360 <iget>:
-// Find the inode with number inum on device dev
-// and return the in-memory copy. Does not lock
-// the inode and does not read it from disk.
-static struct inode*
-iget(uint dev, uint inum)
-{
-80101360:	55                   	push   %ebp
-80101361:	89 e5                	mov    %esp,%ebp
-80101363:	57                   	push   %edi
-  struct inode *ip, *empty;
-
-  acquire(&icache.lock);
-
-  // Is the inode already cached?
-  empty = 0;
-80101364:	31 ff                	xor    %edi,%edi
-{
-80101366:	56                   	push   %esi
-80101367:	89 c6                	mov    %eax,%esi
-80101369:	53                   	push   %ebx
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010136a:	bb b4 f9 10 80       	mov    $0x8010f9b4,%ebx
-{
-8010136f:	83 ec 28             	sub    $0x28,%esp
-80101372:	89 55 e4             	mov    %edx,-0x1c(%ebp)
-  acquire(&icache.lock);
-80101375:	68 80 f9 10 80       	push   $0x8010f980
-8010137a:	e8 01 33 00 00       	call   80104680 <acquire>
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-8010137f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-  acquire(&icache.lock);
-80101382:	83 c4 10             	add    $0x10,%esp
-80101385:	eb 1b                	jmp    801013a2 <iget+0x42>
-80101387:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010138e:	00 
-8010138f:	90                   	nop
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101390:	39 33                	cmp    %esi,(%ebx)
-80101392:	74 6c                	je     80101400 <iget+0xa0>
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101394:	81 c3 90 00 00 00    	add    $0x90,%ebx
-8010139a:	81 fb d4 15 11 80    	cmp    $0x801115d4,%ebx
-801013a0:	74 26                	je     801013c8 <iget+0x68>
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-801013a2:	8b 43 08             	mov    0x8(%ebx),%eax
-801013a5:	85 c0                	test   %eax,%eax
-801013a7:	7f e7                	jg     80101390 <iget+0x30>
-      ip->ref++;
-      release(&icache.lock);
-      return ip;
-    }
-    if(empty == 0 && ip->ref == 0)    // Remember empty slot.
-801013a9:	85 ff                	test   %edi,%edi
-801013ab:	75 e7                	jne    80101394 <iget+0x34>
-801013ad:	85 c0                	test   %eax,%eax
-801013af:	75 76                	jne    80101427 <iget+0xc7>
-      empty = ip;
-801013b1:	89 df                	mov    %ebx,%edi
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-801013b3:	81 c3 90 00 00 00    	add    $0x90,%ebx
-801013b9:	81 fb d4 15 11 80    	cmp    $0x801115d4,%ebx
-801013bf:	75 e1                	jne    801013a2 <iget+0x42>
-801013c1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  }
-
-  // Recycle an inode cache entry.
-  if(empty == 0)
-801013c8:	85 ff                	test   %edi,%edi
-801013ca:	74 79                	je     80101445 <iget+0xe5>
-  ip = empty;
-  ip->dev = dev;
-  ip->inum = inum;
-  ip->ref = 1;
-  ip->valid = 0;
-  release(&icache.lock);
-801013cc:	83 ec 0c             	sub    $0xc,%esp
-  ip->dev = dev;
-801013cf:	89 37                	mov    %esi,(%edi)
-  ip->inum = inum;
-801013d1:	89 57 04             	mov    %edx,0x4(%edi)
-  ip->ref = 1;
-801013d4:	c7 47 08 01 00 00 00 	movl   $0x1,0x8(%edi)
-  ip->valid = 0;
-801013db:	c7 47 4c 00 00 00 00 	movl   $0x0,0x4c(%edi)
-  release(&icache.lock);
-801013e2:	68 80 f9 10 80       	push   $0x8010f980
-801013e7:	e8 34 32 00 00       	call   80104620 <release>
-
-  return ip;
-801013ec:	83 c4 10             	add    $0x10,%esp
-}
-801013ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801013f2:	89 f8                	mov    %edi,%eax
-801013f4:	5b                   	pop    %ebx
-801013f5:	5e                   	pop    %esi
-801013f6:	5f                   	pop    %edi
-801013f7:	5d                   	pop    %ebp
-801013f8:	c3                   	ret
-801013f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101400:	39 53 04             	cmp    %edx,0x4(%ebx)
-80101403:	75 8f                	jne    80101394 <iget+0x34>
-      ip->ref++;
-80101405:	83 c0 01             	add    $0x1,%eax
-      release(&icache.lock);
-80101408:	83 ec 0c             	sub    $0xc,%esp
-      return ip;
-8010140b:	89 df                	mov    %ebx,%edi
-      ip->ref++;
-8010140d:	89 43 08             	mov    %eax,0x8(%ebx)
-      release(&icache.lock);
-80101410:	68 80 f9 10 80       	push   $0x8010f980
-80101415:	e8 06 32 00 00       	call   80104620 <release>
-      return ip;
-8010141a:	83 c4 10             	add    $0x10,%esp
-}
-8010141d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101420:	89 f8                	mov    %edi,%eax
-80101422:	5b                   	pop    %ebx
-80101423:	5e                   	pop    %esi
-80101424:	5f                   	pop    %edi
-80101425:	5d                   	pop    %ebp
-80101426:	c3                   	ret
-  for(ip = &icache.inode[0]; ip < &icache.inode[NINODE]; ip++){
-80101427:	81 c3 90 00 00 00    	add    $0x90,%ebx
-8010142d:	81 fb d4 15 11 80    	cmp    $0x801115d4,%ebx
-80101433:	74 10                	je     80101445 <iget+0xe5>
-    if(ip->ref > 0 && ip->dev == dev && ip->inum == inum){
-80101435:	8b 43 08             	mov    0x8(%ebx),%eax
-80101438:	85 c0                	test   %eax,%eax
-8010143a:	0f 8f 50 ff ff ff    	jg     80101390 <iget+0x30>
-80101440:	e9 68 ff ff ff       	jmp    801013ad <iget+0x4d>
-    panic("iget: no inodes");
-80101445:	83 ec 0c             	sub    $0xc,%esp
-80101448:	68 1f 73 10 80       	push   $0x8010731f
-8010144d:	e8 2e ef ff ff       	call   80100380 <panic>
-80101452:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80101459:	00 
-8010145a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80101460 <bfree>:
-{
-80101460:	55                   	push   %ebp
-80101461:	89 c1                	mov    %eax,%ecx
-  bp = bread(dev, BBLOCK(b, sb));
-80101463:	89 d0                	mov    %edx,%eax
-80101465:	c1 e8 0c             	shr    $0xc,%eax
-{
-80101468:	89 e5                	mov    %esp,%ebp
-8010146a:	56                   	push   %esi
-8010146b:	53                   	push   %ebx
-  bp = bread(dev, BBLOCK(b, sb));
-8010146c:	03 05 ec 15 11 80    	add    0x801115ec,%eax
-{
-80101472:	89 d3                	mov    %edx,%ebx
-  bp = bread(dev, BBLOCK(b, sb));
-80101474:	83 ec 08             	sub    $0x8,%esp
-80101477:	50                   	push   %eax
-80101478:	51                   	push   %ecx
-80101479:	e8 52 ec ff ff       	call   801000d0 <bread>
-  m = 1 << (bi % 8);
-8010147e:	89 d9                	mov    %ebx,%ecx
-  if((bp->data[bi/8] & m) == 0)
-80101480:	c1 fb 03             	sar    $0x3,%ebx
-80101483:	83 c4 10             	add    $0x10,%esp
-  bp = bread(dev, BBLOCK(b, sb));
-80101486:	89 c6                	mov    %eax,%esi
-  m = 1 << (bi % 8);
-80101488:	83 e1 07             	and    $0x7,%ecx
-8010148b:	b8 01 00 00 00       	mov    $0x1,%eax
-  if((bp->data[bi/8] & m) == 0)
-80101490:	81 e3 ff 01 00 00    	and    $0x1ff,%ebx
-  m = 1 << (bi % 8);
-80101496:	d3 e0                	shl    %cl,%eax
-  if((bp->data[bi/8] & m) == 0)
-80101498:	0f b6 4c 1e 5c       	movzbl 0x5c(%esi,%ebx,1),%ecx
-8010149d:	85 c1                	test   %eax,%ecx
-8010149f:	74 23                	je     801014c4 <bfree+0x64>
-  bp->data[bi/8] &= ~m;
-801014a1:	f7 d0                	not    %eax
-  log_write(bp);
-801014a3:	83 ec 0c             	sub    $0xc,%esp
-  bp->data[bi/8] &= ~m;
-801014a6:	21 c8                	and    %ecx,%eax
-801014a8:	88 44 1e 5c          	mov    %al,0x5c(%esi,%ebx,1)
-  log_write(bp);
-801014ac:	56                   	push   %esi
-801014ad:	e8 de 1a 00 00       	call   80102f90 <log_write>
-  brelse(bp);
-801014b2:	89 34 24             	mov    %esi,(%esp)
-801014b5:	e8 36 ed ff ff       	call   801001f0 <brelse>
-}
-801014ba:	83 c4 10             	add    $0x10,%esp
-801014bd:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801014c0:	5b                   	pop    %ebx
-801014c1:	5e                   	pop    %esi
-801014c2:	5d                   	pop    %ebp
-801014c3:	c3                   	ret
-    panic("freeing free block");
-801014c4:	83 ec 0c             	sub    $0xc,%esp
-801014c7:	68 2f 73 10 80       	push   $0x8010732f
-801014cc:	e8 af ee ff ff       	call   80100380 <panic>
-801014d1:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801014d8:	00 
-801014d9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801014e0 <bmap>:
-
-// Return the disk block address of the nth block in inode ip.
-// If there is no such block, bmap allocates one.
-static uint
-bmap(struct inode *ip, uint bn)
-{
-801014e0:	55                   	push   %ebp
-801014e1:	89 e5                	mov    %esp,%ebp
-801014e3:	57                   	push   %edi
-801014e4:	56                   	push   %esi
-801014e5:	89 c6                	mov    %eax,%esi
-801014e7:	53                   	push   %ebx
-801014e8:	83 ec 1c             	sub    $0x1c,%esp
-  uint addr, *a;
-  struct buf *bp;
-
-  if(bn < NDIRECT){
-801014eb:	83 fa 0b             	cmp    $0xb,%edx
-801014ee:	0f 86 8c 00 00 00    	jbe    80101580 <bmap+0xa0>
-    if((addr = ip->addrs[bn]) == 0)
-      ip->addrs[bn] = addr = balloc(ip->dev);
-    return addr;
-  }
-  bn -= NDIRECT;
-801014f4:	8d 5a f4             	lea    -0xc(%edx),%ebx
-
-  if(bn < NINDIRECT){
-801014f7:	83 fb 7f             	cmp    $0x7f,%ebx
-801014fa:	0f 87 a2 00 00 00    	ja     801015a2 <bmap+0xc2>
-    // Load indirect block, allocating if necessary.
-    if((addr = ip->addrs[NDIRECT]) == 0)
-80101500:	8b 80 8c 00 00 00    	mov    0x8c(%eax),%eax
-80101506:	85 c0                	test   %eax,%eax
-80101508:	74 5e                	je     80101568 <bmap+0x88>
-      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-    bp = bread(ip->dev, addr);
-8010150a:	83 ec 08             	sub    $0x8,%esp
-8010150d:	50                   	push   %eax
-8010150e:	ff 36                	push   (%esi)
-80101510:	e8 bb eb ff ff       	call   801000d0 <bread>
-    a = (uint*)bp->data;
-    if((addr = a[bn]) == 0){
-80101515:	83 c4 10             	add    $0x10,%esp
-80101518:	8d 5c 98 5c          	lea    0x5c(%eax,%ebx,4),%ebx
-    bp = bread(ip->dev, addr);
-8010151c:	89 c2                	mov    %eax,%edx
-    if((addr = a[bn]) == 0){
-8010151e:	8b 3b                	mov    (%ebx),%edi
-80101520:	85 ff                	test   %edi,%edi
-80101522:	74 1c                	je     80101540 <bmap+0x60>
-      a[bn] = addr = balloc(ip->dev);
-      log_write(bp);
-    }
-    brelse(bp);
-80101524:	83 ec 0c             	sub    $0xc,%esp
-80101527:	52                   	push   %edx
-80101528:	e8 c3 ec ff ff       	call   801001f0 <brelse>
-8010152d:	83 c4 10             	add    $0x10,%esp
-    return addr;
-  }
-
-  panic("bmap: out of range");
-}
-80101530:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101533:	89 f8                	mov    %edi,%eax
-80101535:	5b                   	pop    %ebx
-80101536:	5e                   	pop    %esi
-80101537:	5f                   	pop    %edi
-80101538:	5d                   	pop    %ebp
-80101539:	c3                   	ret
-8010153a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80101540:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-      a[bn] = addr = balloc(ip->dev);
-80101543:	8b 06                	mov    (%esi),%eax
-80101545:	e8 06 fd ff ff       	call   80101250 <balloc>
-      log_write(bp);
-8010154a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-8010154d:	83 ec 0c             	sub    $0xc,%esp
-      a[bn] = addr = balloc(ip->dev);
-80101550:	89 03                	mov    %eax,(%ebx)
-80101552:	89 c7                	mov    %eax,%edi
-      log_write(bp);
-80101554:	52                   	push   %edx
-80101555:	e8 36 1a 00 00       	call   80102f90 <log_write>
-8010155a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-8010155d:	83 c4 10             	add    $0x10,%esp
-80101560:	eb c2                	jmp    80101524 <bmap+0x44>
-80101562:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      ip->addrs[NDIRECT] = addr = balloc(ip->dev);
-80101568:	8b 06                	mov    (%esi),%eax
-8010156a:	e8 e1 fc ff ff       	call   80101250 <balloc>
-8010156f:	89 86 8c 00 00 00    	mov    %eax,0x8c(%esi)
-80101575:	eb 93                	jmp    8010150a <bmap+0x2a>
-80101577:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010157e:	00 
-8010157f:	90                   	nop
-    if((addr = ip->addrs[bn]) == 0)
-80101580:	8d 5a 14             	lea    0x14(%edx),%ebx
-80101583:	8b 7c 98 0c          	mov    0xc(%eax,%ebx,4),%edi
-80101587:	85 ff                	test   %edi,%edi
-80101589:	75 a5                	jne    80101530 <bmap+0x50>
-      ip->addrs[bn] = addr = balloc(ip->dev);
-8010158b:	8b 00                	mov    (%eax),%eax
-8010158d:	e8 be fc ff ff       	call   80101250 <balloc>
-80101592:	89 44 9e 0c          	mov    %eax,0xc(%esi,%ebx,4)
-80101596:	89 c7                	mov    %eax,%edi
-}
-80101598:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010159b:	5b                   	pop    %ebx
-8010159c:	89 f8                	mov    %edi,%eax
-8010159e:	5e                   	pop    %esi
-8010159f:	5f                   	pop    %edi
-801015a0:	5d                   	pop    %ebp
-801015a1:	c3                   	ret
-  panic("bmap: out of range");
-801015a2:	83 ec 0c             	sub    $0xc,%esp
-801015a5:	68 42 73 10 80       	push   $0x80107342
-801015aa:	e8 d1 ed ff ff       	call   80100380 <panic>
-801015af:	90                   	nop
-
-801015b0 <readsb>:
-{
-801015b0:	55                   	push   %ebp
-801015b1:	89 e5                	mov    %esp,%ebp
-801015b3:	56                   	push   %esi
-801015b4:	53                   	push   %ebx
-801015b5:	8b 75 0c             	mov    0xc(%ebp),%esi
-  bp = bread(dev, 1);
-801015b8:	83 ec 08             	sub    $0x8,%esp
-801015bb:	6a 01                	push   $0x1
-801015bd:	ff 75 08             	push   0x8(%ebp)
-801015c0:	e8 0b eb ff ff       	call   801000d0 <bread>
-  memmove(sb, bp->data, sizeof(*sb));
-801015c5:	83 c4 0c             	add    $0xc,%esp
-  bp = bread(dev, 1);
-801015c8:	89 c3                	mov    %eax,%ebx
-  memmove(sb, bp->data, sizeof(*sb));
-801015ca:	8d 40 5c             	lea    0x5c(%eax),%eax
-801015cd:	6a 1c                	push   $0x1c
-801015cf:	50                   	push   %eax
-801015d0:	56                   	push   %esi
-801015d1:	e8 3a 32 00 00       	call   80104810 <memmove>
-  brelse(bp);
-801015d6:	83 c4 10             	add    $0x10,%esp
-801015d9:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-801015dc:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801015df:	5b                   	pop    %ebx
-801015e0:	5e                   	pop    %esi
-801015e1:	5d                   	pop    %ebp
-  brelse(bp);
-801015e2:	e9 09 ec ff ff       	jmp    801001f0 <brelse>
-801015e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801015ee:	00 
-801015ef:	90                   	nop
-
-801015f0 <iinit>:
-{
-801015f0:	55                   	push   %ebp
-801015f1:	89 e5                	mov    %esp,%ebp
-801015f3:	53                   	push   %ebx
-801015f4:	bb c0 f9 10 80       	mov    $0x8010f9c0,%ebx
-801015f9:	83 ec 0c             	sub    $0xc,%esp
-  initlock(&icache.lock, "icache");
-801015fc:	68 55 73 10 80       	push   $0x80107355
-80101601:	68 80 f9 10 80       	push   $0x8010f980
-80101606:	e8 85 2e 00 00       	call   80104490 <initlock>
-  for(i = 0; i < NINODE; i++) {
-8010160b:	83 c4 10             	add    $0x10,%esp
-8010160e:	66 90                	xchg   %ax,%ax
-    initsleeplock(&icache.inode[i].lock, "inode");
-80101610:	83 ec 08             	sub    $0x8,%esp
-80101613:	68 5c 73 10 80       	push   $0x8010735c
-80101618:	53                   	push   %ebx
-  for(i = 0; i < NINODE; i++) {
-80101619:	81 c3 90 00 00 00    	add    $0x90,%ebx
-    initsleeplock(&icache.inode[i].lock, "inode");
-8010161f:	e8 3c 2d 00 00       	call   80104360 <initsleeplock>
-  for(i = 0; i < NINODE; i++) {
-80101624:	83 c4 10             	add    $0x10,%esp
-80101627:	81 fb e0 15 11 80    	cmp    $0x801115e0,%ebx
-8010162d:	75 e1                	jne    80101610 <iinit+0x20>
-  bp = bread(dev, 1);
-8010162f:	83 ec 08             	sub    $0x8,%esp
-80101632:	6a 01                	push   $0x1
-80101634:	ff 75 08             	push   0x8(%ebp)
-80101637:	e8 94 ea ff ff       	call   801000d0 <bread>
-  memmove(sb, bp->data, sizeof(*sb));
-8010163c:	83 c4 0c             	add    $0xc,%esp
-  bp = bread(dev, 1);
-8010163f:	89 c3                	mov    %eax,%ebx
-  memmove(sb, bp->data, sizeof(*sb));
-80101641:	8d 40 5c             	lea    0x5c(%eax),%eax
-80101644:	6a 1c                	push   $0x1c
-80101646:	50                   	push   %eax
-80101647:	68 d4 15 11 80       	push   $0x801115d4
-8010164c:	e8 bf 31 00 00       	call   80104810 <memmove>
-  brelse(bp);
-80101651:	89 1c 24             	mov    %ebx,(%esp)
-80101654:	e8 97 eb ff ff       	call   801001f0 <brelse>
-  cprintf("sb: size %d nblocks %d ninodes %d nlog %d logstart %d\
-80101659:	ff 35 ec 15 11 80    	push   0x801115ec
-8010165f:	ff 35 e8 15 11 80    	push   0x801115e8
-80101665:	ff 35 e4 15 11 80    	push   0x801115e4
-8010166b:	ff 35 e0 15 11 80    	push   0x801115e0
-80101671:	ff 35 dc 15 11 80    	push   0x801115dc
-80101677:	ff 35 d8 15 11 80    	push   0x801115d8
-8010167d:	ff 35 d4 15 11 80    	push   0x801115d4
-80101683:	68 a0 77 10 80       	push   $0x801077a0
-80101688:	e8 23 f0 ff ff       	call   801006b0 <cprintf>
-}
-8010168d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80101690:	83 c4 30             	add    $0x30,%esp
-80101693:	c9                   	leave
-80101694:	c3                   	ret
-80101695:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010169c:	00 
-8010169d:	8d 76 00             	lea    0x0(%esi),%esi
-
-801016a0 <ialloc>:
-{
-801016a0:	55                   	push   %ebp
-801016a1:	89 e5                	mov    %esp,%ebp
-801016a3:	57                   	push   %edi
-801016a4:	56                   	push   %esi
-801016a5:	53                   	push   %ebx
-801016a6:	83 ec 1c             	sub    $0x1c,%esp
-801016a9:	8b 45 0c             	mov    0xc(%ebp),%eax
-  for(inum = 1; inum < sb.ninodes; inum++){
-801016ac:	83 3d dc 15 11 80 01 	cmpl   $0x1,0x801115dc
-{
-801016b3:	8b 75 08             	mov    0x8(%ebp),%esi
-801016b6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  for(inum = 1; inum < sb.ninodes; inum++){
-801016b9:	0f 86 91 00 00 00    	jbe    80101750 <ialloc+0xb0>
-801016bf:	bf 01 00 00 00       	mov    $0x1,%edi
-801016c4:	eb 21                	jmp    801016e7 <ialloc+0x47>
-801016c6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801016cd:	00 
-801016ce:	66 90                	xchg   %ax,%ax
-    brelse(bp);
-801016d0:	83 ec 0c             	sub    $0xc,%esp
-  for(inum = 1; inum < sb.ninodes; inum++){
-801016d3:	83 c7 01             	add    $0x1,%edi
-    brelse(bp);
-801016d6:	53                   	push   %ebx
-801016d7:	e8 14 eb ff ff       	call   801001f0 <brelse>
-  for(inum = 1; inum < sb.ninodes; inum++){
-801016dc:	83 c4 10             	add    $0x10,%esp
-801016df:	3b 3d dc 15 11 80    	cmp    0x801115dc,%edi
-801016e5:	73 69                	jae    80101750 <ialloc+0xb0>
-    bp = bread(dev, IBLOCK(inum, sb));
-801016e7:	89 f8                	mov    %edi,%eax
-801016e9:	83 ec 08             	sub    $0x8,%esp
-801016ec:	c1 e8 03             	shr    $0x3,%eax
-801016ef:	03 05 e8 15 11 80    	add    0x801115e8,%eax
-801016f5:	50                   	push   %eax
-801016f6:	56                   	push   %esi
-801016f7:	e8 d4 e9 ff ff       	call   801000d0 <bread>
-    if(dip->type == 0){  // a free inode
-801016fc:	83 c4 10             	add    $0x10,%esp
-    bp = bread(dev, IBLOCK(inum, sb));
-801016ff:	89 c3                	mov    %eax,%ebx
-    dip = (struct dinode*)bp->data + inum%IPB;
-80101701:	89 f8                	mov    %edi,%eax
-80101703:	83 e0 07             	and    $0x7,%eax
-80101706:	c1 e0 06             	shl    $0x6,%eax
-80101709:	8d 4c 03 5c          	lea    0x5c(%ebx,%eax,1),%ecx
-    if(dip->type == 0){  // a free inode
-8010170d:	66 83 39 00          	cmpw   $0x0,(%ecx)
-80101711:	75 bd                	jne    801016d0 <ialloc+0x30>
-      memset(dip, 0, sizeof(*dip));
-80101713:	83 ec 04             	sub    $0x4,%esp
-80101716:	6a 40                	push   $0x40
-80101718:	6a 00                	push   $0x0
-8010171a:	51                   	push   %ecx
-8010171b:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-8010171e:	e8 5d 30 00 00       	call   80104780 <memset>
-      dip->type = type;
-80101723:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
-80101727:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-8010172a:	66 89 01             	mov    %ax,(%ecx)
-      log_write(bp);   // mark it allocated on the disk
-8010172d:	89 1c 24             	mov    %ebx,(%esp)
-80101730:	e8 5b 18 00 00       	call   80102f90 <log_write>
-      brelse(bp);
-80101735:	89 1c 24             	mov    %ebx,(%esp)
-80101738:	e8 b3 ea ff ff       	call   801001f0 <brelse>
-      return iget(dev, inum);
-8010173d:	83 c4 10             	add    $0x10,%esp
-}
-80101740:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return iget(dev, inum);
-80101743:	89 fa                	mov    %edi,%edx
-}
-80101745:	5b                   	pop    %ebx
-      return iget(dev, inum);
-80101746:	89 f0                	mov    %esi,%eax
-}
-80101748:	5e                   	pop    %esi
-80101749:	5f                   	pop    %edi
-8010174a:	5d                   	pop    %ebp
-      return iget(dev, inum);
-8010174b:	e9 10 fc ff ff       	jmp    80101360 <iget>
-  panic("ialloc: no inodes");
-80101750:	83 ec 0c             	sub    $0xc,%esp
-80101753:	68 62 73 10 80       	push   $0x80107362
-80101758:	e8 23 ec ff ff       	call   80100380 <panic>
-8010175d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80101760 <iupdate>:
-{
-80101760:	55                   	push   %ebp
-80101761:	89 e5                	mov    %esp,%ebp
-80101763:	56                   	push   %esi
-80101764:	53                   	push   %ebx
-80101765:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-80101768:	8b 43 04             	mov    0x4(%ebx),%eax
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-8010176b:	83 c3 5c             	add    $0x5c,%ebx
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-8010176e:	83 ec 08             	sub    $0x8,%esp
-80101771:	c1 e8 03             	shr    $0x3,%eax
-80101774:	03 05 e8 15 11 80    	add    0x801115e8,%eax
-8010177a:	50                   	push   %eax
-8010177b:	ff 73 a4             	push   -0x5c(%ebx)
-8010177e:	e8 4d e9 ff ff       	call   801000d0 <bread>
-  dip->type = ip->type;
-80101783:	0f b7 53 f4          	movzwl -0xc(%ebx),%edx
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-80101787:	83 c4 0c             	add    $0xc,%esp
-  bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-8010178a:	89 c6                	mov    %eax,%esi
-  dip = (struct dinode*)bp->data + ip->inum%IPB;
-8010178c:	8b 43 a8             	mov    -0x58(%ebx),%eax
-8010178f:	83 e0 07             	and    $0x7,%eax
-80101792:	c1 e0 06             	shl    $0x6,%eax
-80101795:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
-  dip->type = ip->type;
-80101799:	66 89 10             	mov    %dx,(%eax)
-  dip->major = ip->major;
-8010179c:	0f b7 53 f6          	movzwl -0xa(%ebx),%edx
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-801017a0:	83 c0 0c             	add    $0xc,%eax
-  dip->major = ip->major;
-801017a3:	66 89 50 f6          	mov    %dx,-0xa(%eax)
-  dip->minor = ip->minor;
-801017a7:	0f b7 53 f8          	movzwl -0x8(%ebx),%edx
-801017ab:	66 89 50 f8          	mov    %dx,-0x8(%eax)
-  dip->nlink = ip->nlink;
-801017af:	0f b7 53 fa          	movzwl -0x6(%ebx),%edx
-801017b3:	66 89 50 fa          	mov    %dx,-0x6(%eax)
-  dip->size = ip->size;
-801017b7:	8b 53 fc             	mov    -0x4(%ebx),%edx
-801017ba:	89 50 fc             	mov    %edx,-0x4(%eax)
-  memmove(dip->addrs, ip->addrs, sizeof(ip->addrs));
-801017bd:	6a 34                	push   $0x34
-801017bf:	53                   	push   %ebx
-801017c0:	50                   	push   %eax
-801017c1:	e8 4a 30 00 00       	call   80104810 <memmove>
-  log_write(bp);
-801017c6:	89 34 24             	mov    %esi,(%esp)
-801017c9:	e8 c2 17 00 00       	call   80102f90 <log_write>
-  brelse(bp);
-801017ce:	83 c4 10             	add    $0x10,%esp
-801017d1:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-801017d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801017d7:	5b                   	pop    %ebx
-801017d8:	5e                   	pop    %esi
-801017d9:	5d                   	pop    %ebp
-  brelse(bp);
-801017da:	e9 11 ea ff ff       	jmp    801001f0 <brelse>
-801017df:	90                   	nop
-
-801017e0 <idup>:
-{
-801017e0:	55                   	push   %ebp
-801017e1:	89 e5                	mov    %esp,%ebp
-801017e3:	53                   	push   %ebx
-801017e4:	83 ec 10             	sub    $0x10,%esp
-801017e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&icache.lock);
-801017ea:	68 80 f9 10 80       	push   $0x8010f980
-801017ef:	e8 8c 2e 00 00       	call   80104680 <acquire>
-  ip->ref++;
-801017f4:	83 43 08 01          	addl   $0x1,0x8(%ebx)
-  release(&icache.lock);
-801017f8:	c7 04 24 80 f9 10 80 	movl   $0x8010f980,(%esp)
-801017ff:	e8 1c 2e 00 00       	call   80104620 <release>
-}
-80101804:	89 d8                	mov    %ebx,%eax
-80101806:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80101809:	c9                   	leave
-8010180a:	c3                   	ret
-8010180b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80101810 <ilock>:
-{
-80101810:	55                   	push   %ebp
-80101811:	89 e5                	mov    %esp,%ebp
-80101813:	56                   	push   %esi
-80101814:	53                   	push   %ebx
-80101815:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(ip == 0 || ip->ref < 1)
-80101818:	85 db                	test   %ebx,%ebx
-8010181a:	0f 84 b7 00 00 00    	je     801018d7 <ilock+0xc7>
-80101820:	8b 53 08             	mov    0x8(%ebx),%edx
-80101823:	85 d2                	test   %edx,%edx
-80101825:	0f 8e ac 00 00 00    	jle    801018d7 <ilock+0xc7>
-  acquiresleep(&ip->lock);
-8010182b:	83 ec 0c             	sub    $0xc,%esp
-8010182e:	8d 43 0c             	lea    0xc(%ebx),%eax
-80101831:	50                   	push   %eax
-80101832:	e8 69 2b 00 00       	call   801043a0 <acquiresleep>
-  if(ip->valid == 0){
-80101837:	8b 43 4c             	mov    0x4c(%ebx),%eax
-8010183a:	83 c4 10             	add    $0x10,%esp
-8010183d:	85 c0                	test   %eax,%eax
-8010183f:	74 0f                	je     80101850 <ilock+0x40>
-}
-80101841:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80101844:	5b                   	pop    %ebx
-80101845:	5e                   	pop    %esi
-80101846:	5d                   	pop    %ebp
-80101847:	c3                   	ret
-80101848:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010184f:	00 
-    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-80101850:	8b 43 04             	mov    0x4(%ebx),%eax
-80101853:	83 ec 08             	sub    $0x8,%esp
-80101856:	c1 e8 03             	shr    $0x3,%eax
-80101859:	03 05 e8 15 11 80    	add    0x801115e8,%eax
-8010185f:	50                   	push   %eax
-80101860:	ff 33                	push   (%ebx)
-80101862:	e8 69 e8 ff ff       	call   801000d0 <bread>
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-80101867:	83 c4 0c             	add    $0xc,%esp
-    bp = bread(ip->dev, IBLOCK(ip->inum, sb));
-8010186a:	89 c6                	mov    %eax,%esi
-    dip = (struct dinode*)bp->data + ip->inum%IPB;
-8010186c:	8b 43 04             	mov    0x4(%ebx),%eax
-8010186f:	83 e0 07             	and    $0x7,%eax
-80101872:	c1 e0 06             	shl    $0x6,%eax
-80101875:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
-    ip->type = dip->type;
-80101879:	0f b7 10             	movzwl (%eax),%edx
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-8010187c:	83 c0 0c             	add    $0xc,%eax
-    ip->type = dip->type;
-8010187f:	66 89 53 50          	mov    %dx,0x50(%ebx)
-    ip->major = dip->major;
-80101883:	0f b7 50 f6          	movzwl -0xa(%eax),%edx
-80101887:	66 89 53 52          	mov    %dx,0x52(%ebx)
-    ip->minor = dip->minor;
-8010188b:	0f b7 50 f8          	movzwl -0x8(%eax),%edx
-8010188f:	66 89 53 54          	mov    %dx,0x54(%ebx)
-    ip->nlink = dip->nlink;
-80101893:	0f b7 50 fa          	movzwl -0x6(%eax),%edx
-80101897:	66 89 53 56          	mov    %dx,0x56(%ebx)
-    ip->size = dip->size;
-8010189b:	8b 50 fc             	mov    -0x4(%eax),%edx
-8010189e:	89 53 58             	mov    %edx,0x58(%ebx)
-    memmove(ip->addrs, dip->addrs, sizeof(ip->addrs));
-801018a1:	6a 34                	push   $0x34
-801018a3:	50                   	push   %eax
-801018a4:	8d 43 5c             	lea    0x5c(%ebx),%eax
-801018a7:	50                   	push   %eax
-801018a8:	e8 63 2f 00 00       	call   80104810 <memmove>
-    brelse(bp);
-801018ad:	89 34 24             	mov    %esi,(%esp)
-801018b0:	e8 3b e9 ff ff       	call   801001f0 <brelse>
-    if(ip->type == 0)
-801018b5:	83 c4 10             	add    $0x10,%esp
-801018b8:	66 83 7b 50 00       	cmpw   $0x0,0x50(%ebx)
-    ip->valid = 1;
-801018bd:	c7 43 4c 01 00 00 00 	movl   $0x1,0x4c(%ebx)
-    if(ip->type == 0)
-801018c4:	0f 85 77 ff ff ff    	jne    80101841 <ilock+0x31>
-      panic("ilock: no type");
-801018ca:	83 ec 0c             	sub    $0xc,%esp
-801018cd:	68 7a 73 10 80       	push   $0x8010737a
-801018d2:	e8 a9 ea ff ff       	call   80100380 <panic>
-    panic("ilock");
-801018d7:	83 ec 0c             	sub    $0xc,%esp
-801018da:	68 74 73 10 80       	push   $0x80107374
-801018df:	e8 9c ea ff ff       	call   80100380 <panic>
-801018e4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801018eb:	00 
-801018ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801018f0 <iunlock>:
-{
-801018f0:	55                   	push   %ebp
-801018f1:	89 e5                	mov    %esp,%ebp
-801018f3:	56                   	push   %esi
-801018f4:	53                   	push   %ebx
-801018f5:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-801018f8:	85 db                	test   %ebx,%ebx
-801018fa:	74 28                	je     80101924 <iunlock+0x34>
-801018fc:	83 ec 0c             	sub    $0xc,%esp
-801018ff:	8d 73 0c             	lea    0xc(%ebx),%esi
-80101902:	56                   	push   %esi
-80101903:	e8 38 2b 00 00       	call   80104440 <holdingsleep>
-80101908:	83 c4 10             	add    $0x10,%esp
-8010190b:	85 c0                	test   %eax,%eax
-8010190d:	74 15                	je     80101924 <iunlock+0x34>
-8010190f:	8b 43 08             	mov    0x8(%ebx),%eax
-80101912:	85 c0                	test   %eax,%eax
-80101914:	7e 0e                	jle    80101924 <iunlock+0x34>
-  releasesleep(&ip->lock);
-80101916:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-80101919:	8d 65 f8             	lea    -0x8(%ebp),%esp
-8010191c:	5b                   	pop    %ebx
-8010191d:	5e                   	pop    %esi
-8010191e:	5d                   	pop    %ebp
-  releasesleep(&ip->lock);
-8010191f:	e9 dc 2a 00 00       	jmp    80104400 <releasesleep>
-    panic("iunlock");
-80101924:	83 ec 0c             	sub    $0xc,%esp
-80101927:	68 89 73 10 80       	push   $0x80107389
-8010192c:	e8 4f ea ff ff       	call   80100380 <panic>
-80101931:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80101938:	00 
-80101939:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80101940 <iput>:
-{
-80101940:	55                   	push   %ebp
-80101941:	89 e5                	mov    %esp,%ebp
-80101943:	57                   	push   %edi
-80101944:	56                   	push   %esi
-80101945:	53                   	push   %ebx
-80101946:	83 ec 28             	sub    $0x28,%esp
-80101949:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquiresleep(&ip->lock);
-8010194c:	8d 7b 0c             	lea    0xc(%ebx),%edi
-8010194f:	57                   	push   %edi
-80101950:	e8 4b 2a 00 00       	call   801043a0 <acquiresleep>
-  if(ip->valid && ip->nlink == 0){
-80101955:	8b 53 4c             	mov    0x4c(%ebx),%edx
-80101958:	83 c4 10             	add    $0x10,%esp
-8010195b:	85 d2                	test   %edx,%edx
-8010195d:	74 07                	je     80101966 <iput+0x26>
-8010195f:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-80101964:	74 32                	je     80101998 <iput+0x58>
-  releasesleep(&ip->lock);
-80101966:	83 ec 0c             	sub    $0xc,%esp
-80101969:	57                   	push   %edi
-8010196a:	e8 91 2a 00 00       	call   80104400 <releasesleep>
-  acquire(&icache.lock);
-8010196f:	c7 04 24 80 f9 10 80 	movl   $0x8010f980,(%esp)
-80101976:	e8 05 2d 00 00       	call   80104680 <acquire>
-  ip->ref--;
-8010197b:	83 6b 08 01          	subl   $0x1,0x8(%ebx)
-  release(&icache.lock);
-8010197f:	83 c4 10             	add    $0x10,%esp
-80101982:	c7 45 08 80 f9 10 80 	movl   $0x8010f980,0x8(%ebp)
-}
-80101989:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010198c:	5b                   	pop    %ebx
-8010198d:	5e                   	pop    %esi
-8010198e:	5f                   	pop    %edi
-8010198f:	5d                   	pop    %ebp
-  release(&icache.lock);
-80101990:	e9 8b 2c 00 00       	jmp    80104620 <release>
-80101995:	8d 76 00             	lea    0x0(%esi),%esi
-    acquire(&icache.lock);
-80101998:	83 ec 0c             	sub    $0xc,%esp
-8010199b:	68 80 f9 10 80       	push   $0x8010f980
-801019a0:	e8 db 2c 00 00       	call   80104680 <acquire>
-    int r = ip->ref;
-801019a5:	8b 73 08             	mov    0x8(%ebx),%esi
-    release(&icache.lock);
-801019a8:	c7 04 24 80 f9 10 80 	movl   $0x8010f980,(%esp)
-801019af:	e8 6c 2c 00 00       	call   80104620 <release>
-    if(r == 1){
-801019b4:	83 c4 10             	add    $0x10,%esp
-801019b7:	83 fe 01             	cmp    $0x1,%esi
-801019ba:	75 aa                	jne    80101966 <iput+0x26>
-801019bc:	8d 8b 8c 00 00 00    	lea    0x8c(%ebx),%ecx
-801019c2:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-801019c5:	8d 73 5c             	lea    0x5c(%ebx),%esi
-801019c8:	89 df                	mov    %ebx,%edi
-801019ca:	89 cb                	mov    %ecx,%ebx
-801019cc:	eb 09                	jmp    801019d7 <iput+0x97>
-801019ce:	66 90                	xchg   %ax,%ax
-{
-  int i, j;
-  struct buf *bp;
-  uint *a;
-
-  for(i = 0; i < NDIRECT; i++){
-801019d0:	83 c6 04             	add    $0x4,%esi
-801019d3:	39 de                	cmp    %ebx,%esi
-801019d5:	74 19                	je     801019f0 <iput+0xb0>
-    if(ip->addrs[i]){
-801019d7:	8b 16                	mov    (%esi),%edx
-801019d9:	85 d2                	test   %edx,%edx
-801019db:	74 f3                	je     801019d0 <iput+0x90>
-      bfree(ip->dev, ip->addrs[i]);
-801019dd:	8b 07                	mov    (%edi),%eax
-801019df:	e8 7c fa ff ff       	call   80101460 <bfree>
-      ip->addrs[i] = 0;
-801019e4:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-801019ea:	eb e4                	jmp    801019d0 <iput+0x90>
-801019ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    }
-  }
-
-  if(ip->addrs[NDIRECT]){
-801019f0:	89 fb                	mov    %edi,%ebx
-801019f2:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-801019f5:	8b 83 8c 00 00 00    	mov    0x8c(%ebx),%eax
-801019fb:	85 c0                	test   %eax,%eax
-801019fd:	75 2d                	jne    80101a2c <iput+0xec>
-    bfree(ip->dev, ip->addrs[NDIRECT]);
-    ip->addrs[NDIRECT] = 0;
-  }
-
-  ip->size = 0;
-  iupdate(ip);
-801019ff:	83 ec 0c             	sub    $0xc,%esp
-  ip->size = 0;
-80101a02:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
-  iupdate(ip);
-80101a09:	53                   	push   %ebx
-80101a0a:	e8 51 fd ff ff       	call   80101760 <iupdate>
-      ip->type = 0;
-80101a0f:	31 c0                	xor    %eax,%eax
-80101a11:	66 89 43 50          	mov    %ax,0x50(%ebx)
-      iupdate(ip);
-80101a15:	89 1c 24             	mov    %ebx,(%esp)
-80101a18:	e8 43 fd ff ff       	call   80101760 <iupdate>
-      ip->valid = 0;
-80101a1d:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%ebx)
-80101a24:	83 c4 10             	add    $0x10,%esp
-80101a27:	e9 3a ff ff ff       	jmp    80101966 <iput+0x26>
-    bp = bread(ip->dev, ip->addrs[NDIRECT]);
-80101a2c:	83 ec 08             	sub    $0x8,%esp
-80101a2f:	50                   	push   %eax
-80101a30:	ff 33                	push   (%ebx)
-80101a32:	e8 99 e6 ff ff       	call   801000d0 <bread>
-    for(j = 0; j < NINDIRECT; j++){
-80101a37:	83 c4 10             	add    $0x10,%esp
-80101a3a:	89 7d e4             	mov    %edi,-0x1c(%ebp)
-80101a3d:	8d 88 5c 02 00 00    	lea    0x25c(%eax),%ecx
-80101a43:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80101a46:	8d 70 5c             	lea    0x5c(%eax),%esi
-80101a49:	89 cf                	mov    %ecx,%edi
-80101a4b:	eb 0a                	jmp    80101a57 <iput+0x117>
-80101a4d:	8d 76 00             	lea    0x0(%esi),%esi
-80101a50:	83 c6 04             	add    $0x4,%esi
-80101a53:	39 fe                	cmp    %edi,%esi
-80101a55:	74 0f                	je     80101a66 <iput+0x126>
-      if(a[j])
-80101a57:	8b 16                	mov    (%esi),%edx
-80101a59:	85 d2                	test   %edx,%edx
-80101a5b:	74 f3                	je     80101a50 <iput+0x110>
-        bfree(ip->dev, a[j]);
-80101a5d:	8b 03                	mov    (%ebx),%eax
-80101a5f:	e8 fc f9 ff ff       	call   80101460 <bfree>
-80101a64:	eb ea                	jmp    80101a50 <iput+0x110>
-    brelse(bp);
-80101a66:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80101a69:	83 ec 0c             	sub    $0xc,%esp
-80101a6c:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-80101a6f:	50                   	push   %eax
-80101a70:	e8 7b e7 ff ff       	call   801001f0 <brelse>
-    bfree(ip->dev, ip->addrs[NDIRECT]);
-80101a75:	8b 93 8c 00 00 00    	mov    0x8c(%ebx),%edx
-80101a7b:	8b 03                	mov    (%ebx),%eax
-80101a7d:	e8 de f9 ff ff       	call   80101460 <bfree>
-    ip->addrs[NDIRECT] = 0;
-80101a82:	83 c4 10             	add    $0x10,%esp
-80101a85:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%ebx)
-80101a8c:	00 00 00 
-80101a8f:	e9 6b ff ff ff       	jmp    801019ff <iput+0xbf>
-80101a94:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80101a9b:	00 
-80101a9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80101aa0 <iunlockput>:
-{
-80101aa0:	55                   	push   %ebp
-80101aa1:	89 e5                	mov    %esp,%ebp
-80101aa3:	56                   	push   %esi
-80101aa4:	53                   	push   %ebx
-80101aa5:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-80101aa8:	85 db                	test   %ebx,%ebx
-80101aaa:	74 34                	je     80101ae0 <iunlockput+0x40>
-80101aac:	83 ec 0c             	sub    $0xc,%esp
-80101aaf:	8d 73 0c             	lea    0xc(%ebx),%esi
-80101ab2:	56                   	push   %esi
-80101ab3:	e8 88 29 00 00       	call   80104440 <holdingsleep>
-80101ab8:	83 c4 10             	add    $0x10,%esp
-80101abb:	85 c0                	test   %eax,%eax
-80101abd:	74 21                	je     80101ae0 <iunlockput+0x40>
-80101abf:	8b 43 08             	mov    0x8(%ebx),%eax
-80101ac2:	85 c0                	test   %eax,%eax
-80101ac4:	7e 1a                	jle    80101ae0 <iunlockput+0x40>
-  releasesleep(&ip->lock);
-80101ac6:	83 ec 0c             	sub    $0xc,%esp
-80101ac9:	56                   	push   %esi
-80101aca:	e8 31 29 00 00       	call   80104400 <releasesleep>
-  iput(ip);
-80101acf:	83 c4 10             	add    $0x10,%esp
-80101ad2:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-80101ad5:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80101ad8:	5b                   	pop    %ebx
-80101ad9:	5e                   	pop    %esi
-80101ada:	5d                   	pop    %ebp
-  iput(ip);
-80101adb:	e9 60 fe ff ff       	jmp    80101940 <iput>
-    panic("iunlock");
-80101ae0:	83 ec 0c             	sub    $0xc,%esp
-80101ae3:	68 89 73 10 80       	push   $0x80107389
-80101ae8:	e8 93 e8 ff ff       	call   80100380 <panic>
-80101aed:	8d 76 00             	lea    0x0(%esi),%esi
-
-80101af0 <stati>:
-
-// Copy stat information from inode.
-// Caller must hold ip->lock.
-void
-stati(struct inode *ip, struct stat *st)
-{
-80101af0:	55                   	push   %ebp
-80101af1:	89 e5                	mov    %esp,%ebp
-80101af3:	8b 55 08             	mov    0x8(%ebp),%edx
-80101af6:	8b 45 0c             	mov    0xc(%ebp),%eax
-  st->dev = ip->dev;
-80101af9:	8b 0a                	mov    (%edx),%ecx
-80101afb:	89 48 04             	mov    %ecx,0x4(%eax)
-  st->ino = ip->inum;
-80101afe:	8b 4a 04             	mov    0x4(%edx),%ecx
-80101b01:	89 48 08             	mov    %ecx,0x8(%eax)
-  st->type = ip->type;
-80101b04:	0f b7 4a 50          	movzwl 0x50(%edx),%ecx
-80101b08:	66 89 08             	mov    %cx,(%eax)
-  st->nlink = ip->nlink;
-80101b0b:	0f b7 4a 56          	movzwl 0x56(%edx),%ecx
-80101b0f:	66 89 48 0c          	mov    %cx,0xc(%eax)
-  st->size = ip->size;
-80101b13:	8b 52 58             	mov    0x58(%edx),%edx
-80101b16:	89 50 10             	mov    %edx,0x10(%eax)
-}
-80101b19:	5d                   	pop    %ebp
-80101b1a:	c3                   	ret
-80101b1b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80101b20 <readi>:
-//PAGEBREAK!
-// Read data from inode.
-// Caller must hold ip->lock.
-int
-readi(struct inode *ip, char *dst, uint off, uint n)
-{
-80101b20:	55                   	push   %ebp
-80101b21:	89 e5                	mov    %esp,%ebp
-80101b23:	57                   	push   %edi
-80101b24:	56                   	push   %esi
-80101b25:	53                   	push   %ebx
-80101b26:	83 ec 1c             	sub    $0x1c,%esp
-80101b29:	8b 75 08             	mov    0x8(%ebp),%esi
-80101b2c:	8b 45 0c             	mov    0xc(%ebp),%eax
-80101b2f:	8b 7d 10             	mov    0x10(%ebp),%edi
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-80101b32:	66 83 7e 50 03       	cmpw   $0x3,0x50(%esi)
-{
-80101b37:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80101b3a:	89 75 d8             	mov    %esi,-0x28(%ebp)
-80101b3d:	8b 45 14             	mov    0x14(%ebp),%eax
-  if(ip->type == T_DEV){
-80101b40:	0f 84 aa 00 00 00    	je     80101bf0 <readi+0xd0>
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
-      return -1;
-    return devsw[ip->major].read(ip, dst, n);
-  }
-
-  if(off > ip->size || off + n < off)
-80101b46:	8b 75 d8             	mov    -0x28(%ebp),%esi
-80101b49:	8b 56 58             	mov    0x58(%esi),%edx
-80101b4c:	39 fa                	cmp    %edi,%edx
-80101b4e:	0f 82 bd 00 00 00    	jb     80101c11 <readi+0xf1>
-80101b54:	89 f9                	mov    %edi,%ecx
-80101b56:	31 db                	xor    %ebx,%ebx
-80101b58:	01 c1                	add    %eax,%ecx
-80101b5a:	0f 92 c3             	setb   %bl
-80101b5d:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-80101b60:	0f 82 ab 00 00 00    	jb     80101c11 <readi+0xf1>
-    return -1;
-  if(off + n > ip->size)
-    n = ip->size - off;
-80101b66:	89 d3                	mov    %edx,%ebx
-80101b68:	29 fb                	sub    %edi,%ebx
-80101b6a:	39 ca                	cmp    %ecx,%edx
-80101b6c:	0f 42 c3             	cmovb  %ebx,%eax
-
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80101b6f:	85 c0                	test   %eax,%eax
-80101b71:	74 73                	je     80101be6 <readi+0xc6>
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101b73:	8b 75 e4             	mov    -0x1c(%ebp),%esi
-80101b76:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80101b79:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101b80:	8b 5d d8             	mov    -0x28(%ebp),%ebx
-80101b83:	89 fa                	mov    %edi,%edx
-80101b85:	c1 ea 09             	shr    $0x9,%edx
-80101b88:	89 d8                	mov    %ebx,%eax
-80101b8a:	e8 51 f9 ff ff       	call   801014e0 <bmap>
-80101b8f:	83 ec 08             	sub    $0x8,%esp
-80101b92:	50                   	push   %eax
-80101b93:	ff 33                	push   (%ebx)
-80101b95:	e8 36 e5 ff ff       	call   801000d0 <bread>
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101b9a:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80101b9d:	b9 00 02 00 00       	mov    $0x200,%ecx
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101ba2:	89 c2                	mov    %eax,%edx
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101ba4:	89 f8                	mov    %edi,%eax
-80101ba6:	25 ff 01 00 00       	and    $0x1ff,%eax
-80101bab:	29 f3                	sub    %esi,%ebx
-80101bad:	29 c1                	sub    %eax,%ecx
-    memmove(dst, bp->data + off%BSIZE, m);
-80101baf:	8d 44 02 5c          	lea    0x5c(%edx,%eax,1),%eax
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101bb3:	39 d9                	cmp    %ebx,%ecx
-80101bb5:	0f 46 d9             	cmovbe %ecx,%ebx
-    memmove(dst, bp->data + off%BSIZE, m);
-80101bb8:	83 c4 0c             	add    $0xc,%esp
-80101bbb:	53                   	push   %ebx
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80101bbc:	01 de                	add    %ebx,%esi
-80101bbe:	01 df                	add    %ebx,%edi
-    memmove(dst, bp->data + off%BSIZE, m);
-80101bc0:	89 55 dc             	mov    %edx,-0x24(%ebp)
-80101bc3:	50                   	push   %eax
-80101bc4:	ff 75 e0             	push   -0x20(%ebp)
-80101bc7:	e8 44 2c 00 00       	call   80104810 <memmove>
-    brelse(bp);
-80101bcc:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80101bcf:	89 14 24             	mov    %edx,(%esp)
-80101bd2:	e8 19 e6 ff ff       	call   801001f0 <brelse>
-  for(tot=0; tot<n; tot+=m, off+=m, dst+=m){
-80101bd7:	01 5d e0             	add    %ebx,-0x20(%ebp)
-80101bda:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80101bdd:	83 c4 10             	add    $0x10,%esp
-80101be0:	39 de                	cmp    %ebx,%esi
-80101be2:	72 9c                	jb     80101b80 <readi+0x60>
-80101be4:	89 d8                	mov    %ebx,%eax
-  }
-  return n;
-}
-80101be6:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101be9:	5b                   	pop    %ebx
-80101bea:	5e                   	pop    %esi
-80101beb:	5f                   	pop    %edi
-80101bec:	5d                   	pop    %ebp
-80101bed:	c3                   	ret
-80101bee:	66 90                	xchg   %ax,%ax
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].read)
-80101bf0:	0f bf 56 52          	movswl 0x52(%esi),%edx
-80101bf4:	66 83 fa 09          	cmp    $0x9,%dx
-80101bf8:	77 17                	ja     80101c11 <readi+0xf1>
-80101bfa:	8b 14 d5 20 f9 10 80 	mov    -0x7fef06e0(,%edx,8),%edx
-80101c01:	85 d2                	test   %edx,%edx
-80101c03:	74 0c                	je     80101c11 <readi+0xf1>
-    return devsw[ip->major].read(ip, dst, n);
-80101c05:	89 45 10             	mov    %eax,0x10(%ebp)
-}
-80101c08:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101c0b:	5b                   	pop    %ebx
-80101c0c:	5e                   	pop    %esi
-80101c0d:	5f                   	pop    %edi
-80101c0e:	5d                   	pop    %ebp
-    return devsw[ip->major].read(ip, dst, n);
-80101c0f:	ff e2                	jmp    *%edx
-      return -1;
-80101c11:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101c16:	eb ce                	jmp    80101be6 <readi+0xc6>
-80101c18:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80101c1f:	00 
-
-80101c20 <writei>:
-// PAGEBREAK!
-// Write data to inode.
-// Caller must hold ip->lock.
-int
-writei(struct inode *ip, char *src, uint off, uint n)
-{
-80101c20:	55                   	push   %ebp
-80101c21:	89 e5                	mov    %esp,%ebp
-80101c23:	57                   	push   %edi
-80101c24:	56                   	push   %esi
-80101c25:	53                   	push   %ebx
-80101c26:	83 ec 1c             	sub    $0x1c,%esp
-80101c29:	8b 45 08             	mov    0x8(%ebp),%eax
-80101c2c:	8b 7d 0c             	mov    0xc(%ebp),%edi
-80101c2f:	8b 75 14             	mov    0x14(%ebp),%esi
-  uint tot, m;
-  struct buf *bp;
-
-  if(ip->type == T_DEV){
-80101c32:	66 83 78 50 03       	cmpw   $0x3,0x50(%eax)
-{
-80101c37:	89 7d dc             	mov    %edi,-0x24(%ebp)
-80101c3a:	89 75 e0             	mov    %esi,-0x20(%ebp)
-80101c3d:	8b 7d 10             	mov    0x10(%ebp),%edi
-  if(ip->type == T_DEV){
-80101c40:	0f 84 ba 00 00 00    	je     80101d00 <writei+0xe0>
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
-      return -1;
-    return devsw[ip->major].write(ip, src, n);
-  }
-
-  if(off > ip->size || off + n < off)
-80101c46:	39 78 58             	cmp    %edi,0x58(%eax)
-80101c49:	0f 82 ea 00 00 00    	jb     80101d39 <writei+0x119>
-    return -1;
-  if(off + n > MAXFILE*BSIZE)
-80101c4f:	8b 75 e0             	mov    -0x20(%ebp),%esi
-80101c52:	89 f2                	mov    %esi,%edx
-80101c54:	01 fa                	add    %edi,%edx
-80101c56:	0f 82 dd 00 00 00    	jb     80101d39 <writei+0x119>
-80101c5c:	81 fa 00 18 01 00    	cmp    $0x11800,%edx
-80101c62:	0f 87 d1 00 00 00    	ja     80101d39 <writei+0x119>
-    return -1;
-
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80101c68:	85 f6                	test   %esi,%esi
-80101c6a:	0f 84 85 00 00 00    	je     80101cf5 <writei+0xd5>
-80101c70:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101c77:	89 45 d8             	mov    %eax,-0x28(%ebp)
-80101c7a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101c80:	8b 75 d8             	mov    -0x28(%ebp),%esi
-80101c83:	89 fa                	mov    %edi,%edx
-80101c85:	c1 ea 09             	shr    $0x9,%edx
-80101c88:	89 f0                	mov    %esi,%eax
-80101c8a:	e8 51 f8 ff ff       	call   801014e0 <bmap>
-80101c8f:	83 ec 08             	sub    $0x8,%esp
-80101c92:	50                   	push   %eax
-80101c93:	ff 36                	push   (%esi)
-80101c95:	e8 36 e4 ff ff       	call   801000d0 <bread>
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101c9a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80101c9d:	8b 5d e0             	mov    -0x20(%ebp),%ebx
-80101ca0:	b9 00 02 00 00       	mov    $0x200,%ecx
-    bp = bread(ip->dev, bmap(ip, off/BSIZE));
-80101ca5:	89 c6                	mov    %eax,%esi
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101ca7:	89 f8                	mov    %edi,%eax
-80101ca9:	25 ff 01 00 00       	and    $0x1ff,%eax
-80101cae:	29 d3                	sub    %edx,%ebx
-80101cb0:	29 c1                	sub    %eax,%ecx
-    memmove(bp->data + off%BSIZE, src, m);
-80101cb2:	8d 44 06 5c          	lea    0x5c(%esi,%eax,1),%eax
-    m = min(n - tot, BSIZE - off%BSIZE);
-80101cb6:	39 d9                	cmp    %ebx,%ecx
-80101cb8:	0f 46 d9             	cmovbe %ecx,%ebx
-    memmove(bp->data + off%BSIZE, src, m);
-80101cbb:	83 c4 0c             	add    $0xc,%esp
-80101cbe:	53                   	push   %ebx
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80101cbf:	01 df                	add    %ebx,%edi
-    memmove(bp->data + off%BSIZE, src, m);
-80101cc1:	ff 75 dc             	push   -0x24(%ebp)
-80101cc4:	50                   	push   %eax
-80101cc5:	e8 46 2b 00 00       	call   80104810 <memmove>
-    log_write(bp);
-80101cca:	89 34 24             	mov    %esi,(%esp)
-80101ccd:	e8 be 12 00 00       	call   80102f90 <log_write>
-    brelse(bp);
-80101cd2:	89 34 24             	mov    %esi,(%esp)
-80101cd5:	e8 16 e5 ff ff       	call   801001f0 <brelse>
-  for(tot=0; tot<n; tot+=m, off+=m, src+=m){
-80101cda:	01 5d e4             	add    %ebx,-0x1c(%ebp)
-80101cdd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80101ce0:	83 c4 10             	add    $0x10,%esp
-80101ce3:	01 5d dc             	add    %ebx,-0x24(%ebp)
-80101ce6:	8b 5d e0             	mov    -0x20(%ebp),%ebx
-80101ce9:	39 d8                	cmp    %ebx,%eax
-80101ceb:	72 93                	jb     80101c80 <writei+0x60>
-  }
-
-  if(n > 0 && off > ip->size){
-80101ced:	8b 45 d8             	mov    -0x28(%ebp),%eax
-80101cf0:	39 78 58             	cmp    %edi,0x58(%eax)
-80101cf3:	72 33                	jb     80101d28 <writei+0x108>
-    ip->size = off;
-    iupdate(ip);
-  }
-  return n;
-80101cf5:	8b 45 e0             	mov    -0x20(%ebp),%eax
-}
-80101cf8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101cfb:	5b                   	pop    %ebx
-80101cfc:	5e                   	pop    %esi
-80101cfd:	5f                   	pop    %edi
-80101cfe:	5d                   	pop    %ebp
-80101cff:	c3                   	ret
-    if(ip->major < 0 || ip->major >= NDEV || !devsw[ip->major].write)
-80101d00:	0f bf 40 52          	movswl 0x52(%eax),%eax
-80101d04:	66 83 f8 09          	cmp    $0x9,%ax
-80101d08:	77 2f                	ja     80101d39 <writei+0x119>
-80101d0a:	8b 04 c5 24 f9 10 80 	mov    -0x7fef06dc(,%eax,8),%eax
-80101d11:	85 c0                	test   %eax,%eax
-80101d13:	74 24                	je     80101d39 <writei+0x119>
-    return devsw[ip->major].write(ip, src, n);
-80101d15:	89 75 10             	mov    %esi,0x10(%ebp)
-}
-80101d18:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101d1b:	5b                   	pop    %ebx
-80101d1c:	5e                   	pop    %esi
-80101d1d:	5f                   	pop    %edi
-80101d1e:	5d                   	pop    %ebp
-    return devsw[ip->major].write(ip, src, n);
-80101d1f:	ff e0                	jmp    *%eax
-80101d21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    iupdate(ip);
-80101d28:	83 ec 0c             	sub    $0xc,%esp
-    ip->size = off;
-80101d2b:	89 78 58             	mov    %edi,0x58(%eax)
-    iupdate(ip);
-80101d2e:	50                   	push   %eax
-80101d2f:	e8 2c fa ff ff       	call   80101760 <iupdate>
-80101d34:	83 c4 10             	add    $0x10,%esp
-80101d37:	eb bc                	jmp    80101cf5 <writei+0xd5>
-      return -1;
-80101d39:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80101d3e:	eb b8                	jmp    80101cf8 <writei+0xd8>
-
-80101d40 <namecmp>:
-//PAGEBREAK!
-// Directories
-
-int
-namecmp(const char *s, const char *t)
-{
-80101d40:	55                   	push   %ebp
-80101d41:	89 e5                	mov    %esp,%ebp
-80101d43:	83 ec 0c             	sub    $0xc,%esp
-  return strncmp(s, t, DIRSIZ);
-80101d46:	6a 0e                	push   $0xe
-80101d48:	ff 75 0c             	push   0xc(%ebp)
-80101d4b:	ff 75 08             	push   0x8(%ebp)
-80101d4e:	e8 2d 2b 00 00       	call   80104880 <strncmp>
-}
-80101d53:	c9                   	leave
-80101d54:	c3                   	ret
-80101d55:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80101d5c:	00 
-80101d5d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80101d60 <dirlookup>:
-
-// Look for a directory entry in a directory.
-// If found, set *poff to byte offset of entry.
-struct inode*
-dirlookup(struct inode *dp, char *name, uint *poff)
-{
-80101d60:	55                   	push   %ebp
-80101d61:	89 e5                	mov    %esp,%ebp
-80101d63:	57                   	push   %edi
-80101d64:	56                   	push   %esi
-80101d65:	53                   	push   %ebx
-80101d66:	83 ec 1c             	sub    $0x1c,%esp
-80101d69:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  uint off, inum;
-  struct dirent de;
-
-  if(dp->type != T_DIR)
-80101d6c:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80101d71:	0f 85 85 00 00 00    	jne    80101dfc <dirlookup+0x9c>
-    panic("dirlookup not DIR");
-
-  for(off = 0; off < dp->size; off += sizeof(de)){
-80101d77:	8b 53 58             	mov    0x58(%ebx),%edx
-80101d7a:	31 ff                	xor    %edi,%edi
-80101d7c:	8d 75 d8             	lea    -0x28(%ebp),%esi
-80101d7f:	85 d2                	test   %edx,%edx
-80101d81:	74 3e                	je     80101dc1 <dirlookup+0x61>
-80101d83:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80101d88:	6a 10                	push   $0x10
-80101d8a:	57                   	push   %edi
-80101d8b:	56                   	push   %esi
-80101d8c:	53                   	push   %ebx
-80101d8d:	e8 8e fd ff ff       	call   80101b20 <readi>
-80101d92:	83 c4 10             	add    $0x10,%esp
-80101d95:	83 f8 10             	cmp    $0x10,%eax
-80101d98:	75 55                	jne    80101def <dirlookup+0x8f>
-      panic("dirlookup read");
-    if(de.inum == 0)
-80101d9a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-80101d9f:	74 18                	je     80101db9 <dirlookup+0x59>
-  return strncmp(s, t, DIRSIZ);
-80101da1:	83 ec 04             	sub    $0x4,%esp
-80101da4:	8d 45 da             	lea    -0x26(%ebp),%eax
-80101da7:	6a 0e                	push   $0xe
-80101da9:	50                   	push   %eax
-80101daa:	ff 75 0c             	push   0xc(%ebp)
-80101dad:	e8 ce 2a 00 00       	call   80104880 <strncmp>
-      continue;
-    if(namecmp(name, de.name) == 0){
-80101db2:	83 c4 10             	add    $0x10,%esp
-80101db5:	85 c0                	test   %eax,%eax
-80101db7:	74 17                	je     80101dd0 <dirlookup+0x70>
-  for(off = 0; off < dp->size; off += sizeof(de)){
-80101db9:	83 c7 10             	add    $0x10,%edi
-80101dbc:	3b 7b 58             	cmp    0x58(%ebx),%edi
-80101dbf:	72 c7                	jb     80101d88 <dirlookup+0x28>
-      return iget(dp->dev, inum);
-    }
-  }
-
-  return 0;
-}
-80101dc1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80101dc4:	31 c0                	xor    %eax,%eax
-}
-80101dc6:	5b                   	pop    %ebx
-80101dc7:	5e                   	pop    %esi
-80101dc8:	5f                   	pop    %edi
-80101dc9:	5d                   	pop    %ebp
-80101dca:	c3                   	ret
-80101dcb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      if(poff)
-80101dd0:	8b 45 10             	mov    0x10(%ebp),%eax
-80101dd3:	85 c0                	test   %eax,%eax
-80101dd5:	74 05                	je     80101ddc <dirlookup+0x7c>
-        *poff = off;
-80101dd7:	8b 45 10             	mov    0x10(%ebp),%eax
-80101dda:	89 38                	mov    %edi,(%eax)
-      inum = de.inum;
-80101ddc:	0f b7 55 d8          	movzwl -0x28(%ebp),%edx
-      return iget(dp->dev, inum);
-80101de0:	8b 03                	mov    (%ebx),%eax
-80101de2:	e8 79 f5 ff ff       	call   80101360 <iget>
-}
-80101de7:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101dea:	5b                   	pop    %ebx
-80101deb:	5e                   	pop    %esi
-80101dec:	5f                   	pop    %edi
-80101ded:	5d                   	pop    %ebp
-80101dee:	c3                   	ret
-      panic("dirlookup read");
-80101def:	83 ec 0c             	sub    $0xc,%esp
-80101df2:	68 a3 73 10 80       	push   $0x801073a3
-80101df7:	e8 84 e5 ff ff       	call   80100380 <panic>
-    panic("dirlookup not DIR");
-80101dfc:	83 ec 0c             	sub    $0xc,%esp
-80101dff:	68 91 73 10 80       	push   $0x80107391
-80101e04:	e8 77 e5 ff ff       	call   80100380 <panic>
-80101e09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80101e10 <namex>:
-// If parent != 0, return the inode for the parent and copy the final
-// path element into name, which must have room for DIRSIZ bytes.
-// Must be called inside a transaction since it calls iput().
-static struct inode*
-namex(char *path, int nameiparent, char *name)
-{
-80101e10:	55                   	push   %ebp
-80101e11:	89 e5                	mov    %esp,%ebp
-80101e13:	57                   	push   %edi
-80101e14:	56                   	push   %esi
-80101e15:	53                   	push   %ebx
-80101e16:	89 c3                	mov    %eax,%ebx
-80101e18:	83 ec 1c             	sub    $0x1c,%esp
-  struct inode *ip, *next;
-
-  if(*path == '/')
-80101e1b:	80 38 2f             	cmpb   $0x2f,(%eax)
-{
-80101e1e:	89 55 dc             	mov    %edx,-0x24(%ebp)
-80101e21:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-  if(*path == '/')
-80101e24:	0f 84 9e 01 00 00    	je     80101fc8 <namex+0x1b8>
-    ip = iget(ROOTDEV, ROOTINO);
-  else
-    ip = idup(myproc()->cwd);
-80101e2a:	e8 11 1c 00 00       	call   80103a40 <myproc>
-  acquire(&icache.lock);
-80101e2f:	83 ec 0c             	sub    $0xc,%esp
-    ip = idup(myproc()->cwd);
-80101e32:	8b 70 68             	mov    0x68(%eax),%esi
-  acquire(&icache.lock);
-80101e35:	68 80 f9 10 80       	push   $0x8010f980
-80101e3a:	e8 41 28 00 00       	call   80104680 <acquire>
-  ip->ref++;
-80101e3f:	83 46 08 01          	addl   $0x1,0x8(%esi)
-  release(&icache.lock);
-80101e43:	c7 04 24 80 f9 10 80 	movl   $0x8010f980,(%esp)
-80101e4a:	e8 d1 27 00 00       	call   80104620 <release>
-80101e4f:	83 c4 10             	add    $0x10,%esp
-80101e52:	eb 07                	jmp    80101e5b <namex+0x4b>
-80101e54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    path++;
-80101e58:	83 c3 01             	add    $0x1,%ebx
-  while(*path == '/')
-80101e5b:	0f b6 03             	movzbl (%ebx),%eax
-80101e5e:	3c 2f                	cmp    $0x2f,%al
-80101e60:	74 f6                	je     80101e58 <namex+0x48>
-  if(*path == 0)
-80101e62:	84 c0                	test   %al,%al
-80101e64:	0f 84 06 01 00 00    	je     80101f70 <namex+0x160>
-  while(*path != '/' && *path != 0)
-80101e6a:	0f b6 03             	movzbl (%ebx),%eax
-80101e6d:	84 c0                	test   %al,%al
-80101e6f:	0f 84 10 01 00 00    	je     80101f85 <namex+0x175>
-80101e75:	89 df                	mov    %ebx,%edi
-80101e77:	3c 2f                	cmp    $0x2f,%al
-80101e79:	0f 84 06 01 00 00    	je     80101f85 <namex+0x175>
-80101e7f:	90                   	nop
-80101e80:	0f b6 47 01          	movzbl 0x1(%edi),%eax
-    path++;
-80101e84:	83 c7 01             	add    $0x1,%edi
-  while(*path != '/' && *path != 0)
-80101e87:	3c 2f                	cmp    $0x2f,%al
-80101e89:	74 04                	je     80101e8f <namex+0x7f>
-80101e8b:	84 c0                	test   %al,%al
-80101e8d:	75 f1                	jne    80101e80 <namex+0x70>
-  len = path - s;
-80101e8f:	89 f8                	mov    %edi,%eax
-80101e91:	29 d8                	sub    %ebx,%eax
-  if(len >= DIRSIZ)
-80101e93:	83 f8 0d             	cmp    $0xd,%eax
-80101e96:	0f 8e ac 00 00 00    	jle    80101f48 <namex+0x138>
-    memmove(name, s, DIRSIZ);
-80101e9c:	83 ec 04             	sub    $0x4,%esp
-80101e9f:	6a 0e                	push   $0xe
-80101ea1:	53                   	push   %ebx
-80101ea2:	89 fb                	mov    %edi,%ebx
-80101ea4:	ff 75 e4             	push   -0x1c(%ebp)
-80101ea7:	e8 64 29 00 00       	call   80104810 <memmove>
-80101eac:	83 c4 10             	add    $0x10,%esp
-  while(*path == '/')
-80101eaf:	80 3f 2f             	cmpb   $0x2f,(%edi)
-80101eb2:	75 0c                	jne    80101ec0 <namex+0xb0>
-80101eb4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    path++;
-80101eb8:	83 c3 01             	add    $0x1,%ebx
-  while(*path == '/')
-80101ebb:	80 3b 2f             	cmpb   $0x2f,(%ebx)
-80101ebe:	74 f8                	je     80101eb8 <namex+0xa8>
-
-  while((path = skipelem(path, name)) != 0){
-    ilock(ip);
-80101ec0:	83 ec 0c             	sub    $0xc,%esp
-80101ec3:	56                   	push   %esi
-80101ec4:	e8 47 f9 ff ff       	call   80101810 <ilock>
-    if(ip->type != T_DIR){
-80101ec9:	83 c4 10             	add    $0x10,%esp
-80101ecc:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80101ed1:	0f 85 b7 00 00 00    	jne    80101f8e <namex+0x17e>
-      iunlockput(ip);
-      return 0;
-    }
-    if(nameiparent && *path == '\0'){
-80101ed7:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80101eda:	85 c0                	test   %eax,%eax
-80101edc:	74 09                	je     80101ee7 <namex+0xd7>
-80101ede:	80 3b 00             	cmpb   $0x0,(%ebx)
-80101ee1:	0f 84 f7 00 00 00    	je     80101fde <namex+0x1ce>
-      // Stop one level early.
-      iunlock(ip);
-      return ip;
-    }
-    if((next = dirlookup(ip, name, 0)) == 0){
-80101ee7:	83 ec 04             	sub    $0x4,%esp
-80101eea:	6a 00                	push   $0x0
-80101eec:	ff 75 e4             	push   -0x1c(%ebp)
-80101eef:	56                   	push   %esi
-80101ef0:	e8 6b fe ff ff       	call   80101d60 <dirlookup>
-80101ef5:	83 c4 10             	add    $0x10,%esp
-80101ef8:	89 c7                	mov    %eax,%edi
-80101efa:	85 c0                	test   %eax,%eax
-80101efc:	0f 84 8c 00 00 00    	je     80101f8e <namex+0x17e>
-  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-80101f02:	83 ec 0c             	sub    $0xc,%esp
-80101f05:	8d 4e 0c             	lea    0xc(%esi),%ecx
-80101f08:	51                   	push   %ecx
-80101f09:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-80101f0c:	e8 2f 25 00 00       	call   80104440 <holdingsleep>
-80101f11:	83 c4 10             	add    $0x10,%esp
-80101f14:	85 c0                	test   %eax,%eax
-80101f16:	0f 84 02 01 00 00    	je     8010201e <namex+0x20e>
-80101f1c:	8b 56 08             	mov    0x8(%esi),%edx
-80101f1f:	85 d2                	test   %edx,%edx
-80101f21:	0f 8e f7 00 00 00    	jle    8010201e <namex+0x20e>
-  releasesleep(&ip->lock);
-80101f27:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-80101f2a:	83 ec 0c             	sub    $0xc,%esp
-80101f2d:	51                   	push   %ecx
-80101f2e:	e8 cd 24 00 00       	call   80104400 <releasesleep>
-  iput(ip);
-80101f33:	89 34 24             	mov    %esi,(%esp)
-      iunlockput(ip);
-      return 0;
-    }
-    iunlockput(ip);
-    ip = next;
-80101f36:	89 fe                	mov    %edi,%esi
-  iput(ip);
-80101f38:	e8 03 fa ff ff       	call   80101940 <iput>
-80101f3d:	83 c4 10             	add    $0x10,%esp
-  while(*path == '/')
-80101f40:	e9 16 ff ff ff       	jmp    80101e5b <namex+0x4b>
-80101f45:	8d 76 00             	lea    0x0(%esi),%esi
-    name[len] = 0;
-80101f48:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80101f4b:	8d 0c 02             	lea    (%edx,%eax,1),%ecx
-    memmove(name, s, len);
-80101f4e:	83 ec 04             	sub    $0x4,%esp
-80101f51:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-80101f54:	50                   	push   %eax
-80101f55:	53                   	push   %ebx
-    name[len] = 0;
-80101f56:	89 fb                	mov    %edi,%ebx
-    memmove(name, s, len);
-80101f58:	ff 75 e4             	push   -0x1c(%ebp)
-80101f5b:	e8 b0 28 00 00       	call   80104810 <memmove>
-    name[len] = 0;
-80101f60:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-80101f63:	83 c4 10             	add    $0x10,%esp
-80101f66:	c6 01 00             	movb   $0x0,(%ecx)
-80101f69:	e9 41 ff ff ff       	jmp    80101eaf <namex+0x9f>
-80101f6e:	66 90                	xchg   %ax,%ax
-  }
-  if(nameiparent){
-80101f70:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80101f73:	85 c0                	test   %eax,%eax
-80101f75:	0f 85 93 00 00 00    	jne    8010200e <namex+0x1fe>
-    iput(ip);
-    return 0;
-  }
-  return ip;
-}
-80101f7b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101f7e:	89 f0                	mov    %esi,%eax
-80101f80:	5b                   	pop    %ebx
-80101f81:	5e                   	pop    %esi
-80101f82:	5f                   	pop    %edi
-80101f83:	5d                   	pop    %ebp
-80101f84:	c3                   	ret
-  while(*path != '/' && *path != 0)
-80101f85:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80101f88:	89 df                	mov    %ebx,%edi
-80101f8a:	31 c0                	xor    %eax,%eax
-80101f8c:	eb c0                	jmp    80101f4e <namex+0x13e>
-  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-80101f8e:	83 ec 0c             	sub    $0xc,%esp
-80101f91:	8d 5e 0c             	lea    0xc(%esi),%ebx
-80101f94:	53                   	push   %ebx
-80101f95:	e8 a6 24 00 00       	call   80104440 <holdingsleep>
-80101f9a:	83 c4 10             	add    $0x10,%esp
-80101f9d:	85 c0                	test   %eax,%eax
-80101f9f:	74 7d                	je     8010201e <namex+0x20e>
-80101fa1:	8b 4e 08             	mov    0x8(%esi),%ecx
-80101fa4:	85 c9                	test   %ecx,%ecx
-80101fa6:	7e 76                	jle    8010201e <namex+0x20e>
-  releasesleep(&ip->lock);
-80101fa8:	83 ec 0c             	sub    $0xc,%esp
-80101fab:	53                   	push   %ebx
-80101fac:	e8 4f 24 00 00       	call   80104400 <releasesleep>
-  iput(ip);
-80101fb1:	89 34 24             	mov    %esi,(%esp)
-      return 0;
-80101fb4:	31 f6                	xor    %esi,%esi
-  iput(ip);
-80101fb6:	e8 85 f9 ff ff       	call   80101940 <iput>
-      return 0;
-80101fbb:	83 c4 10             	add    $0x10,%esp
-}
-80101fbe:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80101fc1:	89 f0                	mov    %esi,%eax
-80101fc3:	5b                   	pop    %ebx
-80101fc4:	5e                   	pop    %esi
-80101fc5:	5f                   	pop    %edi
-80101fc6:	5d                   	pop    %ebp
-80101fc7:	c3                   	ret
-    ip = iget(ROOTDEV, ROOTINO);
-80101fc8:	ba 01 00 00 00       	mov    $0x1,%edx
-80101fcd:	b8 01 00 00 00       	mov    $0x1,%eax
-80101fd2:	e8 89 f3 ff ff       	call   80101360 <iget>
-80101fd7:	89 c6                	mov    %eax,%esi
-80101fd9:	e9 7d fe ff ff       	jmp    80101e5b <namex+0x4b>
-  if(ip == 0 || !holdingsleep(&ip->lock) || ip->ref < 1)
-80101fde:	83 ec 0c             	sub    $0xc,%esp
-80101fe1:	8d 5e 0c             	lea    0xc(%esi),%ebx
-80101fe4:	53                   	push   %ebx
-80101fe5:	e8 56 24 00 00       	call   80104440 <holdingsleep>
-80101fea:	83 c4 10             	add    $0x10,%esp
-80101fed:	85 c0                	test   %eax,%eax
-80101fef:	74 2d                	je     8010201e <namex+0x20e>
-80101ff1:	8b 7e 08             	mov    0x8(%esi),%edi
-80101ff4:	85 ff                	test   %edi,%edi
-80101ff6:	7e 26                	jle    8010201e <namex+0x20e>
-  releasesleep(&ip->lock);
-80101ff8:	83 ec 0c             	sub    $0xc,%esp
-80101ffb:	53                   	push   %ebx
-80101ffc:	e8 ff 23 00 00       	call   80104400 <releasesleep>
-}
-80102001:	83 c4 10             	add    $0x10,%esp
-}
-80102004:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102007:	89 f0                	mov    %esi,%eax
-80102009:	5b                   	pop    %ebx
-8010200a:	5e                   	pop    %esi
-8010200b:	5f                   	pop    %edi
-8010200c:	5d                   	pop    %ebp
-8010200d:	c3                   	ret
-    iput(ip);
-8010200e:	83 ec 0c             	sub    $0xc,%esp
-80102011:	56                   	push   %esi
-      return 0;
-80102012:	31 f6                	xor    %esi,%esi
-    iput(ip);
-80102014:	e8 27 f9 ff ff       	call   80101940 <iput>
-    return 0;
-80102019:	83 c4 10             	add    $0x10,%esp
-8010201c:	eb a0                	jmp    80101fbe <namex+0x1ae>
-    panic("iunlock");
-8010201e:	83 ec 0c             	sub    $0xc,%esp
-80102021:	68 89 73 10 80       	push   $0x80107389
-80102026:	e8 55 e3 ff ff       	call   80100380 <panic>
-8010202b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80102030 <dirlink>:
-{
-80102030:	55                   	push   %ebp
-80102031:	89 e5                	mov    %esp,%ebp
-80102033:	57                   	push   %edi
-80102034:	56                   	push   %esi
-80102035:	53                   	push   %ebx
-80102036:	83 ec 20             	sub    $0x20,%esp
-80102039:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if((ip = dirlookup(dp, name, 0)) != 0){
-8010203c:	6a 00                	push   $0x0
-8010203e:	ff 75 0c             	push   0xc(%ebp)
-80102041:	53                   	push   %ebx
-80102042:	e8 19 fd ff ff       	call   80101d60 <dirlookup>
-80102047:	83 c4 10             	add    $0x10,%esp
-8010204a:	85 c0                	test   %eax,%eax
-8010204c:	75 67                	jne    801020b5 <dirlink+0x85>
-  for(off = 0; off < dp->size; off += sizeof(de)){
-8010204e:	8b 7b 58             	mov    0x58(%ebx),%edi
-80102051:	8d 75 d8             	lea    -0x28(%ebp),%esi
-80102054:	85 ff                	test   %edi,%edi
-80102056:	74 29                	je     80102081 <dirlink+0x51>
-80102058:	31 ff                	xor    %edi,%edi
-8010205a:	8d 75 d8             	lea    -0x28(%ebp),%esi
-8010205d:	eb 09                	jmp    80102068 <dirlink+0x38>
-8010205f:	90                   	nop
-80102060:	83 c7 10             	add    $0x10,%edi
-80102063:	3b 7b 58             	cmp    0x58(%ebx),%edi
-80102066:	73 19                	jae    80102081 <dirlink+0x51>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102068:	6a 10                	push   $0x10
-8010206a:	57                   	push   %edi
-8010206b:	56                   	push   %esi
-8010206c:	53                   	push   %ebx
-8010206d:	e8 ae fa ff ff       	call   80101b20 <readi>
-80102072:	83 c4 10             	add    $0x10,%esp
-80102075:	83 f8 10             	cmp    $0x10,%eax
-80102078:	75 4e                	jne    801020c8 <dirlink+0x98>
-    if(de.inum == 0)
-8010207a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-8010207f:	75 df                	jne    80102060 <dirlink+0x30>
-  strncpy(de.name, name, DIRSIZ);
-80102081:	83 ec 04             	sub    $0x4,%esp
-80102084:	8d 45 da             	lea    -0x26(%ebp),%eax
-80102087:	6a 0e                	push   $0xe
-80102089:	ff 75 0c             	push   0xc(%ebp)
-8010208c:	50                   	push   %eax
-8010208d:	e8 3e 28 00 00       	call   801048d0 <strncpy>
-  de.inum = inum;
-80102092:	8b 45 10             	mov    0x10(%ebp),%eax
-80102095:	66 89 45 d8          	mov    %ax,-0x28(%ebp)
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80102099:	6a 10                	push   $0x10
-8010209b:	57                   	push   %edi
-8010209c:	56                   	push   %esi
-8010209d:	53                   	push   %ebx
-8010209e:	e8 7d fb ff ff       	call   80101c20 <writei>
-801020a3:	83 c4 20             	add    $0x20,%esp
-801020a6:	83 f8 10             	cmp    $0x10,%eax
-801020a9:	75 2a                	jne    801020d5 <dirlink+0xa5>
-  return 0;
-801020ab:	31 c0                	xor    %eax,%eax
-}
-801020ad:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801020b0:	5b                   	pop    %ebx
-801020b1:	5e                   	pop    %esi
-801020b2:	5f                   	pop    %edi
-801020b3:	5d                   	pop    %ebp
-801020b4:	c3                   	ret
-    iput(ip);
-801020b5:	83 ec 0c             	sub    $0xc,%esp
-801020b8:	50                   	push   %eax
-801020b9:	e8 82 f8 ff ff       	call   80101940 <iput>
-    return -1;
-801020be:	83 c4 10             	add    $0x10,%esp
-801020c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801020c6:	eb e5                	jmp    801020ad <dirlink+0x7d>
-      panic("dirlink read");
-801020c8:	83 ec 0c             	sub    $0xc,%esp
-801020cb:	68 b2 73 10 80       	push   $0x801073b2
-801020d0:	e8 ab e2 ff ff       	call   80100380 <panic>
-    panic("dirlink");
-801020d5:	83 ec 0c             	sub    $0xc,%esp
-801020d8:	68 3c 76 10 80       	push   $0x8010763c
-801020dd:	e8 9e e2 ff ff       	call   80100380 <panic>
-801020e2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801020e9:	00 
-801020ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801020f0 <namei>:
-
-struct inode*
-namei(char *path)
-{
-801020f0:	55                   	push   %ebp
-  char name[DIRSIZ];
-  return namex(path, 0, name);
-801020f1:	31 d2                	xor    %edx,%edx
-{
-801020f3:	89 e5                	mov    %esp,%ebp
-801020f5:	83 ec 18             	sub    $0x18,%esp
-  return namex(path, 0, name);
-801020f8:	8b 45 08             	mov    0x8(%ebp),%eax
-801020fb:	8d 4d ea             	lea    -0x16(%ebp),%ecx
-801020fe:	e8 0d fd ff ff       	call   80101e10 <namex>
-}
-80102103:	c9                   	leave
-80102104:	c3                   	ret
-80102105:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010210c:	00 
-8010210d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80102110 <nameiparent>:
-
-struct inode*
-nameiparent(char *path, char *name)
-{
-80102110:	55                   	push   %ebp
-  return namex(path, 1, name);
-80102111:	ba 01 00 00 00       	mov    $0x1,%edx
-{
-80102116:	89 e5                	mov    %esp,%ebp
-  return namex(path, 1, name);
-80102118:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-8010211b:	8b 45 08             	mov    0x8(%ebp),%eax
-}
-8010211e:	5d                   	pop    %ebp
-  return namex(path, 1, name);
-8010211f:	e9 ec fc ff ff       	jmp    80101e10 <namex>
-80102124:	66 90                	xchg   %ax,%ax
-80102126:	66 90                	xchg   %ax,%ax
-80102128:	66 90                	xchg   %ax,%ax
-8010212a:	66 90                	xchg   %ax,%ax
-8010212c:	66 90                	xchg   %ax,%ax
-8010212e:	66 90                	xchg   %ax,%ax
-
-80102130 <idestart>:
-}
-
-// Start the request for b.  Caller must hold idelock.
-static void
-idestart(struct buf *b)
-{
-80102130:	55                   	push   %ebp
-80102131:	89 e5                	mov    %esp,%ebp
-80102133:	57                   	push   %edi
-80102134:	56                   	push   %esi
-80102135:	53                   	push   %ebx
-80102136:	83 ec 0c             	sub    $0xc,%esp
-  if(b == 0)
-80102139:	85 c0                	test   %eax,%eax
-8010213b:	0f 84 b4 00 00 00    	je     801021f5 <idestart+0xc5>
-    panic("idestart");
-  if(b->blockno >= FSSIZE)
-80102141:	8b 70 08             	mov    0x8(%eax),%esi
-80102144:	89 c3                	mov    %eax,%ebx
-80102146:	81 fe e7 03 00 00    	cmp    $0x3e7,%esi
-8010214c:	0f 87 96 00 00 00    	ja     801021e8 <idestart+0xb8>
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102152:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
-80102157:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010215e:	00 
-8010215f:	90                   	nop
-80102160:	89 ca                	mov    %ecx,%edx
-80102162:	ec                   	in     (%dx),%al
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-80102163:	83 e0 c0             	and    $0xffffffc0,%eax
-80102166:	3c 40                	cmp    $0x40,%al
-80102168:	75 f6                	jne    80102160 <idestart+0x30>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010216a:	31 ff                	xor    %edi,%edi
-8010216c:	ba f6 03 00 00       	mov    $0x3f6,%edx
-80102171:	89 f8                	mov    %edi,%eax
-80102173:	ee                   	out    %al,(%dx)
-80102174:	b8 01 00 00 00       	mov    $0x1,%eax
-80102179:	ba f2 01 00 00       	mov    $0x1f2,%edx
-8010217e:	ee                   	out    %al,(%dx)
-8010217f:	ba f3 01 00 00       	mov    $0x1f3,%edx
-80102184:	89 f0                	mov    %esi,%eax
-80102186:	ee                   	out    %al,(%dx)
-
-  idewait(0);
-  outb(0x3f6, 0);  // generate interrupt
-  outb(0x1f2, sector_per_block);  // number of sectors
-  outb(0x1f3, sector & 0xff);
-  outb(0x1f4, (sector >> 8) & 0xff);
-80102187:	89 f0                	mov    %esi,%eax
-80102189:	ba f4 01 00 00       	mov    $0x1f4,%edx
-8010218e:	c1 f8 08             	sar    $0x8,%eax
-80102191:	ee                   	out    %al,(%dx)
-80102192:	ba f5 01 00 00       	mov    $0x1f5,%edx
-80102197:	89 f8                	mov    %edi,%eax
-80102199:	ee                   	out    %al,(%dx)
-  outb(0x1f5, (sector >> 16) & 0xff);
-  outb(0x1f6, 0xe0 | ((b->dev&1)<<4) | ((sector>>24)&0x0f));
-8010219a:	0f b6 43 04          	movzbl 0x4(%ebx),%eax
-8010219e:	ba f6 01 00 00       	mov    $0x1f6,%edx
-801021a3:	c1 e0 04             	shl    $0x4,%eax
-801021a6:	83 e0 10             	and    $0x10,%eax
-801021a9:	83 c8 e0             	or     $0xffffffe0,%eax
-801021ac:	ee                   	out    %al,(%dx)
-  if(b->flags & B_DIRTY){
-801021ad:	f6 03 04             	testb  $0x4,(%ebx)
-801021b0:	75 16                	jne    801021c8 <idestart+0x98>
-801021b2:	b8 20 00 00 00       	mov    $0x20,%eax
-801021b7:	89 ca                	mov    %ecx,%edx
-801021b9:	ee                   	out    %al,(%dx)
-    outb(0x1f7, write_cmd);
-    outsl(0x1f0, b->data, BSIZE/4);
-  } else {
-    outb(0x1f7, read_cmd);
-  }
-}
-801021ba:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801021bd:	5b                   	pop    %ebx
-801021be:	5e                   	pop    %esi
-801021bf:	5f                   	pop    %edi
-801021c0:	5d                   	pop    %ebp
-801021c1:	c3                   	ret
-801021c2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-801021c8:	b8 30 00 00 00       	mov    $0x30,%eax
-801021cd:	89 ca                	mov    %ecx,%edx
-801021cf:	ee                   	out    %al,(%dx)
-  asm volatile("cld; rep outsl" :
-801021d0:	b9 80 00 00 00       	mov    $0x80,%ecx
-    outsl(0x1f0, b->data, BSIZE/4);
-801021d5:	8d 73 5c             	lea    0x5c(%ebx),%esi
-801021d8:	ba f0 01 00 00       	mov    $0x1f0,%edx
-801021dd:	fc                   	cld
-801021de:	f3 6f                	rep outsl %ds:(%esi),(%dx)
-}
-801021e0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801021e3:	5b                   	pop    %ebx
-801021e4:	5e                   	pop    %esi
-801021e5:	5f                   	pop    %edi
-801021e6:	5d                   	pop    %ebp
-801021e7:	c3                   	ret
-    panic("incorrect blockno");
-801021e8:	83 ec 0c             	sub    $0xc,%esp
-801021eb:	68 c8 73 10 80       	push   $0x801073c8
-801021f0:	e8 8b e1 ff ff       	call   80100380 <panic>
-    panic("idestart");
-801021f5:	83 ec 0c             	sub    $0xc,%esp
-801021f8:	68 bf 73 10 80       	push   $0x801073bf
-801021fd:	e8 7e e1 ff ff       	call   80100380 <panic>
-80102202:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102209:	00 
-8010220a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80102210 <ideinit>:
-{
-80102210:	55                   	push   %ebp
-80102211:	89 e5                	mov    %esp,%ebp
-80102213:	83 ec 10             	sub    $0x10,%esp
-  initlock(&idelock, "ide");
-80102216:	68 da 73 10 80       	push   $0x801073da
-8010221b:	68 20 16 11 80       	push   $0x80111620
-80102220:	e8 6b 22 00 00       	call   80104490 <initlock>
-  ioapicenable(IRQ_IDE, ncpu - 1);
-80102225:	58                   	pop    %eax
-80102226:	a1 a4 17 11 80       	mov    0x801117a4,%eax
-8010222b:	5a                   	pop    %edx
-8010222c:	83 e8 01             	sub    $0x1,%eax
-8010222f:	50                   	push   %eax
-80102230:	6a 0e                	push   $0xe
-80102232:	e8 99 02 00 00       	call   801024d0 <ioapicenable>
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-80102237:	83 c4 10             	add    $0x10,%esp
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-8010223a:	b9 f7 01 00 00       	mov    $0x1f7,%ecx
-8010223f:	90                   	nop
-80102240:	89 ca                	mov    %ecx,%edx
-80102242:	ec                   	in     (%dx),%al
-80102243:	83 e0 c0             	and    $0xffffffc0,%eax
-80102246:	3c 40                	cmp    $0x40,%al
-80102248:	75 f6                	jne    80102240 <ideinit+0x30>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010224a:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
-8010224f:	ba f6 01 00 00       	mov    $0x1f6,%edx
-80102254:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102255:	89 ca                	mov    %ecx,%edx
-80102257:	ec                   	in     (%dx),%al
-    if(inb(0x1f7) != 0){
-80102258:	84 c0                	test   %al,%al
-8010225a:	75 1e                	jne    8010227a <ideinit+0x6a>
-8010225c:	b9 e8 03 00 00       	mov    $0x3e8,%ecx
-80102261:	ba f7 01 00 00       	mov    $0x1f7,%edx
-80102266:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010226d:	00 
-8010226e:	66 90                	xchg   %ax,%ax
-  for(i=0; i<1000; i++){
-80102270:	83 e9 01             	sub    $0x1,%ecx
-80102273:	74 0f                	je     80102284 <ideinit+0x74>
-80102275:	ec                   	in     (%dx),%al
-    if(inb(0x1f7) != 0){
-80102276:	84 c0                	test   %al,%al
-80102278:	74 f6                	je     80102270 <ideinit+0x60>
-      havedisk1 = 1;
-8010227a:	c7 05 00 16 11 80 01 	movl   $0x1,0x80111600
-80102281:	00 00 00 
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102284:	b8 e0 ff ff ff       	mov    $0xffffffe0,%eax
-80102289:	ba f6 01 00 00       	mov    $0x1f6,%edx
-8010228e:	ee                   	out    %al,(%dx)
-}
-8010228f:	c9                   	leave
-80102290:	c3                   	ret
-80102291:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102298:	00 
-80102299:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-801022a0 <ideintr>:
-
-// Interrupt handler.
-void
-ideintr(void)
-{
-801022a0:	55                   	push   %ebp
-801022a1:	89 e5                	mov    %esp,%ebp
-801022a3:	57                   	push   %edi
-801022a4:	56                   	push   %esi
-801022a5:	53                   	push   %ebx
-801022a6:	83 ec 18             	sub    $0x18,%esp
-  struct buf *b;
-
-  // First queued buffer is the active request.
-  acquire(&idelock);
-801022a9:	68 20 16 11 80       	push   $0x80111620
-801022ae:	e8 cd 23 00 00       	call   80104680 <acquire>
-
-  if((b = idequeue) == 0){
-801022b3:	8b 1d 04 16 11 80    	mov    0x80111604,%ebx
-801022b9:	83 c4 10             	add    $0x10,%esp
-801022bc:	85 db                	test   %ebx,%ebx
-801022be:	74 63                	je     80102323 <ideintr+0x83>
-    release(&idelock);
-    return;
-  }
-  idequeue = b->qnext;
-801022c0:	8b 43 58             	mov    0x58(%ebx),%eax
-801022c3:	a3 04 16 11 80       	mov    %eax,0x80111604
-
-  // Read data if needed.
-  if(!(b->flags & B_DIRTY) && idewait(1) >= 0)
-801022c8:	8b 33                	mov    (%ebx),%esi
-801022ca:	f7 c6 04 00 00 00    	test   $0x4,%esi
-801022d0:	75 2f                	jne    80102301 <ideintr+0x61>
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-801022d2:	ba f7 01 00 00       	mov    $0x1f7,%edx
-801022d7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801022de:	00 
-801022df:	90                   	nop
-801022e0:	ec                   	in     (%dx),%al
-  while(((r = inb(0x1f7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
-801022e1:	89 c1                	mov    %eax,%ecx
-801022e3:	83 e1 c0             	and    $0xffffffc0,%ecx
-801022e6:	80 f9 40             	cmp    $0x40,%cl
-801022e9:	75 f5                	jne    801022e0 <ideintr+0x40>
-  if(checkerr && (r & (IDE_DF|IDE_ERR)) != 0)
-801022eb:	a8 21                	test   $0x21,%al
-801022ed:	75 12                	jne    80102301 <ideintr+0x61>
-    insl(0x1f0, b->data, BSIZE/4);
-801022ef:	8d 7b 5c             	lea    0x5c(%ebx),%edi
-  asm volatile("cld; rep insl" :
-801022f2:	b9 80 00 00 00       	mov    $0x80,%ecx
-801022f7:	ba f0 01 00 00       	mov    $0x1f0,%edx
-801022fc:	fc                   	cld
-801022fd:	f3 6d                	rep insl (%dx),%es:(%edi)
-
-  // Wake process waiting for this buf.
-  b->flags |= B_VALID;
-801022ff:	8b 33                	mov    (%ebx),%esi
-  b->flags &= ~B_DIRTY;
-80102301:	83 e6 fb             	and    $0xfffffffb,%esi
-  wakeup(b);
-80102304:	83 ec 0c             	sub    $0xc,%esp
-  b->flags &= ~B_DIRTY;
-80102307:	83 ce 02             	or     $0x2,%esi
-8010230a:	89 33                	mov    %esi,(%ebx)
-  wakeup(b);
-8010230c:	53                   	push   %ebx
-8010230d:	e8 ae 1e 00 00       	call   801041c0 <wakeup>
-
-  // Start disk on next buf in queue.
-  if(idequeue != 0)
-80102312:	a1 04 16 11 80       	mov    0x80111604,%eax
-80102317:	83 c4 10             	add    $0x10,%esp
-8010231a:	85 c0                	test   %eax,%eax
-8010231c:	74 05                	je     80102323 <ideintr+0x83>
-    idestart(idequeue);
-8010231e:	e8 0d fe ff ff       	call   80102130 <idestart>
-    release(&idelock);
-80102323:	83 ec 0c             	sub    $0xc,%esp
-80102326:	68 20 16 11 80       	push   $0x80111620
-8010232b:	e8 f0 22 00 00       	call   80104620 <release>
-
-  release(&idelock);
-}
-80102330:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102333:	5b                   	pop    %ebx
-80102334:	5e                   	pop    %esi
-80102335:	5f                   	pop    %edi
-80102336:	5d                   	pop    %ebp
-80102337:	c3                   	ret
-80102338:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010233f:	00 
-
-80102340 <iderw>:
-// Sync buf with disk.
-// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.
-// Else if B_VALID is not set, read buf from disk, set B_VALID.
-void
-iderw(struct buf *b)
-{
-80102340:	55                   	push   %ebp
-80102341:	89 e5                	mov    %esp,%ebp
-80102343:	53                   	push   %ebx
-80102344:	83 ec 10             	sub    $0x10,%esp
-80102347:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct buf **pp;
-
-  if(!holdingsleep(&b->lock))
-8010234a:	8d 43 0c             	lea    0xc(%ebx),%eax
-8010234d:	50                   	push   %eax
-8010234e:	e8 ed 20 00 00       	call   80104440 <holdingsleep>
-80102353:	83 c4 10             	add    $0x10,%esp
-80102356:	85 c0                	test   %eax,%eax
-80102358:	0f 84 c3 00 00 00    	je     80102421 <iderw+0xe1>
-    panic("iderw: buf not locked");
-  if((b->flags & (B_VALID|B_DIRTY)) == B_VALID)
-8010235e:	8b 03                	mov    (%ebx),%eax
-80102360:	83 e0 06             	and    $0x6,%eax
-80102363:	83 f8 02             	cmp    $0x2,%eax
-80102366:	0f 84 a8 00 00 00    	je     80102414 <iderw+0xd4>
-    panic("iderw: nothing to do");
-  if(b->dev != 0 && !havedisk1)
-8010236c:	8b 53 04             	mov    0x4(%ebx),%edx
-8010236f:	85 d2                	test   %edx,%edx
-80102371:	74 0d                	je     80102380 <iderw+0x40>
-80102373:	a1 00 16 11 80       	mov    0x80111600,%eax
-80102378:	85 c0                	test   %eax,%eax
-8010237a:	0f 84 87 00 00 00    	je     80102407 <iderw+0xc7>
-    panic("iderw: ide disk 1 not present");
-
-  acquire(&idelock);  //DOC:acquire-lock
-80102380:	83 ec 0c             	sub    $0xc,%esp
-80102383:	68 20 16 11 80       	push   $0x80111620
-80102388:	e8 f3 22 00 00       	call   80104680 <acquire>
-
-  // Append b to idequeue.
-  b->qnext = 0;
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-8010238d:	a1 04 16 11 80       	mov    0x80111604,%eax
-  b->qnext = 0;
-80102392:	c7 43 58 00 00 00 00 	movl   $0x0,0x58(%ebx)
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102399:	83 c4 10             	add    $0x10,%esp
-8010239c:	85 c0                	test   %eax,%eax
-8010239e:	74 60                	je     80102400 <iderw+0xc0>
-801023a0:	89 c2                	mov    %eax,%edx
-801023a2:	8b 40 58             	mov    0x58(%eax),%eax
-801023a5:	85 c0                	test   %eax,%eax
-801023a7:	75 f7                	jne    801023a0 <iderw+0x60>
-801023a9:	83 c2 58             	add    $0x58,%edx
-    ;
-  *pp = b;
-801023ac:	89 1a                	mov    %ebx,(%edx)
-
-  // Start disk if necessary.
-  if(idequeue == b)
-801023ae:	39 1d 04 16 11 80    	cmp    %ebx,0x80111604
-801023b4:	74 3a                	je     801023f0 <iderw+0xb0>
-    idestart(b);
-
-  // Wait for request to finish.
-  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-801023b6:	8b 03                	mov    (%ebx),%eax
-801023b8:	83 e0 06             	and    $0x6,%eax
-801023bb:	83 f8 02             	cmp    $0x2,%eax
-801023be:	74 1b                	je     801023db <iderw+0x9b>
-    sleep(b, &idelock);
-801023c0:	83 ec 08             	sub    $0x8,%esp
-801023c3:	68 20 16 11 80       	push   $0x80111620
-801023c8:	53                   	push   %ebx
-801023c9:	e8 32 1d 00 00       	call   80104100 <sleep>
-  while((b->flags & (B_VALID|B_DIRTY)) != B_VALID){
-801023ce:	8b 03                	mov    (%ebx),%eax
-801023d0:	83 c4 10             	add    $0x10,%esp
-801023d3:	83 e0 06             	and    $0x6,%eax
-801023d6:	83 f8 02             	cmp    $0x2,%eax
-801023d9:	75 e5                	jne    801023c0 <iderw+0x80>
-  }
-
-
-  release(&idelock);
-801023db:	c7 45 08 20 16 11 80 	movl   $0x80111620,0x8(%ebp)
-}
-801023e2:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801023e5:	c9                   	leave
-  release(&idelock);
-801023e6:	e9 35 22 00 00       	jmp    80104620 <release>
-801023eb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    idestart(b);
-801023f0:	89 d8                	mov    %ebx,%eax
-801023f2:	e8 39 fd ff ff       	call   80102130 <idestart>
-801023f7:	eb bd                	jmp    801023b6 <iderw+0x76>
-801023f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  for(pp=&idequeue; *pp; pp=&(*pp)->qnext)  //DOC:insert-queue
-80102400:	ba 04 16 11 80       	mov    $0x80111604,%edx
-80102405:	eb a5                	jmp    801023ac <iderw+0x6c>
-    panic("iderw: ide disk 1 not present");
-80102407:	83 ec 0c             	sub    $0xc,%esp
-8010240a:	68 09 74 10 80       	push   $0x80107409
-8010240f:	e8 6c df ff ff       	call   80100380 <panic>
-    panic("iderw: nothing to do");
-80102414:	83 ec 0c             	sub    $0xc,%esp
-80102417:	68 f4 73 10 80       	push   $0x801073f4
-8010241c:	e8 5f df ff ff       	call   80100380 <panic>
-    panic("iderw: buf not locked");
-80102421:	83 ec 0c             	sub    $0xc,%esp
-80102424:	68 de 73 10 80       	push   $0x801073de
-80102429:	e8 52 df ff ff       	call   80100380 <panic>
-8010242e:	66 90                	xchg   %ax,%ax
-
-80102430 <ioapicinit>:
-  ioapic->data = data;
-}
-
-void
-ioapicinit(void)
-{
-80102430:	55                   	push   %ebp
-80102431:	89 e5                	mov    %esp,%ebp
-80102433:	56                   	push   %esi
-80102434:	53                   	push   %ebx
-  int i, id, maxintr;
-
-  ioapic = (volatile struct ioapic*)IOAPIC;
-80102435:	c7 05 54 16 11 80 00 	movl   $0xfec00000,0x80111654
-8010243c:	00 c0 fe 
-  ioapic->reg = reg;
-8010243f:	c7 05 00 00 c0 fe 01 	movl   $0x1,0xfec00000
-80102446:	00 00 00 
-  return ioapic->data;
-80102449:	8b 15 54 16 11 80    	mov    0x80111654,%edx
-8010244f:	8b 72 10             	mov    0x10(%edx),%esi
-  ioapic->reg = reg;
-80102452:	c7 02 00 00 00 00    	movl   $0x0,(%edx)
-  return ioapic->data;
-80102458:	8b 1d 54 16 11 80    	mov    0x80111654,%ebx
-  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
-  id = ioapicread(REG_ID) >> 24;
-  if(id != ioapicid)
-8010245e:	0f b6 15 a0 17 11 80 	movzbl 0x801117a0,%edx
-  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;
-80102465:	c1 ee 10             	shr    $0x10,%esi
-80102468:	89 f0                	mov    %esi,%eax
-8010246a:	0f b6 f0             	movzbl %al,%esi
-  return ioapic->data;
-8010246d:	8b 43 10             	mov    0x10(%ebx),%eax
-  id = ioapicread(REG_ID) >> 24;
-80102470:	c1 e8 18             	shr    $0x18,%eax
-  if(id != ioapicid)
-80102473:	39 c2                	cmp    %eax,%edx
-80102475:	74 16                	je     8010248d <ioapicinit+0x5d>
-    cprintf("ioapicinit: id isn't equal to ioapicid; not a MP\n");
-80102477:	83 ec 0c             	sub    $0xc,%esp
-8010247a:	68 f4 77 10 80       	push   $0x801077f4
-8010247f:	e8 2c e2 ff ff       	call   801006b0 <cprintf>
-  ioapic->reg = reg;
-80102484:	8b 1d 54 16 11 80    	mov    0x80111654,%ebx
-8010248a:	83 c4 10             	add    $0x10,%esp
-{
-8010248d:	ba 10 00 00 00       	mov    $0x10,%edx
-80102492:	31 c0                	xor    %eax,%eax
-80102494:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  ioapic->reg = reg;
-80102498:	89 13                	mov    %edx,(%ebx)
-8010249a:	8d 48 20             	lea    0x20(%eax),%ecx
-  ioapic->data = data;
-8010249d:	8b 1d 54 16 11 80    	mov    0x80111654,%ebx
-
-  // Mark all interrupts edge-triggered, active high, disabled,
-  // and not routed to any CPUs.
-  for(i = 0; i <= maxintr; i++){
-801024a3:	83 c0 01             	add    $0x1,%eax
-801024a6:	81 c9 00 00 01 00    	or     $0x10000,%ecx
-  ioapic->data = data;
-801024ac:	89 4b 10             	mov    %ecx,0x10(%ebx)
-  ioapic->reg = reg;
-801024af:	8d 4a 01             	lea    0x1(%edx),%ecx
-  for(i = 0; i <= maxintr; i++){
-801024b2:	83 c2 02             	add    $0x2,%edx
-  ioapic->reg = reg;
-801024b5:	89 0b                	mov    %ecx,(%ebx)
-  ioapic->data = data;
-801024b7:	8b 1d 54 16 11 80    	mov    0x80111654,%ebx
-801024bd:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
-  for(i = 0; i <= maxintr; i++){
-801024c4:	39 c6                	cmp    %eax,%esi
-801024c6:	7d d0                	jge    80102498 <ioapicinit+0x68>
-    ioapicwrite(REG_TABLE+2*i, INT_DISABLED | (T_IRQ0 + i));
-    ioapicwrite(REG_TABLE+2*i+1, 0);
-  }
-}
-801024c8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801024cb:	5b                   	pop    %ebx
-801024cc:	5e                   	pop    %esi
-801024cd:	5d                   	pop    %ebp
-801024ce:	c3                   	ret
-801024cf:	90                   	nop
-
-801024d0 <ioapicenable>:
-
-void
-ioapicenable(int irq, int cpunum)
-{
-801024d0:	55                   	push   %ebp
-  ioapic->reg = reg;
-801024d1:	8b 0d 54 16 11 80    	mov    0x80111654,%ecx
-{
-801024d7:	89 e5                	mov    %esp,%ebp
-801024d9:	8b 45 08             	mov    0x8(%ebp),%eax
-  // Mark interrupt edge-triggered, active high,
-  // enabled, and routed to the given cpunum,
-  // which happens to be that cpu's APIC ID.
-  ioapicwrite(REG_TABLE+2*irq, T_IRQ0 + irq);
-801024dc:	8d 50 20             	lea    0x20(%eax),%edx
-801024df:	8d 44 00 10          	lea    0x10(%eax,%eax,1),%eax
-  ioapic->reg = reg;
-801024e3:	89 01                	mov    %eax,(%ecx)
-  ioapic->data = data;
-801024e5:	8b 0d 54 16 11 80    	mov    0x80111654,%ecx
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-801024eb:	83 c0 01             	add    $0x1,%eax
-  ioapic->data = data;
-801024ee:	89 51 10             	mov    %edx,0x10(%ecx)
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-801024f1:	8b 55 0c             	mov    0xc(%ebp),%edx
-  ioapic->reg = reg;
-801024f4:	89 01                	mov    %eax,(%ecx)
-  ioapic->data = data;
-801024f6:	a1 54 16 11 80       	mov    0x80111654,%eax
-  ioapicwrite(REG_TABLE+2*irq+1, cpunum << 24);
-801024fb:	c1 e2 18             	shl    $0x18,%edx
-  ioapic->data = data;
-801024fe:	89 50 10             	mov    %edx,0x10(%eax)
-}
-80102501:	5d                   	pop    %ebp
-80102502:	c3                   	ret
-80102503:	66 90                	xchg   %ax,%ax
-80102505:	66 90                	xchg   %ax,%ax
-80102507:	66 90                	xchg   %ax,%ax
-80102509:	66 90                	xchg   %ax,%ax
-8010250b:	66 90                	xchg   %ax,%ax
-8010250d:	66 90                	xchg   %ax,%ax
-8010250f:	90                   	nop
-
-80102510 <kfree>:
-// which normally should have been returned by a
-// call to kalloc().  (The exception is when
-// initializing the allocator; see kinit above.)
-void
-kfree(char *v)
-{
-80102510:	55                   	push   %ebp
-80102511:	89 e5                	mov    %esp,%ebp
-80102513:	53                   	push   %ebx
-80102514:	83 ec 04             	sub    $0x4,%esp
-80102517:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct run *r;
-
-  if((uint)v % PGSIZE || v < end || V2P(v) >= PHYSTOP)
-8010251a:	f7 c3 ff 0f 00 00    	test   $0xfff,%ebx
-80102520:	75 76                	jne    80102598 <kfree+0x88>
-80102522:	81 fb f0 54 11 80    	cmp    $0x801154f0,%ebx
-80102528:	72 6e                	jb     80102598 <kfree+0x88>
-8010252a:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80102530:	3d ff ff ff 0d       	cmp    $0xdffffff,%eax
-80102535:	77 61                	ja     80102598 <kfree+0x88>
-    panic("kfree");
-
-  // Fill with junk to catch dangling refs.
-  memset(v, 1, PGSIZE);
-80102537:	83 ec 04             	sub    $0x4,%esp
-8010253a:	68 00 10 00 00       	push   $0x1000
-8010253f:	6a 01                	push   $0x1
-80102541:	53                   	push   %ebx
-80102542:	e8 39 22 00 00       	call   80104780 <memset>
-
-  if(kmem.use_lock)
-80102547:	8b 15 94 16 11 80    	mov    0x80111694,%edx
-8010254d:	83 c4 10             	add    $0x10,%esp
-80102550:	85 d2                	test   %edx,%edx
-80102552:	75 1c                	jne    80102570 <kfree+0x60>
-    acquire(&kmem.lock);
-  r = (struct run*)v;
-  r->next = kmem.freelist;
-80102554:	a1 98 16 11 80       	mov    0x80111698,%eax
-80102559:	89 03                	mov    %eax,(%ebx)
-  kmem.freelist = r;
-  if(kmem.use_lock)
-8010255b:	a1 94 16 11 80       	mov    0x80111694,%eax
-  kmem.freelist = r;
-80102560:	89 1d 98 16 11 80    	mov    %ebx,0x80111698
-  if(kmem.use_lock)
-80102566:	85 c0                	test   %eax,%eax
-80102568:	75 1e                	jne    80102588 <kfree+0x78>
-    release(&kmem.lock);
-}
-8010256a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010256d:	c9                   	leave
-8010256e:	c3                   	ret
-8010256f:	90                   	nop
-    acquire(&kmem.lock);
-80102570:	83 ec 0c             	sub    $0xc,%esp
-80102573:	68 60 16 11 80       	push   $0x80111660
-80102578:	e8 03 21 00 00       	call   80104680 <acquire>
-8010257d:	83 c4 10             	add    $0x10,%esp
-80102580:	eb d2                	jmp    80102554 <kfree+0x44>
-80102582:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    release(&kmem.lock);
-80102588:	c7 45 08 60 16 11 80 	movl   $0x80111660,0x8(%ebp)
-}
-8010258f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102592:	c9                   	leave
-    release(&kmem.lock);
-80102593:	e9 88 20 00 00       	jmp    80104620 <release>
-    panic("kfree");
-80102598:	83 ec 0c             	sub    $0xc,%esp
-8010259b:	68 27 74 10 80       	push   $0x80107427
-801025a0:	e8 db dd ff ff       	call   80100380 <panic>
-801025a5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801025ac:	00 
-801025ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-801025b0 <freerange>:
-{
-801025b0:	55                   	push   %ebp
-801025b1:	89 e5                	mov    %esp,%ebp
-801025b3:	56                   	push   %esi
-801025b4:	53                   	push   %ebx
-  p = (char*)PGROUNDUP((uint)vstart);
-801025b5:	8b 45 08             	mov    0x8(%ebp),%eax
-{
-801025b8:	8b 75 0c             	mov    0xc(%ebp),%esi
-  p = (char*)PGROUNDUP((uint)vstart);
-801025bb:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-801025c1:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801025c7:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801025cd:	39 de                	cmp    %ebx,%esi
-801025cf:	72 23                	jb     801025f4 <freerange+0x44>
-801025d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    kfree(p);
-801025d8:	83 ec 0c             	sub    $0xc,%esp
-801025db:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801025e1:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    kfree(p);
-801025e7:	50                   	push   %eax
-801025e8:	e8 23 ff ff ff       	call   80102510 <kfree>
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801025ed:	83 c4 10             	add    $0x10,%esp
-801025f0:	39 de                	cmp    %ebx,%esi
-801025f2:	73 e4                	jae    801025d8 <freerange+0x28>
-}
-801025f4:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801025f7:	5b                   	pop    %ebx
-801025f8:	5e                   	pop    %esi
-801025f9:	5d                   	pop    %ebp
-801025fa:	c3                   	ret
-801025fb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80102600 <kinit2>:
-{
-80102600:	55                   	push   %ebp
-80102601:	89 e5                	mov    %esp,%ebp
-80102603:	56                   	push   %esi
-80102604:	53                   	push   %ebx
-  p = (char*)PGROUNDUP((uint)vstart);
-80102605:	8b 45 08             	mov    0x8(%ebp),%eax
-{
-80102608:	8b 75 0c             	mov    0xc(%ebp),%esi
-  p = (char*)PGROUNDUP((uint)vstart);
-8010260b:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102611:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102617:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-8010261d:	39 de                	cmp    %ebx,%esi
-8010261f:	72 23                	jb     80102644 <kinit2+0x44>
-80102621:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    kfree(p);
-80102628:	83 ec 0c             	sub    $0xc,%esp
-8010262b:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102631:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    kfree(p);
-80102637:	50                   	push   %eax
-80102638:	e8 d3 fe ff ff       	call   80102510 <kfree>
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010263d:	83 c4 10             	add    $0x10,%esp
-80102640:	39 de                	cmp    %ebx,%esi
-80102642:	73 e4                	jae    80102628 <kinit2+0x28>
-  kmem.use_lock = 1;
-80102644:	c7 05 94 16 11 80 01 	movl   $0x1,0x80111694
-8010264b:	00 00 00 
-}
-8010264e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80102651:	5b                   	pop    %ebx
-80102652:	5e                   	pop    %esi
-80102653:	5d                   	pop    %ebp
-80102654:	c3                   	ret
-80102655:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010265c:	00 
-8010265d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80102660 <kinit1>:
-{
-80102660:	55                   	push   %ebp
-80102661:	89 e5                	mov    %esp,%ebp
-80102663:	56                   	push   %esi
-80102664:	53                   	push   %ebx
-80102665:	8b 75 0c             	mov    0xc(%ebp),%esi
-  initlock(&kmem.lock, "kmem");
-80102668:	83 ec 08             	sub    $0x8,%esp
-8010266b:	68 2d 74 10 80       	push   $0x8010742d
-80102670:	68 60 16 11 80       	push   $0x80111660
-80102675:	e8 16 1e 00 00       	call   80104490 <initlock>
-  p = (char*)PGROUNDUP((uint)vstart);
-8010267a:	8b 45 08             	mov    0x8(%ebp),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-8010267d:	83 c4 10             	add    $0x10,%esp
-  kmem.use_lock = 0;
-80102680:	c7 05 94 16 11 80 00 	movl   $0x0,0x80111694
-80102687:	00 00 00 
-  p = (char*)PGROUNDUP((uint)vstart);
-8010268a:	8d 98 ff 0f 00 00    	lea    0xfff(%eax),%ebx
-80102690:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-80102696:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-8010269c:	39 de                	cmp    %ebx,%esi
-8010269e:	72 1c                	jb     801026bc <kinit1+0x5c>
-    kfree(p);
-801026a0:	83 ec 0c             	sub    $0xc,%esp
-801026a3:	8d 83 00 f0 ff ff    	lea    -0x1000(%ebx),%eax
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801026a9:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    kfree(p);
-801026af:	50                   	push   %eax
-801026b0:	e8 5b fe ff ff       	call   80102510 <kfree>
-  for(; p + PGSIZE <= (char*)vend; p += PGSIZE)
-801026b5:	83 c4 10             	add    $0x10,%esp
-801026b8:	39 de                	cmp    %ebx,%esi
-801026ba:	73 e4                	jae    801026a0 <kinit1+0x40>
-}
-801026bc:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801026bf:	5b                   	pop    %ebx
-801026c0:	5e                   	pop    %esi
-801026c1:	5d                   	pop    %ebp
-801026c2:	c3                   	ret
-801026c3:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801026ca:	00 
-801026cb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-801026d0 <kalloc>:
-// Allocate one 4096-byte page of physical memory.
-// Returns a pointer that the kernel can use.
-// Returns 0 if the memory cannot be allocated.
-char*
-kalloc(void)
-{
-801026d0:	55                   	push   %ebp
-801026d1:	89 e5                	mov    %esp,%ebp
-801026d3:	53                   	push   %ebx
-801026d4:	83 ec 04             	sub    $0x4,%esp
-  struct run *r;
-
-  if(kmem.use_lock)
-801026d7:	a1 94 16 11 80       	mov    0x80111694,%eax
-801026dc:	85 c0                	test   %eax,%eax
-801026de:	75 20                	jne    80102700 <kalloc+0x30>
-    acquire(&kmem.lock);
-  r = kmem.freelist;
-801026e0:	8b 1d 98 16 11 80    	mov    0x80111698,%ebx
-  if(r)
-801026e6:	85 db                	test   %ebx,%ebx
-801026e8:	74 07                	je     801026f1 <kalloc+0x21>
-    kmem.freelist = r->next;
-801026ea:	8b 03                	mov    (%ebx),%eax
-801026ec:	a3 98 16 11 80       	mov    %eax,0x80111698
-  if(kmem.use_lock)
-    release(&kmem.lock);
-  return (char*)r;
-}
-801026f1:	89 d8                	mov    %ebx,%eax
-801026f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801026f6:	c9                   	leave
-801026f7:	c3                   	ret
-801026f8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801026ff:	00 
-    acquire(&kmem.lock);
-80102700:	83 ec 0c             	sub    $0xc,%esp
-80102703:	68 60 16 11 80       	push   $0x80111660
-80102708:	e8 73 1f 00 00       	call   80104680 <acquire>
-  r = kmem.freelist;
-8010270d:	8b 1d 98 16 11 80    	mov    0x80111698,%ebx
-  if(kmem.use_lock)
-80102713:	a1 94 16 11 80       	mov    0x80111694,%eax
-  if(r)
-80102718:	83 c4 10             	add    $0x10,%esp
-8010271b:	85 db                	test   %ebx,%ebx
-8010271d:	74 08                	je     80102727 <kalloc+0x57>
-    kmem.freelist = r->next;
-8010271f:	8b 13                	mov    (%ebx),%edx
-80102721:	89 15 98 16 11 80    	mov    %edx,0x80111698
-  if(kmem.use_lock)
-80102727:	85 c0                	test   %eax,%eax
-80102729:	74 c6                	je     801026f1 <kalloc+0x21>
-    release(&kmem.lock);
-8010272b:	83 ec 0c             	sub    $0xc,%esp
-8010272e:	68 60 16 11 80       	push   $0x80111660
-80102733:	e8 e8 1e 00 00       	call   80104620 <release>
-}
-80102738:	89 d8                	mov    %ebx,%eax
-    release(&kmem.lock);
-8010273a:	83 c4 10             	add    $0x10,%esp
-}
-8010273d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102740:	c9                   	leave
-80102741:	c3                   	ret
-80102742:	66 90                	xchg   %ax,%ax
-80102744:	66 90                	xchg   %ax,%ax
-80102746:	66 90                	xchg   %ax,%ax
-80102748:	66 90                	xchg   %ax,%ax
-8010274a:	66 90                	xchg   %ax,%ax
-8010274c:	66 90                	xchg   %ax,%ax
-8010274e:	66 90                	xchg   %ax,%ax
-
-80102750 <kbdgetc>:
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102750:	ba 64 00 00 00       	mov    $0x64,%edx
-80102755:	ec                   	in     (%dx),%al
-    normalmap, shiftmap, ctlmap, ctlmap
-  };
-  uint st, data, c;
-
-  st = inb(KBSTATP);
-  if((st & KBS_DIB) == 0)
-80102756:	a8 01                	test   $0x1,%al
-80102758:	0f 84 c2 00 00 00    	je     80102820 <kbdgetc+0xd0>
-{
-8010275e:	55                   	push   %ebp
-8010275f:	ba 60 00 00 00       	mov    $0x60,%edx
-80102764:	89 e5                	mov    %esp,%ebp
-80102766:	53                   	push   %ebx
-80102767:	ec                   	in     (%dx),%al
-    return -1;
-  data = inb(KBDATAP);
-
-  if(data == 0xE0){
-    shift |= E0ESC;
-80102768:	8b 1d 9c 16 11 80    	mov    0x8011169c,%ebx
-  data = inb(KBDATAP);
-8010276e:	0f b6 c8             	movzbl %al,%ecx
-  if(data == 0xE0){
-80102771:	3c e0                	cmp    $0xe0,%al
-80102773:	74 5b                	je     801027d0 <kbdgetc+0x80>
-    return 0;
-  } else if(data & 0x80){
-    // Key released
-    data = (shift & E0ESC ? data : data & 0x7F);
-80102775:	89 da                	mov    %ebx,%edx
-80102777:	83 e2 40             	and    $0x40,%edx
-  } else if(data & 0x80){
-8010277a:	84 c0                	test   %al,%al
-8010277c:	78 62                	js     801027e0 <kbdgetc+0x90>
-    shift &= ~(shiftcode[data] | E0ESC);
-    return 0;
-  } else if(shift & E0ESC){
-8010277e:	85 d2                	test   %edx,%edx
-80102780:	74 09                	je     8010278b <kbdgetc+0x3b>
-    // Last character was an E0 escape; or with 0x80
-    data |= 0x80;
-80102782:	83 c8 80             	or     $0xffffff80,%eax
-    shift &= ~E0ESC;
-80102785:	83 e3 bf             	and    $0xffffffbf,%ebx
-    data |= 0x80;
-80102788:	0f b6 c8             	movzbl %al,%ecx
-  }
-
-  shift |= shiftcode[data];
-8010278b:	0f b6 91 60 7a 10 80 	movzbl -0x7fef85a0(%ecx),%edx
-  shift ^= togglecode[data];
-80102792:	0f b6 81 60 79 10 80 	movzbl -0x7fef86a0(%ecx),%eax
-  shift |= shiftcode[data];
-80102799:	09 da                	or     %ebx,%edx
-  shift ^= togglecode[data];
-8010279b:	31 c2                	xor    %eax,%edx
-  c = charcode[shift & (CTL | SHIFT)][data];
-8010279d:	89 d0                	mov    %edx,%eax
-  shift ^= togglecode[data];
-8010279f:	89 15 9c 16 11 80    	mov    %edx,0x8011169c
-  c = charcode[shift & (CTL | SHIFT)][data];
-801027a5:	83 e0 03             	and    $0x3,%eax
-  if(shift & CAPSLOCK){
-801027a8:	83 e2 08             	and    $0x8,%edx
-  c = charcode[shift & (CTL | SHIFT)][data];
-801027ab:	8b 04 85 40 79 10 80 	mov    -0x7fef86c0(,%eax,4),%eax
-801027b2:	0f b6 04 08          	movzbl (%eax,%ecx,1),%eax
-  if(shift & CAPSLOCK){
-801027b6:	74 0b                	je     801027c3 <kbdgetc+0x73>
-    if('a' <= c && c <= 'z')
-801027b8:	8d 50 9f             	lea    -0x61(%eax),%edx
-801027bb:	83 fa 19             	cmp    $0x19,%edx
-801027be:	77 48                	ja     80102808 <kbdgetc+0xb8>
-      c += 'A' - 'a';
-801027c0:	83 e8 20             	sub    $0x20,%eax
-    else if('A' <= c && c <= 'Z')
-      c += 'a' - 'A';
-  }
-  return c;
-}
-801027c3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801027c6:	c9                   	leave
-801027c7:	c3                   	ret
-801027c8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801027cf:	00 
-    shift |= E0ESC;
-801027d0:	83 cb 40             	or     $0x40,%ebx
-    return 0;
-801027d3:	31 c0                	xor    %eax,%eax
-    shift |= E0ESC;
-801027d5:	89 1d 9c 16 11 80    	mov    %ebx,0x8011169c
-}
-801027db:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801027de:	c9                   	leave
-801027df:	c3                   	ret
-    data = (shift & E0ESC ? data : data & 0x7F);
-801027e0:	83 e0 7f             	and    $0x7f,%eax
-801027e3:	85 d2                	test   %edx,%edx
-801027e5:	0f 44 c8             	cmove  %eax,%ecx
-    shift &= ~(shiftcode[data] | E0ESC);
-801027e8:	0f b6 81 60 7a 10 80 	movzbl -0x7fef85a0(%ecx),%eax
-801027ef:	83 c8 40             	or     $0x40,%eax
-801027f2:	0f b6 c0             	movzbl %al,%eax
-801027f5:	f7 d0                	not    %eax
-801027f7:	21 d8                	and    %ebx,%eax
-801027f9:	a3 9c 16 11 80       	mov    %eax,0x8011169c
-    return 0;
-801027fe:	31 c0                	xor    %eax,%eax
-80102800:	eb d9                	jmp    801027db <kbdgetc+0x8b>
-80102802:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    else if('A' <= c && c <= 'Z')
-80102808:	8d 48 bf             	lea    -0x41(%eax),%ecx
-      c += 'a' - 'A';
-8010280b:	8d 50 20             	lea    0x20(%eax),%edx
-}
-8010280e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102811:	c9                   	leave
-      c += 'a' - 'A';
-80102812:	83 f9 1a             	cmp    $0x1a,%ecx
-80102815:	0f 42 c2             	cmovb  %edx,%eax
-}
-80102818:	c3                   	ret
-80102819:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80102820:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80102825:	c3                   	ret
-80102826:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010282d:	00 
-8010282e:	66 90                	xchg   %ax,%ax
-
-80102830 <kbdintr>:
-
-void
-kbdintr(void)
-{
-80102830:	55                   	push   %ebp
-80102831:	89 e5                	mov    %esp,%ebp
-80102833:	83 ec 14             	sub    $0x14,%esp
-  consoleintr(kbdgetc);
-80102836:	68 50 27 10 80       	push   $0x80102750
-8010283b:	e8 60 e0 ff ff       	call   801008a0 <consoleintr>
-}
-80102840:	83 c4 10             	add    $0x10,%esp
-80102843:	c9                   	leave
-80102844:	c3                   	ret
-80102845:	66 90                	xchg   %ax,%ax
-80102847:	66 90                	xchg   %ax,%ax
-80102849:	66 90                	xchg   %ax,%ax
-8010284b:	66 90                	xchg   %ax,%ax
-8010284d:	66 90                	xchg   %ax,%ax
-8010284f:	90                   	nop
-
-80102850 <lapicinit>:
-}
-
-void
-lapicinit(void)
-{
-  if(!lapic)
-80102850:	a1 a0 16 11 80       	mov    0x801116a0,%eax
-80102855:	85 c0                	test   %eax,%eax
-80102857:	0f 84 c3 00 00 00    	je     80102920 <lapicinit+0xd0>
-  lapic[index] = value;
-8010285d:	c7 80 f0 00 00 00 3f 	movl   $0x13f,0xf0(%eax)
-80102864:	01 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102867:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-8010286a:	c7 80 e0 03 00 00 0b 	movl   $0xb,0x3e0(%eax)
-80102871:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102874:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-80102877:	c7 80 20 03 00 00 20 	movl   $0x20020,0x320(%eax)
-8010287e:	00 02 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102881:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-80102884:	c7 80 80 03 00 00 80 	movl   $0x989680,0x380(%eax)
-8010288b:	96 98 00 
-  lapic[ID];  // wait for write to finish, by reading
-8010288e:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-80102891:	c7 80 50 03 00 00 00 	movl   $0x10000,0x350(%eax)
-80102898:	00 01 00 
-  lapic[ID];  // wait for write to finish, by reading
-8010289b:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-8010289e:	c7 80 60 03 00 00 00 	movl   $0x10000,0x360(%eax)
-801028a5:	00 01 00 
-  lapic[ID];  // wait for write to finish, by reading
-801028a8:	8b 50 20             	mov    0x20(%eax),%edx
-  lapicw(LINT0, MASKED);
-  lapicw(LINT1, MASKED);
-
-  // Disable performance counter overflow interrupts
-  // on machines that provide that interrupt entry.
-  if(((lapic[VER]>>16) & 0xFF) >= 4)
-801028ab:	8b 50 30             	mov    0x30(%eax),%edx
-801028ae:	81 e2 00 00 fc 00    	and    $0xfc0000,%edx
-801028b4:	75 72                	jne    80102928 <lapicinit+0xd8>
-  lapic[index] = value;
-801028b6:	c7 80 70 03 00 00 33 	movl   $0x33,0x370(%eax)
-801028bd:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801028c0:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801028c3:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-801028ca:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801028cd:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801028d0:	c7 80 80 02 00 00 00 	movl   $0x0,0x280(%eax)
-801028d7:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801028da:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801028dd:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-801028e4:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801028e7:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801028ea:	c7 80 10 03 00 00 00 	movl   $0x0,0x310(%eax)
-801028f1:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801028f4:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-801028f7:	c7 80 00 03 00 00 00 	movl   $0x88500,0x300(%eax)
-801028fe:	85 08 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102901:	8b 50 20             	mov    0x20(%eax),%edx
-  lapicw(EOI, 0);
-
-  // Send an Init Level De-Assert to synchronise arbitration ID's.
-  lapicw(ICRHI, 0);
-  lapicw(ICRLO, BCAST | INIT | LEVEL);
-  while(lapic[ICRLO] & DELIVS)
-80102904:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102908:	8b 90 00 03 00 00    	mov    0x300(%eax),%edx
-8010290e:	80 e6 10             	and    $0x10,%dh
-80102911:	75 f5                	jne    80102908 <lapicinit+0xb8>
-  lapic[index] = value;
-80102913:	c7 80 80 00 00 00 00 	movl   $0x0,0x80(%eax)
-8010291a:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-8010291d:	8b 40 20             	mov    0x20(%eax),%eax
-    ;
-
-  // Enable interrupts on the APIC (but not on the processor).
-  lapicw(TPR, 0);
-}
-80102920:	c3                   	ret
-80102921:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  lapic[index] = value;
-80102928:	c7 80 40 03 00 00 00 	movl   $0x10000,0x340(%eax)
-8010292f:	00 01 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102932:	8b 50 20             	mov    0x20(%eax),%edx
-}
-80102935:	e9 7c ff ff ff       	jmp    801028b6 <lapicinit+0x66>
-8010293a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80102940 <lapicid>:
-
-int
-lapicid(void)
-{
-  if (!lapic)
-80102940:	a1 a0 16 11 80       	mov    0x801116a0,%eax
-80102945:	85 c0                	test   %eax,%eax
-80102947:	74 07                	je     80102950 <lapicid+0x10>
-    return 0;
-  return lapic[ID] >> 24;
-80102949:	8b 40 20             	mov    0x20(%eax),%eax
-8010294c:	c1 e8 18             	shr    $0x18,%eax
-8010294f:	c3                   	ret
-    return 0;
-80102950:	31 c0                	xor    %eax,%eax
-}
-80102952:	c3                   	ret
-80102953:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010295a:	00 
-8010295b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80102960 <lapiceoi>:
-
-// Acknowledge interrupt.
-void
-lapiceoi(void)
-{
-  if(lapic)
-80102960:	a1 a0 16 11 80       	mov    0x801116a0,%eax
-80102965:	85 c0                	test   %eax,%eax
-80102967:	74 0d                	je     80102976 <lapiceoi+0x16>
-  lapic[index] = value;
-80102969:	c7 80 b0 00 00 00 00 	movl   $0x0,0xb0(%eax)
-80102970:	00 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-80102973:	8b 40 20             	mov    0x20(%eax),%eax
-    lapicw(EOI, 0);
-}
-80102976:	c3                   	ret
-80102977:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010297e:	00 
-8010297f:	90                   	nop
-
-80102980 <microdelay>:
-// Spin for a given number of microseconds.
-// On real hardware would want to tune this dynamically.
-void
-microdelay(int us)
-{
-}
-80102980:	c3                   	ret
-80102981:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102988:	00 
-80102989:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80102990 <lapicstartap>:
-
-// Start additional processor running entry code at addr.
-// See Appendix B of MultiProcessor Specification.
-void
-lapicstartap(uchar apicid, uint addr)
-{
-80102990:	55                   	push   %ebp
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102991:	b8 0f 00 00 00       	mov    $0xf,%eax
-80102996:	ba 70 00 00 00       	mov    $0x70,%edx
-8010299b:	89 e5                	mov    %esp,%ebp
-8010299d:	53                   	push   %ebx
-8010299e:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-801029a1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801029a4:	ee                   	out    %al,(%dx)
-801029a5:	b8 0a 00 00 00       	mov    $0xa,%eax
-801029aa:	ba 71 00 00 00       	mov    $0x71,%edx
-801029af:	ee                   	out    %al,(%dx)
-  // and the warm reset vector (DWORD based at 40:67) to point at
-  // the AP startup code prior to the [universal startup algorithm]."
-  outb(CMOS_PORT, 0xF);  // offset 0xF is shutdown code
-  outb(CMOS_PORT+1, 0x0A);
-  wrv = (ushort*)P2V((0x40<<4 | 0x67));  // Warm reset vector
-  wrv[0] = 0;
-801029b0:	31 c0                	xor    %eax,%eax
-  lapic[index] = value;
-801029b2:	c1 e3 18             	shl    $0x18,%ebx
-  wrv[0] = 0;
-801029b5:	66 a3 67 04 00 80    	mov    %ax,0x80000467
-  wrv[1] = addr >> 4;
-801029bb:	89 c8                	mov    %ecx,%eax
-  // when it is in the halted state due to an INIT.  So the second
-  // should be ignored, but it is part of the official Intel algorithm.
-  // Bochs complains about the second one.  Too bad for Bochs.
-  for(i = 0; i < 2; i++){
-    lapicw(ICRHI, apicid<<24);
-    lapicw(ICRLO, STARTUP | (addr>>12));
-801029bd:	c1 e9 0c             	shr    $0xc,%ecx
-  lapic[index] = value;
-801029c0:	89 da                	mov    %ebx,%edx
-  wrv[1] = addr >> 4;
-801029c2:	c1 e8 04             	shr    $0x4,%eax
-    lapicw(ICRLO, STARTUP | (addr>>12));
-801029c5:	80 cd 06             	or     $0x6,%ch
-  wrv[1] = addr >> 4;
-801029c8:	66 a3 69 04 00 80    	mov    %ax,0x80000469
-  lapic[index] = value;
-801029ce:	a1 a0 16 11 80       	mov    0x801116a0,%eax
-801029d3:	89 98 10 03 00 00    	mov    %ebx,0x310(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-801029d9:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-801029dc:	c7 80 00 03 00 00 00 	movl   $0xc500,0x300(%eax)
-801029e3:	c5 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801029e6:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-801029e9:	c7 80 00 03 00 00 00 	movl   $0x8500,0x300(%eax)
-801029f0:	85 00 00 
-  lapic[ID];  // wait for write to finish, by reading
-801029f3:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-801029f6:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-801029fc:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-801029ff:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-80102a05:	8b 58 20             	mov    0x20(%eax),%ebx
-  lapic[index] = value;
-80102a08:	89 90 10 03 00 00    	mov    %edx,0x310(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-80102a0e:	8b 50 20             	mov    0x20(%eax),%edx
-  lapic[index] = value;
-80102a11:	89 88 00 03 00 00    	mov    %ecx,0x300(%eax)
-  lapic[ID];  // wait for write to finish, by reading
-80102a17:	8b 40 20             	mov    0x20(%eax),%eax
-    microdelay(200);
-  }
-}
-80102a1a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102a1d:	c9                   	leave
-80102a1e:	c3                   	ret
-80102a1f:	90                   	nop
-
-80102a20 <cmostime>:
-}
-
-// qemu seems to use 24-hour GWT and the values are BCD encoded
-void
-cmostime(struct rtcdate *r)
-{
-80102a20:	55                   	push   %ebp
-80102a21:	b8 0b 00 00 00       	mov    $0xb,%eax
-80102a26:	ba 70 00 00 00       	mov    $0x70,%edx
-80102a2b:	89 e5                	mov    %esp,%ebp
-80102a2d:	57                   	push   %edi
-80102a2e:	56                   	push   %esi
-80102a2f:	53                   	push   %ebx
-80102a30:	83 ec 4c             	sub    $0x4c,%esp
-80102a33:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a34:	ba 71 00 00 00       	mov    $0x71,%edx
-80102a39:	ec                   	in     (%dx),%al
-  struct rtcdate t1, t2;
-  int sb, bcd;
-
-  sb = cmos_read(CMOS_STATB);
-
-  bcd = (sb & (1 << 2)) == 0;
-80102a3a:	83 e0 04             	and    $0x4,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a3d:	bf 70 00 00 00       	mov    $0x70,%edi
-80102a42:	88 45 b3             	mov    %al,-0x4d(%ebp)
-80102a45:	8d 76 00             	lea    0x0(%esi),%esi
-80102a48:	31 c0                	xor    %eax,%eax
-80102a4a:	89 fa                	mov    %edi,%edx
-80102a4c:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a4d:	b9 71 00 00 00       	mov    $0x71,%ecx
-80102a52:	89 ca                	mov    %ecx,%edx
-80102a54:	ec                   	in     (%dx),%al
-80102a55:	88 45 b7             	mov    %al,-0x49(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a58:	89 fa                	mov    %edi,%edx
-80102a5a:	b8 02 00 00 00       	mov    $0x2,%eax
-80102a5f:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a60:	89 ca                	mov    %ecx,%edx
-80102a62:	ec                   	in     (%dx),%al
-80102a63:	88 45 b6             	mov    %al,-0x4a(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a66:	89 fa                	mov    %edi,%edx
-80102a68:	b8 04 00 00 00       	mov    $0x4,%eax
-80102a6d:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a6e:	89 ca                	mov    %ecx,%edx
-80102a70:	ec                   	in     (%dx),%al
-80102a71:	88 45 b5             	mov    %al,-0x4b(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a74:	89 fa                	mov    %edi,%edx
-80102a76:	b8 07 00 00 00       	mov    $0x7,%eax
-80102a7b:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a7c:	89 ca                	mov    %ecx,%edx
-80102a7e:	ec                   	in     (%dx),%al
-80102a7f:	88 45 b4             	mov    %al,-0x4c(%ebp)
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a82:	89 fa                	mov    %edi,%edx
-80102a84:	b8 08 00 00 00       	mov    $0x8,%eax
-80102a89:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a8a:	89 ca                	mov    %ecx,%edx
-80102a8c:	ec                   	in     (%dx),%al
-80102a8d:	89 c6                	mov    %eax,%esi
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a8f:	89 fa                	mov    %edi,%edx
-80102a91:	b8 09 00 00 00       	mov    $0x9,%eax
-80102a96:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102a97:	89 ca                	mov    %ecx,%edx
-80102a99:	ec                   	in     (%dx),%al
-80102a9a:	0f b6 d8             	movzbl %al,%ebx
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102a9d:	89 fa                	mov    %edi,%edx
-80102a9f:	b8 0a 00 00 00       	mov    $0xa,%eax
-80102aa4:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102aa5:	89 ca                	mov    %ecx,%edx
-80102aa7:	ec                   	in     (%dx),%al
-
-  // make sure CMOS doesn't modify time while we read it
-  for(;;) {
-    fill_rtcdate(&t1);
-    if(cmos_read(CMOS_STATA) & CMOS_UIP)
-80102aa8:	84 c0                	test   %al,%al
-80102aaa:	78 9c                	js     80102a48 <cmostime+0x28>
-  return inb(CMOS_RETURN);
-80102aac:	0f b6 45 b7          	movzbl -0x49(%ebp),%eax
-80102ab0:	89 f2                	mov    %esi,%edx
-80102ab2:	89 5d cc             	mov    %ebx,-0x34(%ebp)
-80102ab5:	0f b6 f2             	movzbl %dl,%esi
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102ab8:	89 fa                	mov    %edi,%edx
-80102aba:	89 45 b8             	mov    %eax,-0x48(%ebp)
-80102abd:	0f b6 45 b6          	movzbl -0x4a(%ebp),%eax
-80102ac1:	89 75 c8             	mov    %esi,-0x38(%ebp)
-80102ac4:	89 45 bc             	mov    %eax,-0x44(%ebp)
-80102ac7:	0f b6 45 b5          	movzbl -0x4b(%ebp),%eax
-80102acb:	89 45 c0             	mov    %eax,-0x40(%ebp)
-80102ace:	0f b6 45 b4          	movzbl -0x4c(%ebp),%eax
-80102ad2:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-80102ad5:	31 c0                	xor    %eax,%eax
-80102ad7:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102ad8:	89 ca                	mov    %ecx,%edx
-80102ada:	ec                   	in     (%dx),%al
-80102adb:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102ade:	89 fa                	mov    %edi,%edx
-80102ae0:	89 45 d0             	mov    %eax,-0x30(%ebp)
-80102ae3:	b8 02 00 00 00       	mov    $0x2,%eax
-80102ae8:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102ae9:	89 ca                	mov    %ecx,%edx
-80102aeb:	ec                   	in     (%dx),%al
-80102aec:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102aef:	89 fa                	mov    %edi,%edx
-80102af1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-80102af4:	b8 04 00 00 00       	mov    $0x4,%eax
-80102af9:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102afa:	89 ca                	mov    %ecx,%edx
-80102afc:	ec                   	in     (%dx),%al
-80102afd:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102b00:	89 fa                	mov    %edi,%edx
-80102b02:	89 45 d8             	mov    %eax,-0x28(%ebp)
-80102b05:	b8 07 00 00 00       	mov    $0x7,%eax
-80102b0a:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102b0b:	89 ca                	mov    %ecx,%edx
-80102b0d:	ec                   	in     (%dx),%al
-80102b0e:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102b11:	89 fa                	mov    %edi,%edx
-80102b13:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80102b16:	b8 08 00 00 00       	mov    $0x8,%eax
-80102b1b:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102b1c:	89 ca                	mov    %ecx,%edx
-80102b1e:	ec                   	in     (%dx),%al
-80102b1f:	0f b6 c0             	movzbl %al,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80102b22:	89 fa                	mov    %edi,%edx
-80102b24:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80102b27:	b8 09 00 00 00       	mov    $0x9,%eax
-80102b2c:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80102b2d:	89 ca                	mov    %ecx,%edx
-80102b2f:	ec                   	in     (%dx),%al
-80102b30:	0f b6 c0             	movzbl %al,%eax
-        continue;
-    fill_rtcdate(&t2);
-    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-80102b33:	83 ec 04             	sub    $0x4,%esp
-  return inb(CMOS_RETURN);
-80102b36:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    if(memcmp(&t1, &t2, sizeof(t1)) == 0)
-80102b39:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80102b3c:	6a 18                	push   $0x18
-80102b3e:	50                   	push   %eax
-80102b3f:	8d 45 b8             	lea    -0x48(%ebp),%eax
-80102b42:	50                   	push   %eax
-80102b43:	e8 78 1c 00 00       	call   801047c0 <memcmp>
-80102b48:	83 c4 10             	add    $0x10,%esp
-80102b4b:	85 c0                	test   %eax,%eax
-80102b4d:	0f 85 f5 fe ff ff    	jne    80102a48 <cmostime+0x28>
-      break;
-  }
-
-  // convert
-  if(bcd) {
-80102b53:	0f b6 75 b3          	movzbl -0x4d(%ebp),%esi
-80102b57:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80102b5a:	89 f0                	mov    %esi,%eax
-80102b5c:	84 c0                	test   %al,%al
-80102b5e:	75 78                	jne    80102bd8 <cmostime+0x1b8>
-#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))
-    CONV(second);
-80102b60:	8b 45 b8             	mov    -0x48(%ebp),%eax
-80102b63:	89 c2                	mov    %eax,%edx
-80102b65:	83 e0 0f             	and    $0xf,%eax
-80102b68:	c1 ea 04             	shr    $0x4,%edx
-80102b6b:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b6e:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b71:	89 45 b8             	mov    %eax,-0x48(%ebp)
-    CONV(minute);
-80102b74:	8b 45 bc             	mov    -0x44(%ebp),%eax
-80102b77:	89 c2                	mov    %eax,%edx
-80102b79:	83 e0 0f             	and    $0xf,%eax
-80102b7c:	c1 ea 04             	shr    $0x4,%edx
-80102b7f:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b82:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b85:	89 45 bc             	mov    %eax,-0x44(%ebp)
-    CONV(hour  );
-80102b88:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80102b8b:	89 c2                	mov    %eax,%edx
-80102b8d:	83 e0 0f             	and    $0xf,%eax
-80102b90:	c1 ea 04             	shr    $0x4,%edx
-80102b93:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102b96:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102b99:	89 45 c0             	mov    %eax,-0x40(%ebp)
-    CONV(day   );
-80102b9c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-80102b9f:	89 c2                	mov    %eax,%edx
-80102ba1:	83 e0 0f             	and    $0xf,%eax
-80102ba4:	c1 ea 04             	shr    $0x4,%edx
-80102ba7:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102baa:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102bad:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-    CONV(month );
-80102bb0:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80102bb3:	89 c2                	mov    %eax,%edx
-80102bb5:	83 e0 0f             	and    $0xf,%eax
-80102bb8:	c1 ea 04             	shr    $0x4,%edx
-80102bbb:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102bbe:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102bc1:	89 45 c8             	mov    %eax,-0x38(%ebp)
-    CONV(year  );
-80102bc4:	8b 45 cc             	mov    -0x34(%ebp),%eax
-80102bc7:	89 c2                	mov    %eax,%edx
-80102bc9:	83 e0 0f             	and    $0xf,%eax
-80102bcc:	c1 ea 04             	shr    $0x4,%edx
-80102bcf:	8d 14 92             	lea    (%edx,%edx,4),%edx
-80102bd2:	8d 04 50             	lea    (%eax,%edx,2),%eax
-80102bd5:	89 45 cc             	mov    %eax,-0x34(%ebp)
-#undef     CONV
-  }
-
-  *r = t1;
-80102bd8:	8b 45 b8             	mov    -0x48(%ebp),%eax
-80102bdb:	89 03                	mov    %eax,(%ebx)
-80102bdd:	8b 45 bc             	mov    -0x44(%ebp),%eax
-80102be0:	89 43 04             	mov    %eax,0x4(%ebx)
-80102be3:	8b 45 c0             	mov    -0x40(%ebp),%eax
-80102be6:	89 43 08             	mov    %eax,0x8(%ebx)
-80102be9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-80102bec:	89 43 0c             	mov    %eax,0xc(%ebx)
-80102bef:	8b 45 c8             	mov    -0x38(%ebp),%eax
-80102bf2:	89 43 10             	mov    %eax,0x10(%ebx)
-80102bf5:	8b 45 cc             	mov    -0x34(%ebp),%eax
-80102bf8:	89 43 14             	mov    %eax,0x14(%ebx)
-  r->year += 2000;
-80102bfb:	81 43 14 d0 07 00 00 	addl   $0x7d0,0x14(%ebx)
-}
-80102c02:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102c05:	5b                   	pop    %ebx
-80102c06:	5e                   	pop    %esi
-80102c07:	5f                   	pop    %edi
-80102c08:	5d                   	pop    %ebp
-80102c09:	c3                   	ret
-80102c0a:	66 90                	xchg   %ax,%ax
-80102c0c:	66 90                	xchg   %ax,%ax
-80102c0e:	66 90                	xchg   %ax,%ax
-
-80102c10 <install_trans>:
-static void
-install_trans(void)
-{
-  int tail;
-
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102c10:	8b 0d 08 17 11 80    	mov    0x80111708,%ecx
-80102c16:	85 c9                	test   %ecx,%ecx
-80102c18:	0f 8e 8a 00 00 00    	jle    80102ca8 <install_trans+0x98>
-{
-80102c1e:	55                   	push   %ebp
-80102c1f:	89 e5                	mov    %esp,%ebp
-80102c21:	57                   	push   %edi
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102c22:	31 ff                	xor    %edi,%edi
-{
-80102c24:	56                   	push   %esi
-80102c25:	53                   	push   %ebx
-80102c26:	83 ec 0c             	sub    $0xc,%esp
-80102c29:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    struct buf *lbuf = bread(log.dev, log.start+tail+1); // read log block
-80102c30:	a1 f4 16 11 80       	mov    0x801116f4,%eax
-80102c35:	83 ec 08             	sub    $0x8,%esp
-80102c38:	01 f8                	add    %edi,%eax
-80102c3a:	83 c0 01             	add    $0x1,%eax
-80102c3d:	50                   	push   %eax
-80102c3e:	ff 35 04 17 11 80    	push   0x80111704
-80102c44:	e8 87 d4 ff ff       	call   801000d0 <bread>
-80102c49:	89 c6                	mov    %eax,%esi
-    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102c4b:	58                   	pop    %eax
-80102c4c:	5a                   	pop    %edx
-80102c4d:	ff 34 bd 0c 17 11 80 	push   -0x7feee8f4(,%edi,4)
-80102c54:	ff 35 04 17 11 80    	push   0x80111704
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102c5a:	83 c7 01             	add    $0x1,%edi
-    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102c5d:	e8 6e d4 ff ff       	call   801000d0 <bread>
-    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80102c62:	83 c4 0c             	add    $0xc,%esp
-    struct buf *dbuf = bread(log.dev, log.lh.block[tail]); // read dst
-80102c65:	89 c3                	mov    %eax,%ebx
-    memmove(dbuf->data, lbuf->data, BSIZE);  // copy block to dst
-80102c67:	8d 46 5c             	lea    0x5c(%esi),%eax
-80102c6a:	68 00 02 00 00       	push   $0x200
-80102c6f:	50                   	push   %eax
-80102c70:	8d 43 5c             	lea    0x5c(%ebx),%eax
-80102c73:	50                   	push   %eax
-80102c74:	e8 97 1b 00 00       	call   80104810 <memmove>
-    bwrite(dbuf);  // write dst to disk
-80102c79:	89 1c 24             	mov    %ebx,(%esp)
-80102c7c:	e8 2f d5 ff ff       	call   801001b0 <bwrite>
-    brelse(lbuf);
-80102c81:	89 34 24             	mov    %esi,(%esp)
-80102c84:	e8 67 d5 ff ff       	call   801001f0 <brelse>
-    brelse(dbuf);
-80102c89:	89 1c 24             	mov    %ebx,(%esp)
-80102c8c:	e8 5f d5 ff ff       	call   801001f0 <brelse>
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102c91:	83 c4 10             	add    $0x10,%esp
-80102c94:	39 3d 08 17 11 80    	cmp    %edi,0x80111708
-80102c9a:	7f 94                	jg     80102c30 <install_trans+0x20>
-  }
-}
-80102c9c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102c9f:	5b                   	pop    %ebx
-80102ca0:	5e                   	pop    %esi
-80102ca1:	5f                   	pop    %edi
-80102ca2:	5d                   	pop    %ebp
-80102ca3:	c3                   	ret
-80102ca4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80102ca8:	c3                   	ret
-80102ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80102cb0 <write_head>:
-// Write in-memory log header to disk.
-// This is the true point at which the
-// current transaction commits.
-static void
-write_head(void)
-{
-80102cb0:	55                   	push   %ebp
-80102cb1:	89 e5                	mov    %esp,%ebp
-80102cb3:	53                   	push   %ebx
-80102cb4:	83 ec 0c             	sub    $0xc,%esp
-  struct buf *buf = bread(log.dev, log.start);
-80102cb7:	ff 35 f4 16 11 80    	push   0x801116f4
-80102cbd:	ff 35 04 17 11 80    	push   0x80111704
-80102cc3:	e8 08 d4 ff ff       	call   801000d0 <bread>
-  struct logheader *hb = (struct logheader *) (buf->data);
-  int i;
-  hb->n = log.lh.n;
-  for (i = 0; i < log.lh.n; i++) {
-80102cc8:	83 c4 10             	add    $0x10,%esp
-  struct buf *buf = bread(log.dev, log.start);
-80102ccb:	89 c3                	mov    %eax,%ebx
-  hb->n = log.lh.n;
-80102ccd:	a1 08 17 11 80       	mov    0x80111708,%eax
-80102cd2:	89 43 5c             	mov    %eax,0x5c(%ebx)
-  for (i = 0; i < log.lh.n; i++) {
-80102cd5:	85 c0                	test   %eax,%eax
-80102cd7:	7e 19                	jle    80102cf2 <write_head+0x42>
-80102cd9:	31 d2                	xor    %edx,%edx
-80102cdb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    hb->block[i] = log.lh.block[i];
-80102ce0:	8b 0c 95 0c 17 11 80 	mov    -0x7feee8f4(,%edx,4),%ecx
-80102ce7:	89 4c 93 60          	mov    %ecx,0x60(%ebx,%edx,4)
-  for (i = 0; i < log.lh.n; i++) {
-80102ceb:	83 c2 01             	add    $0x1,%edx
-80102cee:	39 d0                	cmp    %edx,%eax
-80102cf0:	75 ee                	jne    80102ce0 <write_head+0x30>
-  }
-  bwrite(buf);
-80102cf2:	83 ec 0c             	sub    $0xc,%esp
-80102cf5:	53                   	push   %ebx
-80102cf6:	e8 b5 d4 ff ff       	call   801001b0 <bwrite>
-  brelse(buf);
-80102cfb:	89 1c 24             	mov    %ebx,(%esp)
-80102cfe:	e8 ed d4 ff ff       	call   801001f0 <brelse>
-}
-80102d03:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102d06:	83 c4 10             	add    $0x10,%esp
-80102d09:	c9                   	leave
-80102d0a:	c3                   	ret
-80102d0b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80102d10 <initlog>:
-{
-80102d10:	55                   	push   %ebp
-80102d11:	89 e5                	mov    %esp,%ebp
-80102d13:	53                   	push   %ebx
-80102d14:	83 ec 2c             	sub    $0x2c,%esp
-80102d17:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  initlock(&log.lock, "log");
-80102d1a:	68 32 74 10 80       	push   $0x80107432
-80102d1f:	68 c0 16 11 80       	push   $0x801116c0
-80102d24:	e8 67 17 00 00       	call   80104490 <initlock>
-  readsb(dev, &sb);
-80102d29:	58                   	pop    %eax
-80102d2a:	8d 45 dc             	lea    -0x24(%ebp),%eax
-80102d2d:	5a                   	pop    %edx
-80102d2e:	50                   	push   %eax
-80102d2f:	53                   	push   %ebx
-80102d30:	e8 7b e8 ff ff       	call   801015b0 <readsb>
-  log.start = sb.logstart;
-80102d35:	8b 45 ec             	mov    -0x14(%ebp),%eax
-  struct buf *buf = bread(log.dev, log.start);
-80102d38:	59                   	pop    %ecx
-  log.dev = dev;
-80102d39:	89 1d 04 17 11 80    	mov    %ebx,0x80111704
-  log.size = sb.nlog;
-80102d3f:	8b 55 e8             	mov    -0x18(%ebp),%edx
-  log.start = sb.logstart;
-80102d42:	a3 f4 16 11 80       	mov    %eax,0x801116f4
-  log.size = sb.nlog;
-80102d47:	89 15 f8 16 11 80    	mov    %edx,0x801116f8
-  struct buf *buf = bread(log.dev, log.start);
-80102d4d:	5a                   	pop    %edx
-80102d4e:	50                   	push   %eax
-80102d4f:	53                   	push   %ebx
-80102d50:	e8 7b d3 ff ff       	call   801000d0 <bread>
-  for (i = 0; i < log.lh.n; i++) {
-80102d55:	83 c4 10             	add    $0x10,%esp
-  log.lh.n = lh->n;
-80102d58:	8b 58 5c             	mov    0x5c(%eax),%ebx
-80102d5b:	89 1d 08 17 11 80    	mov    %ebx,0x80111708
-  for (i = 0; i < log.lh.n; i++) {
-80102d61:	85 db                	test   %ebx,%ebx
-80102d63:	7e 1d                	jle    80102d82 <initlog+0x72>
-80102d65:	31 d2                	xor    %edx,%edx
-80102d67:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102d6e:	00 
-80102d6f:	90                   	nop
-    log.lh.block[i] = lh->block[i];
-80102d70:	8b 4c 90 60          	mov    0x60(%eax,%edx,4),%ecx
-80102d74:	89 0c 95 0c 17 11 80 	mov    %ecx,-0x7feee8f4(,%edx,4)
-  for (i = 0; i < log.lh.n; i++) {
-80102d7b:	83 c2 01             	add    $0x1,%edx
-80102d7e:	39 d3                	cmp    %edx,%ebx
-80102d80:	75 ee                	jne    80102d70 <initlog+0x60>
-  brelse(buf);
-80102d82:	83 ec 0c             	sub    $0xc,%esp
-80102d85:	50                   	push   %eax
-80102d86:	e8 65 d4 ff ff       	call   801001f0 <brelse>
-
-static void
-recover_from_log(void)
-{
-  read_head();
-  install_trans(); // if committed, copy from log to disk
-80102d8b:	e8 80 fe ff ff       	call   80102c10 <install_trans>
-  log.lh.n = 0;
-80102d90:	c7 05 08 17 11 80 00 	movl   $0x0,0x80111708
-80102d97:	00 00 00 
-  write_head(); // clear the log
-80102d9a:	e8 11 ff ff ff       	call   80102cb0 <write_head>
-}
-80102d9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80102da2:	83 c4 10             	add    $0x10,%esp
-80102da5:	c9                   	leave
-80102da6:	c3                   	ret
-80102da7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102dae:	00 
-80102daf:	90                   	nop
-
-80102db0 <begin_op>:
-}
-
-// called at the start of each FS system call.
-void
-begin_op(void)
-{
-80102db0:	55                   	push   %ebp
-80102db1:	89 e5                	mov    %esp,%ebp
-80102db3:	83 ec 14             	sub    $0x14,%esp
-  acquire(&log.lock);
-80102db6:	68 c0 16 11 80       	push   $0x801116c0
-80102dbb:	e8 c0 18 00 00       	call   80104680 <acquire>
-80102dc0:	83 c4 10             	add    $0x10,%esp
-80102dc3:	eb 18                	jmp    80102ddd <begin_op+0x2d>
-80102dc5:	8d 76 00             	lea    0x0(%esi),%esi
-  while(1){
-    if(log.committing){
-      sleep(&log, &log.lock);
-80102dc8:	83 ec 08             	sub    $0x8,%esp
-80102dcb:	68 c0 16 11 80       	push   $0x801116c0
-80102dd0:	68 c0 16 11 80       	push   $0x801116c0
-80102dd5:	e8 26 13 00 00       	call   80104100 <sleep>
-80102dda:	83 c4 10             	add    $0x10,%esp
-    if(log.committing){
-80102ddd:	a1 00 17 11 80       	mov    0x80111700,%eax
-80102de2:	85 c0                	test   %eax,%eax
-80102de4:	75 e2                	jne    80102dc8 <begin_op+0x18>
-    } else if(log.lh.n + (log.outstanding+1)*MAXOPBLOCKS > LOGSIZE){
-80102de6:	a1 fc 16 11 80       	mov    0x801116fc,%eax
-80102deb:	8b 15 08 17 11 80    	mov    0x80111708,%edx
-80102df1:	83 c0 01             	add    $0x1,%eax
-80102df4:	8d 0c 80             	lea    (%eax,%eax,4),%ecx
-80102df7:	8d 14 4a             	lea    (%edx,%ecx,2),%edx
-80102dfa:	83 fa 1e             	cmp    $0x1e,%edx
-80102dfd:	7f c9                	jg     80102dc8 <begin_op+0x18>
-      // this op might exhaust log space; wait for commit.
-      sleep(&log, &log.lock);
-    } else {
-      log.outstanding += 1;
-      release(&log.lock);
-80102dff:	83 ec 0c             	sub    $0xc,%esp
-      log.outstanding += 1;
-80102e02:	a3 fc 16 11 80       	mov    %eax,0x801116fc
-      release(&log.lock);
-80102e07:	68 c0 16 11 80       	push   $0x801116c0
-80102e0c:	e8 0f 18 00 00       	call   80104620 <release>
-      break;
-    }
-  }
-}
-80102e11:	83 c4 10             	add    $0x10,%esp
-80102e14:	c9                   	leave
-80102e15:	c3                   	ret
-80102e16:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102e1d:	00 
-80102e1e:	66 90                	xchg   %ax,%ax
-
-80102e20 <end_op>:
-
-// called at the end of each FS system call.
-// commits if this was the last outstanding operation.
-void
-end_op(void)
-{
-80102e20:	55                   	push   %ebp
-80102e21:	89 e5                	mov    %esp,%ebp
-80102e23:	57                   	push   %edi
-80102e24:	56                   	push   %esi
-80102e25:	53                   	push   %ebx
-80102e26:	83 ec 18             	sub    $0x18,%esp
-  int do_commit = 0;
-
-  acquire(&log.lock);
-80102e29:	68 c0 16 11 80       	push   $0x801116c0
-80102e2e:	e8 4d 18 00 00       	call   80104680 <acquire>
-  log.outstanding -= 1;
-80102e33:	a1 fc 16 11 80       	mov    0x801116fc,%eax
-  if(log.committing)
-80102e38:	8b 35 00 17 11 80    	mov    0x80111700,%esi
-80102e3e:	83 c4 10             	add    $0x10,%esp
-  log.outstanding -= 1;
-80102e41:	8d 58 ff             	lea    -0x1(%eax),%ebx
-80102e44:	89 1d fc 16 11 80    	mov    %ebx,0x801116fc
-  if(log.committing)
-80102e4a:	85 f6                	test   %esi,%esi
-80102e4c:	0f 85 22 01 00 00    	jne    80102f74 <end_op+0x154>
-    panic("log.committing");
-  if(log.outstanding == 0){
-80102e52:	85 db                	test   %ebx,%ebx
-80102e54:	0f 85 f6 00 00 00    	jne    80102f50 <end_op+0x130>
-    do_commit = 1;
-    log.committing = 1;
-80102e5a:	c7 05 00 17 11 80 01 	movl   $0x1,0x80111700
-80102e61:	00 00 00 
-    // begin_op() may be waiting for log space,
-    // and decrementing log.outstanding has decreased
-    // the amount of reserved space.
-    wakeup(&log);
-  }
-  release(&log.lock);
-80102e64:	83 ec 0c             	sub    $0xc,%esp
-80102e67:	68 c0 16 11 80       	push   $0x801116c0
-80102e6c:	e8 af 17 00 00       	call   80104620 <release>
-}
-
-static void
-commit()
-{
-  if (log.lh.n > 0) {
-80102e71:	8b 0d 08 17 11 80    	mov    0x80111708,%ecx
-80102e77:	83 c4 10             	add    $0x10,%esp
-80102e7a:	85 c9                	test   %ecx,%ecx
-80102e7c:	7f 42                	jg     80102ec0 <end_op+0xa0>
-    acquire(&log.lock);
-80102e7e:	83 ec 0c             	sub    $0xc,%esp
-80102e81:	68 c0 16 11 80       	push   $0x801116c0
-80102e86:	e8 f5 17 00 00       	call   80104680 <acquire>
-    log.committing = 0;
-80102e8b:	c7 05 00 17 11 80 00 	movl   $0x0,0x80111700
-80102e92:	00 00 00 
-    wakeup(&log);
-80102e95:	c7 04 24 c0 16 11 80 	movl   $0x801116c0,(%esp)
-80102e9c:	e8 1f 13 00 00       	call   801041c0 <wakeup>
-    release(&log.lock);
-80102ea1:	c7 04 24 c0 16 11 80 	movl   $0x801116c0,(%esp)
-80102ea8:	e8 73 17 00 00       	call   80104620 <release>
-80102ead:	83 c4 10             	add    $0x10,%esp
-}
-80102eb0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102eb3:	5b                   	pop    %ebx
-80102eb4:	5e                   	pop    %esi
-80102eb5:	5f                   	pop    %edi
-80102eb6:	5d                   	pop    %ebp
-80102eb7:	c3                   	ret
-80102eb8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102ebf:	00 
-    struct buf *to = bread(log.dev, log.start+tail+1); // log block
-80102ec0:	a1 f4 16 11 80       	mov    0x801116f4,%eax
-80102ec5:	83 ec 08             	sub    $0x8,%esp
-80102ec8:	01 d8                	add    %ebx,%eax
-80102eca:	83 c0 01             	add    $0x1,%eax
-80102ecd:	50                   	push   %eax
-80102ece:	ff 35 04 17 11 80    	push   0x80111704
-80102ed4:	e8 f7 d1 ff ff       	call   801000d0 <bread>
-80102ed9:	89 c6                	mov    %eax,%esi
-    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102edb:	58                   	pop    %eax
-80102edc:	5a                   	pop    %edx
-80102edd:	ff 34 9d 0c 17 11 80 	push   -0x7feee8f4(,%ebx,4)
-80102ee4:	ff 35 04 17 11 80    	push   0x80111704
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102eea:	83 c3 01             	add    $0x1,%ebx
-    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102eed:	e8 de d1 ff ff       	call   801000d0 <bread>
-    memmove(to->data, from->data, BSIZE);
-80102ef2:	83 c4 0c             	add    $0xc,%esp
-    struct buf *from = bread(log.dev, log.lh.block[tail]); // cache block
-80102ef5:	89 c7                	mov    %eax,%edi
-    memmove(to->data, from->data, BSIZE);
-80102ef7:	8d 40 5c             	lea    0x5c(%eax),%eax
-80102efa:	68 00 02 00 00       	push   $0x200
-80102eff:	50                   	push   %eax
-80102f00:	8d 46 5c             	lea    0x5c(%esi),%eax
-80102f03:	50                   	push   %eax
-80102f04:	e8 07 19 00 00       	call   80104810 <memmove>
-    bwrite(to);  // write the log
-80102f09:	89 34 24             	mov    %esi,(%esp)
-80102f0c:	e8 9f d2 ff ff       	call   801001b0 <bwrite>
-    brelse(from);
-80102f11:	89 3c 24             	mov    %edi,(%esp)
-80102f14:	e8 d7 d2 ff ff       	call   801001f0 <brelse>
-    brelse(to);
-80102f19:	89 34 24             	mov    %esi,(%esp)
-80102f1c:	e8 cf d2 ff ff       	call   801001f0 <brelse>
-  for (tail = 0; tail < log.lh.n; tail++) {
-80102f21:	83 c4 10             	add    $0x10,%esp
-80102f24:	3b 1d 08 17 11 80    	cmp    0x80111708,%ebx
-80102f2a:	7c 94                	jl     80102ec0 <end_op+0xa0>
-    write_log();     // Write modified blocks from cache to log
-    write_head();    // Write header to disk -- the real commit
-80102f2c:	e8 7f fd ff ff       	call   80102cb0 <write_head>
-    install_trans(); // Now install writes to home locations
-80102f31:	e8 da fc ff ff       	call   80102c10 <install_trans>
-    log.lh.n = 0;
-80102f36:	c7 05 08 17 11 80 00 	movl   $0x0,0x80111708
-80102f3d:	00 00 00 
-    write_head();    // Erase the transaction from the log
-80102f40:	e8 6b fd ff ff       	call   80102cb0 <write_head>
-80102f45:	e9 34 ff ff ff       	jmp    80102e7e <end_op+0x5e>
-80102f4a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    wakeup(&log);
-80102f50:	83 ec 0c             	sub    $0xc,%esp
-80102f53:	68 c0 16 11 80       	push   $0x801116c0
-80102f58:	e8 63 12 00 00       	call   801041c0 <wakeup>
-  release(&log.lock);
-80102f5d:	c7 04 24 c0 16 11 80 	movl   $0x801116c0,(%esp)
-80102f64:	e8 b7 16 00 00       	call   80104620 <release>
-80102f69:	83 c4 10             	add    $0x10,%esp
-}
-80102f6c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80102f6f:	5b                   	pop    %ebx
-80102f70:	5e                   	pop    %esi
-80102f71:	5f                   	pop    %edi
-80102f72:	5d                   	pop    %ebp
-80102f73:	c3                   	ret
-    panic("log.committing");
-80102f74:	83 ec 0c             	sub    $0xc,%esp
-80102f77:	68 36 74 10 80       	push   $0x80107436
-80102f7c:	e8 ff d3 ff ff       	call   80100380 <panic>
-80102f81:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102f88:	00 
-80102f89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80102f90 <log_write>:
-//   modify bp->data[]
-//   log_write(bp)
-//   brelse(bp)
-void
-log_write(struct buf *b)
-{
-80102f90:	55                   	push   %ebp
-80102f91:	89 e5                	mov    %esp,%ebp
-80102f93:	53                   	push   %ebx
-80102f94:	83 ec 04             	sub    $0x4,%esp
-  int i;
-
-  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102f97:	8b 15 08 17 11 80    	mov    0x80111708,%edx
-{
-80102f9d:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if (log.lh.n >= LOGSIZE || log.lh.n >= log.size - 1)
-80102fa0:	83 fa 1d             	cmp    $0x1d,%edx
-80102fa3:	7f 7d                	jg     80103022 <log_write+0x92>
-80102fa5:	a1 f8 16 11 80       	mov    0x801116f8,%eax
-80102faa:	83 e8 01             	sub    $0x1,%eax
-80102fad:	39 c2                	cmp    %eax,%edx
-80102faf:	7d 71                	jge    80103022 <log_write+0x92>
-    panic("too big a transaction");
-  if (log.outstanding < 1)
-80102fb1:	a1 fc 16 11 80       	mov    0x801116fc,%eax
-80102fb6:	85 c0                	test   %eax,%eax
-80102fb8:	7e 75                	jle    8010302f <log_write+0x9f>
-    panic("log_write outside of trans");
-
-  acquire(&log.lock);
-80102fba:	83 ec 0c             	sub    $0xc,%esp
-80102fbd:	68 c0 16 11 80       	push   $0x801116c0
-80102fc2:	e8 b9 16 00 00       	call   80104680 <acquire>
-  for (i = 0; i < log.lh.n; i++) {
-    if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102fc7:	8b 4b 08             	mov    0x8(%ebx),%ecx
-  for (i = 0; i < log.lh.n; i++) {
-80102fca:	83 c4 10             	add    $0x10,%esp
-80102fcd:	31 c0                	xor    %eax,%eax
-80102fcf:	8b 15 08 17 11 80    	mov    0x80111708,%edx
-80102fd5:	85 d2                	test   %edx,%edx
-80102fd7:	7f 0e                	jg     80102fe7 <log_write+0x57>
-80102fd9:	eb 15                	jmp    80102ff0 <log_write+0x60>
-80102fdb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-80102fe0:	83 c0 01             	add    $0x1,%eax
-80102fe3:	39 c2                	cmp    %eax,%edx
-80102fe5:	74 29                	je     80103010 <log_write+0x80>
-    if (log.lh.block[i] == b->blockno)   // log absorbtion
-80102fe7:	39 0c 85 0c 17 11 80 	cmp    %ecx,-0x7feee8f4(,%eax,4)
-80102fee:	75 f0                	jne    80102fe0 <log_write+0x50>
-      break;
-  }
-  log.lh.block[i] = b->blockno;
-80102ff0:	89 0c 85 0c 17 11 80 	mov    %ecx,-0x7feee8f4(,%eax,4)
-  if (i == log.lh.n)
-80102ff7:	39 c2                	cmp    %eax,%edx
-80102ff9:	74 1c                	je     80103017 <log_write+0x87>
-    log.lh.n++;
-  b->flags |= B_DIRTY; // prevent eviction
-80102ffb:	83 0b 04             	orl    $0x4,(%ebx)
-  release(&log.lock);
-}
-80102ffe:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  release(&log.lock);
-80103001:	c7 45 08 c0 16 11 80 	movl   $0x801116c0,0x8(%ebp)
-}
-80103008:	c9                   	leave
-  release(&log.lock);
-80103009:	e9 12 16 00 00       	jmp    80104620 <release>
-8010300e:	66 90                	xchg   %ax,%ax
-  log.lh.block[i] = b->blockno;
-80103010:	89 0c 95 0c 17 11 80 	mov    %ecx,-0x7feee8f4(,%edx,4)
-    log.lh.n++;
-80103017:	83 c2 01             	add    $0x1,%edx
-8010301a:	89 15 08 17 11 80    	mov    %edx,0x80111708
-80103020:	eb d9                	jmp    80102ffb <log_write+0x6b>
-    panic("too big a transaction");
-80103022:	83 ec 0c             	sub    $0xc,%esp
-80103025:	68 45 74 10 80       	push   $0x80107445
-8010302a:	e8 51 d3 ff ff       	call   80100380 <panic>
-    panic("log_write outside of trans");
-8010302f:	83 ec 0c             	sub    $0xc,%esp
-80103032:	68 5b 74 10 80       	push   $0x8010745b
-80103037:	e8 44 d3 ff ff       	call   80100380 <panic>
-8010303c:	66 90                	xchg   %ax,%ax
-8010303e:	66 90                	xchg   %ax,%ax
-
-80103040 <mpmain>:
-}
-
-// Common CPU setup code.
-static void
-mpmain(void)
-{
-80103040:	55                   	push   %ebp
-80103041:	89 e5                	mov    %esp,%ebp
-80103043:	53                   	push   %ebx
-80103044:	83 ec 04             	sub    $0x4,%esp
-  cprintf("cpu%d: starting %d\n", cpuid(), cpuid());
-80103047:	e8 d4 09 00 00       	call   80103a20 <cpuid>
-8010304c:	89 c3                	mov    %eax,%ebx
-8010304e:	e8 cd 09 00 00       	call   80103a20 <cpuid>
-80103053:	83 ec 04             	sub    $0x4,%esp
-80103056:	53                   	push   %ebx
-80103057:	50                   	push   %eax
-80103058:	68 76 74 10 80       	push   $0x80107476
-8010305d:	e8 4e d6 ff ff       	call   801006b0 <cprintf>
-  idtinit();       // load idt register
-80103062:	e8 59 29 00 00       	call   801059c0 <idtinit>
-  xchg(&(mycpu()->started), 1); // tell startothers() we're up
-80103067:	e8 54 09 00 00       	call   801039c0 <mycpu>
-8010306c:	89 c2                	mov    %eax,%edx
-xchg(volatile uint *addr, uint newval)
-{
-  uint result;
-
-  // The + in "+m" denotes a read-modify-write operand.
-  asm volatile("lock; xchgl %0, %1" :
-8010306e:	b8 01 00 00 00       	mov    $0x1,%eax
-80103073:	f0 87 82 a0 00 00 00 	lock xchg %eax,0xa0(%edx)
-  scheduler();     // start running processes
-8010307a:	e8 71 0c 00 00       	call   80103cf0 <scheduler>
-8010307f:	90                   	nop
-
-80103080 <mpenter>:
-{
-80103080:	55                   	push   %ebp
-80103081:	89 e5                	mov    %esp,%ebp
-80103083:	83 ec 08             	sub    $0x8,%esp
-  switchkvm();
-80103086:	e8 35 3a 00 00       	call   80106ac0 <switchkvm>
-  seginit();
-8010308b:	e8 a0 39 00 00       	call   80106a30 <seginit>
-  lapicinit();
-80103090:	e8 bb f7 ff ff       	call   80102850 <lapicinit>
-  mpmain();
-80103095:	e8 a6 ff ff ff       	call   80103040 <mpmain>
-8010309a:	66 90                	xchg   %ax,%ax
-8010309c:	66 90                	xchg   %ax,%ax
-8010309e:	66 90                	xchg   %ax,%ax
-
-801030a0 <main>:
-{
-801030a0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-801030a4:	83 e4 f0             	and    $0xfffffff0,%esp
-801030a7:	ff 71 fc             	push   -0x4(%ecx)
-801030aa:	55                   	push   %ebp
-801030ab:	89 e5                	mov    %esp,%ebp
-801030ad:	53                   	push   %ebx
-801030ae:	51                   	push   %ecx
-  kinit1(end, P2V(4*1024*1024)); // phys page allocator
-801030af:	83 ec 08             	sub    $0x8,%esp
-801030b2:	68 00 00 40 80       	push   $0x80400000
-801030b7:	68 f0 54 11 80       	push   $0x801154f0
-801030bc:	e8 9f f5 ff ff       	call   80102660 <kinit1>
-  kvmalloc();      // kernel page table
-801030c1:	e8 ba 3e 00 00       	call   80106f80 <kvmalloc>
-  mpinit();        // detect other processors
-801030c6:	e8 85 01 00 00       	call   80103250 <mpinit>
-  lapicinit();     // interrupt controller
-801030cb:	e8 80 f7 ff ff       	call   80102850 <lapicinit>
-  seginit();       // segment descriptors
-801030d0:	e8 5b 39 00 00       	call   80106a30 <seginit>
-  picinit();       // disable pic
-801030d5:	e8 86 03 00 00       	call   80103460 <picinit>
-  ioapicinit();    // another interrupt controller
-801030da:	e8 51 f3 ff ff       	call   80102430 <ioapicinit>
-  consoleinit();   // console hardware
-801030df:	e8 ec d9 ff ff       	call   80100ad0 <consoleinit>
-  uartinit();      // serial port
-801030e4:	e8 b7 2b 00 00       	call   80105ca0 <uartinit>
-  pinit();         // process table
-801030e9:	e8 b2 08 00 00       	call   801039a0 <pinit>
-  tvinit();        // trap vectors
-801030ee:	e8 4d 28 00 00       	call   80105940 <tvinit>
-  binit();         // buffer cache
-801030f3:	e8 48 cf ff ff       	call   80100040 <binit>
-  fileinit();      // file table
-801030f8:	e8 a3 dd ff ff       	call   80100ea0 <fileinit>
-  ideinit();       // disk 
-801030fd:	e8 0e f1 ff ff       	call   80102210 <ideinit>
-
-  // Write entry code to unused memory at 0x7000.
-  // The linker has placed the image of entryother.S in
-  // _binary_entryother_start.
-  code = P2V(0x7000);
-  memmove(code, _binary_entryother_start, (uint)_binary_entryother_size);
-80103102:	83 c4 0c             	add    $0xc,%esp
-80103105:	68 8a 00 00 00       	push   $0x8a
-8010310a:	68 8c a4 10 80       	push   $0x8010a48c
-8010310f:	68 00 70 00 80       	push   $0x80007000
-80103114:	e8 f7 16 00 00       	call   80104810 <memmove>
-
-  for(c = cpus; c < cpus+ncpu; c++){
-80103119:	83 c4 10             	add    $0x10,%esp
-8010311c:	69 05 a4 17 11 80 b0 	imul   $0xb0,0x801117a4,%eax
-80103123:	00 00 00 
-80103126:	05 c0 17 11 80       	add    $0x801117c0,%eax
-8010312b:	3d c0 17 11 80       	cmp    $0x801117c0,%eax
-80103130:	76 7e                	jbe    801031b0 <main+0x110>
-80103132:	bb c0 17 11 80       	mov    $0x801117c0,%ebx
-80103137:	eb 20                	jmp    80103159 <main+0xb9>
-80103139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80103140:	69 05 a4 17 11 80 b0 	imul   $0xb0,0x801117a4,%eax
-80103147:	00 00 00 
-8010314a:	81 c3 b0 00 00 00    	add    $0xb0,%ebx
-80103150:	05 c0 17 11 80       	add    $0x801117c0,%eax
-80103155:	39 c3                	cmp    %eax,%ebx
-80103157:	73 57                	jae    801031b0 <main+0x110>
-    if(c == mycpu())  // We've started already.
-80103159:	e8 62 08 00 00       	call   801039c0 <mycpu>
-8010315e:	39 c3                	cmp    %eax,%ebx
-80103160:	74 de                	je     80103140 <main+0xa0>
-      continue;
-
-    // Tell entryother.S what stack to use, where to enter, and what
-    // pgdir to use. We cannot use kpgdir yet, because the AP processor
-    // is running in low  memory, so we use entrypgdir for the APs too.
-    stack = kalloc();
-80103162:	e8 69 f5 ff ff       	call   801026d0 <kalloc>
-    *(void**)(code-4) = stack + KSTACKSIZE;
-    *(void(**)(void))(code-8) = mpenter;
-    *(int**)(code-12) = (void *) V2P(entrypgdir);
-
-    lapicstartap(c->apicid, V2P(code));
-80103167:	83 ec 08             	sub    $0x8,%esp
-    *(void(**)(void))(code-8) = mpenter;
-8010316a:	c7 05 f8 6f 00 80 80 	movl   $0x80103080,0x80006ff8
-80103171:	30 10 80 
-    *(int**)(code-12) = (void *) V2P(entrypgdir);
-80103174:	c7 05 f4 6f 00 80 00 	movl   $0x109000,0x80006ff4
-8010317b:	90 10 00 
-    *(void**)(code-4) = stack + KSTACKSIZE;
-8010317e:	05 00 10 00 00       	add    $0x1000,%eax
-80103183:	a3 fc 6f 00 80       	mov    %eax,0x80006ffc
-    lapicstartap(c->apicid, V2P(code));
-80103188:	0f b6 03             	movzbl (%ebx),%eax
-8010318b:	68 00 70 00 00       	push   $0x7000
-80103190:	50                   	push   %eax
-80103191:	e8 fa f7 ff ff       	call   80102990 <lapicstartap>
-
-    // wait for cpu to finish mpmain()
-    while(c->started == 0)
-80103196:	83 c4 10             	add    $0x10,%esp
-80103199:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801031a0:	8b 83 a0 00 00 00    	mov    0xa0(%ebx),%eax
-801031a6:	85 c0                	test   %eax,%eax
-801031a8:	74 f6                	je     801031a0 <main+0x100>
-801031aa:	eb 94                	jmp    80103140 <main+0xa0>
-801031ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  kinit2(P2V(4*1024*1024), P2V(PHYSTOP)); // must come after startothers()
-801031b0:	83 ec 08             	sub    $0x8,%esp
-801031b3:	68 00 00 00 8e       	push   $0x8e000000
-801031b8:	68 00 00 40 80       	push   $0x80400000
-801031bd:	e8 3e f4 ff ff       	call   80102600 <kinit2>
-  userinit();      // first user process
-801031c2:	e8 a9 08 00 00       	call   80103a70 <userinit>
-  mpmain();        // finish this processor's setup
-801031c7:	e8 74 fe ff ff       	call   80103040 <mpmain>
-801031cc:	66 90                	xchg   %ax,%ax
-801031ce:	66 90                	xchg   %ax,%ax
-
-801031d0 <mpsearch1>:
-}
-
-// Look for an MP structure in the len bytes at addr.
-static struct mp*
-mpsearch1(uint a, int len)
-{
-801031d0:	55                   	push   %ebp
-801031d1:	89 e5                	mov    %esp,%ebp
-801031d3:	57                   	push   %edi
-801031d4:	56                   	push   %esi
-  uchar *e, *p, *addr;
-
-  addr = P2V(a);
-801031d5:	8d b0 00 00 00 80    	lea    -0x80000000(%eax),%esi
-{
-801031db:	53                   	push   %ebx
-  e = addr+len;
-801031dc:	8d 1c 16             	lea    (%esi,%edx,1),%ebx
-{
-801031df:	83 ec 0c             	sub    $0xc,%esp
-  for(p = addr; p < e; p += sizeof(struct mp))
-801031e2:	39 de                	cmp    %ebx,%esi
-801031e4:	72 10                	jb     801031f6 <mpsearch1+0x26>
-801031e6:	eb 50                	jmp    80103238 <mpsearch1+0x68>
-801031e8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801031ef:	00 
-801031f0:	89 fe                	mov    %edi,%esi
-801031f2:	39 df                	cmp    %ebx,%edi
-801031f4:	73 42                	jae    80103238 <mpsearch1+0x68>
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-801031f6:	83 ec 04             	sub    $0x4,%esp
-801031f9:	8d 7e 10             	lea    0x10(%esi),%edi
-801031fc:	6a 04                	push   $0x4
-801031fe:	68 8a 74 10 80       	push   $0x8010748a
-80103203:	56                   	push   %esi
-80103204:	e8 b7 15 00 00       	call   801047c0 <memcmp>
-80103209:	83 c4 10             	add    $0x10,%esp
-8010320c:	85 c0                	test   %eax,%eax
-8010320e:	75 e0                	jne    801031f0 <mpsearch1+0x20>
-80103210:	89 f2                	mov    %esi,%edx
-80103212:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    sum += addr[i];
-80103218:	0f b6 0a             	movzbl (%edx),%ecx
-  for(i=0; i<len; i++)
-8010321b:	83 c2 01             	add    $0x1,%edx
-    sum += addr[i];
-8010321e:	01 c8                	add    %ecx,%eax
-  for(i=0; i<len; i++)
-80103220:	39 fa                	cmp    %edi,%edx
-80103222:	75 f4                	jne    80103218 <mpsearch1+0x48>
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-80103224:	84 c0                	test   %al,%al
-80103226:	75 c8                	jne    801031f0 <mpsearch1+0x20>
-      return (struct mp*)p;
-  return 0;
-}
-80103228:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010322b:	89 f0                	mov    %esi,%eax
-8010322d:	5b                   	pop    %ebx
-8010322e:	5e                   	pop    %esi
-8010322f:	5f                   	pop    %edi
-80103230:	5d                   	pop    %ebp
-80103231:	c3                   	ret
-80103232:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80103238:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-8010323b:	31 f6                	xor    %esi,%esi
-}
-8010323d:	5b                   	pop    %ebx
-8010323e:	89 f0                	mov    %esi,%eax
-80103240:	5e                   	pop    %esi
-80103241:	5f                   	pop    %edi
-80103242:	5d                   	pop    %ebp
-80103243:	c3                   	ret
-80103244:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010324b:	00 
-8010324c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80103250 <mpinit>:
-  return conf;
-}
-
-void
-mpinit(void)
-{
-80103250:	55                   	push   %ebp
-80103251:	89 e5                	mov    %esp,%ebp
-80103253:	57                   	push   %edi
-80103254:	56                   	push   %esi
-80103255:	53                   	push   %ebx
-80103256:	83 ec 1c             	sub    $0x1c,%esp
-  if((p = ((bda[0x0F]<<8)| bda[0x0E]) << 4)){
-80103259:	0f b6 05 0f 04 00 80 	movzbl 0x8000040f,%eax
-80103260:	0f b6 15 0e 04 00 80 	movzbl 0x8000040e,%edx
-80103267:	c1 e0 08             	shl    $0x8,%eax
-8010326a:	09 d0                	or     %edx,%eax
-8010326c:	c1 e0 04             	shl    $0x4,%eax
-8010326f:	75 1b                	jne    8010328c <mpinit+0x3c>
-    p = ((bda[0x14]<<8)|bda[0x13])*1024;
-80103271:	0f b6 05 14 04 00 80 	movzbl 0x80000414,%eax
-80103278:	0f b6 15 13 04 00 80 	movzbl 0x80000413,%edx
-8010327f:	c1 e0 08             	shl    $0x8,%eax
-80103282:	09 d0                	or     %edx,%eax
-80103284:	c1 e0 0a             	shl    $0xa,%eax
-    if((mp = mpsearch1(p-1024, 1024)))
-80103287:	2d 00 04 00 00       	sub    $0x400,%eax
-    if((mp = mpsearch1(p, 1024)))
-8010328c:	ba 00 04 00 00       	mov    $0x400,%edx
-80103291:	e8 3a ff ff ff       	call   801031d0 <mpsearch1>
-80103296:	89 c3                	mov    %eax,%ebx
-80103298:	85 c0                	test   %eax,%eax
-8010329a:	0f 84 58 01 00 00    	je     801033f8 <mpinit+0x1a8>
-  if((mp = mpsearch()) == 0 || mp->physaddr == 0)
-801032a0:	8b 73 04             	mov    0x4(%ebx),%esi
-801032a3:	85 f6                	test   %esi,%esi
-801032a5:	0f 84 3d 01 00 00    	je     801033e8 <mpinit+0x198>
-  if(memcmp(conf, "PCMP", 4) != 0)
-801032ab:	83 ec 04             	sub    $0x4,%esp
-  conf = (struct mpconf*) P2V((uint) mp->physaddr);
-801032ae:	8d 86 00 00 00 80    	lea    -0x80000000(%esi),%eax
-801032b4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(memcmp(conf, "PCMP", 4) != 0)
-801032b7:	6a 04                	push   $0x4
-801032b9:	68 8f 74 10 80       	push   $0x8010748f
-801032be:	50                   	push   %eax
-801032bf:	e8 fc 14 00 00       	call   801047c0 <memcmp>
-801032c4:	83 c4 10             	add    $0x10,%esp
-801032c7:	85 c0                	test   %eax,%eax
-801032c9:	0f 85 19 01 00 00    	jne    801033e8 <mpinit+0x198>
-  if(conf->version != 1 && conf->version != 4)
-801032cf:	0f b6 86 06 00 00 80 	movzbl -0x7ffffffa(%esi),%eax
-801032d6:	3c 01                	cmp    $0x1,%al
-801032d8:	74 08                	je     801032e2 <mpinit+0x92>
-801032da:	3c 04                	cmp    $0x4,%al
-801032dc:	0f 85 06 01 00 00    	jne    801033e8 <mpinit+0x198>
-  if(sum((uchar*)conf, conf->length) != 0)
-801032e2:	0f b7 96 04 00 00 80 	movzwl -0x7ffffffc(%esi),%edx
-  for(i=0; i<len; i++)
-801032e9:	66 85 d2             	test   %dx,%dx
-801032ec:	74 22                	je     80103310 <mpinit+0xc0>
-801032ee:	8d 3c 32             	lea    (%edx,%esi,1),%edi
-801032f1:	89 f0                	mov    %esi,%eax
-  sum = 0;
-801032f3:	31 d2                	xor    %edx,%edx
-801032f5:	8d 76 00             	lea    0x0(%esi),%esi
-    sum += addr[i];
-801032f8:	0f b6 88 00 00 00 80 	movzbl -0x80000000(%eax),%ecx
-  for(i=0; i<len; i++)
-801032ff:	83 c0 01             	add    $0x1,%eax
-    sum += addr[i];
-80103302:	01 ca                	add    %ecx,%edx
-  for(i=0; i<len; i++)
-80103304:	39 f8                	cmp    %edi,%eax
-80103306:	75 f0                	jne    801032f8 <mpinit+0xa8>
-  if(sum((uchar*)conf, conf->length) != 0)
-80103308:	84 d2                	test   %dl,%dl
-8010330a:	0f 85 d8 00 00 00    	jne    801033e8 <mpinit+0x198>
-  struct mpioapic *ioapic;
-
-  if((conf = mpconfig(&mp)) == 0)
-    panic("Expect to run on an SMP");
-  ismp = 1;
-  lapic = (uint*)conf->lapicaddr;
-80103310:	8b 86 24 00 00 80    	mov    -0x7fffffdc(%esi),%eax
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103316:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-80103319:	89 5d e4             	mov    %ebx,-0x1c(%ebp)
-  lapic = (uint*)conf->lapicaddr;
-8010331c:	a3 a0 16 11 80       	mov    %eax,0x801116a0
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103321:	0f b7 96 04 00 00 80 	movzwl -0x7ffffffc(%esi),%edx
-80103328:	8d 86 2c 00 00 80    	lea    -0x7fffffd4(%esi),%eax
-8010332e:	01 d7                	add    %edx,%edi
-80103330:	89 fa                	mov    %edi,%edx
-  ismp = 1;
-80103332:	bf 01 00 00 00       	mov    $0x1,%edi
-80103337:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010333e:	00 
-8010333f:	90                   	nop
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103340:	39 d0                	cmp    %edx,%eax
-80103342:	73 19                	jae    8010335d <mpinit+0x10d>
-    switch(*p){
-80103344:	0f b6 08             	movzbl (%eax),%ecx
-80103347:	80 f9 02             	cmp    $0x2,%cl
-8010334a:	0f 84 80 00 00 00    	je     801033d0 <mpinit+0x180>
-80103350:	77 6e                	ja     801033c0 <mpinit+0x170>
-80103352:	84 c9                	test   %cl,%cl
-80103354:	74 3a                	je     80103390 <mpinit+0x140>
-      p += sizeof(struct mpioapic);
-      continue;
-    case MPBUS:
-    case MPIOINTR:
-    case MPLINTR:
-      p += 8;
-80103356:	83 c0 08             	add    $0x8,%eax
-  for(p=(uchar*)(conf+1), e=(uchar*)conf+conf->length; p<e; ){
-80103359:	39 d0                	cmp    %edx,%eax
-8010335b:	72 e7                	jb     80103344 <mpinit+0xf4>
-    default:
-      ismp = 0;
-      break;
-    }
-  }
-  if(!ismp)
-8010335d:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103360:	85 ff                	test   %edi,%edi
-80103362:	0f 84 dd 00 00 00    	je     80103445 <mpinit+0x1f5>
-    panic("Didn't find a suitable machine");
-
-  if(mp->imcrp){
-80103368:	80 7b 0c 00          	cmpb   $0x0,0xc(%ebx)
-8010336c:	74 15                	je     80103383 <mpinit+0x133>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-8010336e:	b8 70 00 00 00       	mov    $0x70,%eax
-80103373:	ba 22 00 00 00       	mov    $0x22,%edx
-80103378:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80103379:	ba 23 00 00 00       	mov    $0x23,%edx
-8010337e:	ec                   	in     (%dx),%al
-    // Bochs doesn't support IMCR, so this doesn't run on Bochs.
-    // But it would on real hardware.
-    outb(0x22, 0x70);   // Select IMCR
-    outb(0x23, inb(0x23) | 1);  // Mask external interrupts.
-8010337f:	83 c8 01             	or     $0x1,%eax
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80103382:	ee                   	out    %al,(%dx)
-  }
-}
-80103383:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103386:	5b                   	pop    %ebx
-80103387:	5e                   	pop    %esi
-80103388:	5f                   	pop    %edi
-80103389:	5d                   	pop    %ebp
-8010338a:	c3                   	ret
-8010338b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      if(ncpu < NCPU) {
-80103390:	8b 0d a4 17 11 80    	mov    0x801117a4,%ecx
-80103396:	83 f9 07             	cmp    $0x7,%ecx
-80103399:	7f 19                	jg     801033b4 <mpinit+0x164>
-        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-8010339b:	69 f1 b0 00 00 00    	imul   $0xb0,%ecx,%esi
-801033a1:	0f b6 58 01          	movzbl 0x1(%eax),%ebx
-        ncpu++;
-801033a5:	83 c1 01             	add    $0x1,%ecx
-801033a8:	89 0d a4 17 11 80    	mov    %ecx,0x801117a4
-        cpus[ncpu].apicid = proc->apicid;  // apicid may differ from ncpu
-801033ae:	88 9e c0 17 11 80    	mov    %bl,-0x7feee840(%esi)
-      p += sizeof(struct mpproc);
-801033b4:	83 c0 14             	add    $0x14,%eax
-      continue;
-801033b7:	eb 87                	jmp    80103340 <mpinit+0xf0>
-801033b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    switch(*p){
-801033c0:	83 e9 03             	sub    $0x3,%ecx
-801033c3:	80 f9 01             	cmp    $0x1,%cl
-801033c6:	76 8e                	jbe    80103356 <mpinit+0x106>
-801033c8:	31 ff                	xor    %edi,%edi
-801033ca:	e9 71 ff ff ff       	jmp    80103340 <mpinit+0xf0>
-801033cf:	90                   	nop
-      ioapicid = ioapic->apicno;
-801033d0:	0f b6 48 01          	movzbl 0x1(%eax),%ecx
-      p += sizeof(struct mpioapic);
-801033d4:	83 c0 08             	add    $0x8,%eax
-      ioapicid = ioapic->apicno;
-801033d7:	88 0d a0 17 11 80    	mov    %cl,0x801117a0
-      continue;
-801033dd:	e9 5e ff ff ff       	jmp    80103340 <mpinit+0xf0>
-801033e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    panic("Expect to run on an SMP");
-801033e8:	83 ec 0c             	sub    $0xc,%esp
-801033eb:	68 94 74 10 80       	push   $0x80107494
-801033f0:	e8 8b cf ff ff       	call   80100380 <panic>
-801033f5:	8d 76 00             	lea    0x0(%esi),%esi
-{
-801033f8:	bb 00 00 0f 80       	mov    $0x800f0000,%ebx
-801033fd:	eb 0b                	jmp    8010340a <mpinit+0x1ba>
-801033ff:	90                   	nop
-  for(p = addr; p < e; p += sizeof(struct mp))
-80103400:	89 f3                	mov    %esi,%ebx
-80103402:	81 fe 00 00 10 80    	cmp    $0x80100000,%esi
-80103408:	74 de                	je     801033e8 <mpinit+0x198>
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-8010340a:	83 ec 04             	sub    $0x4,%esp
-8010340d:	8d 73 10             	lea    0x10(%ebx),%esi
-80103410:	6a 04                	push   $0x4
-80103412:	68 8a 74 10 80       	push   $0x8010748a
-80103417:	53                   	push   %ebx
-80103418:	e8 a3 13 00 00       	call   801047c0 <memcmp>
-8010341d:	83 c4 10             	add    $0x10,%esp
-80103420:	85 c0                	test   %eax,%eax
-80103422:	75 dc                	jne    80103400 <mpinit+0x1b0>
-80103424:	89 da                	mov    %ebx,%edx
-80103426:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010342d:	00 
-8010342e:	66 90                	xchg   %ax,%ax
-    sum += addr[i];
-80103430:	0f b6 0a             	movzbl (%edx),%ecx
-  for(i=0; i<len; i++)
-80103433:	83 c2 01             	add    $0x1,%edx
-    sum += addr[i];
-80103436:	01 c8                	add    %ecx,%eax
-  for(i=0; i<len; i++)
-80103438:	39 d6                	cmp    %edx,%esi
-8010343a:	75 f4                	jne    80103430 <mpinit+0x1e0>
-    if(memcmp(p, "_MP_", 4) == 0 && sum(p, sizeof(struct mp)) == 0)
-8010343c:	84 c0                	test   %al,%al
-8010343e:	75 c0                	jne    80103400 <mpinit+0x1b0>
-80103440:	e9 5b fe ff ff       	jmp    801032a0 <mpinit+0x50>
-    panic("Didn't find a suitable machine");
-80103445:	83 ec 0c             	sub    $0xc,%esp
-80103448:	68 28 78 10 80       	push   $0x80107828
-8010344d:	e8 2e cf ff ff       	call   80100380 <panic>
-80103452:	66 90                	xchg   %ax,%ax
-80103454:	66 90                	xchg   %ax,%ax
-80103456:	66 90                	xchg   %ax,%ax
-80103458:	66 90                	xchg   %ax,%ax
-8010345a:	66 90                	xchg   %ax,%ax
-8010345c:	66 90                	xchg   %ax,%ax
-8010345e:	66 90                	xchg   %ax,%ax
-
-80103460 <picinit>:
-80103460:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103465:	ba 21 00 00 00       	mov    $0x21,%edx
-8010346a:	ee                   	out    %al,(%dx)
-8010346b:	ba a1 00 00 00       	mov    $0xa1,%edx
-80103470:	ee                   	out    %al,(%dx)
-picinit(void)
-{
-  // mask all interrupts
-  outb(IO_PIC1+1, 0xFF);
-  outb(IO_PIC2+1, 0xFF);
-}
-80103471:	c3                   	ret
-80103472:	66 90                	xchg   %ax,%ax
-80103474:	66 90                	xchg   %ax,%ax
-80103476:	66 90                	xchg   %ax,%ax
-80103478:	66 90                	xchg   %ax,%ax
-8010347a:	66 90                	xchg   %ax,%ax
-8010347c:	66 90                	xchg   %ax,%ax
-8010347e:	66 90                	xchg   %ax,%ax
-
-80103480 <pipealloc>:
-  int writeopen;  // write fd is still open
-};
-
-int
-pipealloc(struct file **f0, struct file **f1)
-{
-80103480:	55                   	push   %ebp
-80103481:	89 e5                	mov    %esp,%ebp
-80103483:	57                   	push   %edi
-80103484:	56                   	push   %esi
-80103485:	53                   	push   %ebx
-80103486:	83 ec 0c             	sub    $0xc,%esp
-80103489:	8b 75 08             	mov    0x8(%ebp),%esi
-8010348c:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  struct pipe *p;
-
-  p = 0;
-  *f0 = *f1 = 0;
-8010348f:	c7 07 00 00 00 00    	movl   $0x0,(%edi)
-80103495:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-  if((*f0 = filealloc()) == 0 || (*f1 = filealloc()) == 0)
-8010349b:	e8 20 da ff ff       	call   80100ec0 <filealloc>
-801034a0:	89 06                	mov    %eax,(%esi)
-801034a2:	85 c0                	test   %eax,%eax
-801034a4:	0f 84 a5 00 00 00    	je     8010354f <pipealloc+0xcf>
-801034aa:	e8 11 da ff ff       	call   80100ec0 <filealloc>
-801034af:	89 07                	mov    %eax,(%edi)
-801034b1:	85 c0                	test   %eax,%eax
-801034b3:	0f 84 84 00 00 00    	je     8010353d <pipealloc+0xbd>
-    goto bad;
-  if((p = (struct pipe*)kalloc()) == 0)
-801034b9:	e8 12 f2 ff ff       	call   801026d0 <kalloc>
-801034be:	89 c3                	mov    %eax,%ebx
-801034c0:	85 c0                	test   %eax,%eax
-801034c2:	0f 84 a0 00 00 00    	je     80103568 <pipealloc+0xe8>
-    goto bad;
-  p->readopen = 1;
-801034c8:	c7 80 3c 02 00 00 01 	movl   $0x1,0x23c(%eax)
-801034cf:	00 00 00 
-  p->writeopen = 1;
-  p->nwrite = 0;
-  p->nread = 0;
-  initlock(&p->lock, "pipe");
-801034d2:	83 ec 08             	sub    $0x8,%esp
-  p->writeopen = 1;
-801034d5:	c7 80 40 02 00 00 01 	movl   $0x1,0x240(%eax)
-801034dc:	00 00 00 
-  p->nwrite = 0;
-801034df:	c7 80 38 02 00 00 00 	movl   $0x0,0x238(%eax)
-801034e6:	00 00 00 
-  p->nread = 0;
-801034e9:	c7 80 34 02 00 00 00 	movl   $0x0,0x234(%eax)
-801034f0:	00 00 00 
-  initlock(&p->lock, "pipe");
-801034f3:	68 ac 74 10 80       	push   $0x801074ac
-801034f8:	50                   	push   %eax
-801034f9:	e8 92 0f 00 00       	call   80104490 <initlock>
-  (*f0)->type = FD_PIPE;
-801034fe:	8b 06                	mov    (%esi),%eax
-  (*f0)->pipe = p;
-  (*f1)->type = FD_PIPE;
-  (*f1)->readable = 0;
-  (*f1)->writable = 1;
-  (*f1)->pipe = p;
-  return 0;
-80103500:	83 c4 10             	add    $0x10,%esp
-  (*f0)->type = FD_PIPE;
-80103503:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-  (*f0)->readable = 1;
-80103509:	8b 06                	mov    (%esi),%eax
-8010350b:	c6 40 08 01          	movb   $0x1,0x8(%eax)
-  (*f0)->writable = 0;
-8010350f:	8b 06                	mov    (%esi),%eax
-80103511:	c6 40 09 00          	movb   $0x0,0x9(%eax)
-  (*f0)->pipe = p;
-80103515:	8b 06                	mov    (%esi),%eax
-80103517:	89 58 0c             	mov    %ebx,0xc(%eax)
-  (*f1)->type = FD_PIPE;
-8010351a:	8b 07                	mov    (%edi),%eax
-8010351c:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-  (*f1)->readable = 0;
-80103522:	8b 07                	mov    (%edi),%eax
-80103524:	c6 40 08 00          	movb   $0x0,0x8(%eax)
-  (*f1)->writable = 1;
-80103528:	8b 07                	mov    (%edi),%eax
-8010352a:	c6 40 09 01          	movb   $0x1,0x9(%eax)
-  (*f1)->pipe = p;
-8010352e:	8b 07                	mov    (%edi),%eax
-80103530:	89 58 0c             	mov    %ebx,0xc(%eax)
-  return 0;
-80103533:	31 c0                	xor    %eax,%eax
-  if(*f0)
-    fileclose(*f0);
-  if(*f1)
-    fileclose(*f1);
-  return -1;
-}
-80103535:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103538:	5b                   	pop    %ebx
-80103539:	5e                   	pop    %esi
-8010353a:	5f                   	pop    %edi
-8010353b:	5d                   	pop    %ebp
-8010353c:	c3                   	ret
-  if(*f0)
-8010353d:	8b 06                	mov    (%esi),%eax
-8010353f:	85 c0                	test   %eax,%eax
-80103541:	74 1e                	je     80103561 <pipealloc+0xe1>
-    fileclose(*f0);
-80103543:	83 ec 0c             	sub    $0xc,%esp
-80103546:	50                   	push   %eax
-80103547:	e8 34 da ff ff       	call   80100f80 <fileclose>
-8010354c:	83 c4 10             	add    $0x10,%esp
-  if(*f1)
-8010354f:	8b 07                	mov    (%edi),%eax
-80103551:	85 c0                	test   %eax,%eax
-80103553:	74 0c                	je     80103561 <pipealloc+0xe1>
-    fileclose(*f1);
-80103555:	83 ec 0c             	sub    $0xc,%esp
-80103558:	50                   	push   %eax
-80103559:	e8 22 da ff ff       	call   80100f80 <fileclose>
-8010355e:	83 c4 10             	add    $0x10,%esp
-  return -1;
-80103561:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103566:	eb cd                	jmp    80103535 <pipealloc+0xb5>
-  if(*f0)
-80103568:	8b 06                	mov    (%esi),%eax
-8010356a:	85 c0                	test   %eax,%eax
-8010356c:	75 d5                	jne    80103543 <pipealloc+0xc3>
-8010356e:	eb df                	jmp    8010354f <pipealloc+0xcf>
-
-80103570 <pipeclose>:
-
-void
-pipeclose(struct pipe *p, int writable)
-{
-80103570:	55                   	push   %ebp
-80103571:	89 e5                	mov    %esp,%ebp
-80103573:	56                   	push   %esi
-80103574:	53                   	push   %ebx
-80103575:	8b 5d 08             	mov    0x8(%ebp),%ebx
-80103578:	8b 75 0c             	mov    0xc(%ebp),%esi
-  acquire(&p->lock);
-8010357b:	83 ec 0c             	sub    $0xc,%esp
-8010357e:	53                   	push   %ebx
-8010357f:	e8 fc 10 00 00       	call   80104680 <acquire>
-  if(writable){
-80103584:	83 c4 10             	add    $0x10,%esp
-80103587:	85 f6                	test   %esi,%esi
-80103589:	74 65                	je     801035f0 <pipeclose+0x80>
-    p->writeopen = 0;
-    wakeup(&p->nread);
-8010358b:	83 ec 0c             	sub    $0xc,%esp
-8010358e:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
-    p->writeopen = 0;
-80103594:	c7 83 40 02 00 00 00 	movl   $0x0,0x240(%ebx)
-8010359b:	00 00 00 
-    wakeup(&p->nread);
-8010359e:	50                   	push   %eax
-8010359f:	e8 1c 0c 00 00       	call   801041c0 <wakeup>
-801035a4:	83 c4 10             	add    $0x10,%esp
-  } else {
-    p->readopen = 0;
-    wakeup(&p->nwrite);
-  }
-  if(p->readopen == 0 && p->writeopen == 0){
-801035a7:	8b 93 3c 02 00 00    	mov    0x23c(%ebx),%edx
-801035ad:	85 d2                	test   %edx,%edx
-801035af:	75 0a                	jne    801035bb <pipeclose+0x4b>
-801035b1:	8b 83 40 02 00 00    	mov    0x240(%ebx),%eax
-801035b7:	85 c0                	test   %eax,%eax
-801035b9:	74 15                	je     801035d0 <pipeclose+0x60>
-    release(&p->lock);
-    kfree((char*)p);
-  } else
-    release(&p->lock);
-801035bb:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-801035be:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801035c1:	5b                   	pop    %ebx
-801035c2:	5e                   	pop    %esi
-801035c3:	5d                   	pop    %ebp
-    release(&p->lock);
-801035c4:	e9 57 10 00 00       	jmp    80104620 <release>
-801035c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    release(&p->lock);
-801035d0:	83 ec 0c             	sub    $0xc,%esp
-801035d3:	53                   	push   %ebx
-801035d4:	e8 47 10 00 00       	call   80104620 <release>
-    kfree((char*)p);
-801035d9:	83 c4 10             	add    $0x10,%esp
-801035dc:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-801035df:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801035e2:	5b                   	pop    %ebx
-801035e3:	5e                   	pop    %esi
-801035e4:	5d                   	pop    %ebp
-    kfree((char*)p);
-801035e5:	e9 26 ef ff ff       	jmp    80102510 <kfree>
-801035ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    wakeup(&p->nwrite);
-801035f0:	83 ec 0c             	sub    $0xc,%esp
-801035f3:	8d 83 38 02 00 00    	lea    0x238(%ebx),%eax
-    p->readopen = 0;
-801035f9:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%ebx)
-80103600:	00 00 00 
-    wakeup(&p->nwrite);
-80103603:	50                   	push   %eax
-80103604:	e8 b7 0b 00 00       	call   801041c0 <wakeup>
-80103609:	83 c4 10             	add    $0x10,%esp
-8010360c:	eb 99                	jmp    801035a7 <pipeclose+0x37>
-8010360e:	66 90                	xchg   %ax,%ax
-
-80103610 <pipewrite>:
-
-//PAGEBREAK: 40
-int
-pipewrite(struct pipe *p, char *addr, int n)
-{
-80103610:	55                   	push   %ebp
-80103611:	89 e5                	mov    %esp,%ebp
-80103613:	57                   	push   %edi
-80103614:	56                   	push   %esi
-80103615:	53                   	push   %ebx
-80103616:	83 ec 28             	sub    $0x28,%esp
-80103619:	8b 5d 08             	mov    0x8(%ebp),%ebx
-8010361c:	8b 7d 10             	mov    0x10(%ebp),%edi
-  int i;
-
-  acquire(&p->lock);
-8010361f:	53                   	push   %ebx
-80103620:	e8 5b 10 00 00       	call   80104680 <acquire>
-  for(i = 0; i < n; i++){
-80103625:	83 c4 10             	add    $0x10,%esp
-80103628:	85 ff                	test   %edi,%edi
-8010362a:	0f 8e ce 00 00 00    	jle    801036fe <pipewrite+0xee>
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80103630:	8b 83 38 02 00 00    	mov    0x238(%ebx),%eax
-80103636:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80103639:	89 7d 10             	mov    %edi,0x10(%ebp)
-8010363c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-8010363f:	8d 34 39             	lea    (%ecx,%edi,1),%esi
-80103642:	89 75 e0             	mov    %esi,-0x20(%ebp)
-      if(p->readopen == 0 || myproc()->killed){
-        release(&p->lock);
-        return -1;
-      }
-      wakeup(&p->nread);
-80103645:	8d b3 34 02 00 00    	lea    0x234(%ebx),%esi
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-8010364b:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-80103651:	8d bb 38 02 00 00    	lea    0x238(%ebx),%edi
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-80103657:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
-8010365d:	39 55 e4             	cmp    %edx,-0x1c(%ebp)
-80103660:	0f 85 b6 00 00 00    	jne    8010371c <pipewrite+0x10c>
-80103666:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-80103669:	eb 3b                	jmp    801036a6 <pipewrite+0x96>
-8010366b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      if(p->readopen == 0 || myproc()->killed){
-80103670:	e8 cb 03 00 00       	call   80103a40 <myproc>
-80103675:	8b 48 24             	mov    0x24(%eax),%ecx
-80103678:	85 c9                	test   %ecx,%ecx
-8010367a:	75 34                	jne    801036b0 <pipewrite+0xa0>
-      wakeup(&p->nread);
-8010367c:	83 ec 0c             	sub    $0xc,%esp
-8010367f:	56                   	push   %esi
-80103680:	e8 3b 0b 00 00       	call   801041c0 <wakeup>
-      sleep(&p->nwrite, &p->lock);  //DOC: pipewrite-sleep
-80103685:	58                   	pop    %eax
-80103686:	5a                   	pop    %edx
-80103687:	53                   	push   %ebx
-80103688:	57                   	push   %edi
-80103689:	e8 72 0a 00 00       	call   80104100 <sleep>
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-8010368e:	8b 83 34 02 00 00    	mov    0x234(%ebx),%eax
-80103694:	8b 93 38 02 00 00    	mov    0x238(%ebx),%edx
-8010369a:	83 c4 10             	add    $0x10,%esp
-8010369d:	05 00 02 00 00       	add    $0x200,%eax
-801036a2:	39 c2                	cmp    %eax,%edx
-801036a4:	75 2a                	jne    801036d0 <pipewrite+0xc0>
-      if(p->readopen == 0 || myproc()->killed){
-801036a6:	8b 83 3c 02 00 00    	mov    0x23c(%ebx),%eax
-801036ac:	85 c0                	test   %eax,%eax
-801036ae:	75 c0                	jne    80103670 <pipewrite+0x60>
-        release(&p->lock);
-801036b0:	83 ec 0c             	sub    $0xc,%esp
-801036b3:	53                   	push   %ebx
-801036b4:	e8 67 0f 00 00       	call   80104620 <release>
-        return -1;
-801036b9:	83 c4 10             	add    $0x10,%esp
-801036bc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-  }
-  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-  release(&p->lock);
-  return n;
-}
-801036c1:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801036c4:	5b                   	pop    %ebx
-801036c5:	5e                   	pop    %esi
-801036c6:	5f                   	pop    %edi
-801036c7:	5d                   	pop    %ebp
-801036c8:	c3                   	ret
-801036c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-801036d0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-801036d3:	8d 42 01             	lea    0x1(%edx),%eax
-801036d6:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
-  for(i = 0; i < n; i++){
-801036dc:	83 c1 01             	add    $0x1,%ecx
-    p->data[p->nwrite++ % PIPESIZE] = addr[i];
-801036df:	89 83 38 02 00 00    	mov    %eax,0x238(%ebx)
-801036e5:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-801036e8:	0f b6 41 ff          	movzbl -0x1(%ecx),%eax
-801036ec:	88 44 13 34          	mov    %al,0x34(%ebx,%edx,1)
-  for(i = 0; i < n; i++){
-801036f0:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801036f3:	39 c1                	cmp    %eax,%ecx
-801036f5:	0f 85 50 ff ff ff    	jne    8010364b <pipewrite+0x3b>
-801036fb:	8b 7d 10             	mov    0x10(%ebp),%edi
-  wakeup(&p->nread);  //DOC: pipewrite-wakeup1
-801036fe:	83 ec 0c             	sub    $0xc,%esp
-80103701:	8d 83 34 02 00 00    	lea    0x234(%ebx),%eax
-80103707:	50                   	push   %eax
-80103708:	e8 b3 0a 00 00       	call   801041c0 <wakeup>
-  release(&p->lock);
-8010370d:	89 1c 24             	mov    %ebx,(%esp)
-80103710:	e8 0b 0f 00 00       	call   80104620 <release>
-  return n;
-80103715:	83 c4 10             	add    $0x10,%esp
-80103718:	89 f8                	mov    %edi,%eax
-8010371a:	eb a5                	jmp    801036c1 <pipewrite+0xb1>
-    while(p->nwrite == p->nread + PIPESIZE){  //DOC: pipewrite-full
-8010371c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-8010371f:	eb b2                	jmp    801036d3 <pipewrite+0xc3>
-80103721:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103728:	00 
-80103729:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80103730 <piperead>:
-
-int
-piperead(struct pipe *p, char *addr, int n)
-{
-80103730:	55                   	push   %ebp
-80103731:	89 e5                	mov    %esp,%ebp
-80103733:	57                   	push   %edi
-80103734:	56                   	push   %esi
-80103735:	53                   	push   %ebx
-80103736:	83 ec 18             	sub    $0x18,%esp
-80103739:	8b 75 08             	mov    0x8(%ebp),%esi
-8010373c:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  int i;
-
-  acquire(&p->lock);
-8010373f:	56                   	push   %esi
-80103740:	8d 9e 34 02 00 00    	lea    0x234(%esi),%ebx
-80103746:	e8 35 0f 00 00       	call   80104680 <acquire>
-  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-8010374b:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-80103751:	83 c4 10             	add    $0x10,%esp
-80103754:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
-8010375a:	74 2f                	je     8010378b <piperead+0x5b>
-8010375c:	eb 37                	jmp    80103795 <piperead+0x65>
-8010375e:	66 90                	xchg   %ax,%ax
-    if(myproc()->killed){
-80103760:	e8 db 02 00 00       	call   80103a40 <myproc>
-80103765:	8b 40 24             	mov    0x24(%eax),%eax
-80103768:	85 c0                	test   %eax,%eax
-8010376a:	0f 85 80 00 00 00    	jne    801037f0 <piperead+0xc0>
-      release(&p->lock);
-      return -1;
-    }
-    sleep(&p->nread, &p->lock); //DOC: piperead-sleep
-80103770:	83 ec 08             	sub    $0x8,%esp
-80103773:	56                   	push   %esi
-80103774:	53                   	push   %ebx
-80103775:	e8 86 09 00 00       	call   80104100 <sleep>
-  while(p->nread == p->nwrite && p->writeopen){  //DOC: pipe-empty
-8010377a:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-80103780:	83 c4 10             	add    $0x10,%esp
-80103783:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
-80103789:	75 0a                	jne    80103795 <piperead+0x65>
-8010378b:	8b 96 40 02 00 00    	mov    0x240(%esi),%edx
-80103791:	85 d2                	test   %edx,%edx
-80103793:	75 cb                	jne    80103760 <piperead+0x30>
-  }
-  for(i = 0; i < n; i++){  //DOC: piperead-copy
-80103795:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80103798:	31 db                	xor    %ebx,%ebx
-8010379a:	85 c9                	test   %ecx,%ecx
-8010379c:	7f 26                	jg     801037c4 <piperead+0x94>
-8010379e:	eb 2c                	jmp    801037cc <piperead+0x9c>
-    if(p->nread == p->nwrite)
-      break;
-    addr[i] = p->data[p->nread++ % PIPESIZE];
-801037a0:	8d 48 01             	lea    0x1(%eax),%ecx
-801037a3:	25 ff 01 00 00       	and    $0x1ff,%eax
-801037a8:	89 8e 34 02 00 00    	mov    %ecx,0x234(%esi)
-801037ae:	0f b6 44 06 34       	movzbl 0x34(%esi,%eax,1),%eax
-801037b3:	88 04 1f             	mov    %al,(%edi,%ebx,1)
-  for(i = 0; i < n; i++){  //DOC: piperead-copy
-801037b6:	83 c3 01             	add    $0x1,%ebx
-801037b9:	39 5d 10             	cmp    %ebx,0x10(%ebp)
-801037bc:	74 0e                	je     801037cc <piperead+0x9c>
-801037be:	8b 86 34 02 00 00    	mov    0x234(%esi),%eax
-    if(p->nread == p->nwrite)
-801037c4:	3b 86 38 02 00 00    	cmp    0x238(%esi),%eax
-801037ca:	75 d4                	jne    801037a0 <piperead+0x70>
-  }
-  wakeup(&p->nwrite);  //DOC: piperead-wakeup
-801037cc:	83 ec 0c             	sub    $0xc,%esp
-801037cf:	8d 86 38 02 00 00    	lea    0x238(%esi),%eax
-801037d5:	50                   	push   %eax
-801037d6:	e8 e5 09 00 00       	call   801041c0 <wakeup>
-  release(&p->lock);
-801037db:	89 34 24             	mov    %esi,(%esp)
-801037de:	e8 3d 0e 00 00       	call   80104620 <release>
-  return i;
-801037e3:	83 c4 10             	add    $0x10,%esp
-}
-801037e6:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801037e9:	89 d8                	mov    %ebx,%eax
-801037eb:	5b                   	pop    %ebx
-801037ec:	5e                   	pop    %esi
-801037ed:	5f                   	pop    %edi
-801037ee:	5d                   	pop    %ebp
-801037ef:	c3                   	ret
-      release(&p->lock);
-801037f0:	83 ec 0c             	sub    $0xc,%esp
-      return -1;
-801037f3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-      release(&p->lock);
-801037f8:	56                   	push   %esi
-801037f9:	e8 22 0e 00 00       	call   80104620 <release>
-      return -1;
-801037fe:	83 c4 10             	add    $0x10,%esp
-}
-80103801:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103804:	89 d8                	mov    %ebx,%eax
-80103806:	5b                   	pop    %ebx
-80103807:	5e                   	pop    %esi
-80103808:	5f                   	pop    %edi
-80103809:	5d                   	pop    %ebp
-8010380a:	c3                   	ret
-8010380b:	66 90                	xchg   %ax,%ax
-8010380d:	66 90                	xchg   %ax,%ax
-8010380f:	90                   	nop
-
-80103810 <allocproc>:
-// If found, change state to EMBRYO and initialize
-// state required to run in the kernel.
-// Otherwise return 0.
-static struct proc*
-allocproc(void)
-{
-80103810:	55                   	push   %ebp
-80103811:	89 e5                	mov    %esp,%ebp
-80103813:	53                   	push   %ebx
-  struct proc *p;
-  char *sp;
-
-  acquire(&ptable.lock);
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103814:	bb 74 1d 11 80       	mov    $0x80111d74,%ebx
-{
-80103819:	83 ec 10             	sub    $0x10,%esp
-  acquire(&ptable.lock);
-8010381c:	68 40 1d 11 80       	push   $0x80111d40
-80103821:	e8 5a 0e 00 00       	call   80104680 <acquire>
-80103826:	83 c4 10             	add    $0x10,%esp
-80103829:	eb 10                	jmp    8010383b <allocproc+0x2b>
-8010382b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103830:	83 c3 7c             	add    $0x7c,%ebx
-80103833:	81 fb 74 3c 11 80    	cmp    $0x80113c74,%ebx
-80103839:	74 75                	je     801038b0 <allocproc+0xa0>
-    if(p->state == UNUSED)
-8010383b:	8b 43 0c             	mov    0xc(%ebx),%eax
-8010383e:	85 c0                	test   %eax,%eax
-80103840:	75 ee                	jne    80103830 <allocproc+0x20>
-  release(&ptable.lock);
-  return 0;
-
-found:
-  p->state = EMBRYO;
-  p->pid = nextpid++;
-80103842:	a1 04 a0 10 80       	mov    0x8010a004,%eax
-
-  release(&ptable.lock);
-80103847:	83 ec 0c             	sub    $0xc,%esp
-  p->state = EMBRYO;
-8010384a:	c7 43 0c 01 00 00 00 	movl   $0x1,0xc(%ebx)
-  p->pid = nextpid++;
-80103851:	89 43 10             	mov    %eax,0x10(%ebx)
-80103854:	8d 50 01             	lea    0x1(%eax),%edx
-  release(&ptable.lock);
-80103857:	68 40 1d 11 80       	push   $0x80111d40
-  p->pid = nextpid++;
-8010385c:	89 15 04 a0 10 80    	mov    %edx,0x8010a004
-  release(&ptable.lock);
-80103862:	e8 b9 0d 00 00       	call   80104620 <release>
-
-  // Allocate kernel stack.
-  if((p->kstack = kalloc()) == 0){
-80103867:	e8 64 ee ff ff       	call   801026d0 <kalloc>
-8010386c:	83 c4 10             	add    $0x10,%esp
-8010386f:	89 43 08             	mov    %eax,0x8(%ebx)
-80103872:	85 c0                	test   %eax,%eax
-80103874:	74 53                	je     801038c9 <allocproc+0xb9>
-    return 0;
-  }
-  sp = p->kstack + KSTACKSIZE;
-
-  // Leave room for trap frame.
-  sp -= sizeof *p->tf;
-80103876:	8d 90 b4 0f 00 00    	lea    0xfb4(%eax),%edx
-  sp -= 4;
-  *(uint*)sp = (uint)trapret;
-
-  sp -= sizeof *p->context;
-  p->context = (struct context*)sp;
-  memset(p->context, 0, sizeof *p->context);
-8010387c:	83 ec 04             	sub    $0x4,%esp
-  sp -= sizeof *p->context;
-8010387f:	05 9c 0f 00 00       	add    $0xf9c,%eax
-  sp -= sizeof *p->tf;
-80103884:	89 53 18             	mov    %edx,0x18(%ebx)
-  *(uint*)sp = (uint)trapret;
-80103887:	c7 40 14 32 59 10 80 	movl   $0x80105932,0x14(%eax)
-  p->context = (struct context*)sp;
-8010388e:	89 43 1c             	mov    %eax,0x1c(%ebx)
-  memset(p->context, 0, sizeof *p->context);
-80103891:	6a 14                	push   $0x14
-80103893:	6a 00                	push   $0x0
-80103895:	50                   	push   %eax
-80103896:	e8 e5 0e 00 00       	call   80104780 <memset>
-  p->context->eip = (uint)forkret;
-8010389b:	8b 43 1c             	mov    0x1c(%ebx),%eax
-
-  return p;
-8010389e:	83 c4 10             	add    $0x10,%esp
-  p->context->eip = (uint)forkret;
-801038a1:	c7 40 10 e0 38 10 80 	movl   $0x801038e0,0x10(%eax)
-}
-801038a8:	89 d8                	mov    %ebx,%eax
-801038aa:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801038ad:	c9                   	leave
-801038ae:	c3                   	ret
-801038af:	90                   	nop
-  release(&ptable.lock);
-801038b0:	83 ec 0c             	sub    $0xc,%esp
-  return 0;
-801038b3:	31 db                	xor    %ebx,%ebx
-  release(&ptable.lock);
-801038b5:	68 40 1d 11 80       	push   $0x80111d40
-801038ba:	e8 61 0d 00 00       	call   80104620 <release>
-  return 0;
-801038bf:	83 c4 10             	add    $0x10,%esp
-}
-801038c2:	89 d8                	mov    %ebx,%eax
-801038c4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801038c7:	c9                   	leave
-801038c8:	c3                   	ret
-    p->state = UNUSED;
-801038c9:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
-  return 0;
-801038d0:	31 db                	xor    %ebx,%ebx
-801038d2:	eb ee                	jmp    801038c2 <allocproc+0xb2>
-801038d4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801038db:	00 
-801038dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801038e0 <forkret>:
-
-// A fork child's very first scheduling by scheduler()
-// will swtch here.  "Return" to user space.
-void
-forkret(void)
-{
-801038e0:	55                   	push   %ebp
-801038e1:	89 e5                	mov    %esp,%ebp
-801038e3:	83 ec 14             	sub    $0x14,%esp
-  static int first = 1;
-  // Still holding ptable.lock from scheduler.
-  release(&ptable.lock);
-801038e6:	68 40 1d 11 80       	push   $0x80111d40
-801038eb:	e8 30 0d 00 00       	call   80104620 <release>
-
-  if (first) {
-801038f0:	a1 00 a0 10 80       	mov    0x8010a000,%eax
-801038f5:	83 c4 10             	add    $0x10,%esp
-801038f8:	85 c0                	test   %eax,%eax
-801038fa:	75 04                	jne    80103900 <forkret+0x20>
-    iinit(ROOTDEV);
-    initlog(ROOTDEV);
-  }
-
-  // Return to "caller", actually trapret (see allocproc).
-}
-801038fc:	c9                   	leave
-801038fd:	c3                   	ret
-801038fe:	66 90                	xchg   %ax,%ax
-    first = 0;
-80103900:	c7 05 00 a0 10 80 00 	movl   $0x0,0x8010a000
-80103907:	00 00 00 
-    iinit(ROOTDEV);
-8010390a:	83 ec 0c             	sub    $0xc,%esp
-8010390d:	6a 01                	push   $0x1
-8010390f:	e8 dc dc ff ff       	call   801015f0 <iinit>
-    initlog(ROOTDEV);
-80103914:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-8010391b:	e8 f0 f3 ff ff       	call   80102d10 <initlog>
-}
-80103920:	83 c4 10             	add    $0x10,%esp
-80103923:	c9                   	leave
-80103924:	c3                   	ret
-80103925:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010392c:	00 
-8010392d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103930 <print_mem_layout>:
-void print_mem_layout() {
-80103930:	55                   	push   %ebp
-80103931:	89 e5                	mov    %esp,%ebp
-80103933:	53                   	push   %ebx
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-80103934:	bb 74 1d 11 80       	mov    $0x80111d74,%ebx
-void print_mem_layout() {
-80103939:	83 ec 10             	sub    $0x10,%esp
-  cprintf("Printing Memory Layout\n");
-8010393c:	68 b1 74 10 80       	push   $0x801074b1
-80103941:	e8 6a cd ff ff       	call   801006b0 <cprintf>
-  cprintf("PID\tNUM_PAGES\n");
-80103946:	c7 04 24 c9 74 10 80 	movl   $0x801074c9,(%esp)
-8010394d:	e8 5e cd ff ff       	call   801006b0 <cprintf>
-80103952:	83 c4 10             	add    $0x10,%esp
-80103955:	8d 76 00             	lea    0x0(%esi),%esi
-    if(p->state == RUNNING || p->state == RUNNABLE || p->state == SLEEPING) {
-80103958:	8b 43 0c             	mov    0xc(%ebx),%eax
-8010395b:	83 e8 02             	sub    $0x2,%eax
-8010395e:	83 f8 02             	cmp    $0x2,%eax
-80103961:	77 2b                	ja     8010398e <print_mem_layout+0x5e>
-      if(p->pid >= 1) {
-80103963:	8b 53 10             	mov    0x10(%ebx),%edx
-80103966:	85 d2                	test   %edx,%edx
-80103968:	7e 24                	jle    8010398e <print_mem_layout+0x5e>
-        int num_pages = p->sz / PGSIZE;
-8010396a:	8b 03                	mov    (%ebx),%eax
-8010396c:	89 c1                	mov    %eax,%ecx
-        if(p->sz % PGSIZE)
-8010396e:	25 ff 0f 00 00       	and    $0xfff,%eax
-        int num_pages = p->sz / PGSIZE;
-80103973:	c1 e9 0c             	shr    $0xc,%ecx
-          num_pages++;  // If not perfectly divisible, count extra page
-80103976:	83 f8 01             	cmp    $0x1,%eax
-80103979:	83 d9 ff             	sbb    $0xffffffff,%ecx
-        cprintf("%d\t%d\n", p->pid, num_pages);
-8010397c:	83 ec 04             	sub    $0x4,%esp
-8010397f:	51                   	push   %ecx
-80103980:	52                   	push   %edx
-80103981:	68 d8 74 10 80       	push   $0x801074d8
-80103986:	e8 25 cd ff ff       	call   801006b0 <cprintf>
-8010398b:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
-8010398e:	83 c3 7c             	add    $0x7c,%ebx
-80103991:	81 fb 74 3c 11 80    	cmp    $0x80113c74,%ebx
-80103997:	75 bf                	jne    80103958 <print_mem_layout+0x28>
-}
-80103999:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010399c:	c9                   	leave
-8010399d:	c3                   	ret
-8010399e:	66 90                	xchg   %ax,%ax
-
-801039a0 <pinit>:
-{
-801039a0:	55                   	push   %ebp
-801039a1:	89 e5                	mov    %esp,%ebp
-801039a3:	83 ec 10             	sub    $0x10,%esp
-  initlock(&ptable.lock, "ptable");
-801039a6:	68 df 74 10 80       	push   $0x801074df
-801039ab:	68 40 1d 11 80       	push   $0x80111d40
-801039b0:	e8 db 0a 00 00       	call   80104490 <initlock>
-}
-801039b5:	83 c4 10             	add    $0x10,%esp
-801039b8:	c9                   	leave
-801039b9:	c3                   	ret
-801039ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801039c0 <mycpu>:
-{
-801039c0:	55                   	push   %ebp
-801039c1:	89 e5                	mov    %esp,%ebp
-801039c3:	56                   	push   %esi
-801039c4:	53                   	push   %ebx
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-801039c5:	9c                   	pushf
-801039c6:	58                   	pop    %eax
-  if(readeflags()&FL_IF)
-801039c7:	f6 c4 02             	test   $0x2,%ah
-801039ca:	75 46                	jne    80103a12 <mycpu+0x52>
-  apicid = lapicid();
-801039cc:	e8 6f ef ff ff       	call   80102940 <lapicid>
-  for (i = 0; i < ncpu; ++i) {
-801039d1:	8b 35 a4 17 11 80    	mov    0x801117a4,%esi
-801039d7:	85 f6                	test   %esi,%esi
-801039d9:	7e 2a                	jle    80103a05 <mycpu+0x45>
-801039db:	31 d2                	xor    %edx,%edx
-801039dd:	eb 08                	jmp    801039e7 <mycpu+0x27>
-801039df:	90                   	nop
-801039e0:	83 c2 01             	add    $0x1,%edx
-801039e3:	39 f2                	cmp    %esi,%edx
-801039e5:	74 1e                	je     80103a05 <mycpu+0x45>
-    if (cpus[i].apicid == apicid)
-801039e7:	69 ca b0 00 00 00    	imul   $0xb0,%edx,%ecx
-801039ed:	0f b6 99 c0 17 11 80 	movzbl -0x7feee840(%ecx),%ebx
-801039f4:	39 c3                	cmp    %eax,%ebx
-801039f6:	75 e8                	jne    801039e0 <mycpu+0x20>
-}
-801039f8:	8d 65 f8             	lea    -0x8(%ebp),%esp
-      return &cpus[i];
-801039fb:	8d 81 c0 17 11 80    	lea    -0x7feee840(%ecx),%eax
-}
-80103a01:	5b                   	pop    %ebx
-80103a02:	5e                   	pop    %esi
-80103a03:	5d                   	pop    %ebp
-80103a04:	c3                   	ret
-  panic("unknown apicid\n");
-80103a05:	83 ec 0c             	sub    $0xc,%esp
-80103a08:	68 e6 74 10 80       	push   $0x801074e6
-80103a0d:	e8 6e c9 ff ff       	call   80100380 <panic>
-    panic("mycpu called with interrupts enabled\n");
-80103a12:	83 ec 0c             	sub    $0xc,%esp
-80103a15:	68 48 78 10 80       	push   $0x80107848
-80103a1a:	e8 61 c9 ff ff       	call   80100380 <panic>
-80103a1f:	90                   	nop
-
-80103a20 <cpuid>:
-cpuid() {
-80103a20:	55                   	push   %ebp
-80103a21:	89 e5                	mov    %esp,%ebp
-80103a23:	83 ec 08             	sub    $0x8,%esp
-  return mycpu()-cpus;
-80103a26:	e8 95 ff ff ff       	call   801039c0 <mycpu>
-}
-80103a2b:	c9                   	leave
-  return mycpu()-cpus;
-80103a2c:	2d c0 17 11 80       	sub    $0x801117c0,%eax
-80103a31:	c1 f8 04             	sar    $0x4,%eax
-80103a34:	69 c0 a3 8b 2e ba    	imul   $0xba2e8ba3,%eax,%eax
-}
-80103a3a:	c3                   	ret
-80103a3b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80103a40 <myproc>:
-myproc(void) {
-80103a40:	55                   	push   %ebp
-80103a41:	89 e5                	mov    %esp,%ebp
-80103a43:	53                   	push   %ebx
-80103a44:	83 ec 04             	sub    $0x4,%esp
-  pushcli();
-80103a47:	e8 e4 0a 00 00       	call   80104530 <pushcli>
-  c = mycpu();
-80103a4c:	e8 6f ff ff ff       	call   801039c0 <mycpu>
-  p = c->proc;
-80103a51:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103a57:	e8 24 0b 00 00       	call   80104580 <popcli>
-}
-80103a5c:	89 d8                	mov    %ebx,%eax
-80103a5e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103a61:	c9                   	leave
-80103a62:	c3                   	ret
-80103a63:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103a6a:	00 
-80103a6b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80103a70 <userinit>:
-{
-80103a70:	55                   	push   %ebp
-80103a71:	89 e5                	mov    %esp,%ebp
-80103a73:	53                   	push   %ebx
-80103a74:	83 ec 04             	sub    $0x4,%esp
-  p = allocproc();
-80103a77:	e8 94 fd ff ff       	call   80103810 <allocproc>
-80103a7c:	89 c3                	mov    %eax,%ebx
-  initproc = p;
-80103a7e:	a3 74 3c 11 80       	mov    %eax,0x80113c74
-  if((p->pgdir = setupkvm()) == 0)
-80103a83:	e8 78 34 00 00       	call   80106f00 <setupkvm>
-80103a88:	89 43 04             	mov    %eax,0x4(%ebx)
-80103a8b:	85 c0                	test   %eax,%eax
-80103a8d:	0f 84 bd 00 00 00    	je     80103b50 <userinit+0xe0>
-  inituvm(p->pgdir, _binary_initcode_start, (int)_binary_initcode_size);
-80103a93:	83 ec 04             	sub    $0x4,%esp
-80103a96:	68 2c 00 00 00       	push   $0x2c
-80103a9b:	68 60 a4 10 80       	push   $0x8010a460
-80103aa0:	50                   	push   %eax
-80103aa1:	e8 3a 31 00 00       	call   80106be0 <inituvm>
-  memset(p->tf, 0, sizeof(*p->tf));
-80103aa6:	83 c4 0c             	add    $0xc,%esp
-  p->sz = PGSIZE;
-80103aa9:	c7 03 00 10 00 00    	movl   $0x1000,(%ebx)
-  memset(p->tf, 0, sizeof(*p->tf));
-80103aaf:	6a 4c                	push   $0x4c
-80103ab1:	6a 00                	push   $0x0
-80103ab3:	ff 73 18             	push   0x18(%ebx)
-80103ab6:	e8 c5 0c 00 00       	call   80104780 <memset>
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-80103abb:	8b 43 18             	mov    0x18(%ebx),%eax
-80103abe:	ba 1b 00 00 00       	mov    $0x1b,%edx
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-80103ac3:	83 c4 0c             	add    $0xc,%esp
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-80103ac6:	b9 23 00 00 00       	mov    $0x23,%ecx
-  p->tf->cs = (SEG_UCODE << 3) | DPL_USER;
-80103acb:	66 89 50 3c          	mov    %dx,0x3c(%eax)
-  p->tf->ds = (SEG_UDATA << 3) | DPL_USER;
-80103acf:	8b 43 18             	mov    0x18(%ebx),%eax
-80103ad2:	66 89 48 2c          	mov    %cx,0x2c(%eax)
-  p->tf->es = p->tf->ds;
-80103ad6:	8b 43 18             	mov    0x18(%ebx),%eax
-80103ad9:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103add:	66 89 50 28          	mov    %dx,0x28(%eax)
-  p->tf->ss = p->tf->ds;
-80103ae1:	8b 43 18             	mov    0x18(%ebx),%eax
-80103ae4:	0f b7 50 2c          	movzwl 0x2c(%eax),%edx
-80103ae8:	66 89 50 48          	mov    %dx,0x48(%eax)
-  p->tf->eflags = FL_IF;
-80103aec:	8b 43 18             	mov    0x18(%ebx),%eax
-80103aef:	c7 40 40 00 02 00 00 	movl   $0x200,0x40(%eax)
-  p->tf->esp = PGSIZE;
-80103af6:	8b 43 18             	mov    0x18(%ebx),%eax
-80103af9:	c7 40 44 00 10 00 00 	movl   $0x1000,0x44(%eax)
-  p->tf->eip = 0;  // beginning of initcode.S
-80103b00:	8b 43 18             	mov    0x18(%ebx),%eax
-80103b03:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
-  safestrcpy(p->name, "initcode", sizeof(p->name));
-80103b0a:	8d 43 6c             	lea    0x6c(%ebx),%eax
-80103b0d:	6a 10                	push   $0x10
-80103b0f:	68 0f 75 10 80       	push   $0x8010750f
-80103b14:	50                   	push   %eax
-80103b15:	e8 16 0e 00 00       	call   80104930 <safestrcpy>
-  p->cwd = namei("/");
-80103b1a:	c7 04 24 18 75 10 80 	movl   $0x80107518,(%esp)
-80103b21:	e8 ca e5 ff ff       	call   801020f0 <namei>
-80103b26:	89 43 68             	mov    %eax,0x68(%ebx)
-  acquire(&ptable.lock);
-80103b29:	c7 04 24 40 1d 11 80 	movl   $0x80111d40,(%esp)
-80103b30:	e8 4b 0b 00 00       	call   80104680 <acquire>
-  p->state = RUNNABLE;
-80103b35:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
-  release(&ptable.lock);
-80103b3c:	c7 04 24 40 1d 11 80 	movl   $0x80111d40,(%esp)
-80103b43:	e8 d8 0a 00 00       	call   80104620 <release>
-}
-80103b48:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80103b4b:	83 c4 10             	add    $0x10,%esp
-80103b4e:	c9                   	leave
-80103b4f:	c3                   	ret
-    panic("userinit: out of memory?");
-80103b50:	83 ec 0c             	sub    $0xc,%esp
-80103b53:	68 f6 74 10 80       	push   $0x801074f6
-80103b58:	e8 23 c8 ff ff       	call   80100380 <panic>
-80103b5d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80103b60 <growproc>:
-{
-80103b60:	55                   	push   %ebp
-80103b61:	89 e5                	mov    %esp,%ebp
-80103b63:	56                   	push   %esi
-80103b64:	53                   	push   %ebx
-80103b65:	8b 75 08             	mov    0x8(%ebp),%esi
-  pushcli();
-80103b68:	e8 c3 09 00 00       	call   80104530 <pushcli>
-  c = mycpu();
-80103b6d:	e8 4e fe ff ff       	call   801039c0 <mycpu>
-  p = c->proc;
-80103b72:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103b78:	e8 03 0a 00 00       	call   80104580 <popcli>
-  sz = curproc->sz;
-80103b7d:	8b 03                	mov    (%ebx),%eax
-  if(n > 0){
-80103b7f:	85 f6                	test   %esi,%esi
-80103b81:	7f 1d                	jg     80103ba0 <growproc+0x40>
-  } else if(n < 0){
-80103b83:	75 3b                	jne    80103bc0 <growproc+0x60>
-  switchuvm(curproc);
-80103b85:	83 ec 0c             	sub    $0xc,%esp
-  curproc->sz = sz;
-80103b88:	89 03                	mov    %eax,(%ebx)
-  switchuvm(curproc);
-80103b8a:	53                   	push   %ebx
-80103b8b:	e8 40 2f 00 00       	call   80106ad0 <switchuvm>
-  return 0;
-80103b90:	83 c4 10             	add    $0x10,%esp
-80103b93:	31 c0                	xor    %eax,%eax
-}
-80103b95:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103b98:	5b                   	pop    %ebx
-80103b99:	5e                   	pop    %esi
-80103b9a:	5d                   	pop    %ebp
-80103b9b:	c3                   	ret
-80103b9c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if((sz = allocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103ba0:	83 ec 04             	sub    $0x4,%esp
-80103ba3:	01 c6                	add    %eax,%esi
-80103ba5:	56                   	push   %esi
-80103ba6:	50                   	push   %eax
-80103ba7:	ff 73 04             	push   0x4(%ebx)
-80103baa:	e8 81 31 00 00       	call   80106d30 <allocuvm>
-80103baf:	83 c4 10             	add    $0x10,%esp
-80103bb2:	85 c0                	test   %eax,%eax
-80103bb4:	75 cf                	jne    80103b85 <growproc+0x25>
-      return -1;
-80103bb6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80103bbb:	eb d8                	jmp    80103b95 <growproc+0x35>
-80103bbd:	8d 76 00             	lea    0x0(%esi),%esi
-    if((sz = deallocuvm(curproc->pgdir, sz, sz + n)) == 0)
-80103bc0:	83 ec 04             	sub    $0x4,%esp
-80103bc3:	01 c6                	add    %eax,%esi
-80103bc5:	56                   	push   %esi
-80103bc6:	50                   	push   %eax
-80103bc7:	ff 73 04             	push   0x4(%ebx)
-80103bca:	e8 81 32 00 00       	call   80106e50 <deallocuvm>
-80103bcf:	83 c4 10             	add    $0x10,%esp
-80103bd2:	85 c0                	test   %eax,%eax
-80103bd4:	75 af                	jne    80103b85 <growproc+0x25>
-80103bd6:	eb de                	jmp    80103bb6 <growproc+0x56>
-80103bd8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103bdf:	00 
-
-80103be0 <fork>:
-{
-80103be0:	55                   	push   %ebp
-80103be1:	89 e5                	mov    %esp,%ebp
-80103be3:	57                   	push   %edi
-80103be4:	56                   	push   %esi
-80103be5:	53                   	push   %ebx
-80103be6:	83 ec 1c             	sub    $0x1c,%esp
-  pushcli();
-80103be9:	e8 42 09 00 00       	call   80104530 <pushcli>
-  c = mycpu();
-80103bee:	e8 cd fd ff ff       	call   801039c0 <mycpu>
-  p = c->proc;
-80103bf3:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103bf9:	e8 82 09 00 00       	call   80104580 <popcli>
-  if((np = allocproc()) == 0){
-80103bfe:	e8 0d fc ff ff       	call   80103810 <allocproc>
-80103c03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80103c06:	85 c0                	test   %eax,%eax
-80103c08:	0f 84 d6 00 00 00    	je     80103ce4 <fork+0x104>
-  if((np->pgdir = copyuvm(curproc->pgdir, curproc->sz)) == 0){
-80103c0e:	83 ec 08             	sub    $0x8,%esp
-80103c11:	ff 33                	push   (%ebx)
-80103c13:	89 c7                	mov    %eax,%edi
-80103c15:	ff 73 04             	push   0x4(%ebx)
-80103c18:	e8 d3 33 00 00       	call   80106ff0 <copyuvm>
-80103c1d:	83 c4 10             	add    $0x10,%esp
-80103c20:	89 47 04             	mov    %eax,0x4(%edi)
-80103c23:	85 c0                	test   %eax,%eax
-80103c25:	0f 84 9a 00 00 00    	je     80103cc5 <fork+0xe5>
-  np->sz = curproc->sz;
-80103c2b:	8b 03                	mov    (%ebx),%eax
-80103c2d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80103c30:	89 01                	mov    %eax,(%ecx)
-  *np->tf = *curproc->tf;
-80103c32:	8b 79 18             	mov    0x18(%ecx),%edi
-  np->parent = curproc;
-80103c35:	89 c8                	mov    %ecx,%eax
-80103c37:	89 59 14             	mov    %ebx,0x14(%ecx)
-  *np->tf = *curproc->tf;
-80103c3a:	b9 13 00 00 00       	mov    $0x13,%ecx
-80103c3f:	8b 73 18             	mov    0x18(%ebx),%esi
-80103c42:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
-  for(i = 0; i < NOFILE; i++)
-80103c44:	31 f6                	xor    %esi,%esi
-  np->tf->eax = 0;
-80103c46:	8b 40 18             	mov    0x18(%eax),%eax
-80103c49:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
-    if(curproc->ofile[i])
-80103c50:	8b 44 b3 28          	mov    0x28(%ebx,%esi,4),%eax
-80103c54:	85 c0                	test   %eax,%eax
-80103c56:	74 13                	je     80103c6b <fork+0x8b>
-      np->ofile[i] = filedup(curproc->ofile[i]);
-80103c58:	83 ec 0c             	sub    $0xc,%esp
-80103c5b:	50                   	push   %eax
-80103c5c:	e8 cf d2 ff ff       	call   80100f30 <filedup>
-80103c61:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-80103c64:	83 c4 10             	add    $0x10,%esp
-80103c67:	89 44 b2 28          	mov    %eax,0x28(%edx,%esi,4)
-  for(i = 0; i < NOFILE; i++)
-80103c6b:	83 c6 01             	add    $0x1,%esi
-80103c6e:	83 fe 10             	cmp    $0x10,%esi
-80103c71:	75 dd                	jne    80103c50 <fork+0x70>
-  np->cwd = idup(curproc->cwd);
-80103c73:	83 ec 0c             	sub    $0xc,%esp
-80103c76:	ff 73 68             	push   0x68(%ebx)
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103c79:	83 c3 6c             	add    $0x6c,%ebx
-  np->cwd = idup(curproc->cwd);
-80103c7c:	e8 5f db ff ff       	call   801017e0 <idup>
-80103c81:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103c84:	83 c4 0c             	add    $0xc,%esp
-  np->cwd = idup(curproc->cwd);
-80103c87:	89 47 68             	mov    %eax,0x68(%edi)
-  safestrcpy(np->name, curproc->name, sizeof(curproc->name));
-80103c8a:	8d 47 6c             	lea    0x6c(%edi),%eax
-80103c8d:	6a 10                	push   $0x10
-80103c8f:	53                   	push   %ebx
-80103c90:	50                   	push   %eax
-80103c91:	e8 9a 0c 00 00       	call   80104930 <safestrcpy>
-  pid = np->pid;
-80103c96:	8b 5f 10             	mov    0x10(%edi),%ebx
-  acquire(&ptable.lock);
-80103c99:	c7 04 24 40 1d 11 80 	movl   $0x80111d40,(%esp)
-80103ca0:	e8 db 09 00 00       	call   80104680 <acquire>
-  np->state = RUNNABLE;
-80103ca5:	c7 47 0c 03 00 00 00 	movl   $0x3,0xc(%edi)
-  release(&ptable.lock);
-80103cac:	c7 04 24 40 1d 11 80 	movl   $0x80111d40,(%esp)
-80103cb3:	e8 68 09 00 00       	call   80104620 <release>
-  return pid;
-80103cb8:	83 c4 10             	add    $0x10,%esp
-}
-80103cbb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80103cbe:	89 d8                	mov    %ebx,%eax
-80103cc0:	5b                   	pop    %ebx
-80103cc1:	5e                   	pop    %esi
-80103cc2:	5f                   	pop    %edi
-80103cc3:	5d                   	pop    %ebp
-80103cc4:	c3                   	ret
-    kfree(np->kstack);
-80103cc5:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
-80103cc8:	83 ec 0c             	sub    $0xc,%esp
-80103ccb:	ff 73 08             	push   0x8(%ebx)
-80103cce:	e8 3d e8 ff ff       	call   80102510 <kfree>
-    np->kstack = 0;
-80103cd3:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
-    return -1;
-80103cda:	83 c4 10             	add    $0x10,%esp
-    np->state = UNUSED;
-80103cdd:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
-    return -1;
-80103ce4:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80103ce9:	eb d0                	jmp    80103cbb <fork+0xdb>
-80103ceb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80103cf0 <scheduler>:
-{
-80103cf0:	55                   	push   %ebp
-80103cf1:	89 e5                	mov    %esp,%ebp
-80103cf3:	57                   	push   %edi
-80103cf4:	56                   	push   %esi
-80103cf5:	53                   	push   %ebx
-80103cf6:	83 ec 0c             	sub    $0xc,%esp
-  struct cpu *c = mycpu();
-80103cf9:	e8 c2 fc ff ff       	call   801039c0 <mycpu>
-  c->proc = 0;
-80103cfe:	c7 80 ac 00 00 00 00 	movl   $0x0,0xac(%eax)
-80103d05:	00 00 00 
-  struct cpu *c = mycpu();
-80103d08:	89 c6                	mov    %eax,%esi
-  c->proc = 0;
-80103d0a:	8d 78 04             	lea    0x4(%eax),%edi
-80103d0d:	8d 76 00             	lea    0x0(%esi),%esi
-  asm volatile("sti");
-80103d10:	fb                   	sti
-    acquire(&ptable.lock);
-80103d11:	83 ec 0c             	sub    $0xc,%esp
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103d14:	bb 74 1d 11 80       	mov    $0x80111d74,%ebx
-    acquire(&ptable.lock);
-80103d19:	68 40 1d 11 80       	push   $0x80111d40
-80103d1e:	e8 5d 09 00 00       	call   80104680 <acquire>
-80103d23:	83 c4 10             	add    $0x10,%esp
-80103d26:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103d2d:	00 
-80103d2e:	66 90                	xchg   %ax,%ax
-      if(p->state != RUNNABLE)
-80103d30:	83 7b 0c 03          	cmpl   $0x3,0xc(%ebx)
-80103d34:	75 33                	jne    80103d69 <scheduler+0x79>
-      switchuvm(p);
-80103d36:	83 ec 0c             	sub    $0xc,%esp
-      c->proc = p;
-80103d39:	89 9e ac 00 00 00    	mov    %ebx,0xac(%esi)
-      switchuvm(p);
-80103d3f:	53                   	push   %ebx
-80103d40:	e8 8b 2d 00 00       	call   80106ad0 <switchuvm>
-      swtch(&(c->scheduler), p->context);
-80103d45:	58                   	pop    %eax
-80103d46:	5a                   	pop    %edx
-80103d47:	ff 73 1c             	push   0x1c(%ebx)
-80103d4a:	57                   	push   %edi
-      p->state = RUNNING;
-80103d4b:	c7 43 0c 04 00 00 00 	movl   $0x4,0xc(%ebx)
-      swtch(&(c->scheduler), p->context);
-80103d52:	e8 34 0c 00 00       	call   8010498b <swtch>
-      switchkvm();
-80103d57:	e8 64 2d 00 00       	call   80106ac0 <switchkvm>
-      c->proc = 0;
-80103d5c:	83 c4 10             	add    $0x10,%esp
-80103d5f:	c7 86 ac 00 00 00 00 	movl   $0x0,0xac(%esi)
-80103d66:	00 00 00 
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103d69:	83 c3 7c             	add    $0x7c,%ebx
-80103d6c:	81 fb 74 3c 11 80    	cmp    $0x80113c74,%ebx
-80103d72:	75 bc                	jne    80103d30 <scheduler+0x40>
-    release(&ptable.lock);
-80103d74:	83 ec 0c             	sub    $0xc,%esp
-80103d77:	68 40 1d 11 80       	push   $0x80111d40
-80103d7c:	e8 9f 08 00 00       	call   80104620 <release>
-    sti();
-80103d81:	83 c4 10             	add    $0x10,%esp
-80103d84:	eb 8a                	jmp    80103d10 <scheduler+0x20>
-80103d86:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103d8d:	00 
-80103d8e:	66 90                	xchg   %ax,%ax
-
-80103d90 <sched>:
-{
-80103d90:	55                   	push   %ebp
-80103d91:	89 e5                	mov    %esp,%ebp
-80103d93:	56                   	push   %esi
-80103d94:	53                   	push   %ebx
-  pushcli();
-80103d95:	e8 96 07 00 00       	call   80104530 <pushcli>
-  c = mycpu();
-80103d9a:	e8 21 fc ff ff       	call   801039c0 <mycpu>
-  p = c->proc;
-80103d9f:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80103da5:	e8 d6 07 00 00       	call   80104580 <popcli>
-  if(!holding(&ptable.lock))
-80103daa:	83 ec 0c             	sub    $0xc,%esp
-80103dad:	68 40 1d 11 80       	push   $0x80111d40
-80103db2:	e8 29 08 00 00       	call   801045e0 <holding>
-80103db7:	83 c4 10             	add    $0x10,%esp
-80103dba:	85 c0                	test   %eax,%eax
-80103dbc:	74 4f                	je     80103e0d <sched+0x7d>
-  if(mycpu()->ncli != 1)
-80103dbe:	e8 fd fb ff ff       	call   801039c0 <mycpu>
-80103dc3:	83 b8 a4 00 00 00 01 	cmpl   $0x1,0xa4(%eax)
-80103dca:	75 68                	jne    80103e34 <sched+0xa4>
-  if(p->state == RUNNING)
-80103dcc:	83 7b 0c 04          	cmpl   $0x4,0xc(%ebx)
-80103dd0:	74 55                	je     80103e27 <sched+0x97>
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-80103dd2:	9c                   	pushf
-80103dd3:	58                   	pop    %eax
-  if(readeflags()&FL_IF)
-80103dd4:	f6 c4 02             	test   $0x2,%ah
-80103dd7:	75 41                	jne    80103e1a <sched+0x8a>
-  intena = mycpu()->intena;
-80103dd9:	e8 e2 fb ff ff       	call   801039c0 <mycpu>
-  swtch(&p->context, mycpu()->scheduler);
-80103dde:	83 c3 1c             	add    $0x1c,%ebx
-  intena = mycpu()->intena;
-80103de1:	8b b0 a8 00 00 00    	mov    0xa8(%eax),%esi
-  swtch(&p->context, mycpu()->scheduler);
-80103de7:	e8 d4 fb ff ff       	call   801039c0 <mycpu>
-80103dec:	83 ec 08             	sub    $0x8,%esp
-80103def:	ff 70 04             	push   0x4(%eax)
-80103df2:	53                   	push   %ebx
-80103df3:	e8 93 0b 00 00       	call   8010498b <swtch>
-  mycpu()->intena = intena;
-80103df8:	e8 c3 fb ff ff       	call   801039c0 <mycpu>
-}
-80103dfd:	83 c4 10             	add    $0x10,%esp
-  mycpu()->intena = intena;
-80103e00:	89 b0 a8 00 00 00    	mov    %esi,0xa8(%eax)
-}
-80103e06:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80103e09:	5b                   	pop    %ebx
-80103e0a:	5e                   	pop    %esi
-80103e0b:	5d                   	pop    %ebp
-80103e0c:	c3                   	ret
-    panic("sched ptable.lock");
-80103e0d:	83 ec 0c             	sub    $0xc,%esp
-80103e10:	68 1a 75 10 80       	push   $0x8010751a
-80103e15:	e8 66 c5 ff ff       	call   80100380 <panic>
-    panic("sched interruptible");
-80103e1a:	83 ec 0c             	sub    $0xc,%esp
-80103e1d:	68 46 75 10 80       	push   $0x80107546
-80103e22:	e8 59 c5 ff ff       	call   80100380 <panic>
-    panic("sched running");
-80103e27:	83 ec 0c             	sub    $0xc,%esp
-80103e2a:	68 38 75 10 80       	push   $0x80107538
-80103e2f:	e8 4c c5 ff ff       	call   80100380 <panic>
-    panic("sched locks");
-80103e34:	83 ec 0c             	sub    $0xc,%esp
-80103e37:	68 2c 75 10 80       	push   $0x8010752c
-80103e3c:	e8 3f c5 ff ff       	call   80100380 <panic>
-80103e41:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103e48:	00 
-80103e49:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80103e50 <exit>:
-{
-80103e50:	55                   	push   %ebp
-80103e51:	89 e5                	mov    %esp,%ebp
-80103e53:	57                   	push   %edi
-80103e54:	56                   	push   %esi
-80103e55:	53                   	push   %ebx
-80103e56:	83 ec 0c             	sub    $0xc,%esp
-  struct proc *curproc = myproc();
-80103e59:	e8 e2 fb ff ff       	call   80103a40 <myproc>
-  if(curproc == initproc)
-80103e5e:	39 05 74 3c 11 80    	cmp    %eax,0x80113c74
-80103e64:	0f 84 fd 00 00 00    	je     80103f67 <exit+0x117>
-80103e6a:	89 c3                	mov    %eax,%ebx
-80103e6c:	8d 70 28             	lea    0x28(%eax),%esi
-80103e6f:	8d 78 68             	lea    0x68(%eax),%edi
-80103e72:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(curproc->ofile[fd]){
-80103e78:	8b 06                	mov    (%esi),%eax
-80103e7a:	85 c0                	test   %eax,%eax
-80103e7c:	74 12                	je     80103e90 <exit+0x40>
-      fileclose(curproc->ofile[fd]);
-80103e7e:	83 ec 0c             	sub    $0xc,%esp
-80103e81:	50                   	push   %eax
-80103e82:	e8 f9 d0 ff ff       	call   80100f80 <fileclose>
-      curproc->ofile[fd] = 0;
-80103e87:	c7 06 00 00 00 00    	movl   $0x0,(%esi)
-80103e8d:	83 c4 10             	add    $0x10,%esp
-  for(fd = 0; fd < NOFILE; fd++){
-80103e90:	83 c6 04             	add    $0x4,%esi
-80103e93:	39 f7                	cmp    %esi,%edi
-80103e95:	75 e1                	jne    80103e78 <exit+0x28>
-  begin_op();
-80103e97:	e8 14 ef ff ff       	call   80102db0 <begin_op>
-  iput(curproc->cwd);
-80103e9c:	83 ec 0c             	sub    $0xc,%esp
-80103e9f:	ff 73 68             	push   0x68(%ebx)
-80103ea2:	e8 99 da ff ff       	call   80101940 <iput>
-  end_op();
-80103ea7:	e8 74 ef ff ff       	call   80102e20 <end_op>
-  curproc->cwd = 0;
-80103eac:	c7 43 68 00 00 00 00 	movl   $0x0,0x68(%ebx)
-  acquire(&ptable.lock);
-80103eb3:	c7 04 24 40 1d 11 80 	movl   $0x80111d40,(%esp)
-80103eba:	e8 c1 07 00 00       	call   80104680 <acquire>
-  wakeup1(curproc->parent);
-80103ebf:	8b 53 14             	mov    0x14(%ebx),%edx
-80103ec2:	83 c4 10             	add    $0x10,%esp
-static void
-wakeup1(void *chan)
-{
-  struct proc *p;
-
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103ec5:	b8 74 1d 11 80       	mov    $0x80111d74,%eax
-80103eca:	eb 0e                	jmp    80103eda <exit+0x8a>
-80103ecc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80103ed0:	83 c0 7c             	add    $0x7c,%eax
-80103ed3:	3d 74 3c 11 80       	cmp    $0x80113c74,%eax
-80103ed8:	74 1c                	je     80103ef6 <exit+0xa6>
-    if(p->state == SLEEPING && p->chan == chan)
-80103eda:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103ede:	75 f0                	jne    80103ed0 <exit+0x80>
-80103ee0:	3b 50 20             	cmp    0x20(%eax),%edx
-80103ee3:	75 eb                	jne    80103ed0 <exit+0x80>
-      p->state = RUNNABLE;
-80103ee5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103eec:	83 c0 7c             	add    $0x7c,%eax
-80103eef:	3d 74 3c 11 80       	cmp    $0x80113c74,%eax
-80103ef4:	75 e4                	jne    80103eda <exit+0x8a>
-      p->parent = initproc;
-80103ef6:	8b 0d 74 3c 11 80    	mov    0x80113c74,%ecx
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103efc:	ba 74 1d 11 80       	mov    $0x80111d74,%edx
-80103f01:	eb 10                	jmp    80103f13 <exit+0xc3>
-80103f03:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103f08:	83 c2 7c             	add    $0x7c,%edx
-80103f0b:	81 fa 74 3c 11 80    	cmp    $0x80113c74,%edx
-80103f11:	74 3b                	je     80103f4e <exit+0xfe>
-    if(p->parent == curproc){
-80103f13:	39 5a 14             	cmp    %ebx,0x14(%edx)
-80103f16:	75 f0                	jne    80103f08 <exit+0xb8>
-      if(p->state == ZOMBIE)
-80103f18:	83 7a 0c 05          	cmpl   $0x5,0xc(%edx)
-      p->parent = initproc;
-80103f1c:	89 4a 14             	mov    %ecx,0x14(%edx)
-      if(p->state == ZOMBIE)
-80103f1f:	75 e7                	jne    80103f08 <exit+0xb8>
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-80103f21:	b8 74 1d 11 80       	mov    $0x80111d74,%eax
-80103f26:	eb 12                	jmp    80103f3a <exit+0xea>
-80103f28:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103f2f:	00 
-80103f30:	83 c0 7c             	add    $0x7c,%eax
-80103f33:	3d 74 3c 11 80       	cmp    $0x80113c74,%eax
-80103f38:	74 ce                	je     80103f08 <exit+0xb8>
-    if(p->state == SLEEPING && p->chan == chan)
-80103f3a:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-80103f3e:	75 f0                	jne    80103f30 <exit+0xe0>
-80103f40:	3b 48 20             	cmp    0x20(%eax),%ecx
-80103f43:	75 eb                	jne    80103f30 <exit+0xe0>
-      p->state = RUNNABLE;
-80103f45:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-80103f4c:	eb e2                	jmp    80103f30 <exit+0xe0>
-  curproc->state = ZOMBIE;
-80103f4e:	c7 43 0c 05 00 00 00 	movl   $0x5,0xc(%ebx)
-  sched();
-80103f55:	e8 36 fe ff ff       	call   80103d90 <sched>
-  panic("zombie exit");
-80103f5a:	83 ec 0c             	sub    $0xc,%esp
-80103f5d:	68 67 75 10 80       	push   $0x80107567
-80103f62:	e8 19 c4 ff ff       	call   80100380 <panic>
-    panic("init exiting");
-80103f67:	83 ec 0c             	sub    $0xc,%esp
-80103f6a:	68 5a 75 10 80       	push   $0x8010755a
-80103f6f:	e8 0c c4 ff ff       	call   80100380 <panic>
-80103f74:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103f7b:	00 
-80103f7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80103f80 <wait>:
-{
-80103f80:	55                   	push   %ebp
-80103f81:	89 e5                	mov    %esp,%ebp
-80103f83:	56                   	push   %esi
-80103f84:	53                   	push   %ebx
-  pushcli();
-80103f85:	e8 a6 05 00 00       	call   80104530 <pushcli>
-  c = mycpu();
-80103f8a:	e8 31 fa ff ff       	call   801039c0 <mycpu>
-  p = c->proc;
-80103f8f:	8b b0 ac 00 00 00    	mov    0xac(%eax),%esi
-  popcli();
-80103f95:	e8 e6 05 00 00       	call   80104580 <popcli>
-  acquire(&ptable.lock);
-80103f9a:	83 ec 0c             	sub    $0xc,%esp
-80103f9d:	68 40 1d 11 80       	push   $0x80111d40
-80103fa2:	e8 d9 06 00 00       	call   80104680 <acquire>
-80103fa7:	83 c4 10             	add    $0x10,%esp
-    havekids = 0;
-80103faa:	31 c0                	xor    %eax,%eax
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103fac:	bb 74 1d 11 80       	mov    $0x80111d74,%ebx
-80103fb1:	eb 10                	jmp    80103fc3 <wait+0x43>
-80103fb3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-80103fb8:	83 c3 7c             	add    $0x7c,%ebx
-80103fbb:	81 fb 74 3c 11 80    	cmp    $0x80113c74,%ebx
-80103fc1:	74 1b                	je     80103fde <wait+0x5e>
-      if(p->parent != curproc)
-80103fc3:	39 73 14             	cmp    %esi,0x14(%ebx)
-80103fc6:	75 f0                	jne    80103fb8 <wait+0x38>
-      if(p->state == ZOMBIE){
-80103fc8:	83 7b 0c 05          	cmpl   $0x5,0xc(%ebx)
-80103fcc:	74 62                	je     80104030 <wait+0xb0>
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103fce:	83 c3 7c             	add    $0x7c,%ebx
-      havekids = 1;
-80103fd1:	b8 01 00 00 00       	mov    $0x1,%eax
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80103fd6:	81 fb 74 3c 11 80    	cmp    $0x80113c74,%ebx
-80103fdc:	75 e5                	jne    80103fc3 <wait+0x43>
-    if(!havekids || curproc->killed){
-80103fde:	85 c0                	test   %eax,%eax
-80103fe0:	0f 84 a0 00 00 00    	je     80104086 <wait+0x106>
-80103fe6:	8b 46 24             	mov    0x24(%esi),%eax
-80103fe9:	85 c0                	test   %eax,%eax
-80103feb:	0f 85 95 00 00 00    	jne    80104086 <wait+0x106>
-  pushcli();
-80103ff1:	e8 3a 05 00 00       	call   80104530 <pushcli>
-  c = mycpu();
-80103ff6:	e8 c5 f9 ff ff       	call   801039c0 <mycpu>
-  p = c->proc;
-80103ffb:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-80104001:	e8 7a 05 00 00       	call   80104580 <popcli>
-  if(p == 0)
-80104006:	85 db                	test   %ebx,%ebx
-80104008:	0f 84 8f 00 00 00    	je     8010409d <wait+0x11d>
-  p->chan = chan;
-8010400e:	89 73 20             	mov    %esi,0x20(%ebx)
-  p->state = SLEEPING;
-80104011:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
-  sched();
-80104018:	e8 73 fd ff ff       	call   80103d90 <sched>
-  p->chan = 0;
-8010401d:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
-}
-80104024:	eb 84                	jmp    80103faa <wait+0x2a>
-80104026:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010402d:	00 
-8010402e:	66 90                	xchg   %ax,%ax
-        kfree(p->kstack);
-80104030:	83 ec 0c             	sub    $0xc,%esp
-        pid = p->pid;
-80104033:	8b 73 10             	mov    0x10(%ebx),%esi
-        kfree(p->kstack);
-80104036:	ff 73 08             	push   0x8(%ebx)
-80104039:	e8 d2 e4 ff ff       	call   80102510 <kfree>
-        p->kstack = 0;
-8010403e:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
-        freevm(p->pgdir);
-80104045:	5a                   	pop    %edx
-80104046:	ff 73 04             	push   0x4(%ebx)
-80104049:	e8 32 2e 00 00       	call   80106e80 <freevm>
-        p->pid = 0;
-8010404e:	c7 43 10 00 00 00 00 	movl   $0x0,0x10(%ebx)
-        p->parent = 0;
-80104055:	c7 43 14 00 00 00 00 	movl   $0x0,0x14(%ebx)
-        p->name[0] = 0;
-8010405c:	c6 43 6c 00          	movb   $0x0,0x6c(%ebx)
-        p->killed = 0;
-80104060:	c7 43 24 00 00 00 00 	movl   $0x0,0x24(%ebx)
-        p->state = UNUSED;
-80104067:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
-        release(&ptable.lock);
-8010406e:	c7 04 24 40 1d 11 80 	movl   $0x80111d40,(%esp)
-80104075:	e8 a6 05 00 00       	call   80104620 <release>
-        return pid;
-8010407a:	83 c4 10             	add    $0x10,%esp
-}
-8010407d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104080:	89 f0                	mov    %esi,%eax
-80104082:	5b                   	pop    %ebx
-80104083:	5e                   	pop    %esi
-80104084:	5d                   	pop    %ebp
-80104085:	c3                   	ret
-      release(&ptable.lock);
-80104086:	83 ec 0c             	sub    $0xc,%esp
-      return -1;
-80104089:	be ff ff ff ff       	mov    $0xffffffff,%esi
-      release(&ptable.lock);
-8010408e:	68 40 1d 11 80       	push   $0x80111d40
-80104093:	e8 88 05 00 00       	call   80104620 <release>
-      return -1;
-80104098:	83 c4 10             	add    $0x10,%esp
-8010409b:	eb e0                	jmp    8010407d <wait+0xfd>
-    panic("sleep");
-8010409d:	83 ec 0c             	sub    $0xc,%esp
-801040a0:	68 73 75 10 80       	push   $0x80107573
-801040a5:	e8 d6 c2 ff ff       	call   80100380 <panic>
-801040aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801040b0 <yield>:
-{
-801040b0:	55                   	push   %ebp
-801040b1:	89 e5                	mov    %esp,%ebp
-801040b3:	53                   	push   %ebx
-801040b4:	83 ec 10             	sub    $0x10,%esp
-  acquire(&ptable.lock);  //DOC: yieldlock
-801040b7:	68 40 1d 11 80       	push   $0x80111d40
-801040bc:	e8 bf 05 00 00       	call   80104680 <acquire>
-  pushcli();
-801040c1:	e8 6a 04 00 00       	call   80104530 <pushcli>
-  c = mycpu();
-801040c6:	e8 f5 f8 ff ff       	call   801039c0 <mycpu>
-  p = c->proc;
-801040cb:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-801040d1:	e8 aa 04 00 00       	call   80104580 <popcli>
-  myproc()->state = RUNNABLE;
-801040d6:	c7 43 0c 03 00 00 00 	movl   $0x3,0xc(%ebx)
-  sched();
-801040dd:	e8 ae fc ff ff       	call   80103d90 <sched>
-  release(&ptable.lock);
-801040e2:	c7 04 24 40 1d 11 80 	movl   $0x80111d40,(%esp)
-801040e9:	e8 32 05 00 00       	call   80104620 <release>
-}
-801040ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801040f1:	83 c4 10             	add    $0x10,%esp
-801040f4:	c9                   	leave
-801040f5:	c3                   	ret
-801040f6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801040fd:	00 
-801040fe:	66 90                	xchg   %ax,%ax
-
-80104100 <sleep>:
-{
-80104100:	55                   	push   %ebp
-80104101:	89 e5                	mov    %esp,%ebp
-80104103:	57                   	push   %edi
-80104104:	56                   	push   %esi
-80104105:	53                   	push   %ebx
-80104106:	83 ec 0c             	sub    $0xc,%esp
-80104109:	8b 7d 08             	mov    0x8(%ebp),%edi
-8010410c:	8b 75 0c             	mov    0xc(%ebp),%esi
-  pushcli();
-8010410f:	e8 1c 04 00 00       	call   80104530 <pushcli>
-  c = mycpu();
-80104114:	e8 a7 f8 ff ff       	call   801039c0 <mycpu>
-  p = c->proc;
-80104119:	8b 98 ac 00 00 00    	mov    0xac(%eax),%ebx
-  popcli();
-8010411f:	e8 5c 04 00 00       	call   80104580 <popcli>
-  if(p == 0)
-80104124:	85 db                	test   %ebx,%ebx
-80104126:	0f 84 87 00 00 00    	je     801041b3 <sleep+0xb3>
-  if(lk == 0)
-8010412c:	85 f6                	test   %esi,%esi
-8010412e:	74 76                	je     801041a6 <sleep+0xa6>
-  if(lk != &ptable.lock){  //DOC: sleeplock0
-80104130:	81 fe 40 1d 11 80    	cmp    $0x80111d40,%esi
-80104136:	74 50                	je     80104188 <sleep+0x88>
-    acquire(&ptable.lock);  //DOC: sleeplock1
-80104138:	83 ec 0c             	sub    $0xc,%esp
-8010413b:	68 40 1d 11 80       	push   $0x80111d40
-80104140:	e8 3b 05 00 00       	call   80104680 <acquire>
-    release(lk);
-80104145:	89 34 24             	mov    %esi,(%esp)
-80104148:	e8 d3 04 00 00       	call   80104620 <release>
-  p->chan = chan;
-8010414d:	89 7b 20             	mov    %edi,0x20(%ebx)
-  p->state = SLEEPING;
-80104150:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
-  sched();
-80104157:	e8 34 fc ff ff       	call   80103d90 <sched>
-  p->chan = 0;
-8010415c:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
-    release(&ptable.lock);
-80104163:	c7 04 24 40 1d 11 80 	movl   $0x80111d40,(%esp)
-8010416a:	e8 b1 04 00 00       	call   80104620 <release>
-    acquire(lk);
-8010416f:	83 c4 10             	add    $0x10,%esp
-80104172:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-80104175:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104178:	5b                   	pop    %ebx
-80104179:	5e                   	pop    %esi
-8010417a:	5f                   	pop    %edi
-8010417b:	5d                   	pop    %ebp
-    acquire(lk);
-8010417c:	e9 ff 04 00 00       	jmp    80104680 <acquire>
-80104181:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  p->chan = chan;
-80104188:	89 7b 20             	mov    %edi,0x20(%ebx)
-  p->state = SLEEPING;
-8010418b:	c7 43 0c 02 00 00 00 	movl   $0x2,0xc(%ebx)
-  sched();
-80104192:	e8 f9 fb ff ff       	call   80103d90 <sched>
-  p->chan = 0;
-80104197:	c7 43 20 00 00 00 00 	movl   $0x0,0x20(%ebx)
-}
-8010419e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801041a1:	5b                   	pop    %ebx
-801041a2:	5e                   	pop    %esi
-801041a3:	5f                   	pop    %edi
-801041a4:	5d                   	pop    %ebp
-801041a5:	c3                   	ret
-    panic("sleep without lk");
-801041a6:	83 ec 0c             	sub    $0xc,%esp
-801041a9:	68 79 75 10 80       	push   $0x80107579
-801041ae:	e8 cd c1 ff ff       	call   80100380 <panic>
-    panic("sleep");
-801041b3:	83 ec 0c             	sub    $0xc,%esp
-801041b6:	68 73 75 10 80       	push   $0x80107573
-801041bb:	e8 c0 c1 ff ff       	call   80100380 <panic>
-
-801041c0 <wakeup>:
-}
-
-// Wake up all processes sleeping on chan.
-void
-wakeup(void *chan)
-{
-801041c0:	55                   	push   %ebp
-801041c1:	89 e5                	mov    %esp,%ebp
-801041c3:	53                   	push   %ebx
-801041c4:	83 ec 10             	sub    $0x10,%esp
-801041c7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&ptable.lock);
-801041ca:	68 40 1d 11 80       	push   $0x80111d40
-801041cf:	e8 ac 04 00 00       	call   80104680 <acquire>
-801041d4:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801041d7:	b8 74 1d 11 80       	mov    $0x80111d74,%eax
-801041dc:	eb 0c                	jmp    801041ea <wakeup+0x2a>
-801041de:	66 90                	xchg   %ax,%ax
-801041e0:	83 c0 7c             	add    $0x7c,%eax
-801041e3:	3d 74 3c 11 80       	cmp    $0x80113c74,%eax
-801041e8:	74 1c                	je     80104206 <wakeup+0x46>
-    if(p->state == SLEEPING && p->chan == chan)
-801041ea:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-801041ee:	75 f0                	jne    801041e0 <wakeup+0x20>
-801041f0:	3b 58 20             	cmp    0x20(%eax),%ebx
-801041f3:	75 eb                	jne    801041e0 <wakeup+0x20>
-      p->state = RUNNABLE;
-801041f5:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-801041fc:	83 c0 7c             	add    $0x7c,%eax
-801041ff:	3d 74 3c 11 80       	cmp    $0x80113c74,%eax
-80104204:	75 e4                	jne    801041ea <wakeup+0x2a>
-  wakeup1(chan);
-  release(&ptable.lock);
-80104206:	c7 45 08 40 1d 11 80 	movl   $0x80111d40,0x8(%ebp)
-}
-8010420d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104210:	c9                   	leave
-  release(&ptable.lock);
-80104211:	e9 0a 04 00 00       	jmp    80104620 <release>
-80104216:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010421d:	00 
-8010421e:	66 90                	xchg   %ax,%ax
-
-80104220 <kill>:
-// Kill the process with the given pid.
-// Process won't exit until it returns
-// to user space (see trap in trap.c).
-int
-kill(int pid)
-{
-80104220:	55                   	push   %ebp
-80104221:	89 e5                	mov    %esp,%ebp
-80104223:	53                   	push   %ebx
-80104224:	83 ec 10             	sub    $0x10,%esp
-80104227:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct proc *p;
-
-  acquire(&ptable.lock);
-8010422a:	68 40 1d 11 80       	push   $0x80111d40
-8010422f:	e8 4c 04 00 00       	call   80104680 <acquire>
-80104234:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-80104237:	b8 74 1d 11 80       	mov    $0x80111d74,%eax
-8010423c:	eb 0c                	jmp    8010424a <kill+0x2a>
-8010423e:	66 90                	xchg   %ax,%ax
-80104240:	83 c0 7c             	add    $0x7c,%eax
-80104243:	3d 74 3c 11 80       	cmp    $0x80113c74,%eax
-80104248:	74 36                	je     80104280 <kill+0x60>
-    if(p->pid == pid){
-8010424a:	39 58 10             	cmp    %ebx,0x10(%eax)
-8010424d:	75 f1                	jne    80104240 <kill+0x20>
-      p->killed = 1;
-      // Wake process from sleep if necessary.
-      if(p->state == SLEEPING)
-8010424f:	83 78 0c 02          	cmpl   $0x2,0xc(%eax)
-      p->killed = 1;
-80104253:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-      if(p->state == SLEEPING)
-8010425a:	75 07                	jne    80104263 <kill+0x43>
-        p->state = RUNNABLE;
-8010425c:	c7 40 0c 03 00 00 00 	movl   $0x3,0xc(%eax)
-      release(&ptable.lock);
-80104263:	83 ec 0c             	sub    $0xc,%esp
-80104266:	68 40 1d 11 80       	push   $0x80111d40
-8010426b:	e8 b0 03 00 00       	call   80104620 <release>
-      return 0;
-    }
-  }
-  release(&ptable.lock);
-  return -1;
-}
-80104270:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-      return 0;
-80104273:	83 c4 10             	add    $0x10,%esp
-80104276:	31 c0                	xor    %eax,%eax
-}
-80104278:	c9                   	leave
-80104279:	c3                   	ret
-8010427a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  release(&ptable.lock);
-80104280:	83 ec 0c             	sub    $0xc,%esp
-80104283:	68 40 1d 11 80       	push   $0x80111d40
-80104288:	e8 93 03 00 00       	call   80104620 <release>
-}
-8010428d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  return -1;
-80104290:	83 c4 10             	add    $0x10,%esp
-80104293:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104298:	c9                   	leave
-80104299:	c3                   	ret
-8010429a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-801042a0 <procdump>:
-// Print a process listing to console.  For debugging.
-// Runs when user types ^P on console.
-// No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
-{
-801042a0:	55                   	push   %ebp
-801042a1:	89 e5                	mov    %esp,%ebp
-801042a3:	57                   	push   %edi
-801042a4:	56                   	push   %esi
-801042a5:	8d 75 e8             	lea    -0x18(%ebp),%esi
-801042a8:	53                   	push   %ebx
-801042a9:	bb e0 1d 11 80       	mov    $0x80111de0,%ebx
-801042ae:	83 ec 3c             	sub    $0x3c,%esp
-801042b1:	eb 24                	jmp    801042d7 <procdump+0x37>
-801042b3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    if(p->state == SLEEPING){
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-      for(i=0; i<10 && pc[i] != 0; i++)
-        cprintf(" %p", pc[i]);
-    }
-    cprintf("\n");
-801042b8:	83 ec 0c             	sub    $0xc,%esp
-801042bb:	68 38 77 10 80       	push   $0x80107738
-801042c0:	e8 eb c3 ff ff       	call   801006b0 <cprintf>
-801042c5:	83 c4 10             	add    $0x10,%esp
-  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-801042c8:	83 c3 7c             	add    $0x7c,%ebx
-801042cb:	81 fb e0 3c 11 80    	cmp    $0x80113ce0,%ebx
-801042d1:	0f 84 81 00 00 00    	je     80104358 <procdump+0xb8>
-    if(p->state == UNUSED)
-801042d7:	8b 43 a0             	mov    -0x60(%ebx),%eax
-801042da:	85 c0                	test   %eax,%eax
-801042dc:	74 ea                	je     801042c8 <procdump+0x28>
-      state = "???";
-801042de:	ba 8a 75 10 80       	mov    $0x8010758a,%edx
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
-801042e3:	83 f8 05             	cmp    $0x5,%eax
-801042e6:	77 11                	ja     801042f9 <procdump+0x59>
-801042e8:	8b 14 85 60 7b 10 80 	mov    -0x7fef84a0(,%eax,4),%edx
-      state = "???";
-801042ef:	b8 8a 75 10 80       	mov    $0x8010758a,%eax
-801042f4:	85 d2                	test   %edx,%edx
-801042f6:	0f 44 d0             	cmove  %eax,%edx
-    cprintf("%d %s %s", p->pid, state, p->name);
-801042f9:	53                   	push   %ebx
-801042fa:	52                   	push   %edx
-801042fb:	ff 73 a4             	push   -0x5c(%ebx)
-801042fe:	68 8e 75 10 80       	push   $0x8010758e
-80104303:	e8 a8 c3 ff ff       	call   801006b0 <cprintf>
-    if(p->state == SLEEPING){
-80104308:	83 c4 10             	add    $0x10,%esp
-8010430b:	83 7b a0 02          	cmpl   $0x2,-0x60(%ebx)
-8010430f:	75 a7                	jne    801042b8 <procdump+0x18>
-      getcallerpcs((uint*)p->context->ebp+2, pc);
-80104311:	83 ec 08             	sub    $0x8,%esp
-80104314:	8d 45 c0             	lea    -0x40(%ebp),%eax
-80104317:	8d 7d c0             	lea    -0x40(%ebp),%edi
-8010431a:	50                   	push   %eax
-8010431b:	8b 43 b0             	mov    -0x50(%ebx),%eax
-8010431e:	8b 40 0c             	mov    0xc(%eax),%eax
-80104321:	83 c0 08             	add    $0x8,%eax
-80104324:	50                   	push   %eax
-80104325:	e8 86 01 00 00       	call   801044b0 <getcallerpcs>
-      for(i=0; i<10 && pc[i] != 0; i++)
-8010432a:	83 c4 10             	add    $0x10,%esp
-8010432d:	8d 76 00             	lea    0x0(%esi),%esi
-80104330:	8b 17                	mov    (%edi),%edx
-80104332:	85 d2                	test   %edx,%edx
-80104334:	74 82                	je     801042b8 <procdump+0x18>
-        cprintf(" %p", pc[i]);
-80104336:	83 ec 08             	sub    $0x8,%esp
-      for(i=0; i<10 && pc[i] != 0; i++)
-80104339:	83 c7 04             	add    $0x4,%edi
-        cprintf(" %p", pc[i]);
-8010433c:	52                   	push   %edx
-8010433d:	68 81 72 10 80       	push   $0x80107281
-80104342:	e8 69 c3 ff ff       	call   801006b0 <cprintf>
-      for(i=0; i<10 && pc[i] != 0; i++)
-80104347:	83 c4 10             	add    $0x10,%esp
-8010434a:	39 f7                	cmp    %esi,%edi
-8010434c:	75 e2                	jne    80104330 <procdump+0x90>
-8010434e:	e9 65 ff ff ff       	jmp    801042b8 <procdump+0x18>
-80104353:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  }
-}
-80104358:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010435b:	5b                   	pop    %ebx
-8010435c:	5e                   	pop    %esi
-8010435d:	5f                   	pop    %edi
-8010435e:	5d                   	pop    %ebp
-8010435f:	c3                   	ret
-
-80104360 <initsleeplock>:
-#include "spinlock.h"
-#include "sleeplock.h"
-
-void
-initsleeplock(struct sleeplock *lk, char *name)
-{
-80104360:	55                   	push   %ebp
-80104361:	89 e5                	mov    %esp,%ebp
-80104363:	53                   	push   %ebx
-80104364:	83 ec 0c             	sub    $0xc,%esp
-80104367:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  initlock(&lk->lk, "sleep lock");
-8010436a:	68 c1 75 10 80       	push   $0x801075c1
-8010436f:	8d 43 04             	lea    0x4(%ebx),%eax
-80104372:	50                   	push   %eax
-80104373:	e8 18 01 00 00       	call   80104490 <initlock>
-  lk->name = name;
-80104378:	8b 45 0c             	mov    0xc(%ebp),%eax
-  lk->locked = 0;
-8010437b:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-  lk->pid = 0;
-}
-80104381:	83 c4 10             	add    $0x10,%esp
-  lk->pid = 0;
-80104384:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
-  lk->name = name;
-8010438b:	89 43 38             	mov    %eax,0x38(%ebx)
-}
-8010438e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104391:	c9                   	leave
-80104392:	c3                   	ret
-80104393:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010439a:	00 
-8010439b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-801043a0 <acquiresleep>:
-
-void
-acquiresleep(struct sleeplock *lk)
-{
-801043a0:	55                   	push   %ebp
-801043a1:	89 e5                	mov    %esp,%ebp
-801043a3:	56                   	push   %esi
-801043a4:	53                   	push   %ebx
-801043a5:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&lk->lk);
-801043a8:	8d 73 04             	lea    0x4(%ebx),%esi
-801043ab:	83 ec 0c             	sub    $0xc,%esp
-801043ae:	56                   	push   %esi
-801043af:	e8 cc 02 00 00       	call   80104680 <acquire>
-  while (lk->locked) {
-801043b4:	8b 13                	mov    (%ebx),%edx
-801043b6:	83 c4 10             	add    $0x10,%esp
-801043b9:	85 d2                	test   %edx,%edx
-801043bb:	74 16                	je     801043d3 <acquiresleep+0x33>
-801043bd:	8d 76 00             	lea    0x0(%esi),%esi
-    sleep(lk, &lk->lk);
-801043c0:	83 ec 08             	sub    $0x8,%esp
-801043c3:	56                   	push   %esi
-801043c4:	53                   	push   %ebx
-801043c5:	e8 36 fd ff ff       	call   80104100 <sleep>
-  while (lk->locked) {
-801043ca:	8b 03                	mov    (%ebx),%eax
-801043cc:	83 c4 10             	add    $0x10,%esp
-801043cf:	85 c0                	test   %eax,%eax
-801043d1:	75 ed                	jne    801043c0 <acquiresleep+0x20>
-  }
-  lk->locked = 1;
-801043d3:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
-  lk->pid = myproc()->pid;
-801043d9:	e8 62 f6 ff ff       	call   80103a40 <myproc>
-801043de:	8b 40 10             	mov    0x10(%eax),%eax
-801043e1:	89 43 3c             	mov    %eax,0x3c(%ebx)
-  release(&lk->lk);
-801043e4:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-801043e7:	8d 65 f8             	lea    -0x8(%ebp),%esp
-801043ea:	5b                   	pop    %ebx
-801043eb:	5e                   	pop    %esi
-801043ec:	5d                   	pop    %ebp
-  release(&lk->lk);
-801043ed:	e9 2e 02 00 00       	jmp    80104620 <release>
-801043f2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801043f9:	00 
-801043fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104400 <releasesleep>:
-
-void
-releasesleep(struct sleeplock *lk)
-{
-80104400:	55                   	push   %ebp
-80104401:	89 e5                	mov    %esp,%ebp
-80104403:	56                   	push   %esi
-80104404:	53                   	push   %ebx
-80104405:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  acquire(&lk->lk);
-80104408:	8d 73 04             	lea    0x4(%ebx),%esi
-8010440b:	83 ec 0c             	sub    $0xc,%esp
-8010440e:	56                   	push   %esi
-8010440f:	e8 6c 02 00 00       	call   80104680 <acquire>
-  lk->locked = 0;
-80104414:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-  lk->pid = 0;
-8010441a:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%ebx)
-  wakeup(lk);
-80104421:	89 1c 24             	mov    %ebx,(%esp)
-80104424:	e8 97 fd ff ff       	call   801041c0 <wakeup>
-  release(&lk->lk);
-80104429:	83 c4 10             	add    $0x10,%esp
-8010442c:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-8010442f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104432:	5b                   	pop    %ebx
-80104433:	5e                   	pop    %esi
-80104434:	5d                   	pop    %ebp
-  release(&lk->lk);
-80104435:	e9 e6 01 00 00       	jmp    80104620 <release>
-8010443a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104440 <holdingsleep>:
-
-int
-holdingsleep(struct sleeplock *lk)
-{
-80104440:	55                   	push   %ebp
-80104441:	89 e5                	mov    %esp,%ebp
-80104443:	57                   	push   %edi
-80104444:	31 ff                	xor    %edi,%edi
-80104446:	56                   	push   %esi
-80104447:	53                   	push   %ebx
-80104448:	83 ec 18             	sub    $0x18,%esp
-8010444b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  int r;
-  
-  acquire(&lk->lk);
-8010444e:	8d 73 04             	lea    0x4(%ebx),%esi
-80104451:	56                   	push   %esi
-80104452:	e8 29 02 00 00       	call   80104680 <acquire>
-  r = lk->locked && (lk->pid == myproc()->pid);
-80104457:	8b 03                	mov    (%ebx),%eax
-80104459:	83 c4 10             	add    $0x10,%esp
-8010445c:	85 c0                	test   %eax,%eax
-8010445e:	75 18                	jne    80104478 <holdingsleep+0x38>
-  release(&lk->lk);
-80104460:	83 ec 0c             	sub    $0xc,%esp
-80104463:	56                   	push   %esi
-80104464:	e8 b7 01 00 00       	call   80104620 <release>
-  return r;
-}
-80104469:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010446c:	89 f8                	mov    %edi,%eax
-8010446e:	5b                   	pop    %ebx
-8010446f:	5e                   	pop    %esi
-80104470:	5f                   	pop    %edi
-80104471:	5d                   	pop    %ebp
-80104472:	c3                   	ret
-80104473:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  r = lk->locked && (lk->pid == myproc()->pid);
-80104478:	8b 5b 3c             	mov    0x3c(%ebx),%ebx
-8010447b:	e8 c0 f5 ff ff       	call   80103a40 <myproc>
-80104480:	39 58 10             	cmp    %ebx,0x10(%eax)
-80104483:	0f 94 c0             	sete   %al
-80104486:	0f b6 c0             	movzbl %al,%eax
-80104489:	89 c7                	mov    %eax,%edi
-8010448b:	eb d3                	jmp    80104460 <holdingsleep+0x20>
-8010448d:	66 90                	xchg   %ax,%ax
-8010448f:	90                   	nop
-
-80104490 <initlock>:
-#include "proc.h"
-#include "spinlock.h"
-
-void
-initlock(struct spinlock *lk, char *name)
-{
-80104490:	55                   	push   %ebp
-80104491:	89 e5                	mov    %esp,%ebp
-80104493:	8b 45 08             	mov    0x8(%ebp),%eax
-  lk->name = name;
-80104496:	8b 55 0c             	mov    0xc(%ebp),%edx
-  lk->locked = 0;
-80104499:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  lk->name = name;
-8010449f:	89 50 04             	mov    %edx,0x4(%eax)
-  lk->cpu = 0;
-801044a2:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
-}
-801044a9:	5d                   	pop    %ebp
-801044aa:	c3                   	ret
-801044ab:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-801044b0 <getcallerpcs>:
-}
-
-// Record the current call stack in pcs[] by following the %ebp chain.
-void
-getcallerpcs(void *v, uint pcs[])
-{
-801044b0:	55                   	push   %ebp
-801044b1:	89 e5                	mov    %esp,%ebp
-801044b3:	53                   	push   %ebx
-801044b4:	8b 45 08             	mov    0x8(%ebp),%eax
-801044b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  uint *ebp;
-  int i;
-
-  ebp = (uint*)v - 2;
-801044ba:	8d 50 f8             	lea    -0x8(%eax),%edx
-  for(i = 0; i < 10; i++){
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801044bd:	05 f8 ff ff 7f       	add    $0x7ffffff8,%eax
-801044c2:	3d fe ff ff 7f       	cmp    $0x7ffffffe,%eax
-  for(i = 0; i < 10; i++){
-801044c7:	b8 00 00 00 00       	mov    $0x0,%eax
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801044cc:	76 10                	jbe    801044de <getcallerpcs+0x2e>
-801044ce:	eb 28                	jmp    801044f8 <getcallerpcs+0x48>
-801044d0:	8d 9a 00 00 00 80    	lea    -0x80000000(%edx),%ebx
-801044d6:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-801044dc:	77 1a                	ja     801044f8 <getcallerpcs+0x48>
-      break;
-    pcs[i] = ebp[1];     // saved %eip
-801044de:	8b 5a 04             	mov    0x4(%edx),%ebx
-801044e1:	89 1c 81             	mov    %ebx,(%ecx,%eax,4)
-  for(i = 0; i < 10; i++){
-801044e4:	83 c0 01             	add    $0x1,%eax
-    ebp = (uint*)ebp[0]; // saved %ebp
-801044e7:	8b 12                	mov    (%edx),%edx
-  for(i = 0; i < 10; i++){
-801044e9:	83 f8 0a             	cmp    $0xa,%eax
-801044ec:	75 e2                	jne    801044d0 <getcallerpcs+0x20>
-  }
-  for(; i < 10; i++)
-    pcs[i] = 0;
-}
-801044ee:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801044f1:	c9                   	leave
-801044f2:	c3                   	ret
-801044f3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-801044f8:	8d 04 81             	lea    (%ecx,%eax,4),%eax
-801044fb:	83 c1 28             	add    $0x28,%ecx
-801044fe:	89 ca                	mov    %ecx,%edx
-80104500:	29 c2                	sub    %eax,%edx
-80104502:	83 e2 04             	and    $0x4,%edx
-80104505:	74 11                	je     80104518 <getcallerpcs+0x68>
-    pcs[i] = 0;
-80104507:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  for(; i < 10; i++)
-8010450d:	83 c0 04             	add    $0x4,%eax
-80104510:	39 c1                	cmp    %eax,%ecx
-80104512:	74 da                	je     801044ee <getcallerpcs+0x3e>
-80104514:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    pcs[i] = 0;
-80104518:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  for(; i < 10; i++)
-8010451e:	83 c0 08             	add    $0x8,%eax
-    pcs[i] = 0;
-80104521:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%eax)
-  for(; i < 10; i++)
-80104528:	39 c1                	cmp    %eax,%ecx
-8010452a:	75 ec                	jne    80104518 <getcallerpcs+0x68>
-8010452c:	eb c0                	jmp    801044ee <getcallerpcs+0x3e>
-8010452e:	66 90                	xchg   %ax,%ax
-
-80104530 <pushcli>:
-// it takes two popcli to undo two pushcli.  Also, if interrupts
-// are off, then pushcli, popcli leaves them off.
-
-void
-pushcli(void)
-{
-80104530:	55                   	push   %ebp
-80104531:	89 e5                	mov    %esp,%ebp
-80104533:	53                   	push   %ebx
-80104534:	83 ec 04             	sub    $0x4,%esp
-80104537:	9c                   	pushf
-80104538:	5b                   	pop    %ebx
-  asm volatile("cli");
-80104539:	fa                   	cli
-  int eflags;
-
-  eflags = readeflags();
-  cli();
-  if(mycpu()->ncli == 0)
-8010453a:	e8 81 f4 ff ff       	call   801039c0 <mycpu>
-8010453f:	8b 80 a4 00 00 00    	mov    0xa4(%eax),%eax
-80104545:	85 c0                	test   %eax,%eax
-80104547:	74 17                	je     80104560 <pushcli+0x30>
-    mycpu()->intena = eflags & FL_IF;
-  mycpu()->ncli += 1;
-80104549:	e8 72 f4 ff ff       	call   801039c0 <mycpu>
-8010454e:	83 80 a4 00 00 00 01 	addl   $0x1,0xa4(%eax)
-}
-80104555:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104558:	c9                   	leave
-80104559:	c3                   	ret
-8010455a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    mycpu()->intena = eflags & FL_IF;
-80104560:	e8 5b f4 ff ff       	call   801039c0 <mycpu>
-80104565:	81 e3 00 02 00 00    	and    $0x200,%ebx
-8010456b:	89 98 a8 00 00 00    	mov    %ebx,0xa8(%eax)
-80104571:	eb d6                	jmp    80104549 <pushcli+0x19>
-80104573:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010457a:	00 
-8010457b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80104580 <popcli>:
-
-void
-popcli(void)
-{
-80104580:	55                   	push   %ebp
-80104581:	89 e5                	mov    %esp,%ebp
-80104583:	83 ec 08             	sub    $0x8,%esp
-  asm volatile("pushfl; popl %0" : "=r" (eflags));
-80104586:	9c                   	pushf
-80104587:	58                   	pop    %eax
-  if(readeflags()&FL_IF)
-80104588:	f6 c4 02             	test   $0x2,%ah
-8010458b:	75 35                	jne    801045c2 <popcli+0x42>
-    panic("popcli - interruptible");
-  if(--mycpu()->ncli < 0)
-8010458d:	e8 2e f4 ff ff       	call   801039c0 <mycpu>
-80104592:	83 a8 a4 00 00 00 01 	subl   $0x1,0xa4(%eax)
-80104599:	78 34                	js     801045cf <popcli+0x4f>
-    panic("popcli");
-  if(mycpu()->ncli == 0 && mycpu()->intena)
-8010459b:	e8 20 f4 ff ff       	call   801039c0 <mycpu>
-801045a0:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
-801045a6:	85 d2                	test   %edx,%edx
-801045a8:	74 06                	je     801045b0 <popcli+0x30>
-    sti();
-}
-801045aa:	c9                   	leave
-801045ab:	c3                   	ret
-801045ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  if(mycpu()->ncli == 0 && mycpu()->intena)
-801045b0:	e8 0b f4 ff ff       	call   801039c0 <mycpu>
-801045b5:	8b 80 a8 00 00 00    	mov    0xa8(%eax),%eax
-801045bb:	85 c0                	test   %eax,%eax
-801045bd:	74 eb                	je     801045aa <popcli+0x2a>
-  asm volatile("sti");
-801045bf:	fb                   	sti
-}
-801045c0:	c9                   	leave
-801045c1:	c3                   	ret
-    panic("popcli - interruptible");
-801045c2:	83 ec 0c             	sub    $0xc,%esp
-801045c5:	68 cc 75 10 80       	push   $0x801075cc
-801045ca:	e8 b1 bd ff ff       	call   80100380 <panic>
-    panic("popcli");
-801045cf:	83 ec 0c             	sub    $0xc,%esp
-801045d2:	68 e3 75 10 80       	push   $0x801075e3
-801045d7:	e8 a4 bd ff ff       	call   80100380 <panic>
-801045dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801045e0 <holding>:
-{
-801045e0:	55                   	push   %ebp
-801045e1:	89 e5                	mov    %esp,%ebp
-801045e3:	56                   	push   %esi
-801045e4:	53                   	push   %ebx
-801045e5:	8b 75 08             	mov    0x8(%ebp),%esi
-801045e8:	31 db                	xor    %ebx,%ebx
-  pushcli();
-801045ea:	e8 41 ff ff ff       	call   80104530 <pushcli>
-  r = lock->locked && lock->cpu == mycpu();
-801045ef:	8b 06                	mov    (%esi),%eax
-801045f1:	85 c0                	test   %eax,%eax
-801045f3:	75 0b                	jne    80104600 <holding+0x20>
-  popcli();
-801045f5:	e8 86 ff ff ff       	call   80104580 <popcli>
-}
-801045fa:	89 d8                	mov    %ebx,%eax
-801045fc:	5b                   	pop    %ebx
-801045fd:	5e                   	pop    %esi
-801045fe:	5d                   	pop    %ebp
-801045ff:	c3                   	ret
-  r = lock->locked && lock->cpu == mycpu();
-80104600:	8b 5e 08             	mov    0x8(%esi),%ebx
-80104603:	e8 b8 f3 ff ff       	call   801039c0 <mycpu>
-80104608:	39 c3                	cmp    %eax,%ebx
-8010460a:	0f 94 c3             	sete   %bl
-  popcli();
-8010460d:	e8 6e ff ff ff       	call   80104580 <popcli>
-  r = lock->locked && lock->cpu == mycpu();
-80104612:	0f b6 db             	movzbl %bl,%ebx
-}
-80104615:	89 d8                	mov    %ebx,%eax
-80104617:	5b                   	pop    %ebx
-80104618:	5e                   	pop    %esi
-80104619:	5d                   	pop    %ebp
-8010461a:	c3                   	ret
-8010461b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80104620 <release>:
-{
-80104620:	55                   	push   %ebp
-80104621:	89 e5                	mov    %esp,%ebp
-80104623:	56                   	push   %esi
-80104624:	53                   	push   %ebx
-80104625:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  pushcli();
-80104628:	e8 03 ff ff ff       	call   80104530 <pushcli>
-  r = lock->locked && lock->cpu == mycpu();
-8010462d:	8b 03                	mov    (%ebx),%eax
-8010462f:	85 c0                	test   %eax,%eax
-80104631:	75 15                	jne    80104648 <release+0x28>
-  popcli();
-80104633:	e8 48 ff ff ff       	call   80104580 <popcli>
-    panic("release");
-80104638:	83 ec 0c             	sub    $0xc,%esp
-8010463b:	68 ea 75 10 80       	push   $0x801075ea
-80104640:	e8 3b bd ff ff       	call   80100380 <panic>
-80104645:	8d 76 00             	lea    0x0(%esi),%esi
-  r = lock->locked && lock->cpu == mycpu();
-80104648:	8b 73 08             	mov    0x8(%ebx),%esi
-8010464b:	e8 70 f3 ff ff       	call   801039c0 <mycpu>
-80104650:	39 c6                	cmp    %eax,%esi
-80104652:	75 df                	jne    80104633 <release+0x13>
-  popcli();
-80104654:	e8 27 ff ff ff       	call   80104580 <popcli>
-  lk->pcs[0] = 0;
-80104659:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%ebx)
-  lk->cpu = 0;
-80104660:	c7 43 08 00 00 00 00 	movl   $0x0,0x8(%ebx)
-  __sync_synchronize();
-80104667:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-  asm volatile("movl $0, %0" : "+m" (lk->locked) : );
-8010466c:	c7 03 00 00 00 00    	movl   $0x0,(%ebx)
-}
-80104672:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104675:	5b                   	pop    %ebx
-80104676:	5e                   	pop    %esi
-80104677:	5d                   	pop    %ebp
-  popcli();
-80104678:	e9 03 ff ff ff       	jmp    80104580 <popcli>
-8010467d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104680 <acquire>:
-{
-80104680:	55                   	push   %ebp
-80104681:	89 e5                	mov    %esp,%ebp
-80104683:	53                   	push   %ebx
-80104684:	83 ec 04             	sub    $0x4,%esp
-  pushcli(); // disable interrupts to avoid deadlock.
-80104687:	e8 a4 fe ff ff       	call   80104530 <pushcli>
-  if(holding(lk))
-8010468c:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  pushcli();
-8010468f:	e8 9c fe ff ff       	call   80104530 <pushcli>
-  r = lock->locked && lock->cpu == mycpu();
-80104694:	8b 03                	mov    (%ebx),%eax
-80104696:	85 c0                	test   %eax,%eax
-80104698:	0f 85 b2 00 00 00    	jne    80104750 <acquire+0xd0>
-  popcli();
-8010469e:	e8 dd fe ff ff       	call   80104580 <popcli>
-  asm volatile("lock; xchgl %0, %1" :
-801046a3:	b9 01 00 00 00       	mov    $0x1,%ecx
-801046a8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801046af:	00 
-  while(xchg(&lk->locked, 1) != 0)
-801046b0:	8b 55 08             	mov    0x8(%ebp),%edx
-801046b3:	89 c8                	mov    %ecx,%eax
-801046b5:	f0 87 02             	lock xchg %eax,(%edx)
-801046b8:	85 c0                	test   %eax,%eax
-801046ba:	75 f4                	jne    801046b0 <acquire+0x30>
-  __sync_synchronize();
-801046bc:	f0 83 0c 24 00       	lock orl $0x0,(%esp)
-  lk->cpu = mycpu();
-801046c1:	8b 5d 08             	mov    0x8(%ebp),%ebx
-801046c4:	e8 f7 f2 ff ff       	call   801039c0 <mycpu>
-  getcallerpcs(&lk, lk->pcs);
-801046c9:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  for(i = 0; i < 10; i++){
-801046cc:	31 d2                	xor    %edx,%edx
-  lk->cpu = mycpu();
-801046ce:	89 43 08             	mov    %eax,0x8(%ebx)
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801046d1:	8d 85 00 00 00 80    	lea    -0x80000000(%ebp),%eax
-801046d7:	3d fe ff ff 7f       	cmp    $0x7ffffffe,%eax
-801046dc:	77 32                	ja     80104710 <acquire+0x90>
-  ebp = (uint*)v - 2;
-801046de:	89 e8                	mov    %ebp,%eax
-801046e0:	eb 14                	jmp    801046f6 <acquire+0x76>
-801046e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(ebp == 0 || ebp < (uint*)KERNBASE || ebp == (uint*)0xffffffff)
-801046e8:	8d 98 00 00 00 80    	lea    -0x80000000(%eax),%ebx
-801046ee:	81 fb fe ff ff 7f    	cmp    $0x7ffffffe,%ebx
-801046f4:	77 1a                	ja     80104710 <acquire+0x90>
-    pcs[i] = ebp[1];     // saved %eip
-801046f6:	8b 58 04             	mov    0x4(%eax),%ebx
-801046f9:	89 5c 91 0c          	mov    %ebx,0xc(%ecx,%edx,4)
-  for(i = 0; i < 10; i++){
-801046fd:	83 c2 01             	add    $0x1,%edx
-    ebp = (uint*)ebp[0]; // saved %ebp
-80104700:	8b 00                	mov    (%eax),%eax
-  for(i = 0; i < 10; i++){
-80104702:	83 fa 0a             	cmp    $0xa,%edx
-80104705:	75 e1                	jne    801046e8 <acquire+0x68>
-}
-80104707:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-8010470a:	c9                   	leave
-8010470b:	c3                   	ret
-8010470c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-80104710:	8d 44 91 0c          	lea    0xc(%ecx,%edx,4),%eax
-80104714:	83 c1 34             	add    $0x34,%ecx
-80104717:	89 ca                	mov    %ecx,%edx
-80104719:	29 c2                	sub    %eax,%edx
-8010471b:	83 e2 04             	and    $0x4,%edx
-8010471e:	74 10                	je     80104730 <acquire+0xb0>
-    pcs[i] = 0;
-80104720:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  for(; i < 10; i++)
-80104726:	83 c0 04             	add    $0x4,%eax
-80104729:	39 c1                	cmp    %eax,%ecx
-8010472b:	74 da                	je     80104707 <acquire+0x87>
-8010472d:	8d 76 00             	lea    0x0(%esi),%esi
-    pcs[i] = 0;
-80104730:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-  for(; i < 10; i++)
-80104736:	83 c0 08             	add    $0x8,%eax
-    pcs[i] = 0;
-80104739:	c7 40 fc 00 00 00 00 	movl   $0x0,-0x4(%eax)
-  for(; i < 10; i++)
-80104740:	39 c1                	cmp    %eax,%ecx
-80104742:	75 ec                	jne    80104730 <acquire+0xb0>
-80104744:	eb c1                	jmp    80104707 <acquire+0x87>
-80104746:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010474d:	00 
-8010474e:	66 90                	xchg   %ax,%ax
-  r = lock->locked && lock->cpu == mycpu();
-80104750:	8b 5b 08             	mov    0x8(%ebx),%ebx
-80104753:	e8 68 f2 ff ff       	call   801039c0 <mycpu>
-80104758:	39 c3                	cmp    %eax,%ebx
-8010475a:	0f 85 3e ff ff ff    	jne    8010469e <acquire+0x1e>
-  popcli();
-80104760:	e8 1b fe ff ff       	call   80104580 <popcli>
-    panic("acquire");
-80104765:	83 ec 0c             	sub    $0xc,%esp
-80104768:	68 f2 75 10 80       	push   $0x801075f2
-8010476d:	e8 0e bc ff ff       	call   80100380 <panic>
-80104772:	66 90                	xchg   %ax,%ax
-80104774:	66 90                	xchg   %ax,%ax
-80104776:	66 90                	xchg   %ax,%ax
-80104778:	66 90                	xchg   %ax,%ax
-8010477a:	66 90                	xchg   %ax,%ax
-8010477c:	66 90                	xchg   %ax,%ax
-8010477e:	66 90                	xchg   %ax,%ax
-
-80104780 <memset>:
-#include "types.h"
-#include "x86.h"
-
-void*
-memset(void *dst, int c, uint n)
-{
-80104780:	55                   	push   %ebp
-80104781:	89 e5                	mov    %esp,%ebp
-80104783:	57                   	push   %edi
-80104784:	8b 55 08             	mov    0x8(%ebp),%edx
-80104787:	8b 4d 10             	mov    0x10(%ebp),%ecx
-  if ((int)dst%4 == 0 && n%4 == 0){
-8010478a:	89 d0                	mov    %edx,%eax
-8010478c:	09 c8                	or     %ecx,%eax
-8010478e:	a8 03                	test   $0x3,%al
-80104790:	75 1e                	jne    801047b0 <memset+0x30>
-    c &= 0xFF;
-80104792:	0f b6 45 0c          	movzbl 0xc(%ebp),%eax
-    stosl(dst, (c<<24)|(c<<16)|(c<<8)|c, n/4);
-80104796:	c1 e9 02             	shr    $0x2,%ecx
-  asm volatile("cld; rep stosl" :
-80104799:	89 d7                	mov    %edx,%edi
-8010479b:	69 c0 01 01 01 01    	imul   $0x1010101,%eax,%eax
-801047a1:	fc                   	cld
-801047a2:	f3 ab                	rep stos %eax,%es:(%edi)
-  } else
-    stosb(dst, c, n);
-  return dst;
-}
-801047a4:	8b 7d fc             	mov    -0x4(%ebp),%edi
-801047a7:	89 d0                	mov    %edx,%eax
-801047a9:	c9                   	leave
-801047aa:	c3                   	ret
-801047ab:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  asm volatile("cld; rep stosb" :
-801047b0:	8b 45 0c             	mov    0xc(%ebp),%eax
-801047b3:	89 d7                	mov    %edx,%edi
-801047b5:	fc                   	cld
-801047b6:	f3 aa                	rep stos %al,%es:(%edi)
-801047b8:	8b 7d fc             	mov    -0x4(%ebp),%edi
-801047bb:	89 d0                	mov    %edx,%eax
-801047bd:	c9                   	leave
-801047be:	c3                   	ret
-801047bf:	90                   	nop
-
-801047c0 <memcmp>:
-
-int
-memcmp(const void *v1, const void *v2, uint n)
-{
-801047c0:	55                   	push   %ebp
-801047c1:	89 e5                	mov    %esp,%ebp
-801047c3:	56                   	push   %esi
-801047c4:	8b 75 10             	mov    0x10(%ebp),%esi
-801047c7:	8b 45 08             	mov    0x8(%ebp),%eax
-801047ca:	53                   	push   %ebx
-801047cb:	8b 55 0c             	mov    0xc(%ebp),%edx
-  const uchar *s1, *s2;
-
-  s1 = v1;
-  s2 = v2;
-  while(n-- > 0){
-801047ce:	85 f6                	test   %esi,%esi
-801047d0:	74 2e                	je     80104800 <memcmp+0x40>
-801047d2:	01 c6                	add    %eax,%esi
-801047d4:	eb 14                	jmp    801047ea <memcmp+0x2a>
-801047d6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801047dd:	00 
-801047de:	66 90                	xchg   %ax,%ax
-    if(*s1 != *s2)
-      return *s1 - *s2;
-    s1++, s2++;
-801047e0:	83 c0 01             	add    $0x1,%eax
-801047e3:	83 c2 01             	add    $0x1,%edx
-  while(n-- > 0){
-801047e6:	39 f0                	cmp    %esi,%eax
-801047e8:	74 16                	je     80104800 <memcmp+0x40>
-    if(*s1 != *s2)
-801047ea:	0f b6 08             	movzbl (%eax),%ecx
-801047ed:	0f b6 1a             	movzbl (%edx),%ebx
-801047f0:	38 d9                	cmp    %bl,%cl
-801047f2:	74 ec                	je     801047e0 <memcmp+0x20>
-      return *s1 - *s2;
-801047f4:	0f b6 c1             	movzbl %cl,%eax
-801047f7:	29 d8                	sub    %ebx,%eax
-  }
-
-  return 0;
-}
-801047f9:	5b                   	pop    %ebx
-801047fa:	5e                   	pop    %esi
-801047fb:	5d                   	pop    %ebp
-801047fc:	c3                   	ret
-801047fd:	8d 76 00             	lea    0x0(%esi),%esi
-80104800:	5b                   	pop    %ebx
-  return 0;
-80104801:	31 c0                	xor    %eax,%eax
-}
-80104803:	5e                   	pop    %esi
-80104804:	5d                   	pop    %ebp
-80104805:	c3                   	ret
-80104806:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010480d:	00 
-8010480e:	66 90                	xchg   %ax,%ax
-
-80104810 <memmove>:
-
-void*
-memmove(void *dst, const void *src, uint n)
-{
-80104810:	55                   	push   %ebp
-80104811:	89 e5                	mov    %esp,%ebp
-80104813:	57                   	push   %edi
-80104814:	8b 55 08             	mov    0x8(%ebp),%edx
-80104817:	8b 45 10             	mov    0x10(%ebp),%eax
-8010481a:	56                   	push   %esi
-8010481b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  const char *s;
-  char *d;
-
-  s = src;
-  d = dst;
-  if(s < d && s + n > d){
-8010481e:	39 d6                	cmp    %edx,%esi
-80104820:	73 26                	jae    80104848 <memmove+0x38>
-80104822:	8d 0c 06             	lea    (%esi,%eax,1),%ecx
-80104825:	39 ca                	cmp    %ecx,%edx
-80104827:	73 1f                	jae    80104848 <memmove+0x38>
-    s += n;
-    d += n;
-    while(n-- > 0)
-80104829:	85 c0                	test   %eax,%eax
-8010482b:	74 0f                	je     8010483c <memmove+0x2c>
-8010482d:	83 e8 01             	sub    $0x1,%eax
-      *--d = *--s;
-80104830:	0f b6 0c 06          	movzbl (%esi,%eax,1),%ecx
-80104834:	88 0c 02             	mov    %cl,(%edx,%eax,1)
-    while(n-- > 0)
-80104837:	83 e8 01             	sub    $0x1,%eax
-8010483a:	73 f4                	jae    80104830 <memmove+0x20>
-  } else
-    while(n-- > 0)
-      *d++ = *s++;
-
-  return dst;
-}
-8010483c:	5e                   	pop    %esi
-8010483d:	89 d0                	mov    %edx,%eax
-8010483f:	5f                   	pop    %edi
-80104840:	5d                   	pop    %ebp
-80104841:	c3                   	ret
-80104842:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    while(n-- > 0)
-80104848:	8d 0c 06             	lea    (%esi,%eax,1),%ecx
-8010484b:	89 d7                	mov    %edx,%edi
-8010484d:	85 c0                	test   %eax,%eax
-8010484f:	74 eb                	je     8010483c <memmove+0x2c>
-80104851:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      *d++ = *s++;
-80104858:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-    while(n-- > 0)
-80104859:	39 ce                	cmp    %ecx,%esi
-8010485b:	75 fb                	jne    80104858 <memmove+0x48>
-}
-8010485d:	5e                   	pop    %esi
-8010485e:	89 d0                	mov    %edx,%eax
-80104860:	5f                   	pop    %edi
-80104861:	5d                   	pop    %ebp
-80104862:	c3                   	ret
-80104863:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010486a:	00 
-8010486b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80104870 <memcpy>:
-
-// memcpy exists to placate GCC.  Use memmove.
-void*
-memcpy(void *dst, const void *src, uint n)
-{
-  return memmove(dst, src, n);
-80104870:	eb 9e                	jmp    80104810 <memmove>
-80104872:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104879:	00 
-8010487a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104880 <strncmp>:
-}
-
-int
-strncmp(const char *p, const char *q, uint n)
-{
-80104880:	55                   	push   %ebp
-80104881:	89 e5                	mov    %esp,%ebp
-80104883:	53                   	push   %ebx
-80104884:	8b 55 10             	mov    0x10(%ebp),%edx
-80104887:	8b 45 08             	mov    0x8(%ebp),%eax
-8010488a:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(n > 0 && *p && *p == *q)
-8010488d:	85 d2                	test   %edx,%edx
-8010488f:	75 16                	jne    801048a7 <strncmp+0x27>
-80104891:	eb 2d                	jmp    801048c0 <strncmp+0x40>
-80104893:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104898:	3a 19                	cmp    (%ecx),%bl
-8010489a:	75 12                	jne    801048ae <strncmp+0x2e>
-    n--, p++, q++;
-8010489c:	83 c0 01             	add    $0x1,%eax
-8010489f:	83 c1 01             	add    $0x1,%ecx
-  while(n > 0 && *p && *p == *q)
-801048a2:	83 ea 01             	sub    $0x1,%edx
-801048a5:	74 19                	je     801048c0 <strncmp+0x40>
-801048a7:	0f b6 18             	movzbl (%eax),%ebx
-801048aa:	84 db                	test   %bl,%bl
-801048ac:	75 ea                	jne    80104898 <strncmp+0x18>
-  if(n == 0)
-    return 0;
-  return (uchar)*p - (uchar)*q;
-801048ae:	0f b6 00             	movzbl (%eax),%eax
-801048b1:	0f b6 11             	movzbl (%ecx),%edx
-}
-801048b4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801048b7:	c9                   	leave
-  return (uchar)*p - (uchar)*q;
-801048b8:	29 d0                	sub    %edx,%eax
-}
-801048ba:	c3                   	ret
-801048bb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-801048c0:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    return 0;
-801048c3:	31 c0                	xor    %eax,%eax
-}
-801048c5:	c9                   	leave
-801048c6:	c3                   	ret
-801048c7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801048ce:	00 
-801048cf:	90                   	nop
-
-801048d0 <strncpy>:
-
-char*
-strncpy(char *s, const char *t, int n)
-{
-801048d0:	55                   	push   %ebp
-801048d1:	89 e5                	mov    %esp,%ebp
-801048d3:	57                   	push   %edi
-801048d4:	56                   	push   %esi
-801048d5:	8b 75 08             	mov    0x8(%ebp),%esi
-801048d8:	53                   	push   %ebx
-801048d9:	8b 55 10             	mov    0x10(%ebp),%edx
-  char *os;
-
-  os = s;
-  while(n-- > 0 && (*s++ = *t++) != 0)
-801048dc:	89 f0                	mov    %esi,%eax
-801048de:	eb 15                	jmp    801048f5 <strncpy+0x25>
-801048e0:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
-801048e4:	8b 7d 0c             	mov    0xc(%ebp),%edi
-801048e7:	83 c0 01             	add    $0x1,%eax
-801048ea:	0f b6 4f ff          	movzbl -0x1(%edi),%ecx
-801048ee:	88 48 ff             	mov    %cl,-0x1(%eax)
-801048f1:	84 c9                	test   %cl,%cl
-801048f3:	74 13                	je     80104908 <strncpy+0x38>
-801048f5:	89 d3                	mov    %edx,%ebx
-801048f7:	83 ea 01             	sub    $0x1,%edx
-801048fa:	85 db                	test   %ebx,%ebx
-801048fc:	7f e2                	jg     801048e0 <strncpy+0x10>
-    ;
-  while(n-- > 0)
-    *s++ = 0;
-  return os;
-}
-801048fe:	5b                   	pop    %ebx
-801048ff:	89 f0                	mov    %esi,%eax
-80104901:	5e                   	pop    %esi
-80104902:	5f                   	pop    %edi
-80104903:	5d                   	pop    %ebp
-80104904:	c3                   	ret
-80104905:	8d 76 00             	lea    0x0(%esi),%esi
-  while(n-- > 0)
-80104908:	8d 0c 18             	lea    (%eax,%ebx,1),%ecx
-8010490b:	83 e9 01             	sub    $0x1,%ecx
-8010490e:	85 d2                	test   %edx,%edx
-80104910:	74 ec                	je     801048fe <strncpy+0x2e>
-80104912:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    *s++ = 0;
-80104918:	83 c0 01             	add    $0x1,%eax
-8010491b:	89 ca                	mov    %ecx,%edx
-8010491d:	c6 40 ff 00          	movb   $0x0,-0x1(%eax)
-  while(n-- > 0)
-80104921:	29 c2                	sub    %eax,%edx
-80104923:	85 d2                	test   %edx,%edx
-80104925:	7f f1                	jg     80104918 <strncpy+0x48>
-}
-80104927:	5b                   	pop    %ebx
-80104928:	89 f0                	mov    %esi,%eax
-8010492a:	5e                   	pop    %esi
-8010492b:	5f                   	pop    %edi
-8010492c:	5d                   	pop    %ebp
-8010492d:	c3                   	ret
-8010492e:	66 90                	xchg   %ax,%ax
-
-80104930 <safestrcpy>:
-
-// Like strncpy but guaranteed to NUL-terminate.
-char*
-safestrcpy(char *s, const char *t, int n)
-{
-80104930:	55                   	push   %ebp
-80104931:	89 e5                	mov    %esp,%ebp
-80104933:	56                   	push   %esi
-80104934:	8b 55 10             	mov    0x10(%ebp),%edx
-80104937:	8b 75 08             	mov    0x8(%ebp),%esi
-8010493a:	53                   	push   %ebx
-8010493b:	8b 45 0c             	mov    0xc(%ebp),%eax
-  char *os;
-
-  os = s;
-  if(n <= 0)
-8010493e:	85 d2                	test   %edx,%edx
-80104940:	7e 25                	jle    80104967 <safestrcpy+0x37>
-80104942:	8d 5c 10 ff          	lea    -0x1(%eax,%edx,1),%ebx
-80104946:	89 f2                	mov    %esi,%edx
-80104948:	eb 16                	jmp    80104960 <safestrcpy+0x30>
-8010494a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return os;
-  while(--n > 0 && (*s++ = *t++) != 0)
-80104950:	0f b6 08             	movzbl (%eax),%ecx
-80104953:	83 c0 01             	add    $0x1,%eax
-80104956:	83 c2 01             	add    $0x1,%edx
-80104959:	88 4a ff             	mov    %cl,-0x1(%edx)
-8010495c:	84 c9                	test   %cl,%cl
-8010495e:	74 04                	je     80104964 <safestrcpy+0x34>
-80104960:	39 d8                	cmp    %ebx,%eax
-80104962:	75 ec                	jne    80104950 <safestrcpy+0x20>
-    ;
-  *s = 0;
-80104964:	c6 02 00             	movb   $0x0,(%edx)
-  return os;
-}
-80104967:	89 f0                	mov    %esi,%eax
-80104969:	5b                   	pop    %ebx
-8010496a:	5e                   	pop    %esi
-8010496b:	5d                   	pop    %ebp
-8010496c:	c3                   	ret
-8010496d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104970 <strlen>:
-
-int
-strlen(const char *s)
-{
-80104970:	55                   	push   %ebp
-  int n;
-
-  for(n = 0; s[n]; n++)
-80104971:	31 c0                	xor    %eax,%eax
-{
-80104973:	89 e5                	mov    %esp,%ebp
-80104975:	8b 55 08             	mov    0x8(%ebp),%edx
-  for(n = 0; s[n]; n++)
-80104978:	80 3a 00             	cmpb   $0x0,(%edx)
-8010497b:	74 0c                	je     80104989 <strlen+0x19>
-8010497d:	8d 76 00             	lea    0x0(%esi),%esi
-80104980:	83 c0 01             	add    $0x1,%eax
-80104983:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-80104987:	75 f7                	jne    80104980 <strlen+0x10>
-    ;
-  return n;
-}
-80104989:	5d                   	pop    %ebp
-8010498a:	c3                   	ret
-
-8010498b <swtch>:
-# a struct context, and save its address in *old.
-# Switch stacks to new and pop previously-saved registers.
-
-.globl swtch
-swtch:
-  movl 4(%esp), %eax
-8010498b:	8b 44 24 04          	mov    0x4(%esp),%eax
-  movl 8(%esp), %edx
-8010498f:	8b 54 24 08          	mov    0x8(%esp),%edx
-
-  # Save old callee-saved registers
-  pushl %ebp
-80104993:	55                   	push   %ebp
-  pushl %ebx
-80104994:	53                   	push   %ebx
-  pushl %esi
-80104995:	56                   	push   %esi
-  pushl %edi
-80104996:	57                   	push   %edi
-
-  # Switch stacks
-  movl %esp, (%eax)
-80104997:	89 20                	mov    %esp,(%eax)
-  movl %edx, %esp
-80104999:	89 d4                	mov    %edx,%esp
-
-  # Load new callee-saved registers
-  popl %edi
-8010499b:	5f                   	pop    %edi
-  popl %esi
-8010499c:	5e                   	pop    %esi
-  popl %ebx
-8010499d:	5b                   	pop    %ebx
-  popl %ebp
-8010499e:	5d                   	pop    %ebp
-  ret
-8010499f:	c3                   	ret
-
-801049a0 <fetchint>:
-// to a saved program counter, and then the first argument.
-
-// Fetch the int at addr from the current process.
-int
-fetchint(uint addr, int *ip)
-{
-801049a0:	55                   	push   %ebp
-801049a1:	89 e5                	mov    %esp,%ebp
-801049a3:	53                   	push   %ebx
-801049a4:	83 ec 04             	sub    $0x4,%esp
-801049a7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct proc *curproc = myproc();
-801049aa:	e8 91 f0 ff ff       	call   80103a40 <myproc>
-
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
-801049af:	8b 00                	mov    (%eax),%eax
-801049b1:	39 c3                	cmp    %eax,%ebx
-801049b3:	73 1b                	jae    801049d0 <fetchint+0x30>
-801049b5:	8d 53 04             	lea    0x4(%ebx),%edx
-801049b8:	39 d0                	cmp    %edx,%eax
-801049ba:	72 14                	jb     801049d0 <fetchint+0x30>
-    return -1;
-  *ip = *(int*)(addr);
-801049bc:	8b 45 0c             	mov    0xc(%ebp),%eax
-801049bf:	8b 13                	mov    (%ebx),%edx
-801049c1:	89 10                	mov    %edx,(%eax)
-  return 0;
-801049c3:	31 c0                	xor    %eax,%eax
-}
-801049c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-801049c8:	c9                   	leave
-801049c9:	c3                   	ret
-801049ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-801049d0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801049d5:	eb ee                	jmp    801049c5 <fetchint+0x25>
-801049d7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801049de:	00 
-801049df:	90                   	nop
-
-801049e0 <fetchstr>:
-// Fetch the nul-terminated string at addr from the current process.
-// Doesn't actually copy the string - just sets *pp to point at it.
-// Returns length of string, not including nul.
-int
-fetchstr(uint addr, char **pp)
-{
-801049e0:	55                   	push   %ebp
-801049e1:	89 e5                	mov    %esp,%ebp
-801049e3:	53                   	push   %ebx
-801049e4:	83 ec 04             	sub    $0x4,%esp
-801049e7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  char *s, *ep;
-  struct proc *curproc = myproc();
-801049ea:	e8 51 f0 ff ff       	call   80103a40 <myproc>
-
-  if(addr >= curproc->sz)
-801049ef:	3b 18                	cmp    (%eax),%ebx
-801049f1:	73 2d                	jae    80104a20 <fetchstr+0x40>
-    return -1;
-  *pp = (char*)addr;
-801049f3:	8b 55 0c             	mov    0xc(%ebp),%edx
-801049f6:	89 1a                	mov    %ebx,(%edx)
-  ep = (char*)curproc->sz;
-801049f8:	8b 10                	mov    (%eax),%edx
-  for(s = *pp; s < ep; s++){
-801049fa:	39 d3                	cmp    %edx,%ebx
-801049fc:	73 22                	jae    80104a20 <fetchstr+0x40>
-801049fe:	89 d8                	mov    %ebx,%eax
-80104a00:	eb 0d                	jmp    80104a0f <fetchstr+0x2f>
-80104a02:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104a08:	83 c0 01             	add    $0x1,%eax
-80104a0b:	39 d0                	cmp    %edx,%eax
-80104a0d:	73 11                	jae    80104a20 <fetchstr+0x40>
-    if(*s == 0)
-80104a0f:	80 38 00             	cmpb   $0x0,(%eax)
-80104a12:	75 f4                	jne    80104a08 <fetchstr+0x28>
-      return s - *pp;
-80104a14:	29 d8                	sub    %ebx,%eax
-  }
-  return -1;
-}
-80104a16:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104a19:	c9                   	leave
-80104a1a:	c3                   	ret
-80104a1b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104a20:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    return -1;
-80104a23:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104a28:	c9                   	leave
-80104a29:	c3                   	ret
-80104a2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80104a30 <argint>:
-
-// Fetch the nth 32-bit system call argument.
-int
-argint(int n, int *ip)
-{
-80104a30:	55                   	push   %ebp
-80104a31:	89 e5                	mov    %esp,%ebp
-80104a33:	56                   	push   %esi
-80104a34:	53                   	push   %ebx
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104a35:	e8 06 f0 ff ff       	call   80103a40 <myproc>
-80104a3a:	8b 55 08             	mov    0x8(%ebp),%edx
-80104a3d:	8b 40 18             	mov    0x18(%eax),%eax
-80104a40:	8b 40 44             	mov    0x44(%eax),%eax
-80104a43:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
-  struct proc *curproc = myproc();
-80104a46:	e8 f5 ef ff ff       	call   80103a40 <myproc>
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104a4b:	8d 73 04             	lea    0x4(%ebx),%esi
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104a4e:	8b 00                	mov    (%eax),%eax
-80104a50:	39 c6                	cmp    %eax,%esi
-80104a52:	73 1c                	jae    80104a70 <argint+0x40>
-80104a54:	8d 53 08             	lea    0x8(%ebx),%edx
-80104a57:	39 d0                	cmp    %edx,%eax
-80104a59:	72 15                	jb     80104a70 <argint+0x40>
-  *ip = *(int*)(addr);
-80104a5b:	8b 45 0c             	mov    0xc(%ebp),%eax
-80104a5e:	8b 53 04             	mov    0x4(%ebx),%edx
-80104a61:	89 10                	mov    %edx,(%eax)
-  return 0;
-80104a63:	31 c0                	xor    %eax,%eax
-}
-80104a65:	5b                   	pop    %ebx
-80104a66:	5e                   	pop    %esi
-80104a67:	5d                   	pop    %ebp
-80104a68:	c3                   	ret
-80104a69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80104a70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104a75:	eb ee                	jmp    80104a65 <argint+0x35>
-80104a77:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104a7e:	00 
-80104a7f:	90                   	nop
-
-80104a80 <argptr>:
-// Fetch the nth word-sized system call argument as a pointer
-// to a block of memory of size bytes.  Check that the pointer
-// lies within the process address space.
-int
-argptr(int n, char **pp, int size)
-{
-80104a80:	55                   	push   %ebp
-80104a81:	89 e5                	mov    %esp,%ebp
-80104a83:	57                   	push   %edi
-80104a84:	56                   	push   %esi
-80104a85:	53                   	push   %ebx
-80104a86:	83 ec 0c             	sub    $0xc,%esp
-  int i;
-  struct proc *curproc = myproc();
-80104a89:	e8 b2 ef ff ff       	call   80103a40 <myproc>
-80104a8e:	89 c6                	mov    %eax,%esi
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104a90:	e8 ab ef ff ff       	call   80103a40 <myproc>
-80104a95:	8b 55 08             	mov    0x8(%ebp),%edx
-80104a98:	8b 40 18             	mov    0x18(%eax),%eax
-80104a9b:	8b 40 44             	mov    0x44(%eax),%eax
-80104a9e:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
-  struct proc *curproc = myproc();
-80104aa1:	e8 9a ef ff ff       	call   80103a40 <myproc>
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104aa6:	8d 7b 04             	lea    0x4(%ebx),%edi
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104aa9:	8b 00                	mov    (%eax),%eax
-80104aab:	39 c7                	cmp    %eax,%edi
-80104aad:	73 31                	jae    80104ae0 <argptr+0x60>
-80104aaf:	8d 4b 08             	lea    0x8(%ebx),%ecx
-80104ab2:	39 c8                	cmp    %ecx,%eax
-80104ab4:	72 2a                	jb     80104ae0 <argptr+0x60>
- 
-  if(argint(n, &i) < 0)
-    return -1;
-  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-80104ab6:	8b 55 10             	mov    0x10(%ebp),%edx
-  *ip = *(int*)(addr);
-80104ab9:	8b 43 04             	mov    0x4(%ebx),%eax
-  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
-80104abc:	85 d2                	test   %edx,%edx
-80104abe:	78 20                	js     80104ae0 <argptr+0x60>
-80104ac0:	8b 16                	mov    (%esi),%edx
-80104ac2:	39 d0                	cmp    %edx,%eax
-80104ac4:	73 1a                	jae    80104ae0 <argptr+0x60>
-80104ac6:	8b 5d 10             	mov    0x10(%ebp),%ebx
-80104ac9:	01 c3                	add    %eax,%ebx
-80104acb:	39 da                	cmp    %ebx,%edx
-80104acd:	72 11                	jb     80104ae0 <argptr+0x60>
-    return -1;
-  *pp = (char*)i;
-80104acf:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104ad2:	89 02                	mov    %eax,(%edx)
-  return 0;
-80104ad4:	31 c0                	xor    %eax,%eax
-}
-80104ad6:	83 c4 0c             	add    $0xc,%esp
-80104ad9:	5b                   	pop    %ebx
-80104ada:	5e                   	pop    %esi
-80104adb:	5f                   	pop    %edi
-80104adc:	5d                   	pop    %ebp
-80104add:	c3                   	ret
-80104ade:	66 90                	xchg   %ax,%ax
-    return -1;
-80104ae0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104ae5:	eb ef                	jmp    80104ad6 <argptr+0x56>
-80104ae7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104aee:	00 
-80104aef:	90                   	nop
-
-80104af0 <argstr>:
-// Check that the pointer is valid and the string is nul-terminated.
-// (There is no shared writable memory, so the string can't change
-// between this check and being used by the kernel.)
-int
-argstr(int n, char **pp)
-{
-80104af0:	55                   	push   %ebp
-80104af1:	89 e5                	mov    %esp,%ebp
-80104af3:	56                   	push   %esi
-80104af4:	53                   	push   %ebx
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104af5:	e8 46 ef ff ff       	call   80103a40 <myproc>
-80104afa:	8b 55 08             	mov    0x8(%ebp),%edx
-80104afd:	8b 40 18             	mov    0x18(%eax),%eax
-80104b00:	8b 40 44             	mov    0x44(%eax),%eax
-80104b03:	8d 1c 90             	lea    (%eax,%edx,4),%ebx
-  struct proc *curproc = myproc();
-80104b06:	e8 35 ef ff ff       	call   80103a40 <myproc>
-  return fetchint((myproc()->tf->esp) + 4 + 4*n, ip);
-80104b0b:	8d 73 04             	lea    0x4(%ebx),%esi
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
-80104b0e:	8b 00                	mov    (%eax),%eax
-80104b10:	39 c6                	cmp    %eax,%esi
-80104b12:	73 44                	jae    80104b58 <argstr+0x68>
-80104b14:	8d 53 08             	lea    0x8(%ebx),%edx
-80104b17:	39 d0                	cmp    %edx,%eax
-80104b19:	72 3d                	jb     80104b58 <argstr+0x68>
-  *ip = *(int*)(addr);
-80104b1b:	8b 5b 04             	mov    0x4(%ebx),%ebx
-  struct proc *curproc = myproc();
-80104b1e:	e8 1d ef ff ff       	call   80103a40 <myproc>
-  if(addr >= curproc->sz)
-80104b23:	3b 18                	cmp    (%eax),%ebx
-80104b25:	73 31                	jae    80104b58 <argstr+0x68>
-  *pp = (char*)addr;
-80104b27:	8b 55 0c             	mov    0xc(%ebp),%edx
-80104b2a:	89 1a                	mov    %ebx,(%edx)
-  ep = (char*)curproc->sz;
-80104b2c:	8b 10                	mov    (%eax),%edx
-  for(s = *pp; s < ep; s++){
-80104b2e:	39 d3                	cmp    %edx,%ebx
-80104b30:	73 26                	jae    80104b58 <argstr+0x68>
-80104b32:	89 d8                	mov    %ebx,%eax
-80104b34:	eb 11                	jmp    80104b47 <argstr+0x57>
-80104b36:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104b3d:	00 
-80104b3e:	66 90                	xchg   %ax,%ax
-80104b40:	83 c0 01             	add    $0x1,%eax
-80104b43:	39 d0                	cmp    %edx,%eax
-80104b45:	73 11                	jae    80104b58 <argstr+0x68>
-    if(*s == 0)
-80104b47:	80 38 00             	cmpb   $0x0,(%eax)
-80104b4a:	75 f4                	jne    80104b40 <argstr+0x50>
-      return s - *pp;
-80104b4c:	29 d8                	sub    %ebx,%eax
-  int addr;
-  if(argint(n, &addr) < 0)
-    return -1;
-  return fetchstr(addr, pp);
-}
-80104b4e:	5b                   	pop    %ebx
-80104b4f:	5e                   	pop    %esi
-80104b50:	5d                   	pop    %ebp
-80104b51:	c3                   	ret
-80104b52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80104b58:	5b                   	pop    %ebx
-    return -1;
-80104b59:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80104b5e:	5e                   	pop    %esi
-80104b5f:	5d                   	pop    %ebp
-80104b60:	c3                   	ret
-80104b61:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104b68:	00 
-80104b69:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80104b70 <syscall>:
-[SYS_close]   sys_close,
-};
-
-void
-syscall(void)
-{
-80104b70:	55                   	push   %ebp
-80104b71:	89 e5                	mov    %esp,%ebp
-80104b73:	53                   	push   %ebx
-80104b74:	83 ec 04             	sub    $0x4,%esp
-  int num;
-  struct proc *curproc = myproc();
-80104b77:	e8 c4 ee ff ff       	call   80103a40 <myproc>
-80104b7c:	89 c3                	mov    %eax,%ebx
-
-  num = curproc->tf->eax;
-80104b7e:	8b 40 18             	mov    0x18(%eax),%eax
-80104b81:	8b 40 1c             	mov    0x1c(%eax),%eax
-  if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
-80104b84:	8d 50 ff             	lea    -0x1(%eax),%edx
-80104b87:	83 fa 14             	cmp    $0x14,%edx
-80104b8a:	77 24                	ja     80104bb0 <syscall+0x40>
-80104b8c:	8b 14 85 80 7b 10 80 	mov    -0x7fef8480(,%eax,4),%edx
-80104b93:	85 d2                	test   %edx,%edx
-80104b95:	74 19                	je     80104bb0 <syscall+0x40>
-    curproc->tf->eax = syscalls[num]();
-80104b97:	ff d2                	call   *%edx
-80104b99:	89 c2                	mov    %eax,%edx
-80104b9b:	8b 43 18             	mov    0x18(%ebx),%eax
-80104b9e:	89 50 1c             	mov    %edx,0x1c(%eax)
-  } else {
-    cprintf("%d %s: unknown sys call %d\n",
-            curproc->pid, curproc->name, num);
-    curproc->tf->eax = -1;
-  }
-}
-80104ba1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104ba4:	c9                   	leave
-80104ba5:	c3                   	ret
-80104ba6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104bad:	00 
-80104bae:	66 90                	xchg   %ax,%ax
-    cprintf("%d %s: unknown sys call %d\n",
-80104bb0:	50                   	push   %eax
-            curproc->pid, curproc->name, num);
-80104bb1:	8d 43 6c             	lea    0x6c(%ebx),%eax
-    cprintf("%d %s: unknown sys call %d\n",
-80104bb4:	50                   	push   %eax
-80104bb5:	ff 73 10             	push   0x10(%ebx)
-80104bb8:	68 fa 75 10 80       	push   $0x801075fa
-80104bbd:	e8 ee ba ff ff       	call   801006b0 <cprintf>
-    curproc->tf->eax = -1;
-80104bc2:	8b 43 18             	mov    0x18(%ebx),%eax
-80104bc5:	83 c4 10             	add    $0x10,%esp
-80104bc8:	c7 40 1c ff ff ff ff 	movl   $0xffffffff,0x1c(%eax)
-}
-80104bcf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80104bd2:	c9                   	leave
-80104bd3:	c3                   	ret
-80104bd4:	66 90                	xchg   %ax,%ax
-80104bd6:	66 90                	xchg   %ax,%ax
-80104bd8:	66 90                	xchg   %ax,%ax
-80104bda:	66 90                	xchg   %ax,%ax
-80104bdc:	66 90                	xchg   %ax,%ax
-80104bde:	66 90                	xchg   %ax,%ax
-
-80104be0 <create>:
-  return -1;
-}
-
-static struct inode*
-create(char *path, short type, short major, short minor)
-{
-80104be0:	55                   	push   %ebp
-80104be1:	89 e5                	mov    %esp,%ebp
-80104be3:	57                   	push   %edi
-80104be4:	56                   	push   %esi
-  struct inode *ip, *dp;
-  char name[DIRSIZ];
-
-  if((dp = nameiparent(path, name)) == 0)
-80104be5:	8d 7d da             	lea    -0x26(%ebp),%edi
-{
-80104be8:	53                   	push   %ebx
-80104be9:	83 ec 34             	sub    $0x34,%esp
-80104bec:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-80104bef:	8b 4d 08             	mov    0x8(%ebp),%ecx
-80104bf2:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-80104bf5:	89 4d cc             	mov    %ecx,-0x34(%ebp)
-  if((dp = nameiparent(path, name)) == 0)
-80104bf8:	57                   	push   %edi
-80104bf9:	50                   	push   %eax
-80104bfa:	e8 11 d5 ff ff       	call   80102110 <nameiparent>
-80104bff:	83 c4 10             	add    $0x10,%esp
-80104c02:	85 c0                	test   %eax,%eax
-80104c04:	74 5e                	je     80104c64 <create+0x84>
-    return 0;
-  ilock(dp);
-80104c06:	83 ec 0c             	sub    $0xc,%esp
-80104c09:	89 c3                	mov    %eax,%ebx
-80104c0b:	50                   	push   %eax
-80104c0c:	e8 ff cb ff ff       	call   80101810 <ilock>
-
-  if((ip = dirlookup(dp, name, 0)) != 0){
-80104c11:	83 c4 0c             	add    $0xc,%esp
-80104c14:	6a 00                	push   $0x0
-80104c16:	57                   	push   %edi
-80104c17:	53                   	push   %ebx
-80104c18:	e8 43 d1 ff ff       	call   80101d60 <dirlookup>
-80104c1d:	83 c4 10             	add    $0x10,%esp
-80104c20:	89 c6                	mov    %eax,%esi
-80104c22:	85 c0                	test   %eax,%eax
-80104c24:	74 4a                	je     80104c70 <create+0x90>
-    iunlockput(dp);
-80104c26:	83 ec 0c             	sub    $0xc,%esp
-80104c29:	53                   	push   %ebx
-80104c2a:	e8 71 ce ff ff       	call   80101aa0 <iunlockput>
-    ilock(ip);
-80104c2f:	89 34 24             	mov    %esi,(%esp)
-80104c32:	e8 d9 cb ff ff       	call   80101810 <ilock>
-    if(type == T_FILE && ip->type == T_FILE)
-80104c37:	83 c4 10             	add    $0x10,%esp
-80104c3a:	66 83 7d d4 02       	cmpw   $0x2,-0x2c(%ebp)
-80104c3f:	75 17                	jne    80104c58 <create+0x78>
-80104c41:	66 83 7e 50 02       	cmpw   $0x2,0x50(%esi)
-80104c46:	75 10                	jne    80104c58 <create+0x78>
-    panic("create: dirlink");
-
-  iunlockput(dp);
-
-  return ip;
-}
-80104c48:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104c4b:	89 f0                	mov    %esi,%eax
-80104c4d:	5b                   	pop    %ebx
-80104c4e:	5e                   	pop    %esi
-80104c4f:	5f                   	pop    %edi
-80104c50:	5d                   	pop    %ebp
-80104c51:	c3                   	ret
-80104c52:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    iunlockput(ip);
-80104c58:	83 ec 0c             	sub    $0xc,%esp
-80104c5b:	56                   	push   %esi
-80104c5c:	e8 3f ce ff ff       	call   80101aa0 <iunlockput>
-    return 0;
-80104c61:	83 c4 10             	add    $0x10,%esp
-}
-80104c64:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    return 0;
-80104c67:	31 f6                	xor    %esi,%esi
-}
-80104c69:	5b                   	pop    %ebx
-80104c6a:	89 f0                	mov    %esi,%eax
-80104c6c:	5e                   	pop    %esi
-80104c6d:	5f                   	pop    %edi
-80104c6e:	5d                   	pop    %ebp
-80104c6f:	c3                   	ret
-  if((ip = ialloc(dp->dev, type)) == 0)
-80104c70:	0f bf 45 d4          	movswl -0x2c(%ebp),%eax
-80104c74:	83 ec 08             	sub    $0x8,%esp
-80104c77:	50                   	push   %eax
-80104c78:	ff 33                	push   (%ebx)
-80104c7a:	e8 21 ca ff ff       	call   801016a0 <ialloc>
-80104c7f:	83 c4 10             	add    $0x10,%esp
-80104c82:	89 c6                	mov    %eax,%esi
-80104c84:	85 c0                	test   %eax,%eax
-80104c86:	0f 84 bc 00 00 00    	je     80104d48 <create+0x168>
-  ilock(ip);
-80104c8c:	83 ec 0c             	sub    $0xc,%esp
-80104c8f:	50                   	push   %eax
-80104c90:	e8 7b cb ff ff       	call   80101810 <ilock>
-  ip->major = major;
-80104c95:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
-80104c99:	66 89 46 52          	mov    %ax,0x52(%esi)
-  ip->minor = minor;
-80104c9d:	0f b7 45 cc          	movzwl -0x34(%ebp),%eax
-80104ca1:	66 89 46 54          	mov    %ax,0x54(%esi)
-  ip->nlink = 1;
-80104ca5:	b8 01 00 00 00       	mov    $0x1,%eax
-80104caa:	66 89 46 56          	mov    %ax,0x56(%esi)
-  iupdate(ip);
-80104cae:	89 34 24             	mov    %esi,(%esp)
-80104cb1:	e8 aa ca ff ff       	call   80101760 <iupdate>
-  if(type == T_DIR){  // Create . and .. entries.
-80104cb6:	83 c4 10             	add    $0x10,%esp
-80104cb9:	66 83 7d d4 01       	cmpw   $0x1,-0x2c(%ebp)
-80104cbe:	74 30                	je     80104cf0 <create+0x110>
-  if(dirlink(dp, name, ip->inum) < 0)
-80104cc0:	83 ec 04             	sub    $0x4,%esp
-80104cc3:	ff 76 04             	push   0x4(%esi)
-80104cc6:	57                   	push   %edi
-80104cc7:	53                   	push   %ebx
-80104cc8:	e8 63 d3 ff ff       	call   80102030 <dirlink>
-80104ccd:	83 c4 10             	add    $0x10,%esp
-80104cd0:	85 c0                	test   %eax,%eax
-80104cd2:	78 67                	js     80104d3b <create+0x15b>
-  iunlockput(dp);
-80104cd4:	83 ec 0c             	sub    $0xc,%esp
-80104cd7:	53                   	push   %ebx
-80104cd8:	e8 c3 cd ff ff       	call   80101aa0 <iunlockput>
-  return ip;
-80104cdd:	83 c4 10             	add    $0x10,%esp
-}
-80104ce0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80104ce3:	89 f0                	mov    %esi,%eax
-80104ce5:	5b                   	pop    %ebx
-80104ce6:	5e                   	pop    %esi
-80104ce7:	5f                   	pop    %edi
-80104ce8:	5d                   	pop    %ebp
-80104ce9:	c3                   	ret
-80104cea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    iupdate(dp);
-80104cf0:	83 ec 0c             	sub    $0xc,%esp
-    dp->nlink++;  // for ".."
-80104cf3:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
-    iupdate(dp);
-80104cf8:	53                   	push   %ebx
-80104cf9:	e8 62 ca ff ff       	call   80101760 <iupdate>
-    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
-80104cfe:	83 c4 0c             	add    $0xc,%esp
-80104d01:	ff 76 04             	push   0x4(%esi)
-80104d04:	68 32 76 10 80       	push   $0x80107632
-80104d09:	56                   	push   %esi
-80104d0a:	e8 21 d3 ff ff       	call   80102030 <dirlink>
-80104d0f:	83 c4 10             	add    $0x10,%esp
-80104d12:	85 c0                	test   %eax,%eax
-80104d14:	78 18                	js     80104d2e <create+0x14e>
-80104d16:	83 ec 04             	sub    $0x4,%esp
-80104d19:	ff 73 04             	push   0x4(%ebx)
-80104d1c:	68 31 76 10 80       	push   $0x80107631
-80104d21:	56                   	push   %esi
-80104d22:	e8 09 d3 ff ff       	call   80102030 <dirlink>
-80104d27:	83 c4 10             	add    $0x10,%esp
-80104d2a:	85 c0                	test   %eax,%eax
-80104d2c:	79 92                	jns    80104cc0 <create+0xe0>
-      panic("create dots");
-80104d2e:	83 ec 0c             	sub    $0xc,%esp
-80104d31:	68 25 76 10 80       	push   $0x80107625
-80104d36:	e8 45 b6 ff ff       	call   80100380 <panic>
-    panic("create: dirlink");
-80104d3b:	83 ec 0c             	sub    $0xc,%esp
-80104d3e:	68 34 76 10 80       	push   $0x80107634
-80104d43:	e8 38 b6 ff ff       	call   80100380 <panic>
-    panic("create: ialloc");
-80104d48:	83 ec 0c             	sub    $0xc,%esp
-80104d4b:	68 16 76 10 80       	push   $0x80107616
-80104d50:	e8 2b b6 ff ff       	call   80100380 <panic>
-80104d55:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104d5c:	00 
-80104d5d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80104d60 <sys_dup>:
-{
-80104d60:	55                   	push   %ebp
-80104d61:	89 e5                	mov    %esp,%ebp
-80104d63:	56                   	push   %esi
-80104d64:	53                   	push   %ebx
-  if(argint(n, &fd) < 0)
-80104d65:	8d 45 f4             	lea    -0xc(%ebp),%eax
-{
-80104d68:	83 ec 18             	sub    $0x18,%esp
-  if(argint(n, &fd) < 0)
-80104d6b:	50                   	push   %eax
-80104d6c:	6a 00                	push   $0x0
-80104d6e:	e8 bd fc ff ff       	call   80104a30 <argint>
-80104d73:	83 c4 10             	add    $0x10,%esp
-80104d76:	85 c0                	test   %eax,%eax
-80104d78:	78 36                	js     80104db0 <sys_dup+0x50>
-  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104d7a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104d7e:	77 30                	ja     80104db0 <sys_dup+0x50>
-80104d80:	e8 bb ec ff ff       	call   80103a40 <myproc>
-80104d85:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104d88:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104d8c:	85 f6                	test   %esi,%esi
-80104d8e:	74 20                	je     80104db0 <sys_dup+0x50>
-  struct proc *curproc = myproc();
-80104d90:	e8 ab ec ff ff       	call   80103a40 <myproc>
-  for(fd = 0; fd < NOFILE; fd++){
-80104d95:	31 db                	xor    %ebx,%ebx
-80104d97:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104d9e:	00 
-80104d9f:	90                   	nop
-    if(curproc->ofile[fd] == 0){
-80104da0:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80104da4:	85 d2                	test   %edx,%edx
-80104da6:	74 18                	je     80104dc0 <sys_dup+0x60>
-  for(fd = 0; fd < NOFILE; fd++){
-80104da8:	83 c3 01             	add    $0x1,%ebx
-80104dab:	83 fb 10             	cmp    $0x10,%ebx
-80104dae:	75 f0                	jne    80104da0 <sys_dup+0x40>
-}
-80104db0:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return -1;
-80104db3:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-}
-80104db8:	89 d8                	mov    %ebx,%eax
-80104dba:	5b                   	pop    %ebx
-80104dbb:	5e                   	pop    %esi
-80104dbc:	5d                   	pop    %ebp
-80104dbd:	c3                   	ret
-80104dbe:	66 90                	xchg   %ax,%ax
-  filedup(f);
-80104dc0:	83 ec 0c             	sub    $0xc,%esp
-      curproc->ofile[fd] = f;
-80104dc3:	89 74 98 28          	mov    %esi,0x28(%eax,%ebx,4)
-  filedup(f);
-80104dc7:	56                   	push   %esi
-80104dc8:	e8 63 c1 ff ff       	call   80100f30 <filedup>
-  return fd;
-80104dcd:	83 c4 10             	add    $0x10,%esp
-}
-80104dd0:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104dd3:	89 d8                	mov    %ebx,%eax
-80104dd5:	5b                   	pop    %ebx
-80104dd6:	5e                   	pop    %esi
-80104dd7:	5d                   	pop    %ebp
-80104dd8:	c3                   	ret
-80104dd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80104de0 <sys_read>:
-{
-80104de0:	55                   	push   %ebp
-80104de1:	89 e5                	mov    %esp,%ebp
-80104de3:	56                   	push   %esi
-80104de4:	53                   	push   %ebx
-  if(argint(n, &fd) < 0)
-80104de5:	8d 5d f4             	lea    -0xc(%ebp),%ebx
-{
-80104de8:	83 ec 18             	sub    $0x18,%esp
-  if(argint(n, &fd) < 0)
-80104deb:	53                   	push   %ebx
-80104dec:	6a 00                	push   $0x0
-80104dee:	e8 3d fc ff ff       	call   80104a30 <argint>
-80104df3:	83 c4 10             	add    $0x10,%esp
-80104df6:	85 c0                	test   %eax,%eax
-80104df8:	78 5e                	js     80104e58 <sys_read+0x78>
-  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104dfa:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104dfe:	77 58                	ja     80104e58 <sys_read+0x78>
-80104e00:	e8 3b ec ff ff       	call   80103a40 <myproc>
-80104e05:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104e08:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104e0c:	85 f6                	test   %esi,%esi
-80104e0e:	74 48                	je     80104e58 <sys_read+0x78>
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104e10:	83 ec 08             	sub    $0x8,%esp
-80104e13:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104e16:	50                   	push   %eax
-80104e17:	6a 02                	push   $0x2
-80104e19:	e8 12 fc ff ff       	call   80104a30 <argint>
-80104e1e:	83 c4 10             	add    $0x10,%esp
-80104e21:	85 c0                	test   %eax,%eax
-80104e23:	78 33                	js     80104e58 <sys_read+0x78>
-80104e25:	83 ec 04             	sub    $0x4,%esp
-80104e28:	ff 75 f0             	push   -0x10(%ebp)
-80104e2b:	53                   	push   %ebx
-80104e2c:	6a 01                	push   $0x1
-80104e2e:	e8 4d fc ff ff       	call   80104a80 <argptr>
-80104e33:	83 c4 10             	add    $0x10,%esp
-80104e36:	85 c0                	test   %eax,%eax
-80104e38:	78 1e                	js     80104e58 <sys_read+0x78>
-  return fileread(f, p, n);
-80104e3a:	83 ec 04             	sub    $0x4,%esp
-80104e3d:	ff 75 f0             	push   -0x10(%ebp)
-80104e40:	ff 75 f4             	push   -0xc(%ebp)
-80104e43:	56                   	push   %esi
-80104e44:	e8 67 c2 ff ff       	call   801010b0 <fileread>
-80104e49:	83 c4 10             	add    $0x10,%esp
-}
-80104e4c:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104e4f:	5b                   	pop    %ebx
-80104e50:	5e                   	pop    %esi
-80104e51:	5d                   	pop    %ebp
-80104e52:	c3                   	ret
-80104e53:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    return -1;
-80104e58:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104e5d:	eb ed                	jmp    80104e4c <sys_read+0x6c>
-80104e5f:	90                   	nop
-
-80104e60 <sys_write>:
-{
-80104e60:	55                   	push   %ebp
-80104e61:	89 e5                	mov    %esp,%ebp
-80104e63:	56                   	push   %esi
-80104e64:	53                   	push   %ebx
-  if(argint(n, &fd) < 0)
-80104e65:	8d 5d f4             	lea    -0xc(%ebp),%ebx
-{
-80104e68:	83 ec 18             	sub    $0x18,%esp
-  if(argint(n, &fd) < 0)
-80104e6b:	53                   	push   %ebx
-80104e6c:	6a 00                	push   $0x0
-80104e6e:	e8 bd fb ff ff       	call   80104a30 <argint>
-80104e73:	83 c4 10             	add    $0x10,%esp
-80104e76:	85 c0                	test   %eax,%eax
-80104e78:	78 5e                	js     80104ed8 <sys_write+0x78>
-  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104e7a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104e7e:	77 58                	ja     80104ed8 <sys_write+0x78>
-80104e80:	e8 bb eb ff ff       	call   80103a40 <myproc>
-80104e85:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104e88:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104e8c:	85 f6                	test   %esi,%esi
-80104e8e:	74 48                	je     80104ed8 <sys_write+0x78>
-  if(argfd(0, 0, &f) < 0 || argint(2, &n) < 0 || argptr(1, &p, n) < 0)
-80104e90:	83 ec 08             	sub    $0x8,%esp
-80104e93:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80104e96:	50                   	push   %eax
-80104e97:	6a 02                	push   $0x2
-80104e99:	e8 92 fb ff ff       	call   80104a30 <argint>
-80104e9e:	83 c4 10             	add    $0x10,%esp
-80104ea1:	85 c0                	test   %eax,%eax
-80104ea3:	78 33                	js     80104ed8 <sys_write+0x78>
-80104ea5:	83 ec 04             	sub    $0x4,%esp
-80104ea8:	ff 75 f0             	push   -0x10(%ebp)
-80104eab:	53                   	push   %ebx
-80104eac:	6a 01                	push   $0x1
-80104eae:	e8 cd fb ff ff       	call   80104a80 <argptr>
-80104eb3:	83 c4 10             	add    $0x10,%esp
-80104eb6:	85 c0                	test   %eax,%eax
-80104eb8:	78 1e                	js     80104ed8 <sys_write+0x78>
-  return filewrite(f, p, n);
-80104eba:	83 ec 04             	sub    $0x4,%esp
-80104ebd:	ff 75 f0             	push   -0x10(%ebp)
-80104ec0:	ff 75 f4             	push   -0xc(%ebp)
-80104ec3:	56                   	push   %esi
-80104ec4:	e8 77 c2 ff ff       	call   80101140 <filewrite>
-80104ec9:	83 c4 10             	add    $0x10,%esp
-}
-80104ecc:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104ecf:	5b                   	pop    %ebx
-80104ed0:	5e                   	pop    %esi
-80104ed1:	5d                   	pop    %ebp
-80104ed2:	c3                   	ret
-80104ed3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    return -1;
-80104ed8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104edd:	eb ed                	jmp    80104ecc <sys_write+0x6c>
-80104edf:	90                   	nop
-
-80104ee0 <sys_close>:
-{
-80104ee0:	55                   	push   %ebp
-80104ee1:	89 e5                	mov    %esp,%ebp
-80104ee3:	56                   	push   %esi
-80104ee4:	53                   	push   %ebx
-  if(argint(n, &fd) < 0)
-80104ee5:	8d 45 f4             	lea    -0xc(%ebp),%eax
-{
-80104ee8:	83 ec 18             	sub    $0x18,%esp
-  if(argint(n, &fd) < 0)
-80104eeb:	50                   	push   %eax
-80104eec:	6a 00                	push   $0x0
-80104eee:	e8 3d fb ff ff       	call   80104a30 <argint>
-80104ef3:	83 c4 10             	add    $0x10,%esp
-80104ef6:	85 c0                	test   %eax,%eax
-80104ef8:	78 3e                	js     80104f38 <sys_close+0x58>
-  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104efa:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104efe:	77 38                	ja     80104f38 <sys_close+0x58>
-80104f00:	e8 3b eb ff ff       	call   80103a40 <myproc>
-80104f05:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104f08:	8d 5a 08             	lea    0x8(%edx),%ebx
-80104f0b:	8b 74 98 08          	mov    0x8(%eax,%ebx,4),%esi
-80104f0f:	85 f6                	test   %esi,%esi
-80104f11:	74 25                	je     80104f38 <sys_close+0x58>
-  myproc()->ofile[fd] = 0;
-80104f13:	e8 28 eb ff ff       	call   80103a40 <myproc>
-  fileclose(f);
-80104f18:	83 ec 0c             	sub    $0xc,%esp
-  myproc()->ofile[fd] = 0;
-80104f1b:	c7 44 98 08 00 00 00 	movl   $0x0,0x8(%eax,%ebx,4)
-80104f22:	00 
-  fileclose(f);
-80104f23:	56                   	push   %esi
-80104f24:	e8 57 c0 ff ff       	call   80100f80 <fileclose>
-  return 0;
-80104f29:	83 c4 10             	add    $0x10,%esp
-80104f2c:	31 c0                	xor    %eax,%eax
-}
-80104f2e:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104f31:	5b                   	pop    %ebx
-80104f32:	5e                   	pop    %esi
-80104f33:	5d                   	pop    %ebp
-80104f34:	c3                   	ret
-80104f35:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80104f38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104f3d:	eb ef                	jmp    80104f2e <sys_close+0x4e>
-80104f3f:	90                   	nop
-
-80104f40 <sys_fstat>:
-{
-80104f40:	55                   	push   %ebp
-80104f41:	89 e5                	mov    %esp,%ebp
-80104f43:	56                   	push   %esi
-80104f44:	53                   	push   %ebx
-  if(argint(n, &fd) < 0)
-80104f45:	8d 5d f4             	lea    -0xc(%ebp),%ebx
-{
-80104f48:	83 ec 18             	sub    $0x18,%esp
-  if(argint(n, &fd) < 0)
-80104f4b:	53                   	push   %ebx
-80104f4c:	6a 00                	push   $0x0
-80104f4e:	e8 dd fa ff ff       	call   80104a30 <argint>
-80104f53:	83 c4 10             	add    $0x10,%esp
-80104f56:	85 c0                	test   %eax,%eax
-80104f58:	78 46                	js     80104fa0 <sys_fstat+0x60>
-  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
-80104f5a:	83 7d f4 0f          	cmpl   $0xf,-0xc(%ebp)
-80104f5e:	77 40                	ja     80104fa0 <sys_fstat+0x60>
-80104f60:	e8 db ea ff ff       	call   80103a40 <myproc>
-80104f65:	8b 55 f4             	mov    -0xc(%ebp),%edx
-80104f68:	8b 74 90 28          	mov    0x28(%eax,%edx,4),%esi
-80104f6c:	85 f6                	test   %esi,%esi
-80104f6e:	74 30                	je     80104fa0 <sys_fstat+0x60>
-  if(argfd(0, 0, &f) < 0 || argptr(1, (void*)&st, sizeof(*st)) < 0)
-80104f70:	83 ec 04             	sub    $0x4,%esp
-80104f73:	6a 14                	push   $0x14
-80104f75:	53                   	push   %ebx
-80104f76:	6a 01                	push   $0x1
-80104f78:	e8 03 fb ff ff       	call   80104a80 <argptr>
-80104f7d:	83 c4 10             	add    $0x10,%esp
-80104f80:	85 c0                	test   %eax,%eax
-80104f82:	78 1c                	js     80104fa0 <sys_fstat+0x60>
-  return filestat(f, st);
-80104f84:	83 ec 08             	sub    $0x8,%esp
-80104f87:	ff 75 f4             	push   -0xc(%ebp)
-80104f8a:	56                   	push   %esi
-80104f8b:	e8 d0 c0 ff ff       	call   80101060 <filestat>
-80104f90:	83 c4 10             	add    $0x10,%esp
-}
-80104f93:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80104f96:	5b                   	pop    %ebx
-80104f97:	5e                   	pop    %esi
-80104f98:	5d                   	pop    %ebp
-80104f99:	c3                   	ret
-80104f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return -1;
-80104fa0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80104fa5:	eb ec                	jmp    80104f93 <sys_fstat+0x53>
-80104fa7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80104fae:	00 
-80104faf:	90                   	nop
-
-80104fb0 <sys_link>:
-{
-80104fb0:	55                   	push   %ebp
-80104fb1:	89 e5                	mov    %esp,%ebp
-80104fb3:	57                   	push   %edi
-80104fb4:	56                   	push   %esi
-  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104fb5:	8d 45 d4             	lea    -0x2c(%ebp),%eax
-{
-80104fb8:	53                   	push   %ebx
-80104fb9:	83 ec 34             	sub    $0x34,%esp
-  if(argstr(0, &old) < 0 || argstr(1, &new) < 0)
-80104fbc:	50                   	push   %eax
-80104fbd:	6a 00                	push   $0x0
-80104fbf:	e8 2c fb ff ff       	call   80104af0 <argstr>
-80104fc4:	83 c4 10             	add    $0x10,%esp
-80104fc7:	85 c0                	test   %eax,%eax
-80104fc9:	0f 88 fb 00 00 00    	js     801050ca <sys_link+0x11a>
-80104fcf:	83 ec 08             	sub    $0x8,%esp
-80104fd2:	8d 45 d0             	lea    -0x30(%ebp),%eax
-80104fd5:	50                   	push   %eax
-80104fd6:	6a 01                	push   $0x1
-80104fd8:	e8 13 fb ff ff       	call   80104af0 <argstr>
-80104fdd:	83 c4 10             	add    $0x10,%esp
-80104fe0:	85 c0                	test   %eax,%eax
-80104fe2:	0f 88 e2 00 00 00    	js     801050ca <sys_link+0x11a>
-  begin_op();
-80104fe8:	e8 c3 dd ff ff       	call   80102db0 <begin_op>
-  if((ip = namei(old)) == 0){
-80104fed:	83 ec 0c             	sub    $0xc,%esp
-80104ff0:	ff 75 d4             	push   -0x2c(%ebp)
-80104ff3:	e8 f8 d0 ff ff       	call   801020f0 <namei>
-80104ff8:	83 c4 10             	add    $0x10,%esp
-80104ffb:	89 c3                	mov    %eax,%ebx
-80104ffd:	85 c0                	test   %eax,%eax
-80104fff:	0f 84 df 00 00 00    	je     801050e4 <sys_link+0x134>
-  ilock(ip);
-80105005:	83 ec 0c             	sub    $0xc,%esp
-80105008:	50                   	push   %eax
-80105009:	e8 02 c8 ff ff       	call   80101810 <ilock>
-  if(ip->type == T_DIR){
-8010500e:	83 c4 10             	add    $0x10,%esp
-80105011:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-80105016:	0f 84 b5 00 00 00    	je     801050d1 <sys_link+0x121>
-  iupdate(ip);
-8010501c:	83 ec 0c             	sub    $0xc,%esp
-  ip->nlink++;
-8010501f:	66 83 43 56 01       	addw   $0x1,0x56(%ebx)
-  if((dp = nameiparent(new, name)) == 0)
-80105024:	8d 7d da             	lea    -0x26(%ebp),%edi
-  iupdate(ip);
-80105027:	53                   	push   %ebx
-80105028:	e8 33 c7 ff ff       	call   80101760 <iupdate>
-  iunlock(ip);
-8010502d:	89 1c 24             	mov    %ebx,(%esp)
-80105030:	e8 bb c8 ff ff       	call   801018f0 <iunlock>
-  if((dp = nameiparent(new, name)) == 0)
-80105035:	58                   	pop    %eax
-80105036:	5a                   	pop    %edx
-80105037:	57                   	push   %edi
-80105038:	ff 75 d0             	push   -0x30(%ebp)
-8010503b:	e8 d0 d0 ff ff       	call   80102110 <nameiparent>
-80105040:	83 c4 10             	add    $0x10,%esp
-80105043:	89 c6                	mov    %eax,%esi
-80105045:	85 c0                	test   %eax,%eax
-80105047:	74 5b                	je     801050a4 <sys_link+0xf4>
-  ilock(dp);
-80105049:	83 ec 0c             	sub    $0xc,%esp
-8010504c:	50                   	push   %eax
-8010504d:	e8 be c7 ff ff       	call   80101810 <ilock>
-  if(dp->dev != ip->dev || dirlink(dp, name, ip->inum) < 0){
-80105052:	8b 03                	mov    (%ebx),%eax
-80105054:	83 c4 10             	add    $0x10,%esp
-80105057:	39 06                	cmp    %eax,(%esi)
-80105059:	75 3d                	jne    80105098 <sys_link+0xe8>
-8010505b:	83 ec 04             	sub    $0x4,%esp
-8010505e:	ff 73 04             	push   0x4(%ebx)
-80105061:	57                   	push   %edi
-80105062:	56                   	push   %esi
-80105063:	e8 c8 cf ff ff       	call   80102030 <dirlink>
-80105068:	83 c4 10             	add    $0x10,%esp
-8010506b:	85 c0                	test   %eax,%eax
-8010506d:	78 29                	js     80105098 <sys_link+0xe8>
-  iunlockput(dp);
-8010506f:	83 ec 0c             	sub    $0xc,%esp
-80105072:	56                   	push   %esi
-80105073:	e8 28 ca ff ff       	call   80101aa0 <iunlockput>
-  iput(ip);
-80105078:	89 1c 24             	mov    %ebx,(%esp)
-8010507b:	e8 c0 c8 ff ff       	call   80101940 <iput>
-  end_op();
-80105080:	e8 9b dd ff ff       	call   80102e20 <end_op>
-  return 0;
-80105085:	83 c4 10             	add    $0x10,%esp
-80105088:	31 c0                	xor    %eax,%eax
-}
-8010508a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010508d:	5b                   	pop    %ebx
-8010508e:	5e                   	pop    %esi
-8010508f:	5f                   	pop    %edi
-80105090:	5d                   	pop    %ebp
-80105091:	c3                   	ret
-80105092:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    iunlockput(dp);
-80105098:	83 ec 0c             	sub    $0xc,%esp
-8010509b:	56                   	push   %esi
-8010509c:	e8 ff c9 ff ff       	call   80101aa0 <iunlockput>
-    goto bad;
-801050a1:	83 c4 10             	add    $0x10,%esp
-  ilock(ip);
-801050a4:	83 ec 0c             	sub    $0xc,%esp
-801050a7:	53                   	push   %ebx
-801050a8:	e8 63 c7 ff ff       	call   80101810 <ilock>
-  ip->nlink--;
-801050ad:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
-  iupdate(ip);
-801050b2:	89 1c 24             	mov    %ebx,(%esp)
-801050b5:	e8 a6 c6 ff ff       	call   80101760 <iupdate>
-  iunlockput(ip);
-801050ba:	89 1c 24             	mov    %ebx,(%esp)
-801050bd:	e8 de c9 ff ff       	call   80101aa0 <iunlockput>
-  end_op();
-801050c2:	e8 59 dd ff ff       	call   80102e20 <end_op>
-  return -1;
-801050c7:	83 c4 10             	add    $0x10,%esp
-    return -1;
-801050ca:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-801050cf:	eb b9                	jmp    8010508a <sys_link+0xda>
-    iunlockput(ip);
-801050d1:	83 ec 0c             	sub    $0xc,%esp
-801050d4:	53                   	push   %ebx
-801050d5:	e8 c6 c9 ff ff       	call   80101aa0 <iunlockput>
-    end_op();
-801050da:	e8 41 dd ff ff       	call   80102e20 <end_op>
-    return -1;
-801050df:	83 c4 10             	add    $0x10,%esp
-801050e2:	eb e6                	jmp    801050ca <sys_link+0x11a>
-    end_op();
-801050e4:	e8 37 dd ff ff       	call   80102e20 <end_op>
-    return -1;
-801050e9:	eb df                	jmp    801050ca <sys_link+0x11a>
-801050eb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-801050f0 <sys_unlink>:
-{
-801050f0:	55                   	push   %ebp
-801050f1:	89 e5                	mov    %esp,%ebp
-801050f3:	57                   	push   %edi
-801050f4:	56                   	push   %esi
-  if(argstr(0, &path) < 0)
-801050f5:	8d 45 c0             	lea    -0x40(%ebp),%eax
-{
-801050f8:	53                   	push   %ebx
-801050f9:	83 ec 54             	sub    $0x54,%esp
-  if(argstr(0, &path) < 0)
-801050fc:	50                   	push   %eax
-801050fd:	6a 00                	push   $0x0
-801050ff:	e8 ec f9 ff ff       	call   80104af0 <argstr>
-80105104:	83 c4 10             	add    $0x10,%esp
-80105107:	85 c0                	test   %eax,%eax
-80105109:	0f 88 54 01 00 00    	js     80105263 <sys_unlink+0x173>
-  begin_op();
-8010510f:	e8 9c dc ff ff       	call   80102db0 <begin_op>
-  if((dp = nameiparent(path, name)) == 0){
-80105114:	8d 5d ca             	lea    -0x36(%ebp),%ebx
-80105117:	83 ec 08             	sub    $0x8,%esp
-8010511a:	53                   	push   %ebx
-8010511b:	ff 75 c0             	push   -0x40(%ebp)
-8010511e:	e8 ed cf ff ff       	call   80102110 <nameiparent>
-80105123:	83 c4 10             	add    $0x10,%esp
-80105126:	89 45 b4             	mov    %eax,-0x4c(%ebp)
-80105129:	85 c0                	test   %eax,%eax
-8010512b:	0f 84 58 01 00 00    	je     80105289 <sys_unlink+0x199>
-  ilock(dp);
-80105131:	8b 7d b4             	mov    -0x4c(%ebp),%edi
-80105134:	83 ec 0c             	sub    $0xc,%esp
-80105137:	57                   	push   %edi
-80105138:	e8 d3 c6 ff ff       	call   80101810 <ilock>
-  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
-8010513d:	58                   	pop    %eax
-8010513e:	5a                   	pop    %edx
-8010513f:	68 32 76 10 80       	push   $0x80107632
-80105144:	53                   	push   %ebx
-80105145:	e8 f6 cb ff ff       	call   80101d40 <namecmp>
-8010514a:	83 c4 10             	add    $0x10,%esp
-8010514d:	85 c0                	test   %eax,%eax
-8010514f:	0f 84 fb 00 00 00    	je     80105250 <sys_unlink+0x160>
-80105155:	83 ec 08             	sub    $0x8,%esp
-80105158:	68 31 76 10 80       	push   $0x80107631
-8010515d:	53                   	push   %ebx
-8010515e:	e8 dd cb ff ff       	call   80101d40 <namecmp>
-80105163:	83 c4 10             	add    $0x10,%esp
-80105166:	85 c0                	test   %eax,%eax
-80105168:	0f 84 e2 00 00 00    	je     80105250 <sys_unlink+0x160>
-  if((ip = dirlookup(dp, name, &off)) == 0)
-8010516e:	83 ec 04             	sub    $0x4,%esp
-80105171:	8d 45 c4             	lea    -0x3c(%ebp),%eax
-80105174:	50                   	push   %eax
-80105175:	53                   	push   %ebx
-80105176:	57                   	push   %edi
-80105177:	e8 e4 cb ff ff       	call   80101d60 <dirlookup>
-8010517c:	83 c4 10             	add    $0x10,%esp
-8010517f:	89 c3                	mov    %eax,%ebx
-80105181:	85 c0                	test   %eax,%eax
-80105183:	0f 84 c7 00 00 00    	je     80105250 <sys_unlink+0x160>
-  ilock(ip);
-80105189:	83 ec 0c             	sub    $0xc,%esp
-8010518c:	50                   	push   %eax
-8010518d:	e8 7e c6 ff ff       	call   80101810 <ilock>
-  if(ip->nlink < 1)
-80105192:	83 c4 10             	add    $0x10,%esp
-80105195:	66 83 7b 56 00       	cmpw   $0x0,0x56(%ebx)
-8010519a:	0f 8e 0a 01 00 00    	jle    801052aa <sys_unlink+0x1ba>
-  if(ip->type == T_DIR && !isdirempty(ip)){
-801051a0:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801051a5:	8d 7d d8             	lea    -0x28(%ebp),%edi
-801051a8:	74 66                	je     80105210 <sys_unlink+0x120>
-  memset(&de, 0, sizeof(de));
-801051aa:	83 ec 04             	sub    $0x4,%esp
-801051ad:	6a 10                	push   $0x10
-801051af:	6a 00                	push   $0x0
-801051b1:	57                   	push   %edi
-801051b2:	e8 c9 f5 ff ff       	call   80104780 <memset>
-  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-801051b7:	6a 10                	push   $0x10
-801051b9:	ff 75 c4             	push   -0x3c(%ebp)
-801051bc:	57                   	push   %edi
-801051bd:	ff 75 b4             	push   -0x4c(%ebp)
-801051c0:	e8 5b ca ff ff       	call   80101c20 <writei>
-801051c5:	83 c4 20             	add    $0x20,%esp
-801051c8:	83 f8 10             	cmp    $0x10,%eax
-801051cb:	0f 85 cc 00 00 00    	jne    8010529d <sys_unlink+0x1ad>
-  if(ip->type == T_DIR){
-801051d1:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-801051d6:	0f 84 94 00 00 00    	je     80105270 <sys_unlink+0x180>
-  iunlockput(dp);
-801051dc:	83 ec 0c             	sub    $0xc,%esp
-801051df:	ff 75 b4             	push   -0x4c(%ebp)
-801051e2:	e8 b9 c8 ff ff       	call   80101aa0 <iunlockput>
-  ip->nlink--;
-801051e7:	66 83 6b 56 01       	subw   $0x1,0x56(%ebx)
-  iupdate(ip);
-801051ec:	89 1c 24             	mov    %ebx,(%esp)
-801051ef:	e8 6c c5 ff ff       	call   80101760 <iupdate>
-  iunlockput(ip);
-801051f4:	89 1c 24             	mov    %ebx,(%esp)
-801051f7:	e8 a4 c8 ff ff       	call   80101aa0 <iunlockput>
-  end_op();
-801051fc:	e8 1f dc ff ff       	call   80102e20 <end_op>
-  return 0;
-80105201:	83 c4 10             	add    $0x10,%esp
-80105204:	31 c0                	xor    %eax,%eax
-}
-80105206:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105209:	5b                   	pop    %ebx
-8010520a:	5e                   	pop    %esi
-8010520b:	5f                   	pop    %edi
-8010520c:	5d                   	pop    %ebp
-8010520d:	c3                   	ret
-8010520e:	66 90                	xchg   %ax,%ax
-  for(off=2*sizeof(de); off<dp->size; off+=sizeof(de)){
-80105210:	83 7b 58 20          	cmpl   $0x20,0x58(%ebx)
-80105214:	76 94                	jbe    801051aa <sys_unlink+0xba>
-80105216:	be 20 00 00 00       	mov    $0x20,%esi
-8010521b:	eb 0b                	jmp    80105228 <sys_unlink+0x138>
-8010521d:	8d 76 00             	lea    0x0(%esi),%esi
-80105220:	83 c6 10             	add    $0x10,%esi
-80105223:	3b 73 58             	cmp    0x58(%ebx),%esi
-80105226:	73 82                	jae    801051aa <sys_unlink+0xba>
-    if(readi(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
-80105228:	6a 10                	push   $0x10
-8010522a:	56                   	push   %esi
-8010522b:	57                   	push   %edi
-8010522c:	53                   	push   %ebx
-8010522d:	e8 ee c8 ff ff       	call   80101b20 <readi>
-80105232:	83 c4 10             	add    $0x10,%esp
-80105235:	83 f8 10             	cmp    $0x10,%eax
-80105238:	75 56                	jne    80105290 <sys_unlink+0x1a0>
-    if(de.inum != 0)
-8010523a:	66 83 7d d8 00       	cmpw   $0x0,-0x28(%ebp)
-8010523f:	74 df                	je     80105220 <sys_unlink+0x130>
-    iunlockput(ip);
-80105241:	83 ec 0c             	sub    $0xc,%esp
-80105244:	53                   	push   %ebx
-80105245:	e8 56 c8 ff ff       	call   80101aa0 <iunlockput>
-    goto bad;
-8010524a:	83 c4 10             	add    $0x10,%esp
-8010524d:	8d 76 00             	lea    0x0(%esi),%esi
-  iunlockput(dp);
-80105250:	83 ec 0c             	sub    $0xc,%esp
-80105253:	ff 75 b4             	push   -0x4c(%ebp)
-80105256:	e8 45 c8 ff ff       	call   80101aa0 <iunlockput>
-  end_op();
-8010525b:	e8 c0 db ff ff       	call   80102e20 <end_op>
-  return -1;
-80105260:	83 c4 10             	add    $0x10,%esp
-    return -1;
-80105263:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105268:	eb 9c                	jmp    80105206 <sys_unlink+0x116>
-8010526a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    dp->nlink--;
-80105270:	8b 45 b4             	mov    -0x4c(%ebp),%eax
-    iupdate(dp);
-80105273:	83 ec 0c             	sub    $0xc,%esp
-    dp->nlink--;
-80105276:	66 83 68 56 01       	subw   $0x1,0x56(%eax)
-    iupdate(dp);
-8010527b:	50                   	push   %eax
-8010527c:	e8 df c4 ff ff       	call   80101760 <iupdate>
-80105281:	83 c4 10             	add    $0x10,%esp
-80105284:	e9 53 ff ff ff       	jmp    801051dc <sys_unlink+0xec>
-    end_op();
-80105289:	e8 92 db ff ff       	call   80102e20 <end_op>
-    return -1;
-8010528e:	eb d3                	jmp    80105263 <sys_unlink+0x173>
-      panic("isdirempty: readi");
-80105290:	83 ec 0c             	sub    $0xc,%esp
-80105293:	68 56 76 10 80       	push   $0x80107656
-80105298:	e8 e3 b0 ff ff       	call   80100380 <panic>
-    panic("unlink: writei");
-8010529d:	83 ec 0c             	sub    $0xc,%esp
-801052a0:	68 68 76 10 80       	push   $0x80107668
-801052a5:	e8 d6 b0 ff ff       	call   80100380 <panic>
-    panic("unlink: nlink < 1");
-801052aa:	83 ec 0c             	sub    $0xc,%esp
-801052ad:	68 44 76 10 80       	push   $0x80107644
-801052b2:	e8 c9 b0 ff ff       	call   80100380 <panic>
-801052b7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801052be:	00 
-801052bf:	90                   	nop
-
-801052c0 <sys_open>:
-
-int
-sys_open(void)
-{
-801052c0:	55                   	push   %ebp
-801052c1:	89 e5                	mov    %esp,%ebp
-801052c3:	57                   	push   %edi
-801052c4:	56                   	push   %esi
-  char *path;
-  int fd, omode;
-  struct file *f;
-  struct inode *ip;
-
-  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801052c5:	8d 45 e0             	lea    -0x20(%ebp),%eax
-{
-801052c8:	53                   	push   %ebx
-801052c9:	83 ec 24             	sub    $0x24,%esp
-  if(argstr(0, &path) < 0 || argint(1, &omode) < 0)
-801052cc:	50                   	push   %eax
-801052cd:	6a 00                	push   $0x0
-801052cf:	e8 1c f8 ff ff       	call   80104af0 <argstr>
-801052d4:	83 c4 10             	add    $0x10,%esp
-801052d7:	85 c0                	test   %eax,%eax
-801052d9:	0f 88 8e 00 00 00    	js     8010536d <sys_open+0xad>
-801052df:	83 ec 08             	sub    $0x8,%esp
-801052e2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801052e5:	50                   	push   %eax
-801052e6:	6a 01                	push   $0x1
-801052e8:	e8 43 f7 ff ff       	call   80104a30 <argint>
-801052ed:	83 c4 10             	add    $0x10,%esp
-801052f0:	85 c0                	test   %eax,%eax
-801052f2:	78 79                	js     8010536d <sys_open+0xad>
-    return -1;
-
-  begin_op();
-801052f4:	e8 b7 da ff ff       	call   80102db0 <begin_op>
-
-  if(omode & O_CREATE){
-801052f9:	f6 45 e5 02          	testb  $0x2,-0x1b(%ebp)
-801052fd:	75 79                	jne    80105378 <sys_open+0xb8>
-    if(ip == 0){
-      end_op();
-      return -1;
-    }
-  } else {
-    if((ip = namei(path)) == 0){
-801052ff:	83 ec 0c             	sub    $0xc,%esp
-80105302:	ff 75 e0             	push   -0x20(%ebp)
-80105305:	e8 e6 cd ff ff       	call   801020f0 <namei>
-8010530a:	83 c4 10             	add    $0x10,%esp
-8010530d:	89 c6                	mov    %eax,%esi
-8010530f:	85 c0                	test   %eax,%eax
-80105311:	0f 84 7e 00 00 00    	je     80105395 <sys_open+0xd5>
-      end_op();
-      return -1;
-    }
-    ilock(ip);
-80105317:	83 ec 0c             	sub    $0xc,%esp
-8010531a:	50                   	push   %eax
-8010531b:	e8 f0 c4 ff ff       	call   80101810 <ilock>
-    if(ip->type == T_DIR && omode != O_RDONLY){
-80105320:	83 c4 10             	add    $0x10,%esp
-80105323:	66 83 7e 50 01       	cmpw   $0x1,0x50(%esi)
-80105328:	0f 84 ba 00 00 00    	je     801053e8 <sys_open+0x128>
-      end_op();
-      return -1;
-    }
-  }
-
-  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
-8010532e:	e8 8d bb ff ff       	call   80100ec0 <filealloc>
-80105333:	89 c7                	mov    %eax,%edi
-80105335:	85 c0                	test   %eax,%eax
-80105337:	74 23                	je     8010535c <sys_open+0x9c>
-  struct proc *curproc = myproc();
-80105339:	e8 02 e7 ff ff       	call   80103a40 <myproc>
-  for(fd = 0; fd < NOFILE; fd++){
-8010533e:	31 db                	xor    %ebx,%ebx
-    if(curproc->ofile[fd] == 0){
-80105340:	8b 54 98 28          	mov    0x28(%eax,%ebx,4),%edx
-80105344:	85 d2                	test   %edx,%edx
-80105346:	74 58                	je     801053a0 <sys_open+0xe0>
-  for(fd = 0; fd < NOFILE; fd++){
-80105348:	83 c3 01             	add    $0x1,%ebx
-8010534b:	83 fb 10             	cmp    $0x10,%ebx
-8010534e:	75 f0                	jne    80105340 <sys_open+0x80>
-    if(f)
-      fileclose(f);
-80105350:	83 ec 0c             	sub    $0xc,%esp
-80105353:	57                   	push   %edi
-80105354:	e8 27 bc ff ff       	call   80100f80 <fileclose>
-80105359:	83 c4 10             	add    $0x10,%esp
-    iunlockput(ip);
-8010535c:	83 ec 0c             	sub    $0xc,%esp
-8010535f:	56                   	push   %esi
-80105360:	e8 3b c7 ff ff       	call   80101aa0 <iunlockput>
-    end_op();
-80105365:	e8 b6 da ff ff       	call   80102e20 <end_op>
-    return -1;
-8010536a:	83 c4 10             	add    $0x10,%esp
-    return -1;
-8010536d:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105372:	eb 65                	jmp    801053d9 <sys_open+0x119>
-80105374:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    ip = create(path, T_FILE, 0, 0);
-80105378:	83 ec 0c             	sub    $0xc,%esp
-8010537b:	31 c9                	xor    %ecx,%ecx
-8010537d:	ba 02 00 00 00       	mov    $0x2,%edx
-80105382:	6a 00                	push   $0x0
-80105384:	8b 45 e0             	mov    -0x20(%ebp),%eax
-80105387:	e8 54 f8 ff ff       	call   80104be0 <create>
-    if(ip == 0){
-8010538c:	83 c4 10             	add    $0x10,%esp
-    ip = create(path, T_FILE, 0, 0);
-8010538f:	89 c6                	mov    %eax,%esi
-    if(ip == 0){
-80105391:	85 c0                	test   %eax,%eax
-80105393:	75 99                	jne    8010532e <sys_open+0x6e>
-      end_op();
-80105395:	e8 86 da ff ff       	call   80102e20 <end_op>
-      return -1;
-8010539a:	eb d1                	jmp    8010536d <sys_open+0xad>
-8010539c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  }
-  iunlock(ip);
-801053a0:	83 ec 0c             	sub    $0xc,%esp
-      curproc->ofile[fd] = f;
-801053a3:	89 7c 98 28          	mov    %edi,0x28(%eax,%ebx,4)
-  iunlock(ip);
-801053a7:	56                   	push   %esi
-801053a8:	e8 43 c5 ff ff       	call   801018f0 <iunlock>
-  end_op();
-801053ad:	e8 6e da ff ff       	call   80102e20 <end_op>
-
-  f->type = FD_INODE;
-801053b2:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
-  f->ip = ip;
-  f->off = 0;
-  f->readable = !(omode & O_WRONLY);
-801053b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801053bb:	83 c4 10             	add    $0x10,%esp
-  f->ip = ip;
-801053be:	89 77 10             	mov    %esi,0x10(%edi)
-  f->readable = !(omode & O_WRONLY);
-801053c1:	89 d0                	mov    %edx,%eax
-  f->off = 0;
-801053c3:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
-  f->readable = !(omode & O_WRONLY);
-801053ca:	f7 d0                	not    %eax
-801053cc:	83 e0 01             	and    $0x1,%eax
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801053cf:	83 e2 03             	and    $0x3,%edx
-  f->readable = !(omode & O_WRONLY);
-801053d2:	88 47 08             	mov    %al,0x8(%edi)
-  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
-801053d5:	0f 95 47 09          	setne  0x9(%edi)
-  return fd;
-}
-801053d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801053dc:	89 d8                	mov    %ebx,%eax
-801053de:	5b                   	pop    %ebx
-801053df:	5e                   	pop    %esi
-801053e0:	5f                   	pop    %edi
-801053e1:	5d                   	pop    %ebp
-801053e2:	c3                   	ret
-801053e3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    if(ip->type == T_DIR && omode != O_RDONLY){
-801053e8:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-801053eb:	85 c9                	test   %ecx,%ecx
-801053ed:	0f 84 3b ff ff ff    	je     8010532e <sys_open+0x6e>
-801053f3:	e9 64 ff ff ff       	jmp    8010535c <sys_open+0x9c>
-801053f8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801053ff:	00 
-
-80105400 <sys_mkdir>:
-
-int
-sys_mkdir(void)
-{
-80105400:	55                   	push   %ebp
-80105401:	89 e5                	mov    %esp,%ebp
-80105403:	83 ec 18             	sub    $0x18,%esp
-  char *path;
-  struct inode *ip;
-
-  begin_op();
-80105406:	e8 a5 d9 ff ff       	call   80102db0 <begin_op>
-  if(argstr(0, &path) < 0 || (ip = create(path, T_DIR, 0, 0)) == 0){
-8010540b:	83 ec 08             	sub    $0x8,%esp
-8010540e:	8d 45 f4             	lea    -0xc(%ebp),%eax
-80105411:	50                   	push   %eax
-80105412:	6a 00                	push   $0x0
-80105414:	e8 d7 f6 ff ff       	call   80104af0 <argstr>
-80105419:	83 c4 10             	add    $0x10,%esp
-8010541c:	85 c0                	test   %eax,%eax
-8010541e:	78 30                	js     80105450 <sys_mkdir+0x50>
-80105420:	83 ec 0c             	sub    $0xc,%esp
-80105423:	8b 45 f4             	mov    -0xc(%ebp),%eax
-80105426:	31 c9                	xor    %ecx,%ecx
-80105428:	ba 01 00 00 00       	mov    $0x1,%edx
-8010542d:	6a 00                	push   $0x0
-8010542f:	e8 ac f7 ff ff       	call   80104be0 <create>
-80105434:	83 c4 10             	add    $0x10,%esp
-80105437:	85 c0                	test   %eax,%eax
-80105439:	74 15                	je     80105450 <sys_mkdir+0x50>
-    end_op();
-    return -1;
-  }
-  iunlockput(ip);
-8010543b:	83 ec 0c             	sub    $0xc,%esp
-8010543e:	50                   	push   %eax
-8010543f:	e8 5c c6 ff ff       	call   80101aa0 <iunlockput>
-  end_op();
-80105444:	e8 d7 d9 ff ff       	call   80102e20 <end_op>
-  return 0;
-80105449:	83 c4 10             	add    $0x10,%esp
-8010544c:	31 c0                	xor    %eax,%eax
-}
-8010544e:	c9                   	leave
-8010544f:	c3                   	ret
-    end_op();
-80105450:	e8 cb d9 ff ff       	call   80102e20 <end_op>
-    return -1;
-80105455:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-8010545a:	c9                   	leave
-8010545b:	c3                   	ret
-8010545c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80105460 <sys_mknod>:
-
-int
-sys_mknod(void)
-{
-80105460:	55                   	push   %ebp
-80105461:	89 e5                	mov    %esp,%ebp
-80105463:	83 ec 18             	sub    $0x18,%esp
-  struct inode *ip;
-  char *path;
-  int major, minor;
-
-  begin_op();
-80105466:	e8 45 d9 ff ff       	call   80102db0 <begin_op>
-  if((argstr(0, &path)) < 0 ||
-8010546b:	83 ec 08             	sub    $0x8,%esp
-8010546e:	8d 45 ec             	lea    -0x14(%ebp),%eax
-80105471:	50                   	push   %eax
-80105472:	6a 00                	push   $0x0
-80105474:	e8 77 f6 ff ff       	call   80104af0 <argstr>
-80105479:	83 c4 10             	add    $0x10,%esp
-8010547c:	85 c0                	test   %eax,%eax
-8010547e:	78 60                	js     801054e0 <sys_mknod+0x80>
-     argint(1, &major) < 0 ||
-80105480:	83 ec 08             	sub    $0x8,%esp
-80105483:	8d 45 f0             	lea    -0x10(%ebp),%eax
-80105486:	50                   	push   %eax
-80105487:	6a 01                	push   $0x1
-80105489:	e8 a2 f5 ff ff       	call   80104a30 <argint>
-  if((argstr(0, &path)) < 0 ||
-8010548e:	83 c4 10             	add    $0x10,%esp
-80105491:	85 c0                	test   %eax,%eax
-80105493:	78 4b                	js     801054e0 <sys_mknod+0x80>
-     argint(2, &minor) < 0 ||
-80105495:	83 ec 08             	sub    $0x8,%esp
-80105498:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010549b:	50                   	push   %eax
-8010549c:	6a 02                	push   $0x2
-8010549e:	e8 8d f5 ff ff       	call   80104a30 <argint>
-     argint(1, &major) < 0 ||
-801054a3:	83 c4 10             	add    $0x10,%esp
-801054a6:	85 c0                	test   %eax,%eax
-801054a8:	78 36                	js     801054e0 <sys_mknod+0x80>
-     (ip = create(path, T_DEV, major, minor)) == 0){
-801054aa:	0f bf 45 f4          	movswl -0xc(%ebp),%eax
-801054ae:	83 ec 0c             	sub    $0xc,%esp
-801054b1:	0f bf 4d f0          	movswl -0x10(%ebp),%ecx
-801054b5:	ba 03 00 00 00       	mov    $0x3,%edx
-801054ba:	50                   	push   %eax
-801054bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
-801054be:	e8 1d f7 ff ff       	call   80104be0 <create>
-     argint(2, &minor) < 0 ||
-801054c3:	83 c4 10             	add    $0x10,%esp
-801054c6:	85 c0                	test   %eax,%eax
-801054c8:	74 16                	je     801054e0 <sys_mknod+0x80>
-    end_op();
-    return -1;
-  }
-  iunlockput(ip);
-801054ca:	83 ec 0c             	sub    $0xc,%esp
-801054cd:	50                   	push   %eax
-801054ce:	e8 cd c5 ff ff       	call   80101aa0 <iunlockput>
-  end_op();
-801054d3:	e8 48 d9 ff ff       	call   80102e20 <end_op>
-  return 0;
-801054d8:	83 c4 10             	add    $0x10,%esp
-801054db:	31 c0                	xor    %eax,%eax
-}
-801054dd:	c9                   	leave
-801054de:	c3                   	ret
-801054df:	90                   	nop
-    end_op();
-801054e0:	e8 3b d9 ff ff       	call   80102e20 <end_op>
-    return -1;
-801054e5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801054ea:	c9                   	leave
-801054eb:	c3                   	ret
-801054ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801054f0 <sys_chdir>:
-
-int
-sys_chdir(void)
-{
-801054f0:	55                   	push   %ebp
-801054f1:	89 e5                	mov    %esp,%ebp
-801054f3:	56                   	push   %esi
-801054f4:	53                   	push   %ebx
-801054f5:	83 ec 10             	sub    $0x10,%esp
-  char *path;
-  struct inode *ip;
-  struct proc *curproc = myproc();
-801054f8:	e8 43 e5 ff ff       	call   80103a40 <myproc>
-801054fd:	89 c6                	mov    %eax,%esi
-  
-  begin_op();
-801054ff:	e8 ac d8 ff ff       	call   80102db0 <begin_op>
-  if(argstr(0, &path) < 0 || (ip = namei(path)) == 0){
-80105504:	83 ec 08             	sub    $0x8,%esp
-80105507:	8d 45 f4             	lea    -0xc(%ebp),%eax
-8010550a:	50                   	push   %eax
-8010550b:	6a 00                	push   $0x0
-8010550d:	e8 de f5 ff ff       	call   80104af0 <argstr>
-80105512:	83 c4 10             	add    $0x10,%esp
-80105515:	85 c0                	test   %eax,%eax
-80105517:	78 77                	js     80105590 <sys_chdir+0xa0>
-80105519:	83 ec 0c             	sub    $0xc,%esp
-8010551c:	ff 75 f4             	push   -0xc(%ebp)
-8010551f:	e8 cc cb ff ff       	call   801020f0 <namei>
-80105524:	83 c4 10             	add    $0x10,%esp
-80105527:	89 c3                	mov    %eax,%ebx
-80105529:	85 c0                	test   %eax,%eax
-8010552b:	74 63                	je     80105590 <sys_chdir+0xa0>
-    end_op();
-    return -1;
-  }
-  ilock(ip);
-8010552d:	83 ec 0c             	sub    $0xc,%esp
-80105530:	50                   	push   %eax
-80105531:	e8 da c2 ff ff       	call   80101810 <ilock>
-  if(ip->type != T_DIR){
-80105536:	83 c4 10             	add    $0x10,%esp
-80105539:	66 83 7b 50 01       	cmpw   $0x1,0x50(%ebx)
-8010553e:	75 30                	jne    80105570 <sys_chdir+0x80>
-    iunlockput(ip);
-    end_op();
-    return -1;
-  }
-  iunlock(ip);
-80105540:	83 ec 0c             	sub    $0xc,%esp
-80105543:	53                   	push   %ebx
-80105544:	e8 a7 c3 ff ff       	call   801018f0 <iunlock>
-  iput(curproc->cwd);
-80105549:	58                   	pop    %eax
-8010554a:	ff 76 68             	push   0x68(%esi)
-8010554d:	e8 ee c3 ff ff       	call   80101940 <iput>
-  end_op();
-80105552:	e8 c9 d8 ff ff       	call   80102e20 <end_op>
-  curproc->cwd = ip;
-80105557:	89 5e 68             	mov    %ebx,0x68(%esi)
-  return 0;
-8010555a:	83 c4 10             	add    $0x10,%esp
-8010555d:	31 c0                	xor    %eax,%eax
-}
-8010555f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105562:	5b                   	pop    %ebx
-80105563:	5e                   	pop    %esi
-80105564:	5d                   	pop    %ebp
-80105565:	c3                   	ret
-80105566:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010556d:	00 
-8010556e:	66 90                	xchg   %ax,%ax
-    iunlockput(ip);
-80105570:	83 ec 0c             	sub    $0xc,%esp
-80105573:	53                   	push   %ebx
-80105574:	e8 27 c5 ff ff       	call   80101aa0 <iunlockput>
-    end_op();
-80105579:	e8 a2 d8 ff ff       	call   80102e20 <end_op>
-    return -1;
-8010557e:	83 c4 10             	add    $0x10,%esp
-    return -1;
-80105581:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105586:	eb d7                	jmp    8010555f <sys_chdir+0x6f>
-80105588:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010558f:	00 
-    end_op();
-80105590:	e8 8b d8 ff ff       	call   80102e20 <end_op>
-    return -1;
-80105595:	eb ea                	jmp    80105581 <sys_chdir+0x91>
-80105597:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010559e:	00 
-8010559f:	90                   	nop
-
-801055a0 <sys_exec>:
-
-int
-sys_exec(void)
-{
-801055a0:	55                   	push   %ebp
-801055a1:	89 e5                	mov    %esp,%ebp
-801055a3:	57                   	push   %edi
-801055a4:	56                   	push   %esi
-  char *path, *argv[MAXARG];
-  int i;
-  uint uargv, uarg;
-
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801055a5:	8d 85 5c ff ff ff    	lea    -0xa4(%ebp),%eax
-{
-801055ab:	53                   	push   %ebx
-801055ac:	81 ec a4 00 00 00    	sub    $0xa4,%esp
-  if(argstr(0, &path) < 0 || argint(1, (int*)&uargv) < 0){
-801055b2:	50                   	push   %eax
-801055b3:	6a 00                	push   $0x0
-801055b5:	e8 36 f5 ff ff       	call   80104af0 <argstr>
-801055ba:	83 c4 10             	add    $0x10,%esp
-801055bd:	85 c0                	test   %eax,%eax
-801055bf:	0f 88 87 00 00 00    	js     8010564c <sys_exec+0xac>
-801055c5:	83 ec 08             	sub    $0x8,%esp
-801055c8:	8d 85 60 ff ff ff    	lea    -0xa0(%ebp),%eax
-801055ce:	50                   	push   %eax
-801055cf:	6a 01                	push   $0x1
-801055d1:	e8 5a f4 ff ff       	call   80104a30 <argint>
-801055d6:	83 c4 10             	add    $0x10,%esp
-801055d9:	85 c0                	test   %eax,%eax
-801055db:	78 6f                	js     8010564c <sys_exec+0xac>
-    return -1;
-  }
-  memset(argv, 0, sizeof(argv));
-801055dd:	83 ec 04             	sub    $0x4,%esp
-801055e0:	8d b5 68 ff ff ff    	lea    -0x98(%ebp),%esi
-  for(i=0;; i++){
-801055e6:	31 db                	xor    %ebx,%ebx
-  memset(argv, 0, sizeof(argv));
-801055e8:	68 80 00 00 00       	push   $0x80
-801055ed:	6a 00                	push   $0x0
-801055ef:	56                   	push   %esi
-801055f0:	e8 8b f1 ff ff       	call   80104780 <memset>
-801055f5:	83 c4 10             	add    $0x10,%esp
-801055f8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801055ff:	00 
-    if(i >= NELEM(argv))
-      return -1;
-    if(fetchint(uargv+4*i, (int*)&uarg) < 0)
-80105600:	83 ec 08             	sub    $0x8,%esp
-80105603:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
-80105609:	8d 3c 9d 00 00 00 00 	lea    0x0(,%ebx,4),%edi
-80105610:	50                   	push   %eax
-80105611:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
-80105617:	01 f8                	add    %edi,%eax
-80105619:	50                   	push   %eax
-8010561a:	e8 81 f3 ff ff       	call   801049a0 <fetchint>
-8010561f:	83 c4 10             	add    $0x10,%esp
-80105622:	85 c0                	test   %eax,%eax
-80105624:	78 26                	js     8010564c <sys_exec+0xac>
-      return -1;
-    if(uarg == 0){
-80105626:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
-8010562c:	85 c0                	test   %eax,%eax
-8010562e:	74 30                	je     80105660 <sys_exec+0xc0>
-      argv[i] = 0;
-      break;
-    }
-    if(fetchstr(uarg, &argv[i]) < 0)
-80105630:	83 ec 08             	sub    $0x8,%esp
-80105633:	8d 14 3e             	lea    (%esi,%edi,1),%edx
-80105636:	52                   	push   %edx
-80105637:	50                   	push   %eax
-80105638:	e8 a3 f3 ff ff       	call   801049e0 <fetchstr>
-8010563d:	83 c4 10             	add    $0x10,%esp
-80105640:	85 c0                	test   %eax,%eax
-80105642:	78 08                	js     8010564c <sys_exec+0xac>
-  for(i=0;; i++){
-80105644:	83 c3 01             	add    $0x1,%ebx
-    if(i >= NELEM(argv))
-80105647:	83 fb 20             	cmp    $0x20,%ebx
-8010564a:	75 b4                	jne    80105600 <sys_exec+0x60>
-      return -1;
-  }
-  return exec(path, argv);
-}
-8010564c:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    return -1;
-8010564f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105654:	5b                   	pop    %ebx
-80105655:	5e                   	pop    %esi
-80105656:	5f                   	pop    %edi
-80105657:	5d                   	pop    %ebp
-80105658:	c3                   	ret
-80105659:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      argv[i] = 0;
-80105660:	c7 84 9d 68 ff ff ff 	movl   $0x0,-0x98(%ebp,%ebx,4)
-80105667:	00 00 00 00 
-  return exec(path, argv);
-8010566b:	83 ec 08             	sub    $0x8,%esp
-8010566e:	56                   	push   %esi
-8010566f:	ff b5 5c ff ff ff    	push   -0xa4(%ebp)
-80105675:	e8 a6 b4 ff ff       	call   80100b20 <exec>
-8010567a:	83 c4 10             	add    $0x10,%esp
-}
-8010567d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105680:	5b                   	pop    %ebx
-80105681:	5e                   	pop    %esi
-80105682:	5f                   	pop    %edi
-80105683:	5d                   	pop    %ebp
-80105684:	c3                   	ret
-80105685:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010568c:	00 
-8010568d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80105690 <sys_pipe>:
-
-int
-sys_pipe(void)
-{
-80105690:	55                   	push   %ebp
-80105691:	89 e5                	mov    %esp,%ebp
-80105693:	57                   	push   %edi
-80105694:	56                   	push   %esi
-  int *fd;
-  struct file *rf, *wf;
-  int fd0, fd1;
-
-  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-80105695:	8d 45 dc             	lea    -0x24(%ebp),%eax
-{
-80105698:	53                   	push   %ebx
-80105699:	83 ec 20             	sub    $0x20,%esp
-  if(argptr(0, (void*)&fd, 2*sizeof(fd[0])) < 0)
-8010569c:	6a 08                	push   $0x8
-8010569e:	50                   	push   %eax
-8010569f:	6a 00                	push   $0x0
-801056a1:	e8 da f3 ff ff       	call   80104a80 <argptr>
-801056a6:	83 c4 10             	add    $0x10,%esp
-801056a9:	85 c0                	test   %eax,%eax
-801056ab:	0f 88 8b 00 00 00    	js     8010573c <sys_pipe+0xac>
-    return -1;
-  if(pipealloc(&rf, &wf) < 0)
-801056b1:	83 ec 08             	sub    $0x8,%esp
-801056b4:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-801056b7:	50                   	push   %eax
-801056b8:	8d 45 e0             	lea    -0x20(%ebp),%eax
-801056bb:	50                   	push   %eax
-801056bc:	e8 bf dd ff ff       	call   80103480 <pipealloc>
-801056c1:	83 c4 10             	add    $0x10,%esp
-801056c4:	85 c0                	test   %eax,%eax
-801056c6:	78 74                	js     8010573c <sys_pipe+0xac>
-    return -1;
-  fd0 = -1;
-  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801056c8:	8b 7d e0             	mov    -0x20(%ebp),%edi
-  for(fd = 0; fd < NOFILE; fd++){
-801056cb:	31 db                	xor    %ebx,%ebx
-  struct proc *curproc = myproc();
-801056cd:	e8 6e e3 ff ff       	call   80103a40 <myproc>
-    if(curproc->ofile[fd] == 0){
-801056d2:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-801056d6:	85 f6                	test   %esi,%esi
-801056d8:	74 16                	je     801056f0 <sys_pipe+0x60>
-801056da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  for(fd = 0; fd < NOFILE; fd++){
-801056e0:	83 c3 01             	add    $0x1,%ebx
-801056e3:	83 fb 10             	cmp    $0x10,%ebx
-801056e6:	74 3d                	je     80105725 <sys_pipe+0x95>
-    if(curproc->ofile[fd] == 0){
-801056e8:	8b 74 98 28          	mov    0x28(%eax,%ebx,4),%esi
-801056ec:	85 f6                	test   %esi,%esi
-801056ee:	75 f0                	jne    801056e0 <sys_pipe+0x50>
-      curproc->ofile[fd] = f;
-801056f0:	8d 73 08             	lea    0x8(%ebx),%esi
-801056f3:	89 7c b0 08          	mov    %edi,0x8(%eax,%esi,4)
-  if((fd0 = fdalloc(rf)) < 0 || (fd1 = fdalloc(wf)) < 0){
-801056f7:	8b 7d e4             	mov    -0x1c(%ebp),%edi
-  struct proc *curproc = myproc();
-801056fa:	e8 41 e3 ff ff       	call   80103a40 <myproc>
-  for(fd = 0; fd < NOFILE; fd++){
-801056ff:	31 d2                	xor    %edx,%edx
-80105701:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(curproc->ofile[fd] == 0){
-80105708:	8b 4c 90 28          	mov    0x28(%eax,%edx,4),%ecx
-8010570c:	85 c9                	test   %ecx,%ecx
-8010570e:	74 38                	je     80105748 <sys_pipe+0xb8>
-  for(fd = 0; fd < NOFILE; fd++){
-80105710:	83 c2 01             	add    $0x1,%edx
-80105713:	83 fa 10             	cmp    $0x10,%edx
-80105716:	75 f0                	jne    80105708 <sys_pipe+0x78>
-    if(fd0 >= 0)
-      myproc()->ofile[fd0] = 0;
-80105718:	e8 23 e3 ff ff       	call   80103a40 <myproc>
-8010571d:	c7 44 b0 08 00 00 00 	movl   $0x0,0x8(%eax,%esi,4)
-80105724:	00 
-    fileclose(rf);
-80105725:	83 ec 0c             	sub    $0xc,%esp
-80105728:	ff 75 e0             	push   -0x20(%ebp)
-8010572b:	e8 50 b8 ff ff       	call   80100f80 <fileclose>
-    fileclose(wf);
-80105730:	58                   	pop    %eax
-80105731:	ff 75 e4             	push   -0x1c(%ebp)
-80105734:	e8 47 b8 ff ff       	call   80100f80 <fileclose>
-    return -1;
-80105739:	83 c4 10             	add    $0x10,%esp
-    return -1;
-8010573c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-80105741:	eb 16                	jmp    80105759 <sys_pipe+0xc9>
-80105743:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      curproc->ofile[fd] = f;
-80105748:	89 7c 90 28          	mov    %edi,0x28(%eax,%edx,4)
-  }
-  fd[0] = fd0;
-8010574c:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010574f:	89 18                	mov    %ebx,(%eax)
-  fd[1] = fd1;
-80105751:	8b 45 dc             	mov    -0x24(%ebp),%eax
-80105754:	89 50 04             	mov    %edx,0x4(%eax)
-  return 0;
-80105757:	31 c0                	xor    %eax,%eax
-}
-80105759:	8d 65 f4             	lea    -0xc(%ebp),%esp
-8010575c:	5b                   	pop    %ebx
-8010575d:	5e                   	pop    %esi
-8010575e:	5f                   	pop    %edi
-8010575f:	5d                   	pop    %ebp
-80105760:	c3                   	ret
-80105761:	66 90                	xchg   %ax,%ax
-80105763:	66 90                	xchg   %ax,%ax
-80105765:	66 90                	xchg   %ax,%ax
-80105767:	66 90                	xchg   %ax,%ax
-80105769:	66 90                	xchg   %ax,%ax
-8010576b:	66 90                	xchg   %ax,%ax
-8010576d:	66 90                	xchg   %ax,%ax
-8010576f:	90                   	nop
-
-80105770 <sys_fork>:
-#include "proc.h"
-
-int
-sys_fork(void)
-{
-  return fork();
-80105770:	e9 6b e4 ff ff       	jmp    80103be0 <fork>
-80105775:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010577c:	00 
-8010577d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80105780 <sys_exit>:
-}
-
-int
-sys_exit(void)
-{
-80105780:	55                   	push   %ebp
-80105781:	89 e5                	mov    %esp,%ebp
-80105783:	83 ec 08             	sub    $0x8,%esp
-  exit();
-80105786:	e8 c5 e6 ff ff       	call   80103e50 <exit>
-  return 0;  // not reached
-}
-8010578b:	31 c0                	xor    %eax,%eax
-8010578d:	c9                   	leave
-8010578e:	c3                   	ret
-8010578f:	90                   	nop
-
-80105790 <sys_wait>:
-
-int
-sys_wait(void)
-{
-  return wait();
-80105790:	e9 eb e7 ff ff       	jmp    80103f80 <wait>
-80105795:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010579c:	00 
-8010579d:	8d 76 00             	lea    0x0(%esi),%esi
-
-801057a0 <sys_kill>:
-}
-
-int
-sys_kill(void)
-{
-801057a0:	55                   	push   %ebp
-801057a1:	89 e5                	mov    %esp,%ebp
-801057a3:	83 ec 20             	sub    $0x20,%esp
-  int pid;
-
-  if(argint(0, &pid) < 0)
-801057a6:	8d 45 f4             	lea    -0xc(%ebp),%eax
-801057a9:	50                   	push   %eax
-801057aa:	6a 00                	push   $0x0
-801057ac:	e8 7f f2 ff ff       	call   80104a30 <argint>
-801057b1:	83 c4 10             	add    $0x10,%esp
-801057b4:	85 c0                	test   %eax,%eax
-801057b6:	78 18                	js     801057d0 <sys_kill+0x30>
-    return -1;
-  return kill(pid);
-801057b8:	83 ec 0c             	sub    $0xc,%esp
-801057bb:	ff 75 f4             	push   -0xc(%ebp)
-801057be:	e8 5d ea ff ff       	call   80104220 <kill>
-801057c3:	83 c4 10             	add    $0x10,%esp
-}
-801057c6:	c9                   	leave
-801057c7:	c3                   	ret
-801057c8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801057cf:	00 
-801057d0:	c9                   	leave
-    return -1;
-801057d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801057d6:	c3                   	ret
-801057d7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801057de:	00 
-801057df:	90                   	nop
-
-801057e0 <sys_getpid>:
-
-int
-sys_getpid(void)
-{
-801057e0:	55                   	push   %ebp
-801057e1:	89 e5                	mov    %esp,%ebp
-801057e3:	83 ec 08             	sub    $0x8,%esp
-  return myproc()->pid;
-801057e6:	e8 55 e2 ff ff       	call   80103a40 <myproc>
-801057eb:	8b 40 10             	mov    0x10(%eax),%eax
-}
-801057ee:	c9                   	leave
-801057ef:	c3                   	ret
-
-801057f0 <sys_sbrk>:
-
-int
-sys_sbrk(void)
-{
-801057f0:	55                   	push   %ebp
-801057f1:	89 e5                	mov    %esp,%ebp
-801057f3:	53                   	push   %ebx
-  int addr;
-  int n;
-
-  if(argint(0, &n) < 0)
-801057f4:	8d 45 f4             	lea    -0xc(%ebp),%eax
-{
-801057f7:	83 ec 1c             	sub    $0x1c,%esp
-  if(argint(0, &n) < 0)
-801057fa:	50                   	push   %eax
-801057fb:	6a 00                	push   $0x0
-801057fd:	e8 2e f2 ff ff       	call   80104a30 <argint>
-80105802:	83 c4 10             	add    $0x10,%esp
-80105805:	85 c0                	test   %eax,%eax
-80105807:	78 27                	js     80105830 <sys_sbrk+0x40>
-    return -1;
-  addr = myproc()->sz;
-80105809:	e8 32 e2 ff ff       	call   80103a40 <myproc>
-  if(growproc(n) < 0)
-8010580e:	83 ec 0c             	sub    $0xc,%esp
-  addr = myproc()->sz;
-80105811:	8b 18                	mov    (%eax),%ebx
-  if(growproc(n) < 0)
-80105813:	ff 75 f4             	push   -0xc(%ebp)
-80105816:	e8 45 e3 ff ff       	call   80103b60 <growproc>
-8010581b:	83 c4 10             	add    $0x10,%esp
-8010581e:	85 c0                	test   %eax,%eax
-80105820:	78 0e                	js     80105830 <sys_sbrk+0x40>
-    return -1;
-  return addr;
-}
-80105822:	89 d8                	mov    %ebx,%eax
-80105824:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105827:	c9                   	leave
-80105828:	c3                   	ret
-80105829:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    return -1;
-80105830:	bb ff ff ff ff       	mov    $0xffffffff,%ebx
-80105835:	eb eb                	jmp    80105822 <sys_sbrk+0x32>
-80105837:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010583e:	00 
-8010583f:	90                   	nop
-
-80105840 <sys_sleep>:
-
-int
-sys_sleep(void)
-{
-80105840:	55                   	push   %ebp
-80105841:	89 e5                	mov    %esp,%ebp
-80105843:	53                   	push   %ebx
-  int n;
-  uint ticks0;
-
-  if(argint(0, &n) < 0)
-80105844:	8d 45 f4             	lea    -0xc(%ebp),%eax
-{
-80105847:	83 ec 1c             	sub    $0x1c,%esp
-  if(argint(0, &n) < 0)
-8010584a:	50                   	push   %eax
-8010584b:	6a 00                	push   $0x0
-8010584d:	e8 de f1 ff ff       	call   80104a30 <argint>
-80105852:	83 c4 10             	add    $0x10,%esp
-80105855:	85 c0                	test   %eax,%eax
-80105857:	78 64                	js     801058bd <sys_sleep+0x7d>
-    return -1;
-  acquire(&tickslock);
-80105859:	83 ec 0c             	sub    $0xc,%esp
-8010585c:	68 a0 3c 11 80       	push   $0x80113ca0
-80105861:	e8 1a ee ff ff       	call   80104680 <acquire>
-  ticks0 = ticks;
-  while(ticks - ticks0 < n){
-80105866:	8b 55 f4             	mov    -0xc(%ebp),%edx
-  ticks0 = ticks;
-80105869:	8b 1d 80 3c 11 80    	mov    0x80113c80,%ebx
-  while(ticks - ticks0 < n){
-8010586f:	83 c4 10             	add    $0x10,%esp
-80105872:	85 d2                	test   %edx,%edx
-80105874:	75 2b                	jne    801058a1 <sys_sleep+0x61>
-80105876:	eb 58                	jmp    801058d0 <sys_sleep+0x90>
-80105878:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010587f:	00 
-    if(myproc()->killed){
-      release(&tickslock);
-      return -1;
-    }
-    sleep(&ticks, &tickslock);
-80105880:	83 ec 08             	sub    $0x8,%esp
-80105883:	68 a0 3c 11 80       	push   $0x80113ca0
-80105888:	68 80 3c 11 80       	push   $0x80113c80
-8010588d:	e8 6e e8 ff ff       	call   80104100 <sleep>
-  while(ticks - ticks0 < n){
-80105892:	a1 80 3c 11 80       	mov    0x80113c80,%eax
-80105897:	83 c4 10             	add    $0x10,%esp
-8010589a:	29 d8                	sub    %ebx,%eax
-8010589c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
-8010589f:	73 2f                	jae    801058d0 <sys_sleep+0x90>
-    if(myproc()->killed){
-801058a1:	e8 9a e1 ff ff       	call   80103a40 <myproc>
-801058a6:	8b 40 24             	mov    0x24(%eax),%eax
-801058a9:	85 c0                	test   %eax,%eax
-801058ab:	74 d3                	je     80105880 <sys_sleep+0x40>
-      release(&tickslock);
-801058ad:	83 ec 0c             	sub    $0xc,%esp
-801058b0:	68 a0 3c 11 80       	push   $0x80113ca0
-801058b5:	e8 66 ed ff ff       	call   80104620 <release>
-      return -1;
-801058ba:	83 c4 10             	add    $0x10,%esp
-  }
-  release(&tickslock);
-  return 0;
-}
-801058bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    return -1;
-801058c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-801058c5:	c9                   	leave
-801058c6:	c3                   	ret
-801058c7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801058ce:	00 
-801058cf:	90                   	nop
-  release(&tickslock);
-801058d0:	83 ec 0c             	sub    $0xc,%esp
-801058d3:	68 a0 3c 11 80       	push   $0x80113ca0
-801058d8:	e8 43 ed ff ff       	call   80104620 <release>
-}
-801058dd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  return 0;
-801058e0:	83 c4 10             	add    $0x10,%esp
-801058e3:	31 c0                	xor    %eax,%eax
-}
-801058e5:	c9                   	leave
-801058e6:	c3                   	ret
-801058e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801058ee:	00 
-801058ef:	90                   	nop
-
-801058f0 <sys_uptime>:
-
-// return how many clock tick interrupts have occurred
-// since start.
-int
-sys_uptime(void)
-{
-801058f0:	55                   	push   %ebp
-801058f1:	89 e5                	mov    %esp,%ebp
-801058f3:	53                   	push   %ebx
-801058f4:	83 ec 10             	sub    $0x10,%esp
-  uint xticks;
-
-  acquire(&tickslock);
-801058f7:	68 a0 3c 11 80       	push   $0x80113ca0
-801058fc:	e8 7f ed ff ff       	call   80104680 <acquire>
-  xticks = ticks;
-80105901:	8b 1d 80 3c 11 80    	mov    0x80113c80,%ebx
-  release(&tickslock);
-80105907:	c7 04 24 a0 3c 11 80 	movl   $0x80113ca0,(%esp)
-8010590e:	e8 0d ed ff ff       	call   80104620 <release>
-  return xticks;
-}
-80105913:	89 d8                	mov    %ebx,%eax
-80105915:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-80105918:	c9                   	leave
-80105919:	c3                   	ret
-
-8010591a <alltraps>:
-
-  # vectors.S sends all traps here.
-.globl alltraps
-alltraps:
-  # Build trap frame.
-  pushl %ds
-8010591a:	1e                   	push   %ds
-  pushl %es
-8010591b:	06                   	push   %es
-  pushl %fs
-8010591c:	0f a0                	push   %fs
-  pushl %gs
-8010591e:	0f a8                	push   %gs
-  pushal
-80105920:	60                   	pusha
-  
-  # Set up data segments.
-  movw $(SEG_KDATA<<3), %ax
-80105921:	66 b8 10 00          	mov    $0x10,%ax
-  movw %ax, %ds
-80105925:	8e d8                	mov    %eax,%ds
-  movw %ax, %es
-80105927:	8e c0                	mov    %eax,%es
-
-  # Call trap(tf), where tf=%esp
-  pushl %esp
-80105929:	54                   	push   %esp
-  call trap
-8010592a:	e8 c1 00 00 00       	call   801059f0 <trap>
-  addl $4, %esp
-8010592f:	83 c4 04             	add    $0x4,%esp
-
-80105932 <trapret>:
-
-  # Return falls through to trapret...
-.globl trapret
-trapret:
-  popal
-80105932:	61                   	popa
-  popl %gs
-80105933:	0f a9                	pop    %gs
-  popl %fs
-80105935:	0f a1                	pop    %fs
-  popl %es
-80105937:	07                   	pop    %es
-  popl %ds
-80105938:	1f                   	pop    %ds
-  addl $0x8, %esp  # trapno and errcode
-80105939:	83 c4 08             	add    $0x8,%esp
-  iret
-8010593c:	cf                   	iret
-8010593d:	66 90                	xchg   %ax,%ax
-8010593f:	90                   	nop
-
-80105940 <tvinit>:
-struct spinlock tickslock;
-uint ticks;
-
-void
-tvinit(void)
-{
-80105940:	55                   	push   %ebp
-  int i;
-
-  for(i = 0; i < 256; i++)
-80105941:	31 c0                	xor    %eax,%eax
-{
-80105943:	89 e5                	mov    %esp,%ebp
-80105945:	83 ec 08             	sub    $0x8,%esp
-80105948:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010594f:	00 
-    SETGATE(idt[i], 0, SEG_KCODE<<3, vectors[i], 0);
-80105950:	8b 14 85 08 a0 10 80 	mov    -0x7fef5ff8(,%eax,4),%edx
-80105957:	c7 04 c5 e2 3c 11 80 	movl   $0x8e000008,-0x7feec31e(,%eax,8)
-8010595e:	08 00 00 8e 
-80105962:	66 89 14 c5 e0 3c 11 	mov    %dx,-0x7feec320(,%eax,8)
-80105969:	80 
-8010596a:	c1 ea 10             	shr    $0x10,%edx
-8010596d:	66 89 14 c5 e6 3c 11 	mov    %dx,-0x7feec31a(,%eax,8)
-80105974:	80 
-  for(i = 0; i < 256; i++)
-80105975:	83 c0 01             	add    $0x1,%eax
-80105978:	3d 00 01 00 00       	cmp    $0x100,%eax
-8010597d:	75 d1                	jne    80105950 <tvinit+0x10>
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-
-  initlock(&tickslock, "time");
-8010597f:	83 ec 08             	sub    $0x8,%esp
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-80105982:	a1 08 a1 10 80       	mov    0x8010a108,%eax
-80105987:	c7 05 e2 3e 11 80 08 	movl   $0xef000008,0x80113ee2
-8010598e:	00 00 ef 
-  initlock(&tickslock, "time");
-80105991:	68 77 76 10 80       	push   $0x80107677
-80105996:	68 a0 3c 11 80       	push   $0x80113ca0
-  SETGATE(idt[T_SYSCALL], 1, SEG_KCODE<<3, vectors[T_SYSCALL], DPL_USER);
-8010599b:	66 a3 e0 3e 11 80    	mov    %ax,0x80113ee0
-801059a1:	c1 e8 10             	shr    $0x10,%eax
-801059a4:	66 a3 e6 3e 11 80    	mov    %ax,0x80113ee6
-  initlock(&tickslock, "time");
-801059aa:	e8 e1 ea ff ff       	call   80104490 <initlock>
-}
-801059af:	83 c4 10             	add    $0x10,%esp
-801059b2:	c9                   	leave
-801059b3:	c3                   	ret
-801059b4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801059bb:	00 
-801059bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-801059c0 <idtinit>:
-
-void
-idtinit(void)
-{
-801059c0:	55                   	push   %ebp
-  pd[0] = size-1;
-801059c1:	b8 ff 07 00 00       	mov    $0x7ff,%eax
-801059c6:	89 e5                	mov    %esp,%ebp
-801059c8:	83 ec 10             	sub    $0x10,%esp
-801059cb:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
-  pd[1] = (uint)p;
-801059cf:	b8 e0 3c 11 80       	mov    $0x80113ce0,%eax
-801059d4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
-  pd[2] = (uint)p >> 16;
-801059d8:	c1 e8 10             	shr    $0x10,%eax
-801059db:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
-  asm volatile("lidt (%0)" : : "r" (pd));
-801059df:	8d 45 fa             	lea    -0x6(%ebp),%eax
-801059e2:	0f 01 18             	lidtl  (%eax)
-  lidt(idt, sizeof(idt));
-}
-801059e5:	c9                   	leave
-801059e6:	c3                   	ret
-801059e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-801059ee:	00 
-801059ef:	90                   	nop
-
-801059f0 <trap>:
-
-//PAGEBREAK: 41
-void
-trap(struct trapframe *tf)
-{
-801059f0:	55                   	push   %ebp
-801059f1:	89 e5                	mov    %esp,%ebp
-801059f3:	57                   	push   %edi
-801059f4:	56                   	push   %esi
-801059f5:	53                   	push   %ebx
-801059f6:	83 ec 1c             	sub    $0x1c,%esp
-801059f9:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(tf->trapno == T_SYSCALL){
-801059fc:	8b 43 30             	mov    0x30(%ebx),%eax
-801059ff:	83 f8 40             	cmp    $0x40,%eax
-80105a02:	0f 84 58 01 00 00    	je     80105b60 <trap+0x170>
-    if(myproc()->killed)
-      exit();
-    return;
-  }
-
-  switch(tf->trapno){
-80105a08:	83 e8 20             	sub    $0x20,%eax
-80105a0b:	83 f8 1f             	cmp    $0x1f,%eax
-80105a0e:	0f 87 7c 00 00 00    	ja     80105a90 <trap+0xa0>
-80105a14:	ff 24 85 d8 7b 10 80 	jmp    *-0x7fef8428(,%eax,4)
-80105a1b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      release(&tickslock);
-    }
-    lapiceoi();
-    break;
-  case T_IRQ0 + IRQ_IDE:
-    ideintr();
-80105a20:	e8 7b c8 ff ff       	call   801022a0 <ideintr>
-    lapiceoi();
-80105a25:	e8 36 cf ff ff       	call   80102960 <lapiceoi>
-  }
-
-  // Force process exit if it has been killed and is in user space.
-  // (If it is still executing in the kernel, let it keep running
-  // until it gets to the regular system call return.)
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a2a:	e8 11 e0 ff ff       	call   80103a40 <myproc>
-80105a2f:	85 c0                	test   %eax,%eax
-80105a31:	74 1a                	je     80105a4d <trap+0x5d>
-80105a33:	e8 08 e0 ff ff       	call   80103a40 <myproc>
-80105a38:	8b 50 24             	mov    0x24(%eax),%edx
-80105a3b:	85 d2                	test   %edx,%edx
-80105a3d:	74 0e                	je     80105a4d <trap+0x5d>
-80105a3f:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a43:	f7 d0                	not    %eax
-80105a45:	a8 03                	test   $0x3,%al
-80105a47:	0f 84 db 01 00 00    	je     80105c28 <trap+0x238>
-    exit();
-
-  // Force process to give up CPU on clock tick.
-  // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-80105a4d:	e8 ee df ff ff       	call   80103a40 <myproc>
-80105a52:	85 c0                	test   %eax,%eax
-80105a54:	74 0f                	je     80105a65 <trap+0x75>
-80105a56:	e8 e5 df ff ff       	call   80103a40 <myproc>
-80105a5b:	83 78 0c 04          	cmpl   $0x4,0xc(%eax)
-80105a5f:	0f 84 ab 00 00 00    	je     80105b10 <trap+0x120>
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
-
-  // Check if the process has been killed since we yielded
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105a65:	e8 d6 df ff ff       	call   80103a40 <myproc>
-80105a6a:	85 c0                	test   %eax,%eax
-80105a6c:	74 1a                	je     80105a88 <trap+0x98>
-80105a6e:	e8 cd df ff ff       	call   80103a40 <myproc>
-80105a73:	8b 40 24             	mov    0x24(%eax),%eax
-80105a76:	85 c0                	test   %eax,%eax
-80105a78:	74 0e                	je     80105a88 <trap+0x98>
-80105a7a:	0f b7 43 3c          	movzwl 0x3c(%ebx),%eax
-80105a7e:	f7 d0                	not    %eax
-80105a80:	a8 03                	test   $0x3,%al
-80105a82:	0f 84 05 01 00 00    	je     80105b8d <trap+0x19d>
-    exit();
-}
-80105a88:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105a8b:	5b                   	pop    %ebx
-80105a8c:	5e                   	pop    %esi
-80105a8d:	5f                   	pop    %edi
-80105a8e:	5d                   	pop    %ebp
-80105a8f:	c3                   	ret
-    if(myproc() == 0 || (tf->cs&3) == 0){
-80105a90:	e8 ab df ff ff       	call   80103a40 <myproc>
-80105a95:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105a98:	85 c0                	test   %eax,%eax
-80105a9a:	0f 84 a2 01 00 00    	je     80105c42 <trap+0x252>
-80105aa0:	f6 43 3c 03          	testb  $0x3,0x3c(%ebx)
-80105aa4:	0f 84 98 01 00 00    	je     80105c42 <trap+0x252>
-
-static inline uint
-rcr2(void)
-{
-  uint val;
-  asm volatile("movl %%cr2,%0" : "=r" (val));
-80105aaa:	0f 20 d1             	mov    %cr2,%ecx
-80105aad:	89 4d d8             	mov    %ecx,-0x28(%ebp)
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105ab0:	e8 6b df ff ff       	call   80103a20 <cpuid>
-80105ab5:	8b 73 30             	mov    0x30(%ebx),%esi
-80105ab8:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80105abb:	8b 43 34             	mov    0x34(%ebx),%eax
-80105abe:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-            myproc()->pid, myproc()->name, tf->trapno,
-80105ac1:	e8 7a df ff ff       	call   80103a40 <myproc>
-80105ac6:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80105ac9:	e8 72 df ff ff       	call   80103a40 <myproc>
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105ace:	8b 4d d8             	mov    -0x28(%ebp),%ecx
-80105ad1:	51                   	push   %ecx
-80105ad2:	57                   	push   %edi
-80105ad3:	8b 55 dc             	mov    -0x24(%ebp),%edx
-80105ad6:	52                   	push   %edx
-80105ad7:	ff 75 e4             	push   -0x1c(%ebp)
-80105ada:	56                   	push   %esi
-            myproc()->pid, myproc()->name, tf->trapno,
-80105adb:	8b 75 e0             	mov    -0x20(%ebp),%esi
-80105ade:	83 c6 6c             	add    $0x6c,%esi
-    cprintf("pid %d %s: trap %d err %d on cpu %d "
-80105ae1:	56                   	push   %esi
-80105ae2:	ff 70 10             	push   0x10(%eax)
-80105ae5:	68 c8 78 10 80       	push   $0x801078c8
-80105aea:	e8 c1 ab ff ff       	call   801006b0 <cprintf>
-    myproc()->killed = 1;
-80105aef:	83 c4 20             	add    $0x20,%esp
-80105af2:	e8 49 df ff ff       	call   80103a40 <myproc>
-80105af7:	c7 40 24 01 00 00 00 	movl   $0x1,0x24(%eax)
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105afe:	e8 3d df ff ff       	call   80103a40 <myproc>
-80105b03:	85 c0                	test   %eax,%eax
-80105b05:	0f 85 28 ff ff ff    	jne    80105a33 <trap+0x43>
-80105b0b:	e9 3d ff ff ff       	jmp    80105a4d <trap+0x5d>
-  if(myproc() && myproc()->state == RUNNING &&
-80105b10:	83 7b 30 20          	cmpl   $0x20,0x30(%ebx)
-80105b14:	0f 85 4b ff ff ff    	jne    80105a65 <trap+0x75>
-    yield();
-80105b1a:	e8 91 e5 ff ff       	call   801040b0 <yield>
-80105b1f:	e9 41 ff ff ff       	jmp    80105a65 <trap+0x75>
-80105b24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    cprintf("cpu%d: spurious interrupt at %x:%x\n",
-80105b28:	8b 7b 38             	mov    0x38(%ebx),%edi
-80105b2b:	0f b7 73 3c          	movzwl 0x3c(%ebx),%esi
-80105b2f:	e8 ec de ff ff       	call   80103a20 <cpuid>
-80105b34:	57                   	push   %edi
-80105b35:	56                   	push   %esi
-80105b36:	50                   	push   %eax
-80105b37:	68 70 78 10 80       	push   $0x80107870
-80105b3c:	e8 6f ab ff ff       	call   801006b0 <cprintf>
-    lapiceoi();
-80105b41:	e8 1a ce ff ff       	call   80102960 <lapiceoi>
-    break;
-80105b46:	83 c4 10             	add    $0x10,%esp
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105b49:	e8 f2 de ff ff       	call   80103a40 <myproc>
-80105b4e:	85 c0                	test   %eax,%eax
-80105b50:	0f 85 dd fe ff ff    	jne    80105a33 <trap+0x43>
-80105b56:	e9 f2 fe ff ff       	jmp    80105a4d <trap+0x5d>
-80105b5b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    if(myproc()->killed)
-80105b60:	e8 db de ff ff       	call   80103a40 <myproc>
-80105b65:	8b 70 24             	mov    0x24(%eax),%esi
-80105b68:	85 f6                	test   %esi,%esi
-80105b6a:	0f 85 c8 00 00 00    	jne    80105c38 <trap+0x248>
-    myproc()->tf = tf;
-80105b70:	e8 cb de ff ff       	call   80103a40 <myproc>
-80105b75:	89 58 18             	mov    %ebx,0x18(%eax)
-    syscall();
-80105b78:	e8 f3 ef ff ff       	call   80104b70 <syscall>
-    if(myproc()->killed)
-80105b7d:	e8 be de ff ff       	call   80103a40 <myproc>
-80105b82:	8b 48 24             	mov    0x24(%eax),%ecx
-80105b85:	85 c9                	test   %ecx,%ecx
-80105b87:	0f 84 fb fe ff ff    	je     80105a88 <trap+0x98>
-}
-80105b8d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105b90:	5b                   	pop    %ebx
-80105b91:	5e                   	pop    %esi
-80105b92:	5f                   	pop    %edi
-80105b93:	5d                   	pop    %ebp
-      exit();
-80105b94:	e9 b7 e2 ff ff       	jmp    80103e50 <exit>
-80105b99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    uartintr();
-80105ba0:	e8 4b 02 00 00       	call   80105df0 <uartintr>
-    lapiceoi();
-80105ba5:	e8 b6 cd ff ff       	call   80102960 <lapiceoi>
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105baa:	e8 91 de ff ff       	call   80103a40 <myproc>
-80105baf:	85 c0                	test   %eax,%eax
-80105bb1:	0f 85 7c fe ff ff    	jne    80105a33 <trap+0x43>
-80105bb7:	e9 91 fe ff ff       	jmp    80105a4d <trap+0x5d>
-80105bbc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    kbdintr();
-80105bc0:	e8 6b cc ff ff       	call   80102830 <kbdintr>
-    lapiceoi();
-80105bc5:	e8 96 cd ff ff       	call   80102960 <lapiceoi>
-  if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-80105bca:	e8 71 de ff ff       	call   80103a40 <myproc>
-80105bcf:	85 c0                	test   %eax,%eax
-80105bd1:	0f 85 5c fe ff ff    	jne    80105a33 <trap+0x43>
-80105bd7:	e9 71 fe ff ff       	jmp    80105a4d <trap+0x5d>
-80105bdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(cpuid() == 0){
-80105be0:	e8 3b de ff ff       	call   80103a20 <cpuid>
-80105be5:	85 c0                	test   %eax,%eax
-80105be7:	0f 85 38 fe ff ff    	jne    80105a25 <trap+0x35>
-      acquire(&tickslock);
-80105bed:	83 ec 0c             	sub    $0xc,%esp
-80105bf0:	68 a0 3c 11 80       	push   $0x80113ca0
-80105bf5:	e8 86 ea ff ff       	call   80104680 <acquire>
-      ticks++;
-80105bfa:	83 05 80 3c 11 80 01 	addl   $0x1,0x80113c80
-      wakeup(&ticks);
-80105c01:	c7 04 24 80 3c 11 80 	movl   $0x80113c80,(%esp)
-80105c08:	e8 b3 e5 ff ff       	call   801041c0 <wakeup>
-      release(&tickslock);
-80105c0d:	c7 04 24 a0 3c 11 80 	movl   $0x80113ca0,(%esp)
-80105c14:	e8 07 ea ff ff       	call   80104620 <release>
-80105c19:	83 c4 10             	add    $0x10,%esp
-    lapiceoi();
-80105c1c:	e9 04 fe ff ff       	jmp    80105a25 <trap+0x35>
-80105c21:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    exit();
-80105c28:	e8 23 e2 ff ff       	call   80103e50 <exit>
-80105c2d:	e9 1b fe ff ff       	jmp    80105a4d <trap+0x5d>
-80105c32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      exit();
-80105c38:	e8 13 e2 ff ff       	call   80103e50 <exit>
-80105c3d:	e9 2e ff ff ff       	jmp    80105b70 <trap+0x180>
-80105c42:	0f 20 d6             	mov    %cr2,%esi
-      cprintf("unexpected trap %d from cpu %d eip %x (cr2=0x%x)\n",
-80105c45:	e8 d6 dd ff ff       	call   80103a20 <cpuid>
-80105c4a:	83 ec 0c             	sub    $0xc,%esp
-80105c4d:	56                   	push   %esi
-80105c4e:	57                   	push   %edi
-80105c4f:	50                   	push   %eax
-80105c50:	ff 73 30             	push   0x30(%ebx)
-80105c53:	68 94 78 10 80       	push   $0x80107894
-80105c58:	e8 53 aa ff ff       	call   801006b0 <cprintf>
-      panic("trap");
-80105c5d:	83 c4 14             	add    $0x14,%esp
-80105c60:	68 7c 76 10 80       	push   $0x8010767c
-80105c65:	e8 16 a7 ff ff       	call   80100380 <panic>
-80105c6a:	66 90                	xchg   %ax,%ax
-80105c6c:	66 90                	xchg   %ax,%ax
-80105c6e:	66 90                	xchg   %ax,%ax
-
-80105c70 <uartgetc>:
-}
-
-static int
-uartgetc(void)
-{
-  if(!uart)
-80105c70:	a1 e0 44 11 80       	mov    0x801144e0,%eax
-80105c75:	85 c0                	test   %eax,%eax
-80105c77:	74 17                	je     80105c90 <uartgetc+0x20>
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105c79:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105c7e:	ec                   	in     (%dx),%al
-    return -1;
-  if(!(inb(COM1+5) & 0x01))
-80105c7f:	a8 01                	test   $0x1,%al
-80105c81:	74 0d                	je     80105c90 <uartgetc+0x20>
-80105c83:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105c88:	ec                   	in     (%dx),%al
-    return -1;
-  return inb(COM1+0);
-80105c89:	0f b6 c0             	movzbl %al,%eax
-80105c8c:	c3                   	ret
-80105c8d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-80105c90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80105c95:	c3                   	ret
-80105c96:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80105c9d:	00 
-80105c9e:	66 90                	xchg   %ax,%ax
-
-80105ca0 <uartinit>:
-{
-80105ca0:	55                   	push   %ebp
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105ca1:	31 c9                	xor    %ecx,%ecx
-80105ca3:	89 c8                	mov    %ecx,%eax
-80105ca5:	89 e5                	mov    %esp,%ebp
-80105ca7:	57                   	push   %edi
-80105ca8:	bf fa 03 00 00       	mov    $0x3fa,%edi
-80105cad:	56                   	push   %esi
-80105cae:	89 fa                	mov    %edi,%edx
-80105cb0:	53                   	push   %ebx
-80105cb1:	83 ec 1c             	sub    $0x1c,%esp
-80105cb4:	ee                   	out    %al,(%dx)
-80105cb5:	be fb 03 00 00       	mov    $0x3fb,%esi
-80105cba:	b8 80 ff ff ff       	mov    $0xffffff80,%eax
-80105cbf:	89 f2                	mov    %esi,%edx
-80105cc1:	ee                   	out    %al,(%dx)
-80105cc2:	b8 0c 00 00 00       	mov    $0xc,%eax
-80105cc7:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105ccc:	ee                   	out    %al,(%dx)
-80105ccd:	bb f9 03 00 00       	mov    $0x3f9,%ebx
-80105cd2:	89 c8                	mov    %ecx,%eax
-80105cd4:	89 da                	mov    %ebx,%edx
-80105cd6:	ee                   	out    %al,(%dx)
-80105cd7:	b8 03 00 00 00       	mov    $0x3,%eax
-80105cdc:	89 f2                	mov    %esi,%edx
-80105cde:	ee                   	out    %al,(%dx)
-80105cdf:	ba fc 03 00 00       	mov    $0x3fc,%edx
-80105ce4:	89 c8                	mov    %ecx,%eax
-80105ce6:	ee                   	out    %al,(%dx)
-80105ce7:	b8 01 00 00 00       	mov    $0x1,%eax
-80105cec:	89 da                	mov    %ebx,%edx
-80105cee:	ee                   	out    %al,(%dx)
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105cef:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105cf4:	ec                   	in     (%dx),%al
-  if(inb(COM1+5) == 0xFF)
-80105cf5:	3c ff                	cmp    $0xff,%al
-80105cf7:	0f 84 7c 00 00 00    	je     80105d79 <uartinit+0xd9>
-  uart = 1;
-80105cfd:	c7 05 e0 44 11 80 01 	movl   $0x1,0x801144e0
-80105d04:	00 00 00 
-80105d07:	89 fa                	mov    %edi,%edx
-80105d09:	ec                   	in     (%dx),%al
-80105d0a:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105d0f:	ec                   	in     (%dx),%al
-  ioapicenable(IRQ_COM1, 0);
-80105d10:	83 ec 08             	sub    $0x8,%esp
-  for(p="xv6...\n"; *p; p++)
-80105d13:	bf 81 76 10 80       	mov    $0x80107681,%edi
-80105d18:	be fd 03 00 00       	mov    $0x3fd,%esi
-  ioapicenable(IRQ_COM1, 0);
-80105d1d:	6a 00                	push   $0x0
-80105d1f:	6a 04                	push   $0x4
-80105d21:	e8 aa c7 ff ff       	call   801024d0 <ioapicenable>
-80105d26:	83 c4 10             	add    $0x10,%esp
-  for(p="xv6...\n"; *p; p++)
-80105d29:	c6 45 e7 78          	movb   $0x78,-0x19(%ebp)
-80105d2d:	8d 76 00             	lea    0x0(%esi),%esi
-  if(!uart)
-80105d30:	a1 e0 44 11 80       	mov    0x801144e0,%eax
-80105d35:	85 c0                	test   %eax,%eax
-80105d37:	74 32                	je     80105d6b <uartinit+0xcb>
-80105d39:	89 f2                	mov    %esi,%edx
-80105d3b:	ec                   	in     (%dx),%al
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105d3c:	a8 20                	test   $0x20,%al
-80105d3e:	75 21                	jne    80105d61 <uartinit+0xc1>
-80105d40:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105d45:	8d 76 00             	lea    0x0(%esi),%esi
-    microdelay(10);
-80105d48:	83 ec 0c             	sub    $0xc,%esp
-80105d4b:	6a 0a                	push   $0xa
-80105d4d:	e8 2e cc ff ff       	call   80102980 <microdelay>
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105d52:	83 c4 10             	add    $0x10,%esp
-80105d55:	83 eb 01             	sub    $0x1,%ebx
-80105d58:	74 07                	je     80105d61 <uartinit+0xc1>
-80105d5a:	89 f2                	mov    %esi,%edx
-80105d5c:	ec                   	in     (%dx),%al
-80105d5d:	a8 20                	test   $0x20,%al
-80105d5f:	74 e7                	je     80105d48 <uartinit+0xa8>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105d61:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105d66:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-80105d6a:	ee                   	out    %al,(%dx)
-  for(p="xv6...\n"; *p; p++)
-80105d6b:	0f b6 47 01          	movzbl 0x1(%edi),%eax
-80105d6f:	83 c7 01             	add    $0x1,%edi
-80105d72:	88 45 e7             	mov    %al,-0x19(%ebp)
-80105d75:	84 c0                	test   %al,%al
-80105d77:	75 b7                	jne    80105d30 <uartinit+0x90>
-}
-80105d79:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80105d7c:	5b                   	pop    %ebx
-80105d7d:	5e                   	pop    %esi
-80105d7e:	5f                   	pop    %edi
-80105d7f:	5d                   	pop    %ebp
-80105d80:	c3                   	ret
-80105d81:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80105d88:	00 
-80105d89:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105d90 <uartputc>:
-  if(!uart)
-80105d90:	a1 e0 44 11 80       	mov    0x801144e0,%eax
-80105d95:	85 c0                	test   %eax,%eax
-80105d97:	74 4f                	je     80105de8 <uartputc+0x58>
-{
-80105d99:	55                   	push   %ebp
-  asm volatile("in %1,%0" : "=a" (data) : "d" (port));
-80105d9a:	ba fd 03 00 00       	mov    $0x3fd,%edx
-80105d9f:	89 e5                	mov    %esp,%ebp
-80105da1:	56                   	push   %esi
-80105da2:	53                   	push   %ebx
-80105da3:	ec                   	in     (%dx),%al
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105da4:	a8 20                	test   $0x20,%al
-80105da6:	75 29                	jne    80105dd1 <uartputc+0x41>
-80105da8:	bb 80 00 00 00       	mov    $0x80,%ebx
-80105dad:	be fd 03 00 00       	mov    $0x3fd,%esi
-80105db2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    microdelay(10);
-80105db8:	83 ec 0c             	sub    $0xc,%esp
-80105dbb:	6a 0a                	push   $0xa
-80105dbd:	e8 be cb ff ff       	call   80102980 <microdelay>
-  for(i = 0; i < 128 && !(inb(COM1+5) & 0x20); i++)
-80105dc2:	83 c4 10             	add    $0x10,%esp
-80105dc5:	83 eb 01             	sub    $0x1,%ebx
-80105dc8:	74 07                	je     80105dd1 <uartputc+0x41>
-80105dca:	89 f2                	mov    %esi,%edx
-80105dcc:	ec                   	in     (%dx),%al
-80105dcd:	a8 20                	test   $0x20,%al
-80105dcf:	74 e7                	je     80105db8 <uartputc+0x28>
-  asm volatile("out %0,%1" : : "a" (data), "d" (port));
-80105dd1:	8b 45 08             	mov    0x8(%ebp),%eax
-80105dd4:	ba f8 03 00 00       	mov    $0x3f8,%edx
-80105dd9:	ee                   	out    %al,(%dx)
-}
-80105dda:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80105ddd:	5b                   	pop    %ebx
-80105dde:	5e                   	pop    %esi
-80105ddf:	5d                   	pop    %ebp
-80105de0:	c3                   	ret
-80105de1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-80105de8:	c3                   	ret
-80105de9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80105df0 <uartintr>:
-
-void
-uartintr(void)
-{
-80105df0:	55                   	push   %ebp
-80105df1:	89 e5                	mov    %esp,%ebp
-80105df3:	83 ec 14             	sub    $0x14,%esp
-  consoleintr(uartgetc);
-80105df6:	68 70 5c 10 80       	push   $0x80105c70
-80105dfb:	e8 a0 aa ff ff       	call   801008a0 <consoleintr>
-}
-80105e00:	83 c4 10             	add    $0x10,%esp
-80105e03:	c9                   	leave
-80105e04:	c3                   	ret
-
-80105e05 <vector0>:
-# generated by vectors.pl - do not edit
-# handlers
-.globl alltraps
-.globl vector0
-vector0:
-  pushl $0
-80105e05:	6a 00                	push   $0x0
-  pushl $0
-80105e07:	6a 00                	push   $0x0
-  jmp alltraps
-80105e09:	e9 0c fb ff ff       	jmp    8010591a <alltraps>
-
-80105e0e <vector1>:
-.globl vector1
-vector1:
-  pushl $0
-80105e0e:	6a 00                	push   $0x0
-  pushl $1
-80105e10:	6a 01                	push   $0x1
-  jmp alltraps
-80105e12:	e9 03 fb ff ff       	jmp    8010591a <alltraps>
-
-80105e17 <vector2>:
-.globl vector2
-vector2:
-  pushl $0
-80105e17:	6a 00                	push   $0x0
-  pushl $2
-80105e19:	6a 02                	push   $0x2
-  jmp alltraps
-80105e1b:	e9 fa fa ff ff       	jmp    8010591a <alltraps>
-
-80105e20 <vector3>:
-.globl vector3
-vector3:
-  pushl $0
-80105e20:	6a 00                	push   $0x0
-  pushl $3
-80105e22:	6a 03                	push   $0x3
-  jmp alltraps
-80105e24:	e9 f1 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e29 <vector4>:
-.globl vector4
-vector4:
-  pushl $0
-80105e29:	6a 00                	push   $0x0
-  pushl $4
-80105e2b:	6a 04                	push   $0x4
-  jmp alltraps
-80105e2d:	e9 e8 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e32 <vector5>:
-.globl vector5
-vector5:
-  pushl $0
-80105e32:	6a 00                	push   $0x0
-  pushl $5
-80105e34:	6a 05                	push   $0x5
-  jmp alltraps
-80105e36:	e9 df fa ff ff       	jmp    8010591a <alltraps>
-
-80105e3b <vector6>:
-.globl vector6
-vector6:
-  pushl $0
-80105e3b:	6a 00                	push   $0x0
-  pushl $6
-80105e3d:	6a 06                	push   $0x6
-  jmp alltraps
-80105e3f:	e9 d6 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e44 <vector7>:
-.globl vector7
-vector7:
-  pushl $0
-80105e44:	6a 00                	push   $0x0
-  pushl $7
-80105e46:	6a 07                	push   $0x7
-  jmp alltraps
-80105e48:	e9 cd fa ff ff       	jmp    8010591a <alltraps>
-
-80105e4d <vector8>:
-.globl vector8
-vector8:
-  pushl $8
-80105e4d:	6a 08                	push   $0x8
-  jmp alltraps
-80105e4f:	e9 c6 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e54 <vector9>:
-.globl vector9
-vector9:
-  pushl $0
-80105e54:	6a 00                	push   $0x0
-  pushl $9
-80105e56:	6a 09                	push   $0x9
-  jmp alltraps
-80105e58:	e9 bd fa ff ff       	jmp    8010591a <alltraps>
-
-80105e5d <vector10>:
-.globl vector10
-vector10:
-  pushl $10
-80105e5d:	6a 0a                	push   $0xa
-  jmp alltraps
-80105e5f:	e9 b6 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e64 <vector11>:
-.globl vector11
-vector11:
-  pushl $11
-80105e64:	6a 0b                	push   $0xb
-  jmp alltraps
-80105e66:	e9 af fa ff ff       	jmp    8010591a <alltraps>
-
-80105e6b <vector12>:
-.globl vector12
-vector12:
-  pushl $12
-80105e6b:	6a 0c                	push   $0xc
-  jmp alltraps
-80105e6d:	e9 a8 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e72 <vector13>:
-.globl vector13
-vector13:
-  pushl $13
-80105e72:	6a 0d                	push   $0xd
-  jmp alltraps
-80105e74:	e9 a1 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e79 <vector14>:
-.globl vector14
-vector14:
-  pushl $14
-80105e79:	6a 0e                	push   $0xe
-  jmp alltraps
-80105e7b:	e9 9a fa ff ff       	jmp    8010591a <alltraps>
-
-80105e80 <vector15>:
-.globl vector15
-vector15:
-  pushl $0
-80105e80:	6a 00                	push   $0x0
-  pushl $15
-80105e82:	6a 0f                	push   $0xf
-  jmp alltraps
-80105e84:	e9 91 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e89 <vector16>:
-.globl vector16
-vector16:
-  pushl $0
-80105e89:	6a 00                	push   $0x0
-  pushl $16
-80105e8b:	6a 10                	push   $0x10
-  jmp alltraps
-80105e8d:	e9 88 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e92 <vector17>:
-.globl vector17
-vector17:
-  pushl $17
-80105e92:	6a 11                	push   $0x11
-  jmp alltraps
-80105e94:	e9 81 fa ff ff       	jmp    8010591a <alltraps>
-
-80105e99 <vector18>:
-.globl vector18
-vector18:
-  pushl $0
-80105e99:	6a 00                	push   $0x0
-  pushl $18
-80105e9b:	6a 12                	push   $0x12
-  jmp alltraps
-80105e9d:	e9 78 fa ff ff       	jmp    8010591a <alltraps>
-
-80105ea2 <vector19>:
-.globl vector19
-vector19:
-  pushl $0
-80105ea2:	6a 00                	push   $0x0
-  pushl $19
-80105ea4:	6a 13                	push   $0x13
-  jmp alltraps
-80105ea6:	e9 6f fa ff ff       	jmp    8010591a <alltraps>
-
-80105eab <vector20>:
-.globl vector20
-vector20:
-  pushl $0
-80105eab:	6a 00                	push   $0x0
-  pushl $20
-80105ead:	6a 14                	push   $0x14
-  jmp alltraps
-80105eaf:	e9 66 fa ff ff       	jmp    8010591a <alltraps>
-
-80105eb4 <vector21>:
-.globl vector21
-vector21:
-  pushl $0
-80105eb4:	6a 00                	push   $0x0
-  pushl $21
-80105eb6:	6a 15                	push   $0x15
-  jmp alltraps
-80105eb8:	e9 5d fa ff ff       	jmp    8010591a <alltraps>
-
-80105ebd <vector22>:
-.globl vector22
-vector22:
-  pushl $0
-80105ebd:	6a 00                	push   $0x0
-  pushl $22
-80105ebf:	6a 16                	push   $0x16
-  jmp alltraps
-80105ec1:	e9 54 fa ff ff       	jmp    8010591a <alltraps>
-
-80105ec6 <vector23>:
-.globl vector23
-vector23:
-  pushl $0
-80105ec6:	6a 00                	push   $0x0
-  pushl $23
-80105ec8:	6a 17                	push   $0x17
-  jmp alltraps
-80105eca:	e9 4b fa ff ff       	jmp    8010591a <alltraps>
-
-80105ecf <vector24>:
-.globl vector24
-vector24:
-  pushl $0
-80105ecf:	6a 00                	push   $0x0
-  pushl $24
-80105ed1:	6a 18                	push   $0x18
-  jmp alltraps
-80105ed3:	e9 42 fa ff ff       	jmp    8010591a <alltraps>
-
-80105ed8 <vector25>:
-.globl vector25
-vector25:
-  pushl $0
-80105ed8:	6a 00                	push   $0x0
-  pushl $25
-80105eda:	6a 19                	push   $0x19
-  jmp alltraps
-80105edc:	e9 39 fa ff ff       	jmp    8010591a <alltraps>
-
-80105ee1 <vector26>:
-.globl vector26
-vector26:
-  pushl $0
-80105ee1:	6a 00                	push   $0x0
-  pushl $26
-80105ee3:	6a 1a                	push   $0x1a
-  jmp alltraps
-80105ee5:	e9 30 fa ff ff       	jmp    8010591a <alltraps>
-
-80105eea <vector27>:
-.globl vector27
-vector27:
-  pushl $0
-80105eea:	6a 00                	push   $0x0
-  pushl $27
-80105eec:	6a 1b                	push   $0x1b
-  jmp alltraps
-80105eee:	e9 27 fa ff ff       	jmp    8010591a <alltraps>
-
-80105ef3 <vector28>:
-.globl vector28
-vector28:
-  pushl $0
-80105ef3:	6a 00                	push   $0x0
-  pushl $28
-80105ef5:	6a 1c                	push   $0x1c
-  jmp alltraps
-80105ef7:	e9 1e fa ff ff       	jmp    8010591a <alltraps>
-
-80105efc <vector29>:
-.globl vector29
-vector29:
-  pushl $0
-80105efc:	6a 00                	push   $0x0
-  pushl $29
-80105efe:	6a 1d                	push   $0x1d
-  jmp alltraps
-80105f00:	e9 15 fa ff ff       	jmp    8010591a <alltraps>
-
-80105f05 <vector30>:
-.globl vector30
-vector30:
-  pushl $0
-80105f05:	6a 00                	push   $0x0
-  pushl $30
-80105f07:	6a 1e                	push   $0x1e
-  jmp alltraps
-80105f09:	e9 0c fa ff ff       	jmp    8010591a <alltraps>
-
-80105f0e <vector31>:
-.globl vector31
-vector31:
-  pushl $0
-80105f0e:	6a 00                	push   $0x0
-  pushl $31
-80105f10:	6a 1f                	push   $0x1f
-  jmp alltraps
-80105f12:	e9 03 fa ff ff       	jmp    8010591a <alltraps>
-
-80105f17 <vector32>:
-.globl vector32
-vector32:
-  pushl $0
-80105f17:	6a 00                	push   $0x0
-  pushl $32
-80105f19:	6a 20                	push   $0x20
-  jmp alltraps
-80105f1b:	e9 fa f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f20 <vector33>:
-.globl vector33
-vector33:
-  pushl $0
-80105f20:	6a 00                	push   $0x0
-  pushl $33
-80105f22:	6a 21                	push   $0x21
-  jmp alltraps
-80105f24:	e9 f1 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f29 <vector34>:
-.globl vector34
-vector34:
-  pushl $0
-80105f29:	6a 00                	push   $0x0
-  pushl $34
-80105f2b:	6a 22                	push   $0x22
-  jmp alltraps
-80105f2d:	e9 e8 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f32 <vector35>:
-.globl vector35
-vector35:
-  pushl $0
-80105f32:	6a 00                	push   $0x0
-  pushl $35
-80105f34:	6a 23                	push   $0x23
-  jmp alltraps
-80105f36:	e9 df f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f3b <vector36>:
-.globl vector36
-vector36:
-  pushl $0
-80105f3b:	6a 00                	push   $0x0
-  pushl $36
-80105f3d:	6a 24                	push   $0x24
-  jmp alltraps
-80105f3f:	e9 d6 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f44 <vector37>:
-.globl vector37
-vector37:
-  pushl $0
-80105f44:	6a 00                	push   $0x0
-  pushl $37
-80105f46:	6a 25                	push   $0x25
-  jmp alltraps
-80105f48:	e9 cd f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f4d <vector38>:
-.globl vector38
-vector38:
-  pushl $0
-80105f4d:	6a 00                	push   $0x0
-  pushl $38
-80105f4f:	6a 26                	push   $0x26
-  jmp alltraps
-80105f51:	e9 c4 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f56 <vector39>:
-.globl vector39
-vector39:
-  pushl $0
-80105f56:	6a 00                	push   $0x0
-  pushl $39
-80105f58:	6a 27                	push   $0x27
-  jmp alltraps
-80105f5a:	e9 bb f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f5f <vector40>:
-.globl vector40
-vector40:
-  pushl $0
-80105f5f:	6a 00                	push   $0x0
-  pushl $40
-80105f61:	6a 28                	push   $0x28
-  jmp alltraps
-80105f63:	e9 b2 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f68 <vector41>:
-.globl vector41
-vector41:
-  pushl $0
-80105f68:	6a 00                	push   $0x0
-  pushl $41
-80105f6a:	6a 29                	push   $0x29
-  jmp alltraps
-80105f6c:	e9 a9 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f71 <vector42>:
-.globl vector42
-vector42:
-  pushl $0
-80105f71:	6a 00                	push   $0x0
-  pushl $42
-80105f73:	6a 2a                	push   $0x2a
-  jmp alltraps
-80105f75:	e9 a0 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f7a <vector43>:
-.globl vector43
-vector43:
-  pushl $0
-80105f7a:	6a 00                	push   $0x0
-  pushl $43
-80105f7c:	6a 2b                	push   $0x2b
-  jmp alltraps
-80105f7e:	e9 97 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f83 <vector44>:
-.globl vector44
-vector44:
-  pushl $0
-80105f83:	6a 00                	push   $0x0
-  pushl $44
-80105f85:	6a 2c                	push   $0x2c
-  jmp alltraps
-80105f87:	e9 8e f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f8c <vector45>:
-.globl vector45
-vector45:
-  pushl $0
-80105f8c:	6a 00                	push   $0x0
-  pushl $45
-80105f8e:	6a 2d                	push   $0x2d
-  jmp alltraps
-80105f90:	e9 85 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f95 <vector46>:
-.globl vector46
-vector46:
-  pushl $0
-80105f95:	6a 00                	push   $0x0
-  pushl $46
-80105f97:	6a 2e                	push   $0x2e
-  jmp alltraps
-80105f99:	e9 7c f9 ff ff       	jmp    8010591a <alltraps>
-
-80105f9e <vector47>:
-.globl vector47
-vector47:
-  pushl $0
-80105f9e:	6a 00                	push   $0x0
-  pushl $47
-80105fa0:	6a 2f                	push   $0x2f
-  jmp alltraps
-80105fa2:	e9 73 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fa7 <vector48>:
-.globl vector48
-vector48:
-  pushl $0
-80105fa7:	6a 00                	push   $0x0
-  pushl $48
-80105fa9:	6a 30                	push   $0x30
-  jmp alltraps
-80105fab:	e9 6a f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fb0 <vector49>:
-.globl vector49
-vector49:
-  pushl $0
-80105fb0:	6a 00                	push   $0x0
-  pushl $49
-80105fb2:	6a 31                	push   $0x31
-  jmp alltraps
-80105fb4:	e9 61 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fb9 <vector50>:
-.globl vector50
-vector50:
-  pushl $0
-80105fb9:	6a 00                	push   $0x0
-  pushl $50
-80105fbb:	6a 32                	push   $0x32
-  jmp alltraps
-80105fbd:	e9 58 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fc2 <vector51>:
-.globl vector51
-vector51:
-  pushl $0
-80105fc2:	6a 00                	push   $0x0
-  pushl $51
-80105fc4:	6a 33                	push   $0x33
-  jmp alltraps
-80105fc6:	e9 4f f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fcb <vector52>:
-.globl vector52
-vector52:
-  pushl $0
-80105fcb:	6a 00                	push   $0x0
-  pushl $52
-80105fcd:	6a 34                	push   $0x34
-  jmp alltraps
-80105fcf:	e9 46 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fd4 <vector53>:
-.globl vector53
-vector53:
-  pushl $0
-80105fd4:	6a 00                	push   $0x0
-  pushl $53
-80105fd6:	6a 35                	push   $0x35
-  jmp alltraps
-80105fd8:	e9 3d f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fdd <vector54>:
-.globl vector54
-vector54:
-  pushl $0
-80105fdd:	6a 00                	push   $0x0
-  pushl $54
-80105fdf:	6a 36                	push   $0x36
-  jmp alltraps
-80105fe1:	e9 34 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fe6 <vector55>:
-.globl vector55
-vector55:
-  pushl $0
-80105fe6:	6a 00                	push   $0x0
-  pushl $55
-80105fe8:	6a 37                	push   $0x37
-  jmp alltraps
-80105fea:	e9 2b f9 ff ff       	jmp    8010591a <alltraps>
-
-80105fef <vector56>:
-.globl vector56
-vector56:
-  pushl $0
-80105fef:	6a 00                	push   $0x0
-  pushl $56
-80105ff1:	6a 38                	push   $0x38
-  jmp alltraps
-80105ff3:	e9 22 f9 ff ff       	jmp    8010591a <alltraps>
-
-80105ff8 <vector57>:
-.globl vector57
-vector57:
-  pushl $0
-80105ff8:	6a 00                	push   $0x0
-  pushl $57
-80105ffa:	6a 39                	push   $0x39
-  jmp alltraps
-80105ffc:	e9 19 f9 ff ff       	jmp    8010591a <alltraps>
-
-80106001 <vector58>:
-.globl vector58
-vector58:
-  pushl $0
-80106001:	6a 00                	push   $0x0
-  pushl $58
-80106003:	6a 3a                	push   $0x3a
-  jmp alltraps
-80106005:	e9 10 f9 ff ff       	jmp    8010591a <alltraps>
-
-8010600a <vector59>:
-.globl vector59
-vector59:
-  pushl $0
-8010600a:	6a 00                	push   $0x0
-  pushl $59
-8010600c:	6a 3b                	push   $0x3b
-  jmp alltraps
-8010600e:	e9 07 f9 ff ff       	jmp    8010591a <alltraps>
-
-80106013 <vector60>:
-.globl vector60
-vector60:
-  pushl $0
-80106013:	6a 00                	push   $0x0
-  pushl $60
-80106015:	6a 3c                	push   $0x3c
-  jmp alltraps
-80106017:	e9 fe f8 ff ff       	jmp    8010591a <alltraps>
-
-8010601c <vector61>:
-.globl vector61
-vector61:
-  pushl $0
-8010601c:	6a 00                	push   $0x0
-  pushl $61
-8010601e:	6a 3d                	push   $0x3d
-  jmp alltraps
-80106020:	e9 f5 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106025 <vector62>:
-.globl vector62
-vector62:
-  pushl $0
-80106025:	6a 00                	push   $0x0
-  pushl $62
-80106027:	6a 3e                	push   $0x3e
-  jmp alltraps
-80106029:	e9 ec f8 ff ff       	jmp    8010591a <alltraps>
-
-8010602e <vector63>:
-.globl vector63
-vector63:
-  pushl $0
-8010602e:	6a 00                	push   $0x0
-  pushl $63
-80106030:	6a 3f                	push   $0x3f
-  jmp alltraps
-80106032:	e9 e3 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106037 <vector64>:
-.globl vector64
-vector64:
-  pushl $0
-80106037:	6a 00                	push   $0x0
-  pushl $64
-80106039:	6a 40                	push   $0x40
-  jmp alltraps
-8010603b:	e9 da f8 ff ff       	jmp    8010591a <alltraps>
-
-80106040 <vector65>:
-.globl vector65
-vector65:
-  pushl $0
-80106040:	6a 00                	push   $0x0
-  pushl $65
-80106042:	6a 41                	push   $0x41
-  jmp alltraps
-80106044:	e9 d1 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106049 <vector66>:
-.globl vector66
-vector66:
-  pushl $0
-80106049:	6a 00                	push   $0x0
-  pushl $66
-8010604b:	6a 42                	push   $0x42
-  jmp alltraps
-8010604d:	e9 c8 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106052 <vector67>:
-.globl vector67
-vector67:
-  pushl $0
-80106052:	6a 00                	push   $0x0
-  pushl $67
-80106054:	6a 43                	push   $0x43
-  jmp alltraps
-80106056:	e9 bf f8 ff ff       	jmp    8010591a <alltraps>
-
-8010605b <vector68>:
-.globl vector68
-vector68:
-  pushl $0
-8010605b:	6a 00                	push   $0x0
-  pushl $68
-8010605d:	6a 44                	push   $0x44
-  jmp alltraps
-8010605f:	e9 b6 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106064 <vector69>:
-.globl vector69
-vector69:
-  pushl $0
-80106064:	6a 00                	push   $0x0
-  pushl $69
-80106066:	6a 45                	push   $0x45
-  jmp alltraps
-80106068:	e9 ad f8 ff ff       	jmp    8010591a <alltraps>
-
-8010606d <vector70>:
-.globl vector70
-vector70:
-  pushl $0
-8010606d:	6a 00                	push   $0x0
-  pushl $70
-8010606f:	6a 46                	push   $0x46
-  jmp alltraps
-80106071:	e9 a4 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106076 <vector71>:
-.globl vector71
-vector71:
-  pushl $0
-80106076:	6a 00                	push   $0x0
-  pushl $71
-80106078:	6a 47                	push   $0x47
-  jmp alltraps
-8010607a:	e9 9b f8 ff ff       	jmp    8010591a <alltraps>
-
-8010607f <vector72>:
-.globl vector72
-vector72:
-  pushl $0
-8010607f:	6a 00                	push   $0x0
-  pushl $72
-80106081:	6a 48                	push   $0x48
-  jmp alltraps
-80106083:	e9 92 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106088 <vector73>:
-.globl vector73
-vector73:
-  pushl $0
-80106088:	6a 00                	push   $0x0
-  pushl $73
-8010608a:	6a 49                	push   $0x49
-  jmp alltraps
-8010608c:	e9 89 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106091 <vector74>:
-.globl vector74
-vector74:
-  pushl $0
-80106091:	6a 00                	push   $0x0
-  pushl $74
-80106093:	6a 4a                	push   $0x4a
-  jmp alltraps
-80106095:	e9 80 f8 ff ff       	jmp    8010591a <alltraps>
-
-8010609a <vector75>:
-.globl vector75
-vector75:
-  pushl $0
-8010609a:	6a 00                	push   $0x0
-  pushl $75
-8010609c:	6a 4b                	push   $0x4b
-  jmp alltraps
-8010609e:	e9 77 f8 ff ff       	jmp    8010591a <alltraps>
-
-801060a3 <vector76>:
-.globl vector76
-vector76:
-  pushl $0
-801060a3:	6a 00                	push   $0x0
-  pushl $76
-801060a5:	6a 4c                	push   $0x4c
-  jmp alltraps
-801060a7:	e9 6e f8 ff ff       	jmp    8010591a <alltraps>
-
-801060ac <vector77>:
-.globl vector77
-vector77:
-  pushl $0
-801060ac:	6a 00                	push   $0x0
-  pushl $77
-801060ae:	6a 4d                	push   $0x4d
-  jmp alltraps
-801060b0:	e9 65 f8 ff ff       	jmp    8010591a <alltraps>
-
-801060b5 <vector78>:
-.globl vector78
-vector78:
-  pushl $0
-801060b5:	6a 00                	push   $0x0
-  pushl $78
-801060b7:	6a 4e                	push   $0x4e
-  jmp alltraps
-801060b9:	e9 5c f8 ff ff       	jmp    8010591a <alltraps>
-
-801060be <vector79>:
-.globl vector79
-vector79:
-  pushl $0
-801060be:	6a 00                	push   $0x0
-  pushl $79
-801060c0:	6a 4f                	push   $0x4f
-  jmp alltraps
-801060c2:	e9 53 f8 ff ff       	jmp    8010591a <alltraps>
-
-801060c7 <vector80>:
-.globl vector80
-vector80:
-  pushl $0
-801060c7:	6a 00                	push   $0x0
-  pushl $80
-801060c9:	6a 50                	push   $0x50
-  jmp alltraps
-801060cb:	e9 4a f8 ff ff       	jmp    8010591a <alltraps>
-
-801060d0 <vector81>:
-.globl vector81
-vector81:
-  pushl $0
-801060d0:	6a 00                	push   $0x0
-  pushl $81
-801060d2:	6a 51                	push   $0x51
-  jmp alltraps
-801060d4:	e9 41 f8 ff ff       	jmp    8010591a <alltraps>
-
-801060d9 <vector82>:
-.globl vector82
-vector82:
-  pushl $0
-801060d9:	6a 00                	push   $0x0
-  pushl $82
-801060db:	6a 52                	push   $0x52
-  jmp alltraps
-801060dd:	e9 38 f8 ff ff       	jmp    8010591a <alltraps>
-
-801060e2 <vector83>:
-.globl vector83
-vector83:
-  pushl $0
-801060e2:	6a 00                	push   $0x0
-  pushl $83
-801060e4:	6a 53                	push   $0x53
-  jmp alltraps
-801060e6:	e9 2f f8 ff ff       	jmp    8010591a <alltraps>
-
-801060eb <vector84>:
-.globl vector84
-vector84:
-  pushl $0
-801060eb:	6a 00                	push   $0x0
-  pushl $84
-801060ed:	6a 54                	push   $0x54
-  jmp alltraps
-801060ef:	e9 26 f8 ff ff       	jmp    8010591a <alltraps>
-
-801060f4 <vector85>:
-.globl vector85
-vector85:
-  pushl $0
-801060f4:	6a 00                	push   $0x0
-  pushl $85
-801060f6:	6a 55                	push   $0x55
-  jmp alltraps
-801060f8:	e9 1d f8 ff ff       	jmp    8010591a <alltraps>
-
-801060fd <vector86>:
-.globl vector86
-vector86:
-  pushl $0
-801060fd:	6a 00                	push   $0x0
-  pushl $86
-801060ff:	6a 56                	push   $0x56
-  jmp alltraps
-80106101:	e9 14 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106106 <vector87>:
-.globl vector87
-vector87:
-  pushl $0
-80106106:	6a 00                	push   $0x0
-  pushl $87
-80106108:	6a 57                	push   $0x57
-  jmp alltraps
-8010610a:	e9 0b f8 ff ff       	jmp    8010591a <alltraps>
-
-8010610f <vector88>:
-.globl vector88
-vector88:
-  pushl $0
-8010610f:	6a 00                	push   $0x0
-  pushl $88
-80106111:	6a 58                	push   $0x58
-  jmp alltraps
-80106113:	e9 02 f8 ff ff       	jmp    8010591a <alltraps>
-
-80106118 <vector89>:
-.globl vector89
-vector89:
-  pushl $0
-80106118:	6a 00                	push   $0x0
-  pushl $89
-8010611a:	6a 59                	push   $0x59
-  jmp alltraps
-8010611c:	e9 f9 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106121 <vector90>:
-.globl vector90
-vector90:
-  pushl $0
-80106121:	6a 00                	push   $0x0
-  pushl $90
-80106123:	6a 5a                	push   $0x5a
-  jmp alltraps
-80106125:	e9 f0 f7 ff ff       	jmp    8010591a <alltraps>
-
-8010612a <vector91>:
-.globl vector91
-vector91:
-  pushl $0
-8010612a:	6a 00                	push   $0x0
-  pushl $91
-8010612c:	6a 5b                	push   $0x5b
-  jmp alltraps
-8010612e:	e9 e7 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106133 <vector92>:
-.globl vector92
-vector92:
-  pushl $0
-80106133:	6a 00                	push   $0x0
-  pushl $92
-80106135:	6a 5c                	push   $0x5c
-  jmp alltraps
-80106137:	e9 de f7 ff ff       	jmp    8010591a <alltraps>
-
-8010613c <vector93>:
-.globl vector93
-vector93:
-  pushl $0
-8010613c:	6a 00                	push   $0x0
-  pushl $93
-8010613e:	6a 5d                	push   $0x5d
-  jmp alltraps
-80106140:	e9 d5 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106145 <vector94>:
-.globl vector94
-vector94:
-  pushl $0
-80106145:	6a 00                	push   $0x0
-  pushl $94
-80106147:	6a 5e                	push   $0x5e
-  jmp alltraps
-80106149:	e9 cc f7 ff ff       	jmp    8010591a <alltraps>
-
-8010614e <vector95>:
-.globl vector95
-vector95:
-  pushl $0
-8010614e:	6a 00                	push   $0x0
-  pushl $95
-80106150:	6a 5f                	push   $0x5f
-  jmp alltraps
-80106152:	e9 c3 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106157 <vector96>:
-.globl vector96
-vector96:
-  pushl $0
-80106157:	6a 00                	push   $0x0
-  pushl $96
-80106159:	6a 60                	push   $0x60
-  jmp alltraps
-8010615b:	e9 ba f7 ff ff       	jmp    8010591a <alltraps>
-
-80106160 <vector97>:
-.globl vector97
-vector97:
-  pushl $0
-80106160:	6a 00                	push   $0x0
-  pushl $97
-80106162:	6a 61                	push   $0x61
-  jmp alltraps
-80106164:	e9 b1 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106169 <vector98>:
-.globl vector98
-vector98:
-  pushl $0
-80106169:	6a 00                	push   $0x0
-  pushl $98
-8010616b:	6a 62                	push   $0x62
-  jmp alltraps
-8010616d:	e9 a8 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106172 <vector99>:
-.globl vector99
-vector99:
-  pushl $0
-80106172:	6a 00                	push   $0x0
-  pushl $99
-80106174:	6a 63                	push   $0x63
-  jmp alltraps
-80106176:	e9 9f f7 ff ff       	jmp    8010591a <alltraps>
-
-8010617b <vector100>:
-.globl vector100
-vector100:
-  pushl $0
-8010617b:	6a 00                	push   $0x0
-  pushl $100
-8010617d:	6a 64                	push   $0x64
-  jmp alltraps
-8010617f:	e9 96 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106184 <vector101>:
-.globl vector101
-vector101:
-  pushl $0
-80106184:	6a 00                	push   $0x0
-  pushl $101
-80106186:	6a 65                	push   $0x65
-  jmp alltraps
-80106188:	e9 8d f7 ff ff       	jmp    8010591a <alltraps>
-
-8010618d <vector102>:
-.globl vector102
-vector102:
-  pushl $0
-8010618d:	6a 00                	push   $0x0
-  pushl $102
-8010618f:	6a 66                	push   $0x66
-  jmp alltraps
-80106191:	e9 84 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106196 <vector103>:
-.globl vector103
-vector103:
-  pushl $0
-80106196:	6a 00                	push   $0x0
-  pushl $103
-80106198:	6a 67                	push   $0x67
-  jmp alltraps
-8010619a:	e9 7b f7 ff ff       	jmp    8010591a <alltraps>
-
-8010619f <vector104>:
-.globl vector104
-vector104:
-  pushl $0
-8010619f:	6a 00                	push   $0x0
-  pushl $104
-801061a1:	6a 68                	push   $0x68
-  jmp alltraps
-801061a3:	e9 72 f7 ff ff       	jmp    8010591a <alltraps>
-
-801061a8 <vector105>:
-.globl vector105
-vector105:
-  pushl $0
-801061a8:	6a 00                	push   $0x0
-  pushl $105
-801061aa:	6a 69                	push   $0x69
-  jmp alltraps
-801061ac:	e9 69 f7 ff ff       	jmp    8010591a <alltraps>
-
-801061b1 <vector106>:
-.globl vector106
-vector106:
-  pushl $0
-801061b1:	6a 00                	push   $0x0
-  pushl $106
-801061b3:	6a 6a                	push   $0x6a
-  jmp alltraps
-801061b5:	e9 60 f7 ff ff       	jmp    8010591a <alltraps>
-
-801061ba <vector107>:
-.globl vector107
-vector107:
-  pushl $0
-801061ba:	6a 00                	push   $0x0
-  pushl $107
-801061bc:	6a 6b                	push   $0x6b
-  jmp alltraps
-801061be:	e9 57 f7 ff ff       	jmp    8010591a <alltraps>
-
-801061c3 <vector108>:
-.globl vector108
-vector108:
-  pushl $0
-801061c3:	6a 00                	push   $0x0
-  pushl $108
-801061c5:	6a 6c                	push   $0x6c
-  jmp alltraps
-801061c7:	e9 4e f7 ff ff       	jmp    8010591a <alltraps>
-
-801061cc <vector109>:
-.globl vector109
-vector109:
-  pushl $0
-801061cc:	6a 00                	push   $0x0
-  pushl $109
-801061ce:	6a 6d                	push   $0x6d
-  jmp alltraps
-801061d0:	e9 45 f7 ff ff       	jmp    8010591a <alltraps>
-
-801061d5 <vector110>:
-.globl vector110
-vector110:
-  pushl $0
-801061d5:	6a 00                	push   $0x0
-  pushl $110
-801061d7:	6a 6e                	push   $0x6e
-  jmp alltraps
-801061d9:	e9 3c f7 ff ff       	jmp    8010591a <alltraps>
-
-801061de <vector111>:
-.globl vector111
-vector111:
-  pushl $0
-801061de:	6a 00                	push   $0x0
-  pushl $111
-801061e0:	6a 6f                	push   $0x6f
-  jmp alltraps
-801061e2:	e9 33 f7 ff ff       	jmp    8010591a <alltraps>
-
-801061e7 <vector112>:
-.globl vector112
-vector112:
-  pushl $0
-801061e7:	6a 00                	push   $0x0
-  pushl $112
-801061e9:	6a 70                	push   $0x70
-  jmp alltraps
-801061eb:	e9 2a f7 ff ff       	jmp    8010591a <alltraps>
-
-801061f0 <vector113>:
-.globl vector113
-vector113:
-  pushl $0
-801061f0:	6a 00                	push   $0x0
-  pushl $113
-801061f2:	6a 71                	push   $0x71
-  jmp alltraps
-801061f4:	e9 21 f7 ff ff       	jmp    8010591a <alltraps>
-
-801061f9 <vector114>:
-.globl vector114
-vector114:
-  pushl $0
-801061f9:	6a 00                	push   $0x0
-  pushl $114
-801061fb:	6a 72                	push   $0x72
-  jmp alltraps
-801061fd:	e9 18 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106202 <vector115>:
-.globl vector115
-vector115:
-  pushl $0
-80106202:	6a 00                	push   $0x0
-  pushl $115
-80106204:	6a 73                	push   $0x73
-  jmp alltraps
-80106206:	e9 0f f7 ff ff       	jmp    8010591a <alltraps>
-
-8010620b <vector116>:
-.globl vector116
-vector116:
-  pushl $0
-8010620b:	6a 00                	push   $0x0
-  pushl $116
-8010620d:	6a 74                	push   $0x74
-  jmp alltraps
-8010620f:	e9 06 f7 ff ff       	jmp    8010591a <alltraps>
-
-80106214 <vector117>:
-.globl vector117
-vector117:
-  pushl $0
-80106214:	6a 00                	push   $0x0
-  pushl $117
-80106216:	6a 75                	push   $0x75
-  jmp alltraps
-80106218:	e9 fd f6 ff ff       	jmp    8010591a <alltraps>
-
-8010621d <vector118>:
-.globl vector118
-vector118:
-  pushl $0
-8010621d:	6a 00                	push   $0x0
-  pushl $118
-8010621f:	6a 76                	push   $0x76
-  jmp alltraps
-80106221:	e9 f4 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106226 <vector119>:
-.globl vector119
-vector119:
-  pushl $0
-80106226:	6a 00                	push   $0x0
-  pushl $119
-80106228:	6a 77                	push   $0x77
-  jmp alltraps
-8010622a:	e9 eb f6 ff ff       	jmp    8010591a <alltraps>
-
-8010622f <vector120>:
-.globl vector120
-vector120:
-  pushl $0
-8010622f:	6a 00                	push   $0x0
-  pushl $120
-80106231:	6a 78                	push   $0x78
-  jmp alltraps
-80106233:	e9 e2 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106238 <vector121>:
-.globl vector121
-vector121:
-  pushl $0
-80106238:	6a 00                	push   $0x0
-  pushl $121
-8010623a:	6a 79                	push   $0x79
-  jmp alltraps
-8010623c:	e9 d9 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106241 <vector122>:
-.globl vector122
-vector122:
-  pushl $0
-80106241:	6a 00                	push   $0x0
-  pushl $122
-80106243:	6a 7a                	push   $0x7a
-  jmp alltraps
-80106245:	e9 d0 f6 ff ff       	jmp    8010591a <alltraps>
-
-8010624a <vector123>:
-.globl vector123
-vector123:
-  pushl $0
-8010624a:	6a 00                	push   $0x0
-  pushl $123
-8010624c:	6a 7b                	push   $0x7b
-  jmp alltraps
-8010624e:	e9 c7 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106253 <vector124>:
-.globl vector124
-vector124:
-  pushl $0
-80106253:	6a 00                	push   $0x0
-  pushl $124
-80106255:	6a 7c                	push   $0x7c
-  jmp alltraps
-80106257:	e9 be f6 ff ff       	jmp    8010591a <alltraps>
-
-8010625c <vector125>:
-.globl vector125
-vector125:
-  pushl $0
-8010625c:	6a 00                	push   $0x0
-  pushl $125
-8010625e:	6a 7d                	push   $0x7d
-  jmp alltraps
-80106260:	e9 b5 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106265 <vector126>:
-.globl vector126
-vector126:
-  pushl $0
-80106265:	6a 00                	push   $0x0
-  pushl $126
-80106267:	6a 7e                	push   $0x7e
-  jmp alltraps
-80106269:	e9 ac f6 ff ff       	jmp    8010591a <alltraps>
-
-8010626e <vector127>:
-.globl vector127
-vector127:
-  pushl $0
-8010626e:	6a 00                	push   $0x0
-  pushl $127
-80106270:	6a 7f                	push   $0x7f
-  jmp alltraps
-80106272:	e9 a3 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106277 <vector128>:
-.globl vector128
-vector128:
-  pushl $0
-80106277:	6a 00                	push   $0x0
-  pushl $128
-80106279:	68 80 00 00 00       	push   $0x80
-  jmp alltraps
-8010627e:	e9 97 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106283 <vector129>:
-.globl vector129
-vector129:
-  pushl $0
-80106283:	6a 00                	push   $0x0
-  pushl $129
-80106285:	68 81 00 00 00       	push   $0x81
-  jmp alltraps
-8010628a:	e9 8b f6 ff ff       	jmp    8010591a <alltraps>
-
-8010628f <vector130>:
-.globl vector130
-vector130:
-  pushl $0
-8010628f:	6a 00                	push   $0x0
-  pushl $130
-80106291:	68 82 00 00 00       	push   $0x82
-  jmp alltraps
-80106296:	e9 7f f6 ff ff       	jmp    8010591a <alltraps>
-
-8010629b <vector131>:
-.globl vector131
-vector131:
-  pushl $0
-8010629b:	6a 00                	push   $0x0
-  pushl $131
-8010629d:	68 83 00 00 00       	push   $0x83
-  jmp alltraps
-801062a2:	e9 73 f6 ff ff       	jmp    8010591a <alltraps>
-
-801062a7 <vector132>:
-.globl vector132
-vector132:
-  pushl $0
-801062a7:	6a 00                	push   $0x0
-  pushl $132
-801062a9:	68 84 00 00 00       	push   $0x84
-  jmp alltraps
-801062ae:	e9 67 f6 ff ff       	jmp    8010591a <alltraps>
-
-801062b3 <vector133>:
-.globl vector133
-vector133:
-  pushl $0
-801062b3:	6a 00                	push   $0x0
-  pushl $133
-801062b5:	68 85 00 00 00       	push   $0x85
-  jmp alltraps
-801062ba:	e9 5b f6 ff ff       	jmp    8010591a <alltraps>
-
-801062bf <vector134>:
-.globl vector134
-vector134:
-  pushl $0
-801062bf:	6a 00                	push   $0x0
-  pushl $134
-801062c1:	68 86 00 00 00       	push   $0x86
-  jmp alltraps
-801062c6:	e9 4f f6 ff ff       	jmp    8010591a <alltraps>
-
-801062cb <vector135>:
-.globl vector135
-vector135:
-  pushl $0
-801062cb:	6a 00                	push   $0x0
-  pushl $135
-801062cd:	68 87 00 00 00       	push   $0x87
-  jmp alltraps
-801062d2:	e9 43 f6 ff ff       	jmp    8010591a <alltraps>
-
-801062d7 <vector136>:
-.globl vector136
-vector136:
-  pushl $0
-801062d7:	6a 00                	push   $0x0
-  pushl $136
-801062d9:	68 88 00 00 00       	push   $0x88
-  jmp alltraps
-801062de:	e9 37 f6 ff ff       	jmp    8010591a <alltraps>
-
-801062e3 <vector137>:
-.globl vector137
-vector137:
-  pushl $0
-801062e3:	6a 00                	push   $0x0
-  pushl $137
-801062e5:	68 89 00 00 00       	push   $0x89
-  jmp alltraps
-801062ea:	e9 2b f6 ff ff       	jmp    8010591a <alltraps>
-
-801062ef <vector138>:
-.globl vector138
-vector138:
-  pushl $0
-801062ef:	6a 00                	push   $0x0
-  pushl $138
-801062f1:	68 8a 00 00 00       	push   $0x8a
-  jmp alltraps
-801062f6:	e9 1f f6 ff ff       	jmp    8010591a <alltraps>
-
-801062fb <vector139>:
-.globl vector139
-vector139:
-  pushl $0
-801062fb:	6a 00                	push   $0x0
-  pushl $139
-801062fd:	68 8b 00 00 00       	push   $0x8b
-  jmp alltraps
-80106302:	e9 13 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106307 <vector140>:
-.globl vector140
-vector140:
-  pushl $0
-80106307:	6a 00                	push   $0x0
-  pushl $140
-80106309:	68 8c 00 00 00       	push   $0x8c
-  jmp alltraps
-8010630e:	e9 07 f6 ff ff       	jmp    8010591a <alltraps>
-
-80106313 <vector141>:
-.globl vector141
-vector141:
-  pushl $0
-80106313:	6a 00                	push   $0x0
-  pushl $141
-80106315:	68 8d 00 00 00       	push   $0x8d
-  jmp alltraps
-8010631a:	e9 fb f5 ff ff       	jmp    8010591a <alltraps>
-
-8010631f <vector142>:
-.globl vector142
-vector142:
-  pushl $0
-8010631f:	6a 00                	push   $0x0
-  pushl $142
-80106321:	68 8e 00 00 00       	push   $0x8e
-  jmp alltraps
-80106326:	e9 ef f5 ff ff       	jmp    8010591a <alltraps>
-
-8010632b <vector143>:
-.globl vector143
-vector143:
-  pushl $0
-8010632b:	6a 00                	push   $0x0
-  pushl $143
-8010632d:	68 8f 00 00 00       	push   $0x8f
-  jmp alltraps
-80106332:	e9 e3 f5 ff ff       	jmp    8010591a <alltraps>
-
-80106337 <vector144>:
-.globl vector144
-vector144:
-  pushl $0
-80106337:	6a 00                	push   $0x0
-  pushl $144
-80106339:	68 90 00 00 00       	push   $0x90
-  jmp alltraps
-8010633e:	e9 d7 f5 ff ff       	jmp    8010591a <alltraps>
-
-80106343 <vector145>:
-.globl vector145
-vector145:
-  pushl $0
-80106343:	6a 00                	push   $0x0
-  pushl $145
-80106345:	68 91 00 00 00       	push   $0x91
-  jmp alltraps
-8010634a:	e9 cb f5 ff ff       	jmp    8010591a <alltraps>
-
-8010634f <vector146>:
-.globl vector146
-vector146:
-  pushl $0
-8010634f:	6a 00                	push   $0x0
-  pushl $146
-80106351:	68 92 00 00 00       	push   $0x92
-  jmp alltraps
-80106356:	e9 bf f5 ff ff       	jmp    8010591a <alltraps>
-
-8010635b <vector147>:
-.globl vector147
-vector147:
-  pushl $0
-8010635b:	6a 00                	push   $0x0
-  pushl $147
-8010635d:	68 93 00 00 00       	push   $0x93
-  jmp alltraps
-80106362:	e9 b3 f5 ff ff       	jmp    8010591a <alltraps>
-
-80106367 <vector148>:
-.globl vector148
-vector148:
-  pushl $0
-80106367:	6a 00                	push   $0x0
-  pushl $148
-80106369:	68 94 00 00 00       	push   $0x94
-  jmp alltraps
-8010636e:	e9 a7 f5 ff ff       	jmp    8010591a <alltraps>
-
-80106373 <vector149>:
-.globl vector149
-vector149:
-  pushl $0
-80106373:	6a 00                	push   $0x0
-  pushl $149
-80106375:	68 95 00 00 00       	push   $0x95
-  jmp alltraps
-8010637a:	e9 9b f5 ff ff       	jmp    8010591a <alltraps>
-
-8010637f <vector150>:
-.globl vector150
-vector150:
-  pushl $0
-8010637f:	6a 00                	push   $0x0
-  pushl $150
-80106381:	68 96 00 00 00       	push   $0x96
-  jmp alltraps
-80106386:	e9 8f f5 ff ff       	jmp    8010591a <alltraps>
-
-8010638b <vector151>:
-.globl vector151
-vector151:
-  pushl $0
-8010638b:	6a 00                	push   $0x0
-  pushl $151
-8010638d:	68 97 00 00 00       	push   $0x97
-  jmp alltraps
-80106392:	e9 83 f5 ff ff       	jmp    8010591a <alltraps>
-
-80106397 <vector152>:
-.globl vector152
-vector152:
-  pushl $0
-80106397:	6a 00                	push   $0x0
-  pushl $152
-80106399:	68 98 00 00 00       	push   $0x98
-  jmp alltraps
-8010639e:	e9 77 f5 ff ff       	jmp    8010591a <alltraps>
-
-801063a3 <vector153>:
-.globl vector153
-vector153:
-  pushl $0
-801063a3:	6a 00                	push   $0x0
-  pushl $153
-801063a5:	68 99 00 00 00       	push   $0x99
-  jmp alltraps
-801063aa:	e9 6b f5 ff ff       	jmp    8010591a <alltraps>
-
-801063af <vector154>:
-.globl vector154
-vector154:
-  pushl $0
-801063af:	6a 00                	push   $0x0
-  pushl $154
-801063b1:	68 9a 00 00 00       	push   $0x9a
-  jmp alltraps
-801063b6:	e9 5f f5 ff ff       	jmp    8010591a <alltraps>
-
-801063bb <vector155>:
-.globl vector155
-vector155:
-  pushl $0
-801063bb:	6a 00                	push   $0x0
-  pushl $155
-801063bd:	68 9b 00 00 00       	push   $0x9b
-  jmp alltraps
-801063c2:	e9 53 f5 ff ff       	jmp    8010591a <alltraps>
-
-801063c7 <vector156>:
-.globl vector156
-vector156:
-  pushl $0
-801063c7:	6a 00                	push   $0x0
-  pushl $156
-801063c9:	68 9c 00 00 00       	push   $0x9c
-  jmp alltraps
-801063ce:	e9 47 f5 ff ff       	jmp    8010591a <alltraps>
-
-801063d3 <vector157>:
-.globl vector157
-vector157:
-  pushl $0
-801063d3:	6a 00                	push   $0x0
-  pushl $157
-801063d5:	68 9d 00 00 00       	push   $0x9d
-  jmp alltraps
-801063da:	e9 3b f5 ff ff       	jmp    8010591a <alltraps>
-
-801063df <vector158>:
-.globl vector158
-vector158:
-  pushl $0
-801063df:	6a 00                	push   $0x0
-  pushl $158
-801063e1:	68 9e 00 00 00       	push   $0x9e
-  jmp alltraps
-801063e6:	e9 2f f5 ff ff       	jmp    8010591a <alltraps>
-
-801063eb <vector159>:
-.globl vector159
-vector159:
-  pushl $0
-801063eb:	6a 00                	push   $0x0
-  pushl $159
-801063ed:	68 9f 00 00 00       	push   $0x9f
-  jmp alltraps
-801063f2:	e9 23 f5 ff ff       	jmp    8010591a <alltraps>
-
-801063f7 <vector160>:
-.globl vector160
-vector160:
-  pushl $0
-801063f7:	6a 00                	push   $0x0
-  pushl $160
-801063f9:	68 a0 00 00 00       	push   $0xa0
-  jmp alltraps
-801063fe:	e9 17 f5 ff ff       	jmp    8010591a <alltraps>
-
-80106403 <vector161>:
-.globl vector161
-vector161:
-  pushl $0
-80106403:	6a 00                	push   $0x0
-  pushl $161
-80106405:	68 a1 00 00 00       	push   $0xa1
-  jmp alltraps
-8010640a:	e9 0b f5 ff ff       	jmp    8010591a <alltraps>
-
-8010640f <vector162>:
-.globl vector162
-vector162:
-  pushl $0
-8010640f:	6a 00                	push   $0x0
-  pushl $162
-80106411:	68 a2 00 00 00       	push   $0xa2
-  jmp alltraps
-80106416:	e9 ff f4 ff ff       	jmp    8010591a <alltraps>
-
-8010641b <vector163>:
-.globl vector163
-vector163:
-  pushl $0
-8010641b:	6a 00                	push   $0x0
-  pushl $163
-8010641d:	68 a3 00 00 00       	push   $0xa3
-  jmp alltraps
-80106422:	e9 f3 f4 ff ff       	jmp    8010591a <alltraps>
-
-80106427 <vector164>:
-.globl vector164
-vector164:
-  pushl $0
-80106427:	6a 00                	push   $0x0
-  pushl $164
-80106429:	68 a4 00 00 00       	push   $0xa4
-  jmp alltraps
-8010642e:	e9 e7 f4 ff ff       	jmp    8010591a <alltraps>
-
-80106433 <vector165>:
-.globl vector165
-vector165:
-  pushl $0
-80106433:	6a 00                	push   $0x0
-  pushl $165
-80106435:	68 a5 00 00 00       	push   $0xa5
-  jmp alltraps
-8010643a:	e9 db f4 ff ff       	jmp    8010591a <alltraps>
-
-8010643f <vector166>:
-.globl vector166
-vector166:
-  pushl $0
-8010643f:	6a 00                	push   $0x0
-  pushl $166
-80106441:	68 a6 00 00 00       	push   $0xa6
-  jmp alltraps
-80106446:	e9 cf f4 ff ff       	jmp    8010591a <alltraps>
-
-8010644b <vector167>:
-.globl vector167
-vector167:
-  pushl $0
-8010644b:	6a 00                	push   $0x0
-  pushl $167
-8010644d:	68 a7 00 00 00       	push   $0xa7
-  jmp alltraps
-80106452:	e9 c3 f4 ff ff       	jmp    8010591a <alltraps>
-
-80106457 <vector168>:
-.globl vector168
-vector168:
-  pushl $0
-80106457:	6a 00                	push   $0x0
-  pushl $168
-80106459:	68 a8 00 00 00       	push   $0xa8
-  jmp alltraps
-8010645e:	e9 b7 f4 ff ff       	jmp    8010591a <alltraps>
-
-80106463 <vector169>:
-.globl vector169
-vector169:
-  pushl $0
-80106463:	6a 00                	push   $0x0
-  pushl $169
-80106465:	68 a9 00 00 00       	push   $0xa9
-  jmp alltraps
-8010646a:	e9 ab f4 ff ff       	jmp    8010591a <alltraps>
-
-8010646f <vector170>:
-.globl vector170
-vector170:
-  pushl $0
-8010646f:	6a 00                	push   $0x0
-  pushl $170
-80106471:	68 aa 00 00 00       	push   $0xaa
-  jmp alltraps
-80106476:	e9 9f f4 ff ff       	jmp    8010591a <alltraps>
-
-8010647b <vector171>:
-.globl vector171
-vector171:
-  pushl $0
-8010647b:	6a 00                	push   $0x0
-  pushl $171
-8010647d:	68 ab 00 00 00       	push   $0xab
-  jmp alltraps
-80106482:	e9 93 f4 ff ff       	jmp    8010591a <alltraps>
-
-80106487 <vector172>:
-.globl vector172
-vector172:
-  pushl $0
-80106487:	6a 00                	push   $0x0
-  pushl $172
-80106489:	68 ac 00 00 00       	push   $0xac
-  jmp alltraps
-8010648e:	e9 87 f4 ff ff       	jmp    8010591a <alltraps>
-
-80106493 <vector173>:
-.globl vector173
-vector173:
-  pushl $0
-80106493:	6a 00                	push   $0x0
-  pushl $173
-80106495:	68 ad 00 00 00       	push   $0xad
-  jmp alltraps
-8010649a:	e9 7b f4 ff ff       	jmp    8010591a <alltraps>
-
-8010649f <vector174>:
-.globl vector174
-vector174:
-  pushl $0
-8010649f:	6a 00                	push   $0x0
-  pushl $174
-801064a1:	68 ae 00 00 00       	push   $0xae
-  jmp alltraps
-801064a6:	e9 6f f4 ff ff       	jmp    8010591a <alltraps>
-
-801064ab <vector175>:
-.globl vector175
-vector175:
-  pushl $0
-801064ab:	6a 00                	push   $0x0
-  pushl $175
-801064ad:	68 af 00 00 00       	push   $0xaf
-  jmp alltraps
-801064b2:	e9 63 f4 ff ff       	jmp    8010591a <alltraps>
-
-801064b7 <vector176>:
-.globl vector176
-vector176:
-  pushl $0
-801064b7:	6a 00                	push   $0x0
-  pushl $176
-801064b9:	68 b0 00 00 00       	push   $0xb0
-  jmp alltraps
-801064be:	e9 57 f4 ff ff       	jmp    8010591a <alltraps>
-
-801064c3 <vector177>:
-.globl vector177
-vector177:
-  pushl $0
-801064c3:	6a 00                	push   $0x0
-  pushl $177
-801064c5:	68 b1 00 00 00       	push   $0xb1
-  jmp alltraps
-801064ca:	e9 4b f4 ff ff       	jmp    8010591a <alltraps>
-
-801064cf <vector178>:
-.globl vector178
-vector178:
-  pushl $0
-801064cf:	6a 00                	push   $0x0
-  pushl $178
-801064d1:	68 b2 00 00 00       	push   $0xb2
-  jmp alltraps
-801064d6:	e9 3f f4 ff ff       	jmp    8010591a <alltraps>
-
-801064db <vector179>:
-.globl vector179
-vector179:
-  pushl $0
-801064db:	6a 00                	push   $0x0
-  pushl $179
-801064dd:	68 b3 00 00 00       	push   $0xb3
-  jmp alltraps
-801064e2:	e9 33 f4 ff ff       	jmp    8010591a <alltraps>
-
-801064e7 <vector180>:
-.globl vector180
-vector180:
-  pushl $0
-801064e7:	6a 00                	push   $0x0
-  pushl $180
-801064e9:	68 b4 00 00 00       	push   $0xb4
-  jmp alltraps
-801064ee:	e9 27 f4 ff ff       	jmp    8010591a <alltraps>
-
-801064f3 <vector181>:
-.globl vector181
-vector181:
-  pushl $0
-801064f3:	6a 00                	push   $0x0
-  pushl $181
-801064f5:	68 b5 00 00 00       	push   $0xb5
-  jmp alltraps
-801064fa:	e9 1b f4 ff ff       	jmp    8010591a <alltraps>
-
-801064ff <vector182>:
-.globl vector182
-vector182:
-  pushl $0
-801064ff:	6a 00                	push   $0x0
-  pushl $182
-80106501:	68 b6 00 00 00       	push   $0xb6
-  jmp alltraps
-80106506:	e9 0f f4 ff ff       	jmp    8010591a <alltraps>
-
-8010650b <vector183>:
-.globl vector183
-vector183:
-  pushl $0
-8010650b:	6a 00                	push   $0x0
-  pushl $183
-8010650d:	68 b7 00 00 00       	push   $0xb7
-  jmp alltraps
-80106512:	e9 03 f4 ff ff       	jmp    8010591a <alltraps>
-
-80106517 <vector184>:
-.globl vector184
-vector184:
-  pushl $0
-80106517:	6a 00                	push   $0x0
-  pushl $184
-80106519:	68 b8 00 00 00       	push   $0xb8
-  jmp alltraps
-8010651e:	e9 f7 f3 ff ff       	jmp    8010591a <alltraps>
-
-80106523 <vector185>:
-.globl vector185
-vector185:
-  pushl $0
-80106523:	6a 00                	push   $0x0
-  pushl $185
-80106525:	68 b9 00 00 00       	push   $0xb9
-  jmp alltraps
-8010652a:	e9 eb f3 ff ff       	jmp    8010591a <alltraps>
-
-8010652f <vector186>:
-.globl vector186
-vector186:
-  pushl $0
-8010652f:	6a 00                	push   $0x0
-  pushl $186
-80106531:	68 ba 00 00 00       	push   $0xba
-  jmp alltraps
-80106536:	e9 df f3 ff ff       	jmp    8010591a <alltraps>
-
-8010653b <vector187>:
-.globl vector187
-vector187:
-  pushl $0
-8010653b:	6a 00                	push   $0x0
-  pushl $187
-8010653d:	68 bb 00 00 00       	push   $0xbb
-  jmp alltraps
-80106542:	e9 d3 f3 ff ff       	jmp    8010591a <alltraps>
-
-80106547 <vector188>:
-.globl vector188
-vector188:
-  pushl $0
-80106547:	6a 00                	push   $0x0
-  pushl $188
-80106549:	68 bc 00 00 00       	push   $0xbc
-  jmp alltraps
-8010654e:	e9 c7 f3 ff ff       	jmp    8010591a <alltraps>
-
-80106553 <vector189>:
-.globl vector189
-vector189:
-  pushl $0
-80106553:	6a 00                	push   $0x0
-  pushl $189
-80106555:	68 bd 00 00 00       	push   $0xbd
-  jmp alltraps
-8010655a:	e9 bb f3 ff ff       	jmp    8010591a <alltraps>
-
-8010655f <vector190>:
-.globl vector190
-vector190:
-  pushl $0
-8010655f:	6a 00                	push   $0x0
-  pushl $190
-80106561:	68 be 00 00 00       	push   $0xbe
-  jmp alltraps
-80106566:	e9 af f3 ff ff       	jmp    8010591a <alltraps>
-
-8010656b <vector191>:
-.globl vector191
-vector191:
-  pushl $0
-8010656b:	6a 00                	push   $0x0
-  pushl $191
-8010656d:	68 bf 00 00 00       	push   $0xbf
-  jmp alltraps
-80106572:	e9 a3 f3 ff ff       	jmp    8010591a <alltraps>
-
-80106577 <vector192>:
-.globl vector192
-vector192:
-  pushl $0
-80106577:	6a 00                	push   $0x0
-  pushl $192
-80106579:	68 c0 00 00 00       	push   $0xc0
-  jmp alltraps
-8010657e:	e9 97 f3 ff ff       	jmp    8010591a <alltraps>
-
-80106583 <vector193>:
-.globl vector193
-vector193:
-  pushl $0
-80106583:	6a 00                	push   $0x0
-  pushl $193
-80106585:	68 c1 00 00 00       	push   $0xc1
-  jmp alltraps
-8010658a:	e9 8b f3 ff ff       	jmp    8010591a <alltraps>
-
-8010658f <vector194>:
-.globl vector194
-vector194:
-  pushl $0
-8010658f:	6a 00                	push   $0x0
-  pushl $194
-80106591:	68 c2 00 00 00       	push   $0xc2
-  jmp alltraps
-80106596:	e9 7f f3 ff ff       	jmp    8010591a <alltraps>
-
-8010659b <vector195>:
-.globl vector195
-vector195:
-  pushl $0
-8010659b:	6a 00                	push   $0x0
-  pushl $195
-8010659d:	68 c3 00 00 00       	push   $0xc3
-  jmp alltraps
-801065a2:	e9 73 f3 ff ff       	jmp    8010591a <alltraps>
-
-801065a7 <vector196>:
-.globl vector196
-vector196:
-  pushl $0
-801065a7:	6a 00                	push   $0x0
-  pushl $196
-801065a9:	68 c4 00 00 00       	push   $0xc4
-  jmp alltraps
-801065ae:	e9 67 f3 ff ff       	jmp    8010591a <alltraps>
-
-801065b3 <vector197>:
-.globl vector197
-vector197:
-  pushl $0
-801065b3:	6a 00                	push   $0x0
-  pushl $197
-801065b5:	68 c5 00 00 00       	push   $0xc5
-  jmp alltraps
-801065ba:	e9 5b f3 ff ff       	jmp    8010591a <alltraps>
-
-801065bf <vector198>:
-.globl vector198
-vector198:
-  pushl $0
-801065bf:	6a 00                	push   $0x0
-  pushl $198
-801065c1:	68 c6 00 00 00       	push   $0xc6
-  jmp alltraps
-801065c6:	e9 4f f3 ff ff       	jmp    8010591a <alltraps>
-
-801065cb <vector199>:
-.globl vector199
-vector199:
-  pushl $0
-801065cb:	6a 00                	push   $0x0
-  pushl $199
-801065cd:	68 c7 00 00 00       	push   $0xc7
-  jmp alltraps
-801065d2:	e9 43 f3 ff ff       	jmp    8010591a <alltraps>
-
-801065d7 <vector200>:
-.globl vector200
-vector200:
-  pushl $0
-801065d7:	6a 00                	push   $0x0
-  pushl $200
-801065d9:	68 c8 00 00 00       	push   $0xc8
-  jmp alltraps
-801065de:	e9 37 f3 ff ff       	jmp    8010591a <alltraps>
-
-801065e3 <vector201>:
-.globl vector201
-vector201:
-  pushl $0
-801065e3:	6a 00                	push   $0x0
-  pushl $201
-801065e5:	68 c9 00 00 00       	push   $0xc9
-  jmp alltraps
-801065ea:	e9 2b f3 ff ff       	jmp    8010591a <alltraps>
-
-801065ef <vector202>:
-.globl vector202
-vector202:
-  pushl $0
-801065ef:	6a 00                	push   $0x0
-  pushl $202
-801065f1:	68 ca 00 00 00       	push   $0xca
-  jmp alltraps
-801065f6:	e9 1f f3 ff ff       	jmp    8010591a <alltraps>
-
-801065fb <vector203>:
-.globl vector203
-vector203:
-  pushl $0
-801065fb:	6a 00                	push   $0x0
-  pushl $203
-801065fd:	68 cb 00 00 00       	push   $0xcb
-  jmp alltraps
-80106602:	e9 13 f3 ff ff       	jmp    8010591a <alltraps>
-
-80106607 <vector204>:
-.globl vector204
-vector204:
-  pushl $0
-80106607:	6a 00                	push   $0x0
-  pushl $204
-80106609:	68 cc 00 00 00       	push   $0xcc
-  jmp alltraps
-8010660e:	e9 07 f3 ff ff       	jmp    8010591a <alltraps>
-
-80106613 <vector205>:
-.globl vector205
-vector205:
-  pushl $0
-80106613:	6a 00                	push   $0x0
-  pushl $205
-80106615:	68 cd 00 00 00       	push   $0xcd
-  jmp alltraps
-8010661a:	e9 fb f2 ff ff       	jmp    8010591a <alltraps>
-
-8010661f <vector206>:
-.globl vector206
-vector206:
-  pushl $0
-8010661f:	6a 00                	push   $0x0
-  pushl $206
-80106621:	68 ce 00 00 00       	push   $0xce
-  jmp alltraps
-80106626:	e9 ef f2 ff ff       	jmp    8010591a <alltraps>
-
-8010662b <vector207>:
-.globl vector207
-vector207:
-  pushl $0
-8010662b:	6a 00                	push   $0x0
-  pushl $207
-8010662d:	68 cf 00 00 00       	push   $0xcf
-  jmp alltraps
-80106632:	e9 e3 f2 ff ff       	jmp    8010591a <alltraps>
-
-80106637 <vector208>:
-.globl vector208
-vector208:
-  pushl $0
-80106637:	6a 00                	push   $0x0
-  pushl $208
-80106639:	68 d0 00 00 00       	push   $0xd0
-  jmp alltraps
-8010663e:	e9 d7 f2 ff ff       	jmp    8010591a <alltraps>
-
-80106643 <vector209>:
-.globl vector209
-vector209:
-  pushl $0
-80106643:	6a 00                	push   $0x0
-  pushl $209
-80106645:	68 d1 00 00 00       	push   $0xd1
-  jmp alltraps
-8010664a:	e9 cb f2 ff ff       	jmp    8010591a <alltraps>
-
-8010664f <vector210>:
-.globl vector210
-vector210:
-  pushl $0
-8010664f:	6a 00                	push   $0x0
-  pushl $210
-80106651:	68 d2 00 00 00       	push   $0xd2
-  jmp alltraps
-80106656:	e9 bf f2 ff ff       	jmp    8010591a <alltraps>
-
-8010665b <vector211>:
-.globl vector211
-vector211:
-  pushl $0
-8010665b:	6a 00                	push   $0x0
-  pushl $211
-8010665d:	68 d3 00 00 00       	push   $0xd3
-  jmp alltraps
-80106662:	e9 b3 f2 ff ff       	jmp    8010591a <alltraps>
-
-80106667 <vector212>:
-.globl vector212
-vector212:
-  pushl $0
-80106667:	6a 00                	push   $0x0
-  pushl $212
-80106669:	68 d4 00 00 00       	push   $0xd4
-  jmp alltraps
-8010666e:	e9 a7 f2 ff ff       	jmp    8010591a <alltraps>
-
-80106673 <vector213>:
-.globl vector213
-vector213:
-  pushl $0
-80106673:	6a 00                	push   $0x0
-  pushl $213
-80106675:	68 d5 00 00 00       	push   $0xd5
-  jmp alltraps
-8010667a:	e9 9b f2 ff ff       	jmp    8010591a <alltraps>
-
-8010667f <vector214>:
-.globl vector214
-vector214:
-  pushl $0
-8010667f:	6a 00                	push   $0x0
-  pushl $214
-80106681:	68 d6 00 00 00       	push   $0xd6
-  jmp alltraps
-80106686:	e9 8f f2 ff ff       	jmp    8010591a <alltraps>
-
-8010668b <vector215>:
-.globl vector215
-vector215:
-  pushl $0
-8010668b:	6a 00                	push   $0x0
-  pushl $215
-8010668d:	68 d7 00 00 00       	push   $0xd7
-  jmp alltraps
-80106692:	e9 83 f2 ff ff       	jmp    8010591a <alltraps>
-
-80106697 <vector216>:
-.globl vector216
-vector216:
-  pushl $0
-80106697:	6a 00                	push   $0x0
-  pushl $216
-80106699:	68 d8 00 00 00       	push   $0xd8
-  jmp alltraps
-8010669e:	e9 77 f2 ff ff       	jmp    8010591a <alltraps>
-
-801066a3 <vector217>:
-.globl vector217
-vector217:
-  pushl $0
-801066a3:	6a 00                	push   $0x0
-  pushl $217
-801066a5:	68 d9 00 00 00       	push   $0xd9
-  jmp alltraps
-801066aa:	e9 6b f2 ff ff       	jmp    8010591a <alltraps>
-
-801066af <vector218>:
-.globl vector218
-vector218:
-  pushl $0
-801066af:	6a 00                	push   $0x0
-  pushl $218
-801066b1:	68 da 00 00 00       	push   $0xda
-  jmp alltraps
-801066b6:	e9 5f f2 ff ff       	jmp    8010591a <alltraps>
-
-801066bb <vector219>:
-.globl vector219
-vector219:
-  pushl $0
-801066bb:	6a 00                	push   $0x0
-  pushl $219
-801066bd:	68 db 00 00 00       	push   $0xdb
-  jmp alltraps
-801066c2:	e9 53 f2 ff ff       	jmp    8010591a <alltraps>
-
-801066c7 <vector220>:
-.globl vector220
-vector220:
-  pushl $0
-801066c7:	6a 00                	push   $0x0
-  pushl $220
-801066c9:	68 dc 00 00 00       	push   $0xdc
-  jmp alltraps
-801066ce:	e9 47 f2 ff ff       	jmp    8010591a <alltraps>
-
-801066d3 <vector221>:
-.globl vector221
-vector221:
-  pushl $0
-801066d3:	6a 00                	push   $0x0
-  pushl $221
-801066d5:	68 dd 00 00 00       	push   $0xdd
-  jmp alltraps
-801066da:	e9 3b f2 ff ff       	jmp    8010591a <alltraps>
-
-801066df <vector222>:
-.globl vector222
-vector222:
-  pushl $0
-801066df:	6a 00                	push   $0x0
-  pushl $222
-801066e1:	68 de 00 00 00       	push   $0xde
-  jmp alltraps
-801066e6:	e9 2f f2 ff ff       	jmp    8010591a <alltraps>
-
-801066eb <vector223>:
-.globl vector223
-vector223:
-  pushl $0
-801066eb:	6a 00                	push   $0x0
-  pushl $223
-801066ed:	68 df 00 00 00       	push   $0xdf
-  jmp alltraps
-801066f2:	e9 23 f2 ff ff       	jmp    8010591a <alltraps>
-
-801066f7 <vector224>:
-.globl vector224
-vector224:
-  pushl $0
-801066f7:	6a 00                	push   $0x0
-  pushl $224
-801066f9:	68 e0 00 00 00       	push   $0xe0
-  jmp alltraps
-801066fe:	e9 17 f2 ff ff       	jmp    8010591a <alltraps>
-
-80106703 <vector225>:
-.globl vector225
-vector225:
-  pushl $0
-80106703:	6a 00                	push   $0x0
-  pushl $225
-80106705:	68 e1 00 00 00       	push   $0xe1
-  jmp alltraps
-8010670a:	e9 0b f2 ff ff       	jmp    8010591a <alltraps>
-
-8010670f <vector226>:
-.globl vector226
-vector226:
-  pushl $0
-8010670f:	6a 00                	push   $0x0
-  pushl $226
-80106711:	68 e2 00 00 00       	push   $0xe2
-  jmp alltraps
-80106716:	e9 ff f1 ff ff       	jmp    8010591a <alltraps>
-
-8010671b <vector227>:
-.globl vector227
-vector227:
-  pushl $0
-8010671b:	6a 00                	push   $0x0
-  pushl $227
-8010671d:	68 e3 00 00 00       	push   $0xe3
-  jmp alltraps
-80106722:	e9 f3 f1 ff ff       	jmp    8010591a <alltraps>
-
-80106727 <vector228>:
-.globl vector228
-vector228:
-  pushl $0
-80106727:	6a 00                	push   $0x0
-  pushl $228
-80106729:	68 e4 00 00 00       	push   $0xe4
-  jmp alltraps
-8010672e:	e9 e7 f1 ff ff       	jmp    8010591a <alltraps>
-
-80106733 <vector229>:
-.globl vector229
-vector229:
-  pushl $0
-80106733:	6a 00                	push   $0x0
-  pushl $229
-80106735:	68 e5 00 00 00       	push   $0xe5
-  jmp alltraps
-8010673a:	e9 db f1 ff ff       	jmp    8010591a <alltraps>
-
-8010673f <vector230>:
-.globl vector230
-vector230:
-  pushl $0
-8010673f:	6a 00                	push   $0x0
-  pushl $230
-80106741:	68 e6 00 00 00       	push   $0xe6
-  jmp alltraps
-80106746:	e9 cf f1 ff ff       	jmp    8010591a <alltraps>
-
-8010674b <vector231>:
-.globl vector231
-vector231:
-  pushl $0
-8010674b:	6a 00                	push   $0x0
-  pushl $231
-8010674d:	68 e7 00 00 00       	push   $0xe7
-  jmp alltraps
-80106752:	e9 c3 f1 ff ff       	jmp    8010591a <alltraps>
-
-80106757 <vector232>:
-.globl vector232
-vector232:
-  pushl $0
-80106757:	6a 00                	push   $0x0
-  pushl $232
-80106759:	68 e8 00 00 00       	push   $0xe8
-  jmp alltraps
-8010675e:	e9 b7 f1 ff ff       	jmp    8010591a <alltraps>
-
-80106763 <vector233>:
-.globl vector233
-vector233:
-  pushl $0
-80106763:	6a 00                	push   $0x0
-  pushl $233
-80106765:	68 e9 00 00 00       	push   $0xe9
-  jmp alltraps
-8010676a:	e9 ab f1 ff ff       	jmp    8010591a <alltraps>
-
-8010676f <vector234>:
-.globl vector234
-vector234:
-  pushl $0
-8010676f:	6a 00                	push   $0x0
-  pushl $234
-80106771:	68 ea 00 00 00       	push   $0xea
-  jmp alltraps
-80106776:	e9 9f f1 ff ff       	jmp    8010591a <alltraps>
-
-8010677b <vector235>:
-.globl vector235
-vector235:
-  pushl $0
-8010677b:	6a 00                	push   $0x0
-  pushl $235
-8010677d:	68 eb 00 00 00       	push   $0xeb
-  jmp alltraps
-80106782:	e9 93 f1 ff ff       	jmp    8010591a <alltraps>
-
-80106787 <vector236>:
-.globl vector236
-vector236:
-  pushl $0
-80106787:	6a 00                	push   $0x0
-  pushl $236
-80106789:	68 ec 00 00 00       	push   $0xec
-  jmp alltraps
-8010678e:	e9 87 f1 ff ff       	jmp    8010591a <alltraps>
-
-80106793 <vector237>:
-.globl vector237
-vector237:
-  pushl $0
-80106793:	6a 00                	push   $0x0
-  pushl $237
-80106795:	68 ed 00 00 00       	push   $0xed
-  jmp alltraps
-8010679a:	e9 7b f1 ff ff       	jmp    8010591a <alltraps>
-
-8010679f <vector238>:
-.globl vector238
-vector238:
-  pushl $0
-8010679f:	6a 00                	push   $0x0
-  pushl $238
-801067a1:	68 ee 00 00 00       	push   $0xee
-  jmp alltraps
-801067a6:	e9 6f f1 ff ff       	jmp    8010591a <alltraps>
-
-801067ab <vector239>:
-.globl vector239
-vector239:
-  pushl $0
-801067ab:	6a 00                	push   $0x0
-  pushl $239
-801067ad:	68 ef 00 00 00       	push   $0xef
-  jmp alltraps
-801067b2:	e9 63 f1 ff ff       	jmp    8010591a <alltraps>
-
-801067b7 <vector240>:
-.globl vector240
-vector240:
-  pushl $0
-801067b7:	6a 00                	push   $0x0
-  pushl $240
-801067b9:	68 f0 00 00 00       	push   $0xf0
-  jmp alltraps
-801067be:	e9 57 f1 ff ff       	jmp    8010591a <alltraps>
-
-801067c3 <vector241>:
-.globl vector241
-vector241:
-  pushl $0
-801067c3:	6a 00                	push   $0x0
-  pushl $241
-801067c5:	68 f1 00 00 00       	push   $0xf1
-  jmp alltraps
-801067ca:	e9 4b f1 ff ff       	jmp    8010591a <alltraps>
-
-801067cf <vector242>:
-.globl vector242
-vector242:
-  pushl $0
-801067cf:	6a 00                	push   $0x0
-  pushl $242
-801067d1:	68 f2 00 00 00       	push   $0xf2
-  jmp alltraps
-801067d6:	e9 3f f1 ff ff       	jmp    8010591a <alltraps>
-
-801067db <vector243>:
-.globl vector243
-vector243:
-  pushl $0
-801067db:	6a 00                	push   $0x0
-  pushl $243
-801067dd:	68 f3 00 00 00       	push   $0xf3
-  jmp alltraps
-801067e2:	e9 33 f1 ff ff       	jmp    8010591a <alltraps>
-
-801067e7 <vector244>:
-.globl vector244
-vector244:
-  pushl $0
-801067e7:	6a 00                	push   $0x0
-  pushl $244
-801067e9:	68 f4 00 00 00       	push   $0xf4
-  jmp alltraps
-801067ee:	e9 27 f1 ff ff       	jmp    8010591a <alltraps>
-
-801067f3 <vector245>:
-.globl vector245
-vector245:
-  pushl $0
-801067f3:	6a 00                	push   $0x0
-  pushl $245
-801067f5:	68 f5 00 00 00       	push   $0xf5
-  jmp alltraps
-801067fa:	e9 1b f1 ff ff       	jmp    8010591a <alltraps>
-
-801067ff <vector246>:
-.globl vector246
-vector246:
-  pushl $0
-801067ff:	6a 00                	push   $0x0
-  pushl $246
-80106801:	68 f6 00 00 00       	push   $0xf6
-  jmp alltraps
-80106806:	e9 0f f1 ff ff       	jmp    8010591a <alltraps>
-
-8010680b <vector247>:
-.globl vector247
-vector247:
-  pushl $0
-8010680b:	6a 00                	push   $0x0
-  pushl $247
-8010680d:	68 f7 00 00 00       	push   $0xf7
-  jmp alltraps
-80106812:	e9 03 f1 ff ff       	jmp    8010591a <alltraps>
-
-80106817 <vector248>:
-.globl vector248
-vector248:
-  pushl $0
-80106817:	6a 00                	push   $0x0
-  pushl $248
-80106819:	68 f8 00 00 00       	push   $0xf8
-  jmp alltraps
-8010681e:	e9 f7 f0 ff ff       	jmp    8010591a <alltraps>
-
-80106823 <vector249>:
-.globl vector249
-vector249:
-  pushl $0
-80106823:	6a 00                	push   $0x0
-  pushl $249
-80106825:	68 f9 00 00 00       	push   $0xf9
-  jmp alltraps
-8010682a:	e9 eb f0 ff ff       	jmp    8010591a <alltraps>
-
-8010682f <vector250>:
-.globl vector250
-vector250:
-  pushl $0
-8010682f:	6a 00                	push   $0x0
-  pushl $250
-80106831:	68 fa 00 00 00       	push   $0xfa
-  jmp alltraps
-80106836:	e9 df f0 ff ff       	jmp    8010591a <alltraps>
-
-8010683b <vector251>:
-.globl vector251
-vector251:
-  pushl $0
-8010683b:	6a 00                	push   $0x0
-  pushl $251
-8010683d:	68 fb 00 00 00       	push   $0xfb
-  jmp alltraps
-80106842:	e9 d3 f0 ff ff       	jmp    8010591a <alltraps>
-
-80106847 <vector252>:
-.globl vector252
-vector252:
-  pushl $0
-80106847:	6a 00                	push   $0x0
-  pushl $252
-80106849:	68 fc 00 00 00       	push   $0xfc
-  jmp alltraps
-8010684e:	e9 c7 f0 ff ff       	jmp    8010591a <alltraps>
-
-80106853 <vector253>:
-.globl vector253
-vector253:
-  pushl $0
-80106853:	6a 00                	push   $0x0
-  pushl $253
-80106855:	68 fd 00 00 00       	push   $0xfd
-  jmp alltraps
-8010685a:	e9 bb f0 ff ff       	jmp    8010591a <alltraps>
-
-8010685f <vector254>:
-.globl vector254
-vector254:
-  pushl $0
-8010685f:	6a 00                	push   $0x0
-  pushl $254
-80106861:	68 fe 00 00 00       	push   $0xfe
-  jmp alltraps
-80106866:	e9 af f0 ff ff       	jmp    8010591a <alltraps>
-
-8010686b <vector255>:
-.globl vector255
-vector255:
-  pushl $0
-8010686b:	6a 00                	push   $0x0
-  pushl $255
-8010686d:	68 ff 00 00 00       	push   $0xff
-  jmp alltraps
-80106872:	e9 a3 f0 ff ff       	jmp    8010591a <alltraps>
-80106877:	66 90                	xchg   %ax,%ax
-80106879:	66 90                	xchg   %ax,%ax
-8010687b:	66 90                	xchg   %ax,%ax
-8010687d:	66 90                	xchg   %ax,%ax
-8010687f:	90                   	nop
-
-80106880 <deallocuvm.part.0>:
-// Deallocate user pages to bring the process size from oldsz to
-// newsz.  oldsz and newsz need not be page-aligned, nor does newsz
-// need to be less than oldsz.  oldsz can be larger than the actual
-// process size.  Returns the new process size.
-int
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106880:	55                   	push   %ebp
-80106881:	89 e5                	mov    %esp,%ebp
-80106883:	57                   	push   %edi
-80106884:	56                   	push   %esi
-80106885:	53                   	push   %ebx
-  uint a, pa;
-
-  if(newsz >= oldsz)
-    return oldsz;
-
-  a = PGROUNDUP(newsz);
-80106886:	8d 99 ff 0f 00 00    	lea    0xfff(%ecx),%ebx
-8010688c:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)
-80106892:	83 ec 1c             	sub    $0x1c,%esp
-  for(; a  < oldsz; a += PGSIZE){
-80106895:	39 d3                	cmp    %edx,%ebx
-80106897:	73 56                	jae    801068ef <deallocuvm.part.0+0x6f>
-80106899:	89 4d e0             	mov    %ecx,-0x20(%ebp)
-8010689c:	89 c6                	mov    %eax,%esi
-8010689e:	89 d7                	mov    %edx,%edi
-801068a0:	eb 12                	jmp    801068b4 <deallocuvm.part.0+0x34>
-801068a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    pte = walkpgdir(pgdir, (char*)a, 0);
-    if(!pte)
-      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;
-801068a8:	83 c2 01             	add    $0x1,%edx
-801068ab:	89 d3                	mov    %edx,%ebx
-801068ad:	c1 e3 16             	shl    $0x16,%ebx
-  for(; a  < oldsz; a += PGSIZE){
-801068b0:	39 fb                	cmp    %edi,%ebx
-801068b2:	73 38                	jae    801068ec <deallocuvm.part.0+0x6c>
-  pde = &pgdir[PDX(va)];
-801068b4:	89 da                	mov    %ebx,%edx
-801068b6:	c1 ea 16             	shr    $0x16,%edx
-  if(*pde & PTE_P){
-801068b9:	8b 04 96             	mov    (%esi,%edx,4),%eax
-801068bc:	a8 01                	test   $0x1,%al
-801068be:	74 e8                	je     801068a8 <deallocuvm.part.0+0x28>
-  return &pgtab[PTX(va)];
-801068c0:	89 d9                	mov    %ebx,%ecx
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801068c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-  return &pgtab[PTX(va)];
-801068c7:	c1 e9 0a             	shr    $0xa,%ecx
-801068ca:	81 e1 fc 0f 00 00    	and    $0xffc,%ecx
-801068d0:	8d 84 08 00 00 00 80 	lea    -0x80000000(%eax,%ecx,1),%eax
-    if(!pte)
-801068d7:	85 c0                	test   %eax,%eax
-801068d9:	74 cd                	je     801068a8 <deallocuvm.part.0+0x28>
-    else if((*pte & PTE_P) != 0){
-801068db:	8b 10                	mov    (%eax),%edx
-801068dd:	f6 c2 01             	test   $0x1,%dl
-801068e0:	75 1e                	jne    80106900 <deallocuvm.part.0+0x80>
-  for(; a  < oldsz; a += PGSIZE){
-801068e2:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-801068e8:	39 fb                	cmp    %edi,%ebx
-801068ea:	72 c8                	jb     801068b4 <deallocuvm.part.0+0x34>
-801068ec:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-      kfree(v);
-      *pte = 0;
-    }
-  }
-  return newsz;
-}
-801068ef:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801068f2:	89 c8                	mov    %ecx,%eax
-801068f4:	5b                   	pop    %ebx
-801068f5:	5e                   	pop    %esi
-801068f6:	5f                   	pop    %edi
-801068f7:	5d                   	pop    %ebp
-801068f8:	c3                   	ret
-801068f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      if(pa == 0)
-80106900:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
-80106906:	74 26                	je     8010692e <deallocuvm.part.0+0xae>
-      kfree(v);
-80106908:	83 ec 0c             	sub    $0xc,%esp
-      char *v = P2V(pa);
-8010690b:	81 c2 00 00 00 80    	add    $0x80000000,%edx
-80106911:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  for(; a  < oldsz; a += PGSIZE){
-80106914:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-      kfree(v);
-8010691a:	52                   	push   %edx
-8010691b:	e8 f0 bb ff ff       	call   80102510 <kfree>
-      *pte = 0;
-80106920:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-  for(; a  < oldsz; a += PGSIZE){
-80106923:	83 c4 10             	add    $0x10,%esp
-      *pte = 0;
-80106926:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
-8010692c:	eb 82                	jmp    801068b0 <deallocuvm.part.0+0x30>
-        panic("kfree");
-8010692e:	83 ec 0c             	sub    $0xc,%esp
-80106931:	68 27 74 10 80       	push   $0x80107427
-80106936:	e8 45 9a ff ff       	call   80100380 <panic>
-8010693b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80106940 <mappages>:
-{
-80106940:	55                   	push   %ebp
-80106941:	89 e5                	mov    %esp,%ebp
-80106943:	57                   	push   %edi
-80106944:	56                   	push   %esi
-80106945:	53                   	push   %ebx
-  a = (char*)PGROUNDDOWN((uint)va);
-80106946:	89 d3                	mov    %edx,%ebx
-80106948:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-{
-8010694e:	83 ec 1c             	sub    $0x1c,%esp
-80106951:	89 45 e0             	mov    %eax,-0x20(%ebp)
-  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);
-80106954:	8d 44 0a ff          	lea    -0x1(%edx,%ecx,1),%eax
-80106958:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-8010695d:	89 45 dc             	mov    %eax,-0x24(%ebp)
-80106960:	8b 45 08             	mov    0x8(%ebp),%eax
-80106963:	29 d8                	sub    %ebx,%eax
-80106965:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106968:	eb 3f                	jmp    801069a9 <mappages+0x69>
-8010696a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  return &pgtab[PTX(va)];
-80106970:	89 da                	mov    %ebx,%edx
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106972:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-  return &pgtab[PTX(va)];
-80106977:	c1 ea 0a             	shr    $0xa,%edx
-8010697a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80106980:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
-    if((pte = walkpgdir(pgdir, a, 1)) == 0)
-80106987:	85 c0                	test   %eax,%eax
-80106989:	74 75                	je     80106a00 <mappages+0xc0>
-    if(*pte & PTE_P)
-8010698b:	f6 00 01             	testb  $0x1,(%eax)
-8010698e:	0f 85 86 00 00 00    	jne    80106a1a <mappages+0xda>
-    *pte = pa | perm | PTE_P;
-80106994:	0b 75 0c             	or     0xc(%ebp),%esi
-80106997:	83 ce 01             	or     $0x1,%esi
-8010699a:	89 30                	mov    %esi,(%eax)
-    if(a == last)
-8010699c:	8b 45 dc             	mov    -0x24(%ebp),%eax
-8010699f:	39 c3                	cmp    %eax,%ebx
-801069a1:	74 6d                	je     80106a10 <mappages+0xd0>
-    a += PGSIZE;
-801069a3:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-  for(;;){
-801069a9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-  pde = &pgdir[PDX(va)];
-801069ac:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-801069af:	8d 34 03             	lea    (%ebx,%eax,1),%esi
-801069b2:	89 d8                	mov    %ebx,%eax
-801069b4:	c1 e8 16             	shr    $0x16,%eax
-801069b7:	8d 3c 81             	lea    (%ecx,%eax,4),%edi
-  if(*pde & PTE_P){
-801069ba:	8b 07                	mov    (%edi),%eax
-801069bc:	a8 01                	test   $0x1,%al
-801069be:	75 b0                	jne    80106970 <mappages+0x30>
-    if(!alloc || (pgtab = (pte_t*)kalloc()) == 0)
-801069c0:	e8 0b bd ff ff       	call   801026d0 <kalloc>
-801069c5:	85 c0                	test   %eax,%eax
-801069c7:	74 37                	je     80106a00 <mappages+0xc0>
-    memset(pgtab, 0, PGSIZE);
-801069c9:	83 ec 04             	sub    $0x4,%esp
-801069cc:	68 00 10 00 00       	push   $0x1000
-801069d1:	6a 00                	push   $0x0
-801069d3:	50                   	push   %eax
-801069d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
-801069d7:	e8 a4 dd ff ff       	call   80104780 <memset>
-    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801069dc:	8b 55 d8             	mov    -0x28(%ebp),%edx
-  return &pgtab[PTX(va)];
-801069df:	83 c4 10             	add    $0x10,%esp
-    *pde = V2P(pgtab) | PTE_P | PTE_W | PTE_U;
-801069e2:	8d 82 00 00 00 80    	lea    -0x80000000(%edx),%eax
-801069e8:	83 c8 07             	or     $0x7,%eax
-801069eb:	89 07                	mov    %eax,(%edi)
-  return &pgtab[PTX(va)];
-801069ed:	89 d8                	mov    %ebx,%eax
-801069ef:	c1 e8 0a             	shr    $0xa,%eax
-801069f2:	25 fc 0f 00 00       	and    $0xffc,%eax
-801069f7:	01 d0                	add    %edx,%eax
-801069f9:	eb 90                	jmp    8010698b <mappages+0x4b>
-801069fb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-}
-80106a00:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return -1;
-80106a03:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106a08:	5b                   	pop    %ebx
-80106a09:	5e                   	pop    %esi
-80106a0a:	5f                   	pop    %edi
-80106a0b:	5d                   	pop    %ebp
-80106a0c:	c3                   	ret
-80106a0d:	8d 76 00             	lea    0x0(%esi),%esi
-80106a10:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80106a13:	31 c0                	xor    %eax,%eax
-}
-80106a15:	5b                   	pop    %ebx
-80106a16:	5e                   	pop    %esi
-80106a17:	5f                   	pop    %edi
-80106a18:	5d                   	pop    %ebp
-80106a19:	c3                   	ret
-      panic("remap");
-80106a1a:	83 ec 0c             	sub    $0xc,%esp
-80106a1d:	68 89 76 10 80       	push   $0x80107689
-80106a22:	e8 59 99 ff ff       	call   80100380 <panic>
-80106a27:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106a2e:	00 
-80106a2f:	90                   	nop
-
-80106a30 <seginit>:
-{
-80106a30:	55                   	push   %ebp
-80106a31:	89 e5                	mov    %esp,%ebp
-80106a33:	83 ec 18             	sub    $0x18,%esp
-  c = &cpus[cpuid()];
-80106a36:	e8 e5 cf ff ff       	call   80103a20 <cpuid>
-  pd[0] = size-1;
-80106a3b:	ba 2f 00 00 00       	mov    $0x2f,%edx
-  c->gdt[SEG_KCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, 0);
-80106a40:	69 c0 b0 00 00 00    	imul   $0xb0,%eax,%eax
-80106a46:	66 89 55 f2          	mov    %dx,-0xe(%ebp)
-80106a4a:	c7 80 38 18 11 80 ff 	movl   $0xffff,-0x7feee7c8(%eax)
-80106a51:	ff 00 00 
-80106a54:	c7 80 3c 18 11 80 00 	movl   $0xcf9a00,-0x7feee7c4(%eax)
-80106a5b:	9a cf 00 
-  c->gdt[SEG_KDATA] = SEG(STA_W, 0, 0xffffffff, 0);
-80106a5e:	c7 80 40 18 11 80 ff 	movl   $0xffff,-0x7feee7c0(%eax)
-80106a65:	ff 00 00 
-80106a68:	c7 80 44 18 11 80 00 	movl   $0xcf9200,-0x7feee7bc(%eax)
-80106a6f:	92 cf 00 
-  c->gdt[SEG_UCODE] = SEG(STA_X|STA_R, 0, 0xffffffff, DPL_USER);
-80106a72:	c7 80 48 18 11 80 ff 	movl   $0xffff,-0x7feee7b8(%eax)
-80106a79:	ff 00 00 
-80106a7c:	c7 80 4c 18 11 80 00 	movl   $0xcffa00,-0x7feee7b4(%eax)
-80106a83:	fa cf 00 
-  c->gdt[SEG_UDATA] = SEG(STA_W, 0, 0xffffffff, DPL_USER);
-80106a86:	c7 80 50 18 11 80 ff 	movl   $0xffff,-0x7feee7b0(%eax)
-80106a8d:	ff 00 00 
-80106a90:	c7 80 54 18 11 80 00 	movl   $0xcff200,-0x7feee7ac(%eax)
-80106a97:	f2 cf 00 
-  lgdt(c->gdt, sizeof(c->gdt));
-80106a9a:	05 30 18 11 80       	add    $0x80111830,%eax
-  pd[1] = (uint)p;
-80106a9f:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
-  pd[2] = (uint)p >> 16;
-80106aa3:	c1 e8 10             	shr    $0x10,%eax
-80106aa6:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
-  asm volatile("lgdt (%0)" : : "r" (pd));
-80106aaa:	8d 45 f2             	lea    -0xe(%ebp),%eax
-80106aad:	0f 01 10             	lgdtl  (%eax)
-}
-80106ab0:	c9                   	leave
-80106ab1:	c3                   	ret
-80106ab2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106ab9:	00 
-80106aba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106ac0 <switchkvm>:
-  lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106ac0:	a1 e4 44 11 80       	mov    0x801144e4,%eax
-80106ac5:	05 00 00 00 80       	add    $0x80000000,%eax
-}
-
-static inline void
-lcr3(uint val)
-{
-  asm volatile("movl %0,%%cr3" : : "r" (val));
-80106aca:	0f 22 d8             	mov    %eax,%cr3
-}
-80106acd:	c3                   	ret
-80106ace:	66 90                	xchg   %ax,%ax
-
-80106ad0 <switchuvm>:
-{
-80106ad0:	55                   	push   %ebp
-80106ad1:	89 e5                	mov    %esp,%ebp
-80106ad3:	57                   	push   %edi
-80106ad4:	56                   	push   %esi
-80106ad5:	53                   	push   %ebx
-80106ad6:	83 ec 1c             	sub    $0x1c,%esp
-80106ad9:	8b 75 08             	mov    0x8(%ebp),%esi
-  if(p == 0)
-80106adc:	85 f6                	test   %esi,%esi
-80106ade:	0f 84 cb 00 00 00    	je     80106baf <switchuvm+0xdf>
-  if(p->kstack == 0)
-80106ae4:	8b 46 08             	mov    0x8(%esi),%eax
-80106ae7:	85 c0                	test   %eax,%eax
-80106ae9:	0f 84 da 00 00 00    	je     80106bc9 <switchuvm+0xf9>
-  if(p->pgdir == 0)
-80106aef:	8b 46 04             	mov    0x4(%esi),%eax
-80106af2:	85 c0                	test   %eax,%eax
-80106af4:	0f 84 c2 00 00 00    	je     80106bbc <switchuvm+0xec>
-  pushcli();
-80106afa:	e8 31 da ff ff       	call   80104530 <pushcli>
-  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106aff:	e8 bc ce ff ff       	call   801039c0 <mycpu>
-80106b04:	89 c3                	mov    %eax,%ebx
-80106b06:	e8 b5 ce ff ff       	call   801039c0 <mycpu>
-80106b0b:	89 c7                	mov    %eax,%edi
-80106b0d:	e8 ae ce ff ff       	call   801039c0 <mycpu>
-80106b12:	83 c7 08             	add    $0x8,%edi
-80106b15:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-80106b18:	e8 a3 ce ff ff       	call   801039c0 <mycpu>
-80106b1d:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
-80106b20:	ba 67 00 00 00       	mov    $0x67,%edx
-80106b25:	66 89 bb 9a 00 00 00 	mov    %di,0x9a(%ebx)
-80106b2c:	83 c0 08             	add    $0x8,%eax
-80106b2f:	66 89 93 98 00 00 00 	mov    %dx,0x98(%ebx)
-  mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106b36:	bf ff ff ff ff       	mov    $0xffffffff,%edi
-  mycpu()->gdt[SEG_TSS] = SEG16(STS_T32A, &mycpu()->ts,
-80106b3b:	83 c1 08             	add    $0x8,%ecx
-80106b3e:	c1 e8 18             	shr    $0x18,%eax
-80106b41:	c1 e9 10             	shr    $0x10,%ecx
-80106b44:	88 83 9f 00 00 00    	mov    %al,0x9f(%ebx)
-80106b4a:	88 8b 9c 00 00 00    	mov    %cl,0x9c(%ebx)
-80106b50:	b9 99 40 00 00       	mov    $0x4099,%ecx
-80106b55:	66 89 8b 9d 00 00 00 	mov    %cx,0x9d(%ebx)
-  mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106b5c:	bb 10 00 00 00       	mov    $0x10,%ebx
-  mycpu()->gdt[SEG_TSS].s = 0;
-80106b61:	e8 5a ce ff ff       	call   801039c0 <mycpu>
-80106b66:	80 a0 9d 00 00 00 ef 	andb   $0xef,0x9d(%eax)
-  mycpu()->ts.ss0 = SEG_KDATA << 3;
-80106b6d:	e8 4e ce ff ff       	call   801039c0 <mycpu>
-80106b72:	66 89 58 10          	mov    %bx,0x10(%eax)
-  mycpu()->ts.esp0 = (uint)p->kstack + KSTACKSIZE;
-80106b76:	8b 5e 08             	mov    0x8(%esi),%ebx
-80106b79:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-80106b7f:	e8 3c ce ff ff       	call   801039c0 <mycpu>
-80106b84:	89 58 0c             	mov    %ebx,0xc(%eax)
-  mycpu()->ts.iomb = (ushort) 0xFFFF;
-80106b87:	e8 34 ce ff ff       	call   801039c0 <mycpu>
-80106b8c:	66 89 78 6e          	mov    %di,0x6e(%eax)
-  asm volatile("ltr %0" : : "r" (sel));
-80106b90:	b8 28 00 00 00       	mov    $0x28,%eax
-80106b95:	0f 00 d8             	ltr    %eax
-  lcr3(V2P(p->pgdir));  // switch to process's address space
-80106b98:	8b 46 04             	mov    0x4(%esi),%eax
-80106b9b:	05 00 00 00 80       	add    $0x80000000,%eax
-  asm volatile("movl %0,%%cr3" : : "r" (val));
-80106ba0:	0f 22 d8             	mov    %eax,%cr3
-}
-80106ba3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106ba6:	5b                   	pop    %ebx
-80106ba7:	5e                   	pop    %esi
-80106ba8:	5f                   	pop    %edi
-80106ba9:	5d                   	pop    %ebp
-  popcli();
-80106baa:	e9 d1 d9 ff ff       	jmp    80104580 <popcli>
-    panic("switchuvm: no process");
-80106baf:	83 ec 0c             	sub    $0xc,%esp
-80106bb2:	68 8f 76 10 80       	push   $0x8010768f
-80106bb7:	e8 c4 97 ff ff       	call   80100380 <panic>
-    panic("switchuvm: no pgdir");
-80106bbc:	83 ec 0c             	sub    $0xc,%esp
-80106bbf:	68 ba 76 10 80       	push   $0x801076ba
-80106bc4:	e8 b7 97 ff ff       	call   80100380 <panic>
-    panic("switchuvm: no kstack");
-80106bc9:	83 ec 0c             	sub    $0xc,%esp
-80106bcc:	68 a5 76 10 80       	push   $0x801076a5
-80106bd1:	e8 aa 97 ff ff       	call   80100380 <panic>
-80106bd6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106bdd:	00 
-80106bde:	66 90                	xchg   %ax,%ax
-
-80106be0 <inituvm>:
-{
-80106be0:	55                   	push   %ebp
-80106be1:	89 e5                	mov    %esp,%ebp
-80106be3:	57                   	push   %edi
-80106be4:	56                   	push   %esi
-80106be5:	53                   	push   %ebx
-80106be6:	83 ec 1c             	sub    $0x1c,%esp
-80106be9:	8b 45 08             	mov    0x8(%ebp),%eax
-80106bec:	8b 75 10             	mov    0x10(%ebp),%esi
-80106bef:	8b 7d 0c             	mov    0xc(%ebp),%edi
-80106bf2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(sz >= PGSIZE)
-80106bf5:	81 fe ff 0f 00 00    	cmp    $0xfff,%esi
-80106bfb:	77 49                	ja     80106c46 <inituvm+0x66>
-  mem = kalloc();
-80106bfd:	e8 ce ba ff ff       	call   801026d0 <kalloc>
-  memset(mem, 0, PGSIZE);
-80106c02:	83 ec 04             	sub    $0x4,%esp
-80106c05:	68 00 10 00 00       	push   $0x1000
-  mem = kalloc();
-80106c0a:	89 c3                	mov    %eax,%ebx
-  memset(mem, 0, PGSIZE);
-80106c0c:	6a 00                	push   $0x0
-80106c0e:	50                   	push   %eax
-80106c0f:	e8 6c db ff ff       	call   80104780 <memset>
-  mappages(pgdir, 0, PGSIZE, V2P(mem), PTE_W|PTE_U);
-80106c14:	58                   	pop    %eax
-80106c15:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106c1b:	5a                   	pop    %edx
-80106c1c:	6a 06                	push   $0x6
-80106c1e:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106c23:	31 d2                	xor    %edx,%edx
-80106c25:	50                   	push   %eax
-80106c26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-80106c29:	e8 12 fd ff ff       	call   80106940 <mappages>
-  memmove(mem, init, sz);
-80106c2e:	83 c4 10             	add    $0x10,%esp
-80106c31:	89 75 10             	mov    %esi,0x10(%ebp)
-80106c34:	89 7d 0c             	mov    %edi,0xc(%ebp)
-80106c37:	89 5d 08             	mov    %ebx,0x8(%ebp)
-}
-80106c3a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106c3d:	5b                   	pop    %ebx
-80106c3e:	5e                   	pop    %esi
-80106c3f:	5f                   	pop    %edi
-80106c40:	5d                   	pop    %ebp
-  memmove(mem, init, sz);
-80106c41:	e9 ca db ff ff       	jmp    80104810 <memmove>
-    panic("inituvm: more than a page");
-80106c46:	83 ec 0c             	sub    $0xc,%esp
-80106c49:	68 ce 76 10 80       	push   $0x801076ce
-80106c4e:	e8 2d 97 ff ff       	call   80100380 <panic>
-80106c53:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106c5a:	00 
-80106c5b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-80106c60 <loaduvm>:
-{
-80106c60:	55                   	push   %ebp
-80106c61:	89 e5                	mov    %esp,%ebp
-80106c63:	57                   	push   %edi
-80106c64:	56                   	push   %esi
-80106c65:	53                   	push   %ebx
-80106c66:	83 ec 0c             	sub    $0xc,%esp
-  if((uint) addr % PGSIZE != 0)
-80106c69:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
-80106c6c:	8b 7d 18             	mov    0x18(%ebp),%edi
-  if((uint) addr % PGSIZE != 0)
-80106c6f:	81 e6 ff 0f 00 00    	and    $0xfff,%esi
-80106c75:	0f 85 a2 00 00 00    	jne    80106d1d <loaduvm+0xbd>
-  for(i = 0; i < sz; i += PGSIZE){
-80106c7b:	85 ff                	test   %edi,%edi
-80106c7d:	74 7d                	je     80106cfc <loaduvm+0x9c>
-80106c7f:	90                   	nop
-  pde = &pgdir[PDX(va)];
-80106c80:	8b 45 0c             	mov    0xc(%ebp),%eax
-  if(*pde & PTE_P){
-80106c83:	8b 55 08             	mov    0x8(%ebp),%edx
-80106c86:	01 f0                	add    %esi,%eax
-  pde = &pgdir[PDX(va)];
-80106c88:	89 c1                	mov    %eax,%ecx
-80106c8a:	c1 e9 16             	shr    $0x16,%ecx
-  if(*pde & PTE_P){
-80106c8d:	8b 0c 8a             	mov    (%edx,%ecx,4),%ecx
-80106c90:	f6 c1 01             	test   $0x1,%cl
-80106c93:	75 13                	jne    80106ca8 <loaduvm+0x48>
-      panic("loaduvm: address should exist");
-80106c95:	83 ec 0c             	sub    $0xc,%esp
-80106c98:	68 e8 76 10 80       	push   $0x801076e8
-80106c9d:	e8 de 96 ff ff       	call   80100380 <panic>
-80106ca2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  return &pgtab[PTX(va)];
-80106ca8:	c1 e8 0a             	shr    $0xa,%eax
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106cab:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
-  return &pgtab[PTX(va)];
-80106cb1:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106cb6:	8d 8c 01 00 00 00 80 	lea    -0x80000000(%ecx,%eax,1),%ecx
-    if((pte = walkpgdir(pgdir, addr+i, 0)) == 0)
-80106cbd:	85 c9                	test   %ecx,%ecx
-80106cbf:	74 d4                	je     80106c95 <loaduvm+0x35>
-    if(sz - i < PGSIZE)
-80106cc1:	89 fb                	mov    %edi,%ebx
-80106cc3:	b8 00 10 00 00       	mov    $0x1000,%eax
-80106cc8:	29 f3                	sub    %esi,%ebx
-80106cca:	39 c3                	cmp    %eax,%ebx
-80106ccc:	0f 47 d8             	cmova  %eax,%ebx
-    if(readi(ip, P2V(pa), offset+i, n) != n)
-80106ccf:	53                   	push   %ebx
-80106cd0:	8b 45 14             	mov    0x14(%ebp),%eax
-80106cd3:	01 f0                	add    %esi,%eax
-80106cd5:	50                   	push   %eax
-    pa = PTE_ADDR(*pte);
-80106cd6:	8b 01                	mov    (%ecx),%eax
-80106cd8:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-    if(readi(ip, P2V(pa), offset+i, n) != n)
-80106cdd:	05 00 00 00 80       	add    $0x80000000,%eax
-80106ce2:	50                   	push   %eax
-80106ce3:	ff 75 10             	push   0x10(%ebp)
-80106ce6:	e8 35 ae ff ff       	call   80101b20 <readi>
-80106ceb:	83 c4 10             	add    $0x10,%esp
-80106cee:	39 d8                	cmp    %ebx,%eax
-80106cf0:	75 1e                	jne    80106d10 <loaduvm+0xb0>
-  for(i = 0; i < sz; i += PGSIZE){
-80106cf2:	81 c6 00 10 00 00    	add    $0x1000,%esi
-80106cf8:	39 fe                	cmp    %edi,%esi
-80106cfa:	72 84                	jb     80106c80 <loaduvm+0x20>
-}
-80106cfc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-80106cff:	31 c0                	xor    %eax,%eax
-}
-80106d01:	5b                   	pop    %ebx
-80106d02:	5e                   	pop    %esi
-80106d03:	5f                   	pop    %edi
-80106d04:	5d                   	pop    %ebp
-80106d05:	c3                   	ret
-80106d06:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106d0d:	00 
-80106d0e:	66 90                	xchg   %ax,%ax
-80106d10:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return -1;
-80106d13:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80106d18:	5b                   	pop    %ebx
-80106d19:	5e                   	pop    %esi
-80106d1a:	5f                   	pop    %edi
-80106d1b:	5d                   	pop    %ebp
-80106d1c:	c3                   	ret
-    panic("loaduvm: addr must be page aligned");
-80106d1d:	83 ec 0c             	sub    $0xc,%esp
-80106d20:	68 0c 79 10 80       	push   $0x8010790c
-80106d25:	e8 56 96 ff ff       	call   80100380 <panic>
-80106d2a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106d30 <allocuvm>:
-{
-80106d30:	55                   	push   %ebp
-80106d31:	89 e5                	mov    %esp,%ebp
-80106d33:	57                   	push   %edi
-80106d34:	56                   	push   %esi
-80106d35:	53                   	push   %ebx
-80106d36:	83 ec 1c             	sub    $0x1c,%esp
-80106d39:	8b 75 10             	mov    0x10(%ebp),%esi
-  if(newsz >= KERNBASE)
-80106d3c:	85 f6                	test   %esi,%esi
-80106d3e:	0f 88 98 00 00 00    	js     80106ddc <allocuvm+0xac>
-80106d44:	89 f2                	mov    %esi,%edx
-  if(newsz < oldsz)
-80106d46:	3b 75 0c             	cmp    0xc(%ebp),%esi
-80106d49:	0f 82 a1 00 00 00    	jb     80106df0 <allocuvm+0xc0>
-  a = PGROUNDUP(oldsz);
-80106d4f:	8b 45 0c             	mov    0xc(%ebp),%eax
-80106d52:	05 ff 0f 00 00       	add    $0xfff,%eax
-80106d57:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80106d5c:	89 c7                	mov    %eax,%edi
-  for(; a < newsz; a += PGSIZE){
-80106d5e:	39 f0                	cmp    %esi,%eax
-80106d60:	0f 83 8d 00 00 00    	jae    80106df3 <allocuvm+0xc3>
-80106d66:	89 75 e4             	mov    %esi,-0x1c(%ebp)
-80106d69:	eb 44                	jmp    80106daf <allocuvm+0x7f>
-80106d6b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    memset(mem, 0, PGSIZE);
-80106d70:	83 ec 04             	sub    $0x4,%esp
-80106d73:	68 00 10 00 00       	push   $0x1000
-80106d78:	6a 00                	push   $0x0
-80106d7a:	50                   	push   %eax
-80106d7b:	e8 00 da ff ff       	call   80104780 <memset>
-    if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
-80106d80:	58                   	pop    %eax
-80106d81:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-80106d87:	5a                   	pop    %edx
-80106d88:	6a 06                	push   $0x6
-80106d8a:	b9 00 10 00 00       	mov    $0x1000,%ecx
-80106d8f:	89 fa                	mov    %edi,%edx
-80106d91:	50                   	push   %eax
-80106d92:	8b 45 08             	mov    0x8(%ebp),%eax
-80106d95:	e8 a6 fb ff ff       	call   80106940 <mappages>
-80106d9a:	83 c4 10             	add    $0x10,%esp
-80106d9d:	85 c0                	test   %eax,%eax
-80106d9f:	78 5f                	js     80106e00 <allocuvm+0xd0>
-  for(; a < newsz; a += PGSIZE){
-80106da1:	81 c7 00 10 00 00    	add    $0x1000,%edi
-80106da7:	39 f7                	cmp    %esi,%edi
-80106da9:	0f 83 89 00 00 00    	jae    80106e38 <allocuvm+0x108>
-    mem = kalloc();
-80106daf:	e8 1c b9 ff ff       	call   801026d0 <kalloc>
-80106db4:	89 c3                	mov    %eax,%ebx
-    if(mem == 0){
-80106db6:	85 c0                	test   %eax,%eax
-80106db8:	75 b6                	jne    80106d70 <allocuvm+0x40>
-      cprintf("allocuvm out of memory\n");
-80106dba:	83 ec 0c             	sub    $0xc,%esp
-80106dbd:	68 06 77 10 80       	push   $0x80107706
-80106dc2:	e8 e9 98 ff ff       	call   801006b0 <cprintf>
-  if(newsz >= oldsz)
-80106dc7:	83 c4 10             	add    $0x10,%esp
-80106dca:	3b 75 0c             	cmp    0xc(%ebp),%esi
-80106dcd:	74 0d                	je     80106ddc <allocuvm+0xac>
-80106dcf:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106dd2:	8b 45 08             	mov    0x8(%ebp),%eax
-80106dd5:	89 f2                	mov    %esi,%edx
-80106dd7:	e8 a4 fa ff ff       	call   80106880 <deallocuvm.part.0>
-    return 0;
-80106ddc:	31 d2                	xor    %edx,%edx
-}
-80106dde:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106de1:	89 d0                	mov    %edx,%eax
-80106de3:	5b                   	pop    %ebx
-80106de4:	5e                   	pop    %esi
-80106de5:	5f                   	pop    %edi
-80106de6:	5d                   	pop    %ebp
-80106de7:	c3                   	ret
-80106de8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106def:	00 
-    return oldsz;
-80106df0:	8b 55 0c             	mov    0xc(%ebp),%edx
-}
-80106df3:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106df6:	89 d0                	mov    %edx,%eax
-80106df8:	5b                   	pop    %ebx
-80106df9:	5e                   	pop    %esi
-80106dfa:	5f                   	pop    %edi
-80106dfb:	5d                   	pop    %ebp
-80106dfc:	c3                   	ret
-80106dfd:	8d 76 00             	lea    0x0(%esi),%esi
-      cprintf("allocuvm out of memory (2)\n");
-80106e00:	83 ec 0c             	sub    $0xc,%esp
-80106e03:	68 1e 77 10 80       	push   $0x8010771e
-80106e08:	e8 a3 98 ff ff       	call   801006b0 <cprintf>
-  if(newsz >= oldsz)
-80106e0d:	83 c4 10             	add    $0x10,%esp
-80106e10:	3b 75 0c             	cmp    0xc(%ebp),%esi
-80106e13:	74 0d                	je     80106e22 <allocuvm+0xf2>
-80106e15:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-80106e18:	8b 45 08             	mov    0x8(%ebp),%eax
-80106e1b:	89 f2                	mov    %esi,%edx
-80106e1d:	e8 5e fa ff ff       	call   80106880 <deallocuvm.part.0>
-      kfree(mem);
-80106e22:	83 ec 0c             	sub    $0xc,%esp
-80106e25:	53                   	push   %ebx
-80106e26:	e8 e5 b6 ff ff       	call   80102510 <kfree>
-      return 0;
-80106e2b:	83 c4 10             	add    $0x10,%esp
-    return 0;
-80106e2e:	31 d2                	xor    %edx,%edx
-80106e30:	eb ac                	jmp    80106dde <allocuvm+0xae>
-80106e32:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-80106e38:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-}
-80106e3b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106e3e:	5b                   	pop    %ebx
-80106e3f:	5e                   	pop    %esi
-80106e40:	89 d0                	mov    %edx,%eax
-80106e42:	5f                   	pop    %edi
-80106e43:	5d                   	pop    %ebp
-80106e44:	c3                   	ret
-80106e45:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106e4c:	00 
-80106e4d:	8d 76 00             	lea    0x0(%esi),%esi
-
-80106e50 <deallocuvm>:
-{
-80106e50:	55                   	push   %ebp
-80106e51:	89 e5                	mov    %esp,%ebp
-80106e53:	8b 55 0c             	mov    0xc(%ebp),%edx
-80106e56:	8b 4d 10             	mov    0x10(%ebp),%ecx
-80106e59:	8b 45 08             	mov    0x8(%ebp),%eax
-  if(newsz >= oldsz)
-80106e5c:	39 d1                	cmp    %edx,%ecx
-80106e5e:	73 10                	jae    80106e70 <deallocuvm+0x20>
-}
-80106e60:	5d                   	pop    %ebp
-80106e61:	e9 1a fa ff ff       	jmp    80106880 <deallocuvm.part.0>
-80106e66:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106e6d:	00 
-80106e6e:	66 90                	xchg   %ax,%ax
-80106e70:	89 d0                	mov    %edx,%eax
-80106e72:	5d                   	pop    %ebp
-80106e73:	c3                   	ret
-80106e74:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106e7b:	00 
-80106e7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-80106e80 <freevm>:
-
-// Free a page table and all the physical memory pages
-// in the user part.
-void
-freevm(pde_t *pgdir)
-{
-80106e80:	55                   	push   %ebp
-80106e81:	89 e5                	mov    %esp,%ebp
-80106e83:	57                   	push   %edi
-80106e84:	56                   	push   %esi
-80106e85:	53                   	push   %ebx
-80106e86:	83 ec 0c             	sub    $0xc,%esp
-80106e89:	8b 75 08             	mov    0x8(%ebp),%esi
-  uint i;
-
-  if(pgdir == 0)
-80106e8c:	85 f6                	test   %esi,%esi
-80106e8e:	74 59                	je     80106ee9 <freevm+0x69>
-  if(newsz >= oldsz)
-80106e90:	31 c9                	xor    %ecx,%ecx
-80106e92:	ba 00 00 00 80       	mov    $0x80000000,%edx
-80106e97:	89 f0                	mov    %esi,%eax
-80106e99:	89 f3                	mov    %esi,%ebx
-80106e9b:	e8 e0 f9 ff ff       	call   80106880 <deallocuvm.part.0>
-    panic("freevm: no pgdir");
-  deallocuvm(pgdir, KERNBASE, 0);
-  for(i = 0; i < NPDENTRIES; i++){
-80106ea0:	8d be 00 10 00 00    	lea    0x1000(%esi),%edi
-80106ea6:	eb 0f                	jmp    80106eb7 <freevm+0x37>
-80106ea8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106eaf:	00 
-80106eb0:	83 c3 04             	add    $0x4,%ebx
-80106eb3:	39 fb                	cmp    %edi,%ebx
-80106eb5:	74 23                	je     80106eda <freevm+0x5a>
-    if(pgdir[i] & PTE_P){
-80106eb7:	8b 03                	mov    (%ebx),%eax
-80106eb9:	a8 01                	test   $0x1,%al
-80106ebb:	74 f3                	je     80106eb0 <freevm+0x30>
-      char * v = P2V(PTE_ADDR(pgdir[i]));
-80106ebd:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-      kfree(v);
-80106ec2:	83 ec 0c             	sub    $0xc,%esp
-  for(i = 0; i < NPDENTRIES; i++){
-80106ec5:	83 c3 04             	add    $0x4,%ebx
-      char * v = P2V(PTE_ADDR(pgdir[i]));
-80106ec8:	05 00 00 00 80       	add    $0x80000000,%eax
-      kfree(v);
-80106ecd:	50                   	push   %eax
-80106ece:	e8 3d b6 ff ff       	call   80102510 <kfree>
-80106ed3:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < NPDENTRIES; i++){
-80106ed6:	39 fb                	cmp    %edi,%ebx
-80106ed8:	75 dd                	jne    80106eb7 <freevm+0x37>
-    }
-  }
-  kfree((char*)pgdir);
-80106eda:	89 75 08             	mov    %esi,0x8(%ebp)
-}
-80106edd:	8d 65 f4             	lea    -0xc(%ebp),%esp
-80106ee0:	5b                   	pop    %ebx
-80106ee1:	5e                   	pop    %esi
-80106ee2:	5f                   	pop    %edi
-80106ee3:	5d                   	pop    %ebp
-  kfree((char*)pgdir);
-80106ee4:	e9 27 b6 ff ff       	jmp    80102510 <kfree>
-    panic("freevm: no pgdir");
-80106ee9:	83 ec 0c             	sub    $0xc,%esp
-80106eec:	68 3a 77 10 80       	push   $0x8010773a
-80106ef1:	e8 8a 94 ff ff       	call   80100380 <panic>
-80106ef6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106efd:	00 
-80106efe:	66 90                	xchg   %ax,%ax
-
-80106f00 <setupkvm>:
-{
-80106f00:	55                   	push   %ebp
-80106f01:	89 e5                	mov    %esp,%ebp
-80106f03:	56                   	push   %esi
-80106f04:	53                   	push   %ebx
-  if((pgdir = (pde_t*)kalloc()) == 0)
-80106f05:	e8 c6 b7 ff ff       	call   801026d0 <kalloc>
-80106f0a:	85 c0                	test   %eax,%eax
-80106f0c:	74 5e                	je     80106f6c <setupkvm+0x6c>
-  memset(pgdir, 0, PGSIZE);
-80106f0e:	83 ec 04             	sub    $0x4,%esp
-80106f11:	89 c6                	mov    %eax,%esi
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106f13:	bb 20 a4 10 80       	mov    $0x8010a420,%ebx
-  memset(pgdir, 0, PGSIZE);
-80106f18:	68 00 10 00 00       	push   $0x1000
-80106f1d:	6a 00                	push   $0x0
-80106f1f:	50                   	push   %eax
-80106f20:	e8 5b d8 ff ff       	call   80104780 <memset>
-80106f25:	83 c4 10             	add    $0x10,%esp
-                (uint)k->phys_start, k->perm) < 0) {
-80106f28:	8b 43 04             	mov    0x4(%ebx),%eax
-    if(mappages(pgdir, k->virt, k->phys_end - k->phys_start,
-80106f2b:	83 ec 08             	sub    $0x8,%esp
-80106f2e:	8b 4b 08             	mov    0x8(%ebx),%ecx
-80106f31:	8b 13                	mov    (%ebx),%edx
-80106f33:	ff 73 0c             	push   0xc(%ebx)
-80106f36:	50                   	push   %eax
-80106f37:	29 c1                	sub    %eax,%ecx
-80106f39:	89 f0                	mov    %esi,%eax
-80106f3b:	e8 00 fa ff ff       	call   80106940 <mappages>
-80106f40:	83 c4 10             	add    $0x10,%esp
-80106f43:	85 c0                	test   %eax,%eax
-80106f45:	78 19                	js     80106f60 <setupkvm+0x60>
-  for(k = kmap; k < &kmap[NELEM(kmap)]; k++)
-80106f47:	83 c3 10             	add    $0x10,%ebx
-80106f4a:	81 fb 60 a4 10 80    	cmp    $0x8010a460,%ebx
-80106f50:	75 d6                	jne    80106f28 <setupkvm+0x28>
-}
-80106f52:	8d 65 f8             	lea    -0x8(%ebp),%esp
-80106f55:	89 f0                	mov    %esi,%eax
-80106f57:	5b                   	pop    %ebx
-80106f58:	5e                   	pop    %esi
-80106f59:	5d                   	pop    %ebp
-80106f5a:	c3                   	ret
-80106f5b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      freevm(pgdir);
-80106f60:	83 ec 0c             	sub    $0xc,%esp
-80106f63:	56                   	push   %esi
-80106f64:	e8 17 ff ff ff       	call   80106e80 <freevm>
-      return 0;
-80106f69:	83 c4 10             	add    $0x10,%esp
-}
-80106f6c:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    return 0;
-80106f6f:	31 f6                	xor    %esi,%esi
-}
-80106f71:	89 f0                	mov    %esi,%eax
-80106f73:	5b                   	pop    %ebx
-80106f74:	5e                   	pop    %esi
-80106f75:	5d                   	pop    %ebp
-80106f76:	c3                   	ret
-80106f77:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106f7e:	00 
-80106f7f:	90                   	nop
-
-80106f80 <kvmalloc>:
-{
-80106f80:	55                   	push   %ebp
-80106f81:	89 e5                	mov    %esp,%ebp
-80106f83:	83 ec 08             	sub    $0x8,%esp
-  kpgdir = setupkvm();
-80106f86:	e8 75 ff ff ff       	call   80106f00 <setupkvm>
-80106f8b:	a3 e4 44 11 80       	mov    %eax,0x801144e4
-  lcr3(V2P(kpgdir));   // switch to the kernel page table
-80106f90:	05 00 00 00 80       	add    $0x80000000,%eax
-80106f95:	0f 22 d8             	mov    %eax,%cr3
-}
-80106f98:	c9                   	leave
-80106f99:	c3                   	ret
-80106f9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80106fa0 <clearpteu>:
-
-// Clear PTE_U on a page. Used to create an inaccessible
-// page beneath the user stack.
-void
-clearpteu(pde_t *pgdir, char *uva)
-{
-80106fa0:	55                   	push   %ebp
-80106fa1:	89 e5                	mov    %esp,%ebp
-80106fa3:	83 ec 08             	sub    $0x8,%esp
-80106fa6:	8b 45 0c             	mov    0xc(%ebp),%eax
-  if(*pde & PTE_P){
-80106fa9:	8b 55 08             	mov    0x8(%ebp),%edx
-  pde = &pgdir[PDX(va)];
-80106fac:	89 c1                	mov    %eax,%ecx
-80106fae:	c1 e9 16             	shr    $0x16,%ecx
-  if(*pde & PTE_P){
-80106fb1:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80106fb4:	f6 c2 01             	test   $0x1,%dl
-80106fb7:	75 17                	jne    80106fd0 <clearpteu+0x30>
-  pte_t *pte;
-
-  pte = walkpgdir(pgdir, uva, 0);
-  if(pte == 0)
-    panic("clearpteu");
-80106fb9:	83 ec 0c             	sub    $0xc,%esp
-80106fbc:	68 4b 77 10 80       	push   $0x8010774b
-80106fc1:	e8 ba 93 ff ff       	call   80100380 <panic>
-80106fc6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80106fcd:	00 
-80106fce:	66 90                	xchg   %ax,%ax
-  return &pgtab[PTX(va)];
-80106fd0:	c1 e8 0a             	shr    $0xa,%eax
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80106fd3:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
-  return &pgtab[PTX(va)];
-80106fd9:	25 fc 0f 00 00       	and    $0xffc,%eax
-80106fde:	8d 84 02 00 00 00 80 	lea    -0x80000000(%edx,%eax,1),%eax
-  if(pte == 0)
-80106fe5:	85 c0                	test   %eax,%eax
-80106fe7:	74 d0                	je     80106fb9 <clearpteu+0x19>
-  *pte &= ~PTE_U;
-80106fe9:	83 20 fb             	andl   $0xfffffffb,(%eax)
-}
-80106fec:	c9                   	leave
-80106fed:	c3                   	ret
-80106fee:	66 90                	xchg   %ax,%ax
-
-80106ff0 <copyuvm>:
-
-// Given a parent process's page table, create a copy
-// of it for a child.
-pde_t*
-copyuvm(pde_t *pgdir, uint sz)
-{
-80106ff0:	55                   	push   %ebp
-80106ff1:	89 e5                	mov    %esp,%ebp
-80106ff3:	57                   	push   %edi
-80106ff4:	56                   	push   %esi
-80106ff5:	53                   	push   %ebx
-80106ff6:	83 ec 1c             	sub    $0x1c,%esp
-  pde_t *d;
-  pte_t *pte;
-  uint pa, i, flags;
-  char *mem;
-
-  if((d = setupkvm()) == 0)
-80106ff9:	e8 02 ff ff ff       	call   80106f00 <setupkvm>
-80106ffe:	89 45 e0             	mov    %eax,-0x20(%ebp)
-80107001:	85 c0                	test   %eax,%eax
-80107003:	0f 84 e9 00 00 00    	je     801070f2 <copyuvm+0x102>
-    return 0;
-  for(i = 0; i < sz; i += PGSIZE){
-80107009:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-8010700c:	85 c9                	test   %ecx,%ecx
-8010700e:	0f 84 b2 00 00 00    	je     801070c6 <copyuvm+0xd6>
-80107014:	31 f6                	xor    %esi,%esi
-80107016:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-8010701d:	00 
-8010701e:	66 90                	xchg   %ax,%ax
-  if(*pde & PTE_P){
-80107020:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  pde = &pgdir[PDX(va)];
-80107023:	89 f0                	mov    %esi,%eax
-80107025:	c1 e8 16             	shr    $0x16,%eax
-  if(*pde & PTE_P){
-80107028:	8b 04 81             	mov    (%ecx,%eax,4),%eax
-8010702b:	a8 01                	test   $0x1,%al
-8010702d:	75 11                	jne    80107040 <copyuvm+0x50>
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-      panic("copyuvm: pte should exist");
-8010702f:	83 ec 0c             	sub    $0xc,%esp
-80107032:	68 55 77 10 80       	push   $0x80107755
-80107037:	e8 44 93 ff ff       	call   80100380 <panic>
-8010703c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  return &pgtab[PTX(va)];
-80107040:	89 f2                	mov    %esi,%edx
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-80107042:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-  return &pgtab[PTX(va)];
-80107047:	c1 ea 0a             	shr    $0xa,%edx
-8010704a:	81 e2 fc 0f 00 00    	and    $0xffc,%edx
-80107050:	8d 84 10 00 00 00 80 	lea    -0x80000000(%eax,%edx,1),%eax
-    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
-80107057:	85 c0                	test   %eax,%eax
-80107059:	74 d4                	je     8010702f <copyuvm+0x3f>
-    if(!(*pte & PTE_P))
-8010705b:	8b 00                	mov    (%eax),%eax
-8010705d:	a8 01                	test   $0x1,%al
-8010705f:	0f 84 9f 00 00 00    	je     80107104 <copyuvm+0x114>
-      panic("copyuvm: page not present");
-    pa = PTE_ADDR(*pte);
-80107065:	89 c7                	mov    %eax,%edi
-    flags = PTE_FLAGS(*pte);
-80107067:	25 ff 0f 00 00       	and    $0xfff,%eax
-8010706c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-    pa = PTE_ADDR(*pte);
-8010706f:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
-    if((mem = kalloc()) == 0)
-80107075:	e8 56 b6 ff ff       	call   801026d0 <kalloc>
-8010707a:	89 c3                	mov    %eax,%ebx
-8010707c:	85 c0                	test   %eax,%eax
-8010707e:	74 64                	je     801070e4 <copyuvm+0xf4>
-      goto bad;
-    memmove(mem, (char*)P2V(pa), PGSIZE);
-80107080:	83 ec 04             	sub    $0x4,%esp
-80107083:	81 c7 00 00 00 80    	add    $0x80000000,%edi
-80107089:	68 00 10 00 00       	push   $0x1000
-8010708e:	57                   	push   %edi
-8010708f:	50                   	push   %eax
-80107090:	e8 7b d7 ff ff       	call   80104810 <memmove>
-    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0) {
-80107095:	58                   	pop    %eax
-80107096:	8d 83 00 00 00 80    	lea    -0x80000000(%ebx),%eax
-8010709c:	5a                   	pop    %edx
-8010709d:	ff 75 e4             	push   -0x1c(%ebp)
-801070a0:	b9 00 10 00 00       	mov    $0x1000,%ecx
-801070a5:	89 f2                	mov    %esi,%edx
-801070a7:	50                   	push   %eax
-801070a8:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801070ab:	e8 90 f8 ff ff       	call   80106940 <mappages>
-801070b0:	83 c4 10             	add    $0x10,%esp
-801070b3:	85 c0                	test   %eax,%eax
-801070b5:	78 21                	js     801070d8 <copyuvm+0xe8>
-  for(i = 0; i < sz; i += PGSIZE){
-801070b7:	81 c6 00 10 00 00    	add    $0x1000,%esi
-801070bd:	3b 75 0c             	cmp    0xc(%ebp),%esi
-801070c0:	0f 82 5a ff ff ff    	jb     80107020 <copyuvm+0x30>
-  return d;
-
-bad:
-  freevm(d);
-  return 0;
-}
-801070c6:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801070c9:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801070cc:	5b                   	pop    %ebx
-801070cd:	5e                   	pop    %esi
-801070ce:	5f                   	pop    %edi
-801070cf:	5d                   	pop    %ebp
-801070d0:	c3                   	ret
-801070d1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      kfree(mem);
-801070d8:	83 ec 0c             	sub    $0xc,%esp
-801070db:	53                   	push   %ebx
-801070dc:	e8 2f b4 ff ff       	call   80102510 <kfree>
-      goto bad;
-801070e1:	83 c4 10             	add    $0x10,%esp
-  freevm(d);
-801070e4:	83 ec 0c             	sub    $0xc,%esp
-801070e7:	ff 75 e0             	push   -0x20(%ebp)
-801070ea:	e8 91 fd ff ff       	call   80106e80 <freevm>
-  return 0;
-801070ef:	83 c4 10             	add    $0x10,%esp
-    return 0;
-801070f2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-}
-801070f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
-801070fc:	8d 65 f4             	lea    -0xc(%ebp),%esp
-801070ff:	5b                   	pop    %ebx
-80107100:	5e                   	pop    %esi
-80107101:	5f                   	pop    %edi
-80107102:	5d                   	pop    %ebp
-80107103:	c3                   	ret
-      panic("copyuvm: page not present");
-80107104:	83 ec 0c             	sub    $0xc,%esp
-80107107:	68 6f 77 10 80       	push   $0x8010776f
-8010710c:	e8 6f 92 ff ff       	call   80100380 <panic>
-80107111:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-80107118:	00 
-80107119:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-80107120 <uva2ka>:
-
-//PAGEBREAK!
-// Map user virtual address to kernel address.
-char*
-uva2ka(pde_t *pgdir, char *uva)
-{
-80107120:	55                   	push   %ebp
-80107121:	89 e5                	mov    %esp,%ebp
-80107123:	8b 45 0c             	mov    0xc(%ebp),%eax
-  if(*pde & PTE_P){
-80107126:	8b 55 08             	mov    0x8(%ebp),%edx
-  pde = &pgdir[PDX(va)];
-80107129:	89 c1                	mov    %eax,%ecx
-8010712b:	c1 e9 16             	shr    $0x16,%ecx
-  if(*pde & PTE_P){
-8010712e:	8b 14 8a             	mov    (%edx,%ecx,4),%edx
-80107131:	f6 c2 01             	test   $0x1,%dl
-80107134:	0f 84 f8 00 00 00    	je     80107232 <uva2ka.cold>
-  return &pgtab[PTX(va)];
-8010713a:	c1 e8 0c             	shr    $0xc,%eax
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-8010713d:	81 e2 00 f0 ff ff    	and    $0xfffff000,%edx
-  if((*pte & PTE_P) == 0)
-    return 0;
-  if((*pte & PTE_U) == 0)
-    return 0;
-  return (char*)P2V(PTE_ADDR(*pte));
-}
-80107143:	5d                   	pop    %ebp
-  return &pgtab[PTX(va)];
-80107144:	25 ff 03 00 00       	and    $0x3ff,%eax
-  if((*pte & PTE_P) == 0)
-80107149:	8b 94 82 00 00 00 80 	mov    -0x80000000(%edx,%eax,4),%edx
-  return (char*)P2V(PTE_ADDR(*pte));
-80107150:	89 d0                	mov    %edx,%eax
-80107152:	f7 d2                	not    %edx
-80107154:	25 00 f0 ff ff       	and    $0xfffff000,%eax
-80107159:	05 00 00 00 80       	add    $0x80000000,%eax
-8010715e:	83 e2 05             	and    $0x5,%edx
-80107161:	ba 00 00 00 00       	mov    $0x0,%edx
-80107166:	0f 45 c2             	cmovne %edx,%eax
-}
-80107169:	c3                   	ret
-8010716a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-80107170 <copyout>:
-// Copy len bytes from p to user address va in page table pgdir.
-// Most useful when pgdir is not the current page table.
-// uva2ka ensures this only works for PTE_U pages.
-int
-copyout(pde_t *pgdir, uint va, void *p, uint len)
-{
-80107170:	55                   	push   %ebp
-80107171:	89 e5                	mov    %esp,%ebp
-80107173:	57                   	push   %edi
-80107174:	56                   	push   %esi
-80107175:	53                   	push   %ebx
-80107176:	83 ec 0c             	sub    $0xc,%esp
-80107179:	8b 75 14             	mov    0x14(%ebp),%esi
-8010717c:	8b 45 0c             	mov    0xc(%ebp),%eax
-8010717f:	8b 55 10             	mov    0x10(%ebp),%edx
-  char *buf, *pa0;
-  uint n, va0;
-
-  buf = (char*)p;
-  while(len > 0){
-80107182:	85 f6                	test   %esi,%esi
-80107184:	75 51                	jne    801071d7 <copyout+0x67>
-80107186:	e9 9d 00 00 00       	jmp    80107228 <copyout+0xb8>
-8010718b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  return (char*)P2V(PTE_ADDR(*pte));
-80107190:	81 e3 00 f0 ff ff    	and    $0xfffff000,%ebx
-80107196:	8d 8b 00 00 00 80    	lea    -0x80000000(%ebx),%ecx
-    va0 = (uint)PGROUNDDOWN(va);
-    pa0 = uva2ka(pgdir, (char*)va0);
-    if(pa0 == 0)
-8010719c:	81 fb 00 00 00 80    	cmp    $0x80000000,%ebx
-801071a2:	74 74                	je     80107218 <copyout+0xa8>
-      return -1;
-    n = PGSIZE - (va - va0);
-801071a4:	89 fb                	mov    %edi,%ebx
-801071a6:	29 c3                	sub    %eax,%ebx
-801071a8:	81 c3 00 10 00 00    	add    $0x1000,%ebx
-    if(n > len)
-801071ae:	39 f3                	cmp    %esi,%ebx
-801071b0:	0f 47 de             	cmova  %esi,%ebx
-      n = len;
-    memmove(pa0 + (va - va0), buf, n);
-801071b3:	29 f8                	sub    %edi,%eax
-801071b5:	83 ec 04             	sub    $0x4,%esp
-801071b8:	01 c1                	add    %eax,%ecx
-801071ba:	53                   	push   %ebx
-801071bb:	52                   	push   %edx
-801071bc:	89 55 10             	mov    %edx,0x10(%ebp)
-801071bf:	51                   	push   %ecx
-801071c0:	e8 4b d6 ff ff       	call   80104810 <memmove>
-    len -= n;
-    buf += n;
-801071c5:	8b 55 10             	mov    0x10(%ebp),%edx
-    va = va0 + PGSIZE;
-801071c8:	8d 87 00 10 00 00    	lea    0x1000(%edi),%eax
-  while(len > 0){
-801071ce:	83 c4 10             	add    $0x10,%esp
-    buf += n;
-801071d1:	01 da                	add    %ebx,%edx
-  while(len > 0){
-801071d3:	29 de                	sub    %ebx,%esi
-801071d5:	74 51                	je     80107228 <copyout+0xb8>
-  if(*pde & PTE_P){
-801071d7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  pde = &pgdir[PDX(va)];
-801071da:	89 c1                	mov    %eax,%ecx
-    va0 = (uint)PGROUNDDOWN(va);
-801071dc:	89 c7                	mov    %eax,%edi
-  pde = &pgdir[PDX(va)];
-801071de:	c1 e9 16             	shr    $0x16,%ecx
-    va0 = (uint)PGROUNDDOWN(va);
-801071e1:	81 e7 00 f0 ff ff    	and    $0xfffff000,%edi
-  if(*pde & PTE_P){
-801071e7:	8b 0c 8b             	mov    (%ebx,%ecx,4),%ecx
-801071ea:	f6 c1 01             	test   $0x1,%cl
-801071ed:	0f 84 46 00 00 00    	je     80107239 <copyout.cold>
-  return &pgtab[PTX(va)];
-801071f3:	89 fb                	mov    %edi,%ebx
-    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));
-801071f5:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
-  return &pgtab[PTX(va)];
-801071fb:	c1 eb 0c             	shr    $0xc,%ebx
-801071fe:	81 e3 ff 03 00 00    	and    $0x3ff,%ebx
-  if((*pte & PTE_P) == 0)
-80107204:	8b 9c 99 00 00 00 80 	mov    -0x80000000(%ecx,%ebx,4),%ebx
-  if((*pte & PTE_U) == 0)
-8010720b:	89 d9                	mov    %ebx,%ecx
-8010720d:	f7 d1                	not    %ecx
-8010720f:	83 e1 05             	and    $0x5,%ecx
-80107212:	0f 84 78 ff ff ff    	je     80107190 <copyout+0x20>
-  }
-  return 0;
-}
-80107218:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return -1;
-8010721b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
-}
-80107220:	5b                   	pop    %ebx
-80107221:	5e                   	pop    %esi
-80107222:	5f                   	pop    %edi
-80107223:	5d                   	pop    %ebp
-80107224:	c3                   	ret
-80107225:	8d 76 00             	lea    0x0(%esi),%esi
-80107228:	8d 65 f4             	lea    -0xc(%ebp),%esp
-  return 0;
-8010722b:	31 c0                	xor    %eax,%eax
-}
-8010722d:	5b                   	pop    %ebx
-8010722e:	5e                   	pop    %esi
-8010722f:	5f                   	pop    %edi
-80107230:	5d                   	pop    %ebp
-80107231:	c3                   	ret
-
-80107232 <uva2ka.cold>:
-  if((*pte & PTE_P) == 0)
-80107232:	a1 00 00 00 00       	mov    0x0,%eax
-80107237:	0f 0b                	ud2
-
-80107239 <copyout.cold>:
-80107239:	a1 00 00 00 00       	mov    0x0,%eax
-8010723e:	0f 0b                	ud2
diff --git a/kernel.sym b/kernel.sym
deleted file mode 100644
index 700e6cc..0000000
--- a/kernel.sym
+++ /dev/null
@@ -1,505 +0,0 @@
-00000000 bio.c
-00000000 console.c
-8010ef40 cons
-8010ef78 panicked
-80100400 consputc.part.0
-80100620 printint
-8010778c digits.0
-00000000 exec.c
-00000000 file.c
-00000000 fs.c
-80101250 balloc
-80101360 iget
-80101460 bfree
-801014e0 bmap
-80101e10 namex
-00000000 ide.c
-80102130 idestart
-80111620 idelock
-80111600 havedisk1
-80111604 idequeue
-00000000 ioapic.c
-00000000 kalloc.c
-00000000 kbd.c
-8011169c shift.1
-80107a60 shiftcode
-80107960 togglecode
-80107940 charcode.0
-80108200 normalmap
-80108100 shiftmap
-80108000 ctlmap
-00000000 lapic.c
-00000000 log.c
-80102c10 install_trans
-80102cb0 write_head
-00000000 main.c
-80103040 mpmain
-80103080 mpenter
-00000000 mp.c
-801031d0 mpsearch1
-00000000 picirq.c
-00000000 pipe.c
-00000000 proc.c
-80103810 allocproc
-8010a000 first.1
-80113c74 initproc
-80107b60 states.0
-00000000 sleeplock.c
-00000000 spinlock.c
-00000000 string.c
-00000000 syscall.c
-80107b80 syscalls
-00000000 sysfile.c
-80104be0 create
-00000000 sysproc.c
-00000000 trap.c
-00000000 uart.c
-80105c70 uartgetc
-801144e0 uart
-00000000 vm.c
-80106880 deallocuvm.part.0
-80106940 mappages
-8010a420 kmap
-80107232 uva2ka.cold
-80107239 copyout.cold
-80100280 consoleread
-801067cf vector242
-80106226 vector119
-8010000c entry
-80106106 vector87
-801060fd vector86
-80104930 safestrcpy
-80104ee0 sys_close
-8010683b vector251
-8010612a vector91
-80105f20 vector33
-8010640f vector162
-801040b0 yield
-801116c0 log
-80111660 kmem
-80106673 vector213
-801061c3 vector108
-80105ca0 uartinit
-80105f7a vector43
-80102960 lapiceoi
-80106433 vector165
-80106523 vector185
-80102430 ioapicinit
-80106202 vector115
-801010b0 fileread
-80106241 vector122
-801057f0 sys_sbrk
-801117a0 ioapicid
-801063c7 vector156
-801067f3 vector245
-80111654 ioapic
-80106553 vector189
-80105e44 vector7
-8010601c vector61
-80105ecf vector24
-801061de vector111
-801065d7 vector200
-80106052 vector67
-801062ef vector138
-80106091 vector74
-80103d90 sched
-80104810 memmove
-80105ff8 vector57
-80103930 print_mem_layout
-80104b70 syscall
-8010ee80 check_cntrl_i
-8010667f vector214
-80106172 vector99
-80103a20 cpuid
-80101c20 writei
-80106313 vector141
-80105770 sys_fork
-8010a520 bcache
-80106487 vector172
-801067c3 vector241
-801044b0 getcallerpcs
-80105400 sys_mkdir
-80106853 vector253
-80105e20 vector3
-80105e17 vector2
-80101d40 namecmp
-8010671b vector227
-8010664f vector210
-80104af0 argstr
-801066f7 vector224
-80105f68 vector41
-801006b0 cprintf
-80100f30 filedup
-801020f0 namei
-80105eb4 vector21
-80100040 binit
-801064c3 vector177
-8010621d vector118
-8010606d vector70
-80106064 vector69
-80106793 vector237
-80106037 vector64
-80105eea vector27
-801062a7 vector132
-8010652f vector186
-80104de0 sys_read
-801066a3 vector217
-801049a0 fetchint
-80106f00 setupkvm
-80104870 memcpy
-80106e80 freevm
-80105e0e vector1
-801064cf vector178
-80105f4d vector38
-80102510 kfree
-8010679f vector238
-801039c0 mycpu
-80101940 iput
-801062b3 vector133
-80106088 vector73
-80106337 vector144
-8010685f vector254
-801015b0 readsb
-8010a004 nextpid
-80106184 vector101
-8010665b vector211
-80103250 mpinit
-8010649f vector174
-801067db vector243
-80100ea0 fileinit
-80104490 initlock
-80106277 vector128
-80107170 copyout
-801060d0 vector81
-80104100 sleep
-80102980 microdelay
-80105e72 vector13
-80105fc2 vector51
-80105e89 vector16
-8010eea0 input
-801067b7 vector240
-80105fdd vector54
-80105ea2 vector19
-80106133 vector92
-801067e7 vector244
-80101af0 stati
-80106307 vector140
-801057a0 sys_kill
-80105f8c vector45
-801060be vector79
-80103570 pipeclose
-80106733 vector229
-801063df vector158
-80104f40 sys_fstat
-801005b0 consolewrite
-80105f56 vector39
-80106457 vector168
-80102e20 end_op
-80105f32 vector35
-801061f0 vector113
-801025b0 freerange
-8010625c vector125
-80106d30 allocuvm
-80105932 trapret
-80106697 vector216
-8010602e vector63
-80105ee1 vector26
-80106583 vector193
-80102850 lapicinit
-801065a7 vector196
-80106643 vector209
-80105e29 vector4
-8010646f vector170
-801144f0 stack
-801062d7 vector136
-80105e5d vector10
-8010661f vector206
-801018f0 iunlock
-80105840 sys_sleep
-8010686b vector255
-801064f3 vector181
-8010600a vector59
-801060f4 vector85
-801060eb vector84
-8010650b vector183
-801063eb vector159
-80106667 vector212
-80104fb0 sys_link
-80105f9e vector47
-80106727 vector228
-80105f71 vector42
-801061f9 vector114
-80107120 uva2ka
-801064ab vector175
-8010632b vector143
-80100ec0 filealloc
-801041c0 wakeup
-8010628f vector130
-801067ff vector246
-80105e54 vector9
-8010631f vector142
-8010617b vector100
-801065e3 vector201
-80106fa0 clearpteu
-80103a40 myproc
-80105940 tvinit
-80106013 vector60
-80105ec6 vector23
-801017e0 idup
-80106787 vector236
-80102830 kbdintr
-801052c0 sys_open
-8010674b vector231
-80106049 vector66
-80105efc vector29
-80101b20 readi
-801062cb vector135
-801008a0 consoleintr
-80104220 kill
-801060ac vector77
-801016a0 ialloc
-801064e7 vector180
-801144e4 kpgdir
-80106637 vector208
-80102a20 cmostime
-80105df0 uartintr
-80106169 vector98
-80106160 vector97
-801064b7 vector176
-8010658f vector194
-80105f17 vector32
-801154f0 end
-801065cb vector199
-8010629b vector131
-80106847 vector252
-80101140 filewrite
-80105e05 vector0
-80104a30 argint
-80100b20 exec
-80106343 vector145
-80104e60 sys_write
-80104620 release
-801049e0 fetchstr
-801061ba vector107
-80105f5f vector40
-80103f80 wait
-8010618d vector102
-80109000 entrypgdir
-0010000c _start
-80105fef vector56
-8010605b vector68
-80105e3b vector6
-8010a48c _binary_initcode_end
-80100000 multiboot_header
-80106283 vector129
-80103cf0 scheduler
-80101d60 dirlookup
-801065b3 vector197
-80100f80 fileclose
-80102db0 begin_op
-80106397 vector152
-80106f80 kvmalloc
-8010673f vector230
-80104880 strncmp
-80105f44 vector37
-80106613 vector205
-80106403 vector161
-80113ca0 tickslock
-80103610 pipewrite
-801048d0 strncpy
-80106076 vector71
-80106ff0 copyuvm
-8010ef80 ftable
-801063f7 vector160
-80104a80 argptr
-8010668b vector215
-801063d3 vector157
-80104d60 sys_dup
-801061e7 vector112
-80100380 panic
-801038e0 forkret
-801064ff vector182
-80105e6b vector12
-801047c0 memcmp
-80102750 kbdgetc
-801061cc vector109
-80105eab vector20
-80103be0 fork
-80105fd4 vector53
-80105e99 vector18
-0000008a _binary_entryother_size
-801117c0 cpus
-80104400 releasesleep
-8010614e vector95
-801045e0 holding
-801115d4 sb
-80104680 acquire
-8010670f vector226
-80102110 nameiparent
-80105fb0 vector49
-80105f83 vector44
-801116a0 lapic
-801060b5 vector78
-8010591a alltraps
-80106493 vector173
-80106214 vector117
-801060d9 vector82
-801066df vector222
-80105e4d vector8
-80106373 vector149
-80101760 iupdate
-80108000 data
-80104780 memset
-80106757 vector232
-801030a0 main
-80106ac0 switchkvm
-801061b1 vector106
-801066c7 vector220
-80106121 vector90
-8010641b vector163
-8010676f vector234
-80102f90 log_write
-801043a0 acquiresleep
-801050f0 sys_unlink
-80106025 vector62
-80105ed8 vector25
-801065bf vector198
-8010622f vector120
-8010a48c _binary_entryother_start
-80102660 kinit1
-80105fb9 vector50
-80105e80 vector15
-8010638b vector151
-801060e2 vector83
-80106118 vector89
-8010610f vector88
-801059f0 trap
-801058f0 sys_uptime
-801064db vector179
-80105f29 vector34
-80105f95 vector46
-801062bf vector134
-801066eb vector223
-80113ce0 idt
-801066af vector218
-801039a0 pinit
-80106e50 deallocuvm
-80106703 vector225
-80102940 lapicid
-8010653b vector187
-80103b60 growproc
-80104440 holdingsleep
-801117a4 ncpu
-80105f05 vector30
-80103a70 userinit
-801000d0 bread
-8010626e vector127
-80103730 piperead
-80113c80 ticks
-80106577 vector192
-8010643f vector166
-80100ad0 consoleinit
-801060a3 vector76
-8010609a vector75
-801022a0 ideintr
-8010659b vector195
-8010637f vector150
-80106001 vector58
-80106817 vector248
-8010624a vector123
-80106157 vector96
-80105f0e vector31
-801065fb vector203
-801062fb vector139
-801063a3 vector153
-80106427 vector164
-801042a0 procdump
-80106238 vector121
-80105d90 uartputc
-80105e32 vector5
-8010644b vector167
-801063bb vector155
-80106823 vector249
-801001f0 brelse
-8010682f vector250
-80106253 vector124
-801061d5 vector110
-80106607 vector204
-80101810 ilock
-801055a0 sys_exec
-801062e3 vector137
-8010a460 _binary_initcode_start
-8010498b swtch
-8010680b vector247
-80105ebd vector22
-801065ef vector202
-80106a30 seginit
-80101aa0 iunlockput
-8010607f vector72
-80105fe6 vector55
-80106265 vector126
-80106040 vector65
-80105ef3 vector28
-8010a516 _binary_entryother_end
-80106463 vector169
-801001b0 bwrite
-80106763 vector233
-801059c0 idtinit
-80103e50 exit
-80105790 sys_wait
-80105780 sys_exit
-80102030 dirlink
-0000002c _binary_initcode_size
-8010635b vector147
-80104360 initsleeplock
-80102210 ideinit
-80106c60 loaduvm
-8010619f vector104
-8010620b vector116
-80111d40 ptable
-801024d0 ioapicenable
-80104580 popcli
-8010a008 vectors
-80105fcb vector52
-80105e92 vector17
-80106517 vector184
-80104970 strlen
-80105690 sys_pipe
-801015f0 iinit
-80103460 picinit
-8010662b vector207
-80106be0 inituvm
-8010655f vector190
-801067ab vector239
-80106145 vector94
-8010613c vector93
-80102d10 initlog
-80106547 vector188
-80105fa7 vector48
-80102340 iderw
-801066bb vector219
-80106367 vector148
-801066d3 vector221
-801026d0 kalloc
-8010f920 devsw
-801057e0 sys_getpid
-801060c7 vector80
-8010647b vector171
-801063af vector154
-80105f3b vector36
-80103480 pipealloc
-8010677b vector235
-801061a8 vector105
-801054f0 sys_chdir
-8010f980 icache
-8010634f vector146
-8010656b vector191
-80106196 vector103
-80105460 sys_mknod
-80102990 lapicstartap
-80106ad0 switchuvm
-80104530 pushcli
-80102600 kinit2
-80105e64 vector11
-80105e79 vector14
-80101060 filestat
diff --git a/kill.asm b/kill.asm
deleted file mode 100644
index 02a71d7..0000000
--- a/kill.asm
+++ /dev/null
@@ -1,1127 +0,0 @@
-
-_kill:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char **argv)
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	57                   	push   %edi
-   e:	56                   	push   %esi
-   f:	53                   	push   %ebx
-  10:	bb 01 00 00 00       	mov    $0x1,%ebx
-  15:	51                   	push   %ecx
-  16:	83 ec 08             	sub    $0x8,%esp
-  19:	8b 31                	mov    (%ecx),%esi
-  1b:	8b 79 04             	mov    0x4(%ecx),%edi
-  int i;
-
-  if(argc < 2){
-  1e:	83 fe 01             	cmp    $0x1,%esi
-  21:	7e 27                	jle    4a <main+0x4a>
-  23:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    printf(2, "usage: kill pid...\n");
-    exit();
-  }
-  for(i=1; i<argc; i++)
-    kill(atoi(argv[i]));
-  28:	83 ec 0c             	sub    $0xc,%esp
-  2b:	ff 34 9f             	push   (%edi,%ebx,4)
-  for(i=1; i<argc; i++)
-  2e:	83 c3 01             	add    $0x1,%ebx
-    kill(atoi(argv[i]));
-  31:	e8 fa 01 00 00       	call   230 <atoi>
-  36:	89 04 24             	mov    %eax,(%esp)
-  39:	e8 95 02 00 00       	call   2d3 <kill>
-  for(i=1; i<argc; i++)
-  3e:	83 c4 10             	add    $0x10,%esp
-  41:	39 de                	cmp    %ebx,%esi
-  43:	75 e3                	jne    28 <main+0x28>
-  exit();
-  45:	e8 59 02 00 00       	call   2a3 <exit>
-    printf(2, "usage: kill pid...\n");
-  4a:	50                   	push   %eax
-  4b:	50                   	push   %eax
-  4c:	68 f8 06 00 00       	push   $0x6f8
-  51:	6a 02                	push   $0x2
-  53:	e8 98 03 00 00       	call   3f0 <printf>
-    exit();
-  58:	e8 46 02 00 00       	call   2a3 <exit>
-  5d:	66 90                	xchg   %ax,%ax
-  5f:	90                   	nop
-
-00000060 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  60:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  61:	31 c0                	xor    %eax,%eax
-{
-  63:	89 e5                	mov    %esp,%ebp
-  65:	53                   	push   %ebx
-  66:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
-  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  77:	83 c0 01             	add    $0x1,%eax
-  7a:	84 d2                	test   %dl,%dl
-  7c:	75 f2                	jne    70 <strcpy+0x10>
-    ;
-  return os;
-}
-  7e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  81:	89 c8                	mov    %ecx,%eax
-  83:	c9                   	leave
-  84:	c3                   	ret
-  85:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  8c:	00 
-  8d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000090 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  90:	55                   	push   %ebp
-  91:	89 e5                	mov    %esp,%ebp
-  93:	53                   	push   %ebx
-  94:	8b 55 08             	mov    0x8(%ebp),%edx
-  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-  9a:	0f b6 02             	movzbl (%edx),%eax
-  9d:	84 c0                	test   %al,%al
-  9f:	75 17                	jne    b8 <strcmp+0x28>
-  a1:	eb 3a                	jmp    dd <strcmp+0x4d>
-  a3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  a8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
-  ac:	83 c2 01             	add    $0x1,%edx
-  af:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
-  b2:	84 c0                	test   %al,%al
-  b4:	74 1a                	je     d0 <strcmp+0x40>
-  b6:	89 d9                	mov    %ebx,%ecx
-  b8:	0f b6 19             	movzbl (%ecx),%ebx
-  bb:	38 c3                	cmp    %al,%bl
-  bd:	74 e9                	je     a8 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
-  bf:	29 d8                	sub    %ebx,%eax
-}
-  c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  c4:	c9                   	leave
-  c5:	c3                   	ret
-  c6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  cd:	00 
-  ce:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
-  d0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
-  d4:	31 c0                	xor    %eax,%eax
-  d6:	29 d8                	sub    %ebx,%eax
-}
-  d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  db:	c9                   	leave
-  dc:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
-  dd:	0f b6 19             	movzbl (%ecx),%ebx
-  e0:	31 c0                	xor    %eax,%eax
-  e2:	eb db                	jmp    bf <strcmp+0x2f>
-  e4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  eb:	00 
-  ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000000f0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-  f0:	55                   	push   %ebp
-  f1:	89 e5                	mov    %esp,%ebp
-  f3:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-  f6:	80 3a 00             	cmpb   $0x0,(%edx)
-  f9:	74 15                	je     110 <strlen+0x20>
-  fb:	31 c0                	xor    %eax,%eax
-  fd:	8d 76 00             	lea    0x0(%esi),%esi
- 100:	83 c0 01             	add    $0x1,%eax
- 103:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 107:	89 c1                	mov    %eax,%ecx
- 109:	75 f5                	jne    100 <strlen+0x10>
-    ;
-  return n;
-}
- 10b:	89 c8                	mov    %ecx,%eax
- 10d:	5d                   	pop    %ebp
- 10e:	c3                   	ret
- 10f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 110:	31 c9                	xor    %ecx,%ecx
-}
- 112:	5d                   	pop    %ebp
- 113:	89 c8                	mov    %ecx,%eax
- 115:	c3                   	ret
- 116:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 11d:	00 
- 11e:	66 90                	xchg   %ax,%ax
-
-00000120 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 120:	55                   	push   %ebp
- 121:	89 e5                	mov    %esp,%ebp
- 123:	57                   	push   %edi
- 124:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 12d:	89 d7                	mov    %edx,%edi
- 12f:	fc                   	cld
- 130:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 132:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 135:	89 d0                	mov    %edx,%eax
- 137:	c9                   	leave
- 138:	c3                   	ret
- 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000140 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 140:	55                   	push   %ebp
- 141:	89 e5                	mov    %esp,%ebp
- 143:	8b 45 08             	mov    0x8(%ebp),%eax
- 146:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 14a:	0f b6 10             	movzbl (%eax),%edx
- 14d:	84 d2                	test   %dl,%dl
- 14f:	75 12                	jne    163 <strchr+0x23>
- 151:	eb 1d                	jmp    170 <strchr+0x30>
- 153:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 158:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 15c:	83 c0 01             	add    $0x1,%eax
- 15f:	84 d2                	test   %dl,%dl
- 161:	74 0d                	je     170 <strchr+0x30>
-    if(*s == c)
- 163:	38 d1                	cmp    %dl,%cl
- 165:	75 f1                	jne    158 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 167:	5d                   	pop    %ebp
- 168:	c3                   	ret
- 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 170:	31 c0                	xor    %eax,%eax
-}
- 172:	5d                   	pop    %ebp
- 173:	c3                   	ret
- 174:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 17b:	00 
- 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000180 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 180:	55                   	push   %ebp
- 181:	89 e5                	mov    %esp,%ebp
- 183:	57                   	push   %edi
- 184:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 185:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 188:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 189:	31 db                	xor    %ebx,%ebx
-{
- 18b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 18e:	eb 27                	jmp    1b7 <gets+0x37>
-    cc = read(0, &c, 1);
- 190:	83 ec 04             	sub    $0x4,%esp
- 193:	6a 01                	push   $0x1
- 195:	56                   	push   %esi
- 196:	6a 00                	push   $0x0
- 198:	e8 1e 01 00 00       	call   2bb <read>
-    if(cc < 1)
- 19d:	83 c4 10             	add    $0x10,%esp
- 1a0:	85 c0                	test   %eax,%eax
- 1a2:	7e 1d                	jle    1c1 <gets+0x41>
-      break;
-    buf[i++] = c;
- 1a4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
- 1ab:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 1af:	3c 0a                	cmp    $0xa,%al
- 1b1:	74 10                	je     1c3 <gets+0x43>
- 1b3:	3c 0d                	cmp    $0xd,%al
- 1b5:	74 0c                	je     1c3 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 1b7:	89 df                	mov    %ebx,%edi
- 1b9:	83 c3 01             	add    $0x1,%ebx
- 1bc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1bf:	7c cf                	jl     190 <gets+0x10>
- 1c1:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 1c3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1c6:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 1ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1cd:	5b                   	pop    %ebx
- 1ce:	5e                   	pop    %esi
- 1cf:	5f                   	pop    %edi
- 1d0:	5d                   	pop    %ebp
- 1d1:	c3                   	ret
- 1d2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1d9:	00 
- 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000001e0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 1e0:	55                   	push   %ebp
- 1e1:	89 e5                	mov    %esp,%ebp
- 1e3:	56                   	push   %esi
- 1e4:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1e5:	83 ec 08             	sub    $0x8,%esp
- 1e8:	6a 00                	push   $0x0
- 1ea:	ff 75 08             	push   0x8(%ebp)
- 1ed:	e8 f1 00 00 00       	call   2e3 <open>
-  if(fd < 0)
- 1f2:	83 c4 10             	add    $0x10,%esp
- 1f5:	85 c0                	test   %eax,%eax
- 1f7:	78 27                	js     220 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 1f9:	83 ec 08             	sub    $0x8,%esp
- 1fc:	ff 75 0c             	push   0xc(%ebp)
- 1ff:	89 c3                	mov    %eax,%ebx
- 201:	50                   	push   %eax
- 202:	e8 f4 00 00 00       	call   2fb <fstat>
-  close(fd);
- 207:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 20a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 20c:	e8 ba 00 00 00       	call   2cb <close>
-  return r;
- 211:	83 c4 10             	add    $0x10,%esp
-}
- 214:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 217:	89 f0                	mov    %esi,%eax
- 219:	5b                   	pop    %ebx
- 21a:	5e                   	pop    %esi
- 21b:	5d                   	pop    %ebp
- 21c:	c3                   	ret
- 21d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 220:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 225:	eb ed                	jmp    214 <stat+0x34>
- 227:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 22e:	00 
- 22f:	90                   	nop
-
-00000230 <atoi>:
-
-int
-atoi(const char *s)
-{
- 230:	55                   	push   %ebp
- 231:	89 e5                	mov    %esp,%ebp
- 233:	53                   	push   %ebx
- 234:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 237:	0f be 02             	movsbl (%edx),%eax
- 23a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 23d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 240:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 245:	77 1e                	ja     265 <atoi+0x35>
- 247:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 24e:	00 
- 24f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 250:	83 c2 01             	add    $0x1,%edx
- 253:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 256:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 25a:	0f be 02             	movsbl (%edx),%eax
- 25d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 260:	80 fb 09             	cmp    $0x9,%bl
- 263:	76 eb                	jbe    250 <atoi+0x20>
-  return n;
-}
- 265:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 268:	89 c8                	mov    %ecx,%eax
- 26a:	c9                   	leave
- 26b:	c3                   	ret
- 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000270 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 270:	55                   	push   %ebp
- 271:	89 e5                	mov    %esp,%ebp
- 273:	57                   	push   %edi
- 274:	8b 45 10             	mov    0x10(%ebp),%eax
- 277:	8b 55 08             	mov    0x8(%ebp),%edx
- 27a:	56                   	push   %esi
- 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 27e:	85 c0                	test   %eax,%eax
- 280:	7e 13                	jle    295 <memmove+0x25>
- 282:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 284:	89 d7                	mov    %edx,%edi
- 286:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 28d:	00 
- 28e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 290:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 291:	39 f8                	cmp    %edi,%eax
- 293:	75 fb                	jne    290 <memmove+0x20>
-  return vdst;
-}
- 295:	5e                   	pop    %esi
- 296:	89 d0                	mov    %edx,%eax
- 298:	5f                   	pop    %edi
- 299:	5d                   	pop    %ebp
- 29a:	c3                   	ret
-
-0000029b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 29b:	b8 01 00 00 00       	mov    $0x1,%eax
- 2a0:	cd 40                	int    $0x40
- 2a2:	c3                   	ret
-
-000002a3 <exit>:
-SYSCALL(exit)
- 2a3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2a8:	cd 40                	int    $0x40
- 2aa:	c3                   	ret
-
-000002ab <wait>:
-SYSCALL(wait)
- 2ab:	b8 03 00 00 00       	mov    $0x3,%eax
- 2b0:	cd 40                	int    $0x40
- 2b2:	c3                   	ret
-
-000002b3 <pipe>:
-SYSCALL(pipe)
- 2b3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2b8:	cd 40                	int    $0x40
- 2ba:	c3                   	ret
-
-000002bb <read>:
-SYSCALL(read)
- 2bb:	b8 05 00 00 00       	mov    $0x5,%eax
- 2c0:	cd 40                	int    $0x40
- 2c2:	c3                   	ret
-
-000002c3 <write>:
-SYSCALL(write)
- 2c3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2c8:	cd 40                	int    $0x40
- 2ca:	c3                   	ret
-
-000002cb <close>:
-SYSCALL(close)
- 2cb:	b8 15 00 00 00       	mov    $0x15,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret
-
-000002d3 <kill>:
-SYSCALL(kill)
- 2d3:	b8 06 00 00 00       	mov    $0x6,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret
-
-000002db <exec>:
-SYSCALL(exec)
- 2db:	b8 07 00 00 00       	mov    $0x7,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret
-
-000002e3 <open>:
-SYSCALL(open)
- 2e3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret
-
-000002eb <mknod>:
-SYSCALL(mknod)
- 2eb:	b8 11 00 00 00       	mov    $0x11,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret
-
-000002f3 <unlink>:
-SYSCALL(unlink)
- 2f3:	b8 12 00 00 00       	mov    $0x12,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret
-
-000002fb <fstat>:
-SYSCALL(fstat)
- 2fb:	b8 08 00 00 00       	mov    $0x8,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret
-
-00000303 <link>:
-SYSCALL(link)
- 303:	b8 13 00 00 00       	mov    $0x13,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret
-
-0000030b <mkdir>:
-SYSCALL(mkdir)
- 30b:	b8 14 00 00 00       	mov    $0x14,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret
-
-00000313 <chdir>:
-SYSCALL(chdir)
- 313:	b8 09 00 00 00       	mov    $0x9,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret
-
-0000031b <dup>:
-SYSCALL(dup)
- 31b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret
-
-00000323 <getpid>:
-SYSCALL(getpid)
- 323:	b8 0b 00 00 00       	mov    $0xb,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret
-
-0000032b <sbrk>:
-SYSCALL(sbrk)
- 32b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret
-
-00000333 <sleep>:
-SYSCALL(sleep)
- 333:	b8 0d 00 00 00       	mov    $0xd,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret
-
-0000033b <uptime>:
-SYSCALL(uptime)
- 33b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret
- 343:	66 90                	xchg   %ax,%ax
- 345:	66 90                	xchg   %ax,%ax
- 347:	66 90                	xchg   %ax,%ax
- 349:	66 90                	xchg   %ax,%ax
- 34b:	66 90                	xchg   %ax,%ax
- 34d:	66 90                	xchg   %ax,%ax
- 34f:	90                   	nop
-
-00000350 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	56                   	push   %esi
- 355:	53                   	push   %ebx
- 356:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 358:	89 d1                	mov    %edx,%ecx
-{
- 35a:	83 ec 3c             	sub    $0x3c,%esp
- 35d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 360:	85 d2                	test   %edx,%edx
- 362:	0f 89 80 00 00 00    	jns    3e8 <printint+0x98>
- 368:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 36c:	74 7a                	je     3e8 <printint+0x98>
-    x = -xx;
- 36e:	f7 d9                	neg    %ecx
-    neg = 1;
- 370:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 375:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 378:	31 f6                	xor    %esi,%esi
- 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 380:	89 c8                	mov    %ecx,%eax
- 382:	31 d2                	xor    %edx,%edx
- 384:	89 f7                	mov    %esi,%edi
- 386:	f7 f3                	div    %ebx
- 388:	8d 76 01             	lea    0x1(%esi),%esi
- 38b:	0f b6 92 6c 07 00 00 	movzbl 0x76c(%edx),%edx
- 392:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 396:	89 ca                	mov    %ecx,%edx
- 398:	89 c1                	mov    %eax,%ecx
- 39a:	39 da                	cmp    %ebx,%edx
- 39c:	73 e2                	jae    380 <printint+0x30>
-  if(neg)
- 39e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3a1:	85 c0                	test   %eax,%eax
- 3a3:	74 07                	je     3ac <printint+0x5c>
-    buf[i++] = '-';
- 3a5:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 3aa:	89 f7                	mov    %esi,%edi
- 3ac:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 3af:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 3b2:	01 df                	add    %ebx,%edi
- 3b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 3b8:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 3bb:	83 ec 04             	sub    $0x4,%esp
- 3be:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3c1:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 3c4:	6a 01                	push   $0x1
- 3c6:	50                   	push   %eax
- 3c7:	56                   	push   %esi
- 3c8:	e8 f6 fe ff ff       	call   2c3 <write>
-  while(--i >= 0)
- 3cd:	89 f8                	mov    %edi,%eax
- 3cf:	83 c4 10             	add    $0x10,%esp
- 3d2:	83 ef 01             	sub    $0x1,%edi
- 3d5:	39 c3                	cmp    %eax,%ebx
- 3d7:	75 df                	jne    3b8 <printint+0x68>
-}
- 3d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3dc:	5b                   	pop    %ebx
- 3dd:	5e                   	pop    %esi
- 3de:	5f                   	pop    %edi
- 3df:	5d                   	pop    %ebp
- 3e0:	c3                   	ret
- 3e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 3e8:	31 c0                	xor    %eax,%eax
- 3ea:	eb 89                	jmp    375 <printint+0x25>
- 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000003f0 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
- 3f4:	56                   	push   %esi
- 3f5:	53                   	push   %ebx
- 3f6:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 3f9:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 3fc:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 3ff:	0f b6 1e             	movzbl (%esi),%ebx
- 402:	83 c6 01             	add    $0x1,%esi
- 405:	84 db                	test   %bl,%bl
- 407:	74 67                	je     470 <printf+0x80>
- 409:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 40c:	31 d2                	xor    %edx,%edx
- 40e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 411:	eb 34                	jmp    447 <printf+0x57>
- 413:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 418:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 41b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 420:	83 f8 25             	cmp    $0x25,%eax
- 423:	74 18                	je     43d <printf+0x4d>
-  write(fd, &c, 1);
- 425:	83 ec 04             	sub    $0x4,%esp
- 428:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 42b:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 42e:	6a 01                	push   $0x1
- 430:	50                   	push   %eax
- 431:	57                   	push   %edi
- 432:	e8 8c fe ff ff       	call   2c3 <write>
- 437:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 43a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 43d:	0f b6 1e             	movzbl (%esi),%ebx
- 440:	83 c6 01             	add    $0x1,%esi
- 443:	84 db                	test   %bl,%bl
- 445:	74 29                	je     470 <printf+0x80>
-    c = fmt[i] & 0xff;
- 447:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 44a:	85 d2                	test   %edx,%edx
- 44c:	74 ca                	je     418 <printf+0x28>
-      }
-    } else if(state == '%'){
- 44e:	83 fa 25             	cmp    $0x25,%edx
- 451:	75 ea                	jne    43d <printf+0x4d>
-      if(c == 'd'){
- 453:	83 f8 25             	cmp    $0x25,%eax
- 456:	0f 84 04 01 00 00    	je     560 <printf+0x170>
- 45c:	83 e8 63             	sub    $0x63,%eax
- 45f:	83 f8 15             	cmp    $0x15,%eax
- 462:	77 1c                	ja     480 <printf+0x90>
- 464:	ff 24 85 14 07 00 00 	jmp    *0x714(,%eax,4)
- 46b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 470:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 473:	5b                   	pop    %ebx
- 474:	5e                   	pop    %esi
- 475:	5f                   	pop    %edi
- 476:	5d                   	pop    %ebp
- 477:	c3                   	ret
- 478:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 47f:	00 
-  write(fd, &c, 1);
- 480:	83 ec 04             	sub    $0x4,%esp
- 483:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 486:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 48a:	6a 01                	push   $0x1
- 48c:	52                   	push   %edx
- 48d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 490:	57                   	push   %edi
- 491:	e8 2d fe ff ff       	call   2c3 <write>
- 496:	83 c4 0c             	add    $0xc,%esp
- 499:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 49c:	6a 01                	push   $0x1
- 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 4a1:	52                   	push   %edx
- 4a2:	57                   	push   %edi
- 4a3:	e8 1b fe ff ff       	call   2c3 <write>
-        putc(fd, c);
- 4a8:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4ab:	31 d2                	xor    %edx,%edx
- 4ad:	eb 8e                	jmp    43d <printf+0x4d>
- 4af:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 4b0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4b3:	83 ec 0c             	sub    $0xc,%esp
- 4b6:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4bb:	8b 13                	mov    (%ebx),%edx
- 4bd:	6a 00                	push   $0x0
- 4bf:	89 f8                	mov    %edi,%eax
-        ap++;
- 4c1:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 4c4:	e8 87 fe ff ff       	call   350 <printint>
-        ap++;
- 4c9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 4cc:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4cf:	31 d2                	xor    %edx,%edx
- 4d1:	e9 67 ff ff ff       	jmp    43d <printf+0x4d>
-        s = (char*)*ap;
- 4d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4d9:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 4db:	83 c0 04             	add    $0x4,%eax
- 4de:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 4e1:	85 db                	test   %ebx,%ebx
- 4e3:	0f 84 87 00 00 00    	je     570 <printf+0x180>
-        while(*s != 0){
- 4e9:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 4ec:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 4ee:	84 c0                	test   %al,%al
- 4f0:	0f 84 47 ff ff ff    	je     43d <printf+0x4d>
- 4f6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 4f9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 4fc:	89 de                	mov    %ebx,%esi
- 4fe:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 500:	83 ec 04             	sub    $0x4,%esp
- 503:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 506:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 509:	6a 01                	push   $0x1
- 50b:	53                   	push   %ebx
- 50c:	57                   	push   %edi
- 50d:	e8 b1 fd ff ff       	call   2c3 <write>
-        while(*s != 0){
- 512:	0f b6 06             	movzbl (%esi),%eax
- 515:	83 c4 10             	add    $0x10,%esp
- 518:	84 c0                	test   %al,%al
- 51a:	75 e4                	jne    500 <printf+0x110>
-      state = 0;
- 51c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 51f:	31 d2                	xor    %edx,%edx
- 521:	e9 17 ff ff ff       	jmp    43d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 526:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 529:	83 ec 0c             	sub    $0xc,%esp
- 52c:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 531:	8b 13                	mov    (%ebx),%edx
- 533:	6a 01                	push   $0x1
- 535:	eb 88                	jmp    4bf <printf+0xcf>
-        putc(fd, *ap);
- 537:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 53a:	83 ec 04             	sub    $0x4,%esp
- 53d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 540:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 542:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 545:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 548:	6a 01                	push   $0x1
- 54a:	52                   	push   %edx
- 54b:	57                   	push   %edi
- 54c:	e8 72 fd ff ff       	call   2c3 <write>
-        ap++;
- 551:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 554:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 557:	31 d2                	xor    %edx,%edx
- 559:	e9 df fe ff ff       	jmp    43d <printf+0x4d>
- 55e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 560:	83 ec 04             	sub    $0x4,%esp
- 563:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 566:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 569:	6a 01                	push   $0x1
- 56b:	e9 31 ff ff ff       	jmp    4a1 <printf+0xb1>
- 570:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 575:	bb 0c 07 00 00       	mov    $0x70c,%ebx
- 57a:	e9 77 ff ff ff       	jmp    4f6 <printf+0x106>
- 57f:	90                   	nop
-
-00000580 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 580:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 581:	a1 18 0a 00 00       	mov    0xa18,%eax
-{
- 586:	89 e5                	mov    %esp,%ebp
- 588:	57                   	push   %edi
- 589:	56                   	push   %esi
- 58a:	53                   	push   %ebx
- 58b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 58e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 598:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 59a:	39 c8                	cmp    %ecx,%eax
- 59c:	73 32                	jae    5d0 <free+0x50>
- 59e:	39 d1                	cmp    %edx,%ecx
- 5a0:	72 04                	jb     5a6 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5a2:	39 d0                	cmp    %edx,%eax
- 5a4:	72 32                	jb     5d8 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 5a6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5a9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5ac:	39 fa                	cmp    %edi,%edx
- 5ae:	74 30                	je     5e0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5b0:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 5b3:	8b 50 04             	mov    0x4(%eax),%edx
- 5b6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5b9:	39 f1                	cmp    %esi,%ecx
- 5bb:	74 3a                	je     5f7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 5bd:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 5bf:	5b                   	pop    %ebx
-  freep = p;
- 5c0:	a3 18 0a 00 00       	mov    %eax,0xa18
-}
- 5c5:	5e                   	pop    %esi
- 5c6:	5f                   	pop    %edi
- 5c7:	5d                   	pop    %ebp
- 5c8:	c3                   	ret
- 5c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5d0:	39 d0                	cmp    %edx,%eax
- 5d2:	72 04                	jb     5d8 <free+0x58>
- 5d4:	39 d1                	cmp    %edx,%ecx
- 5d6:	72 ce                	jb     5a6 <free+0x26>
-{
- 5d8:	89 d0                	mov    %edx,%eax
- 5da:	eb bc                	jmp    598 <free+0x18>
- 5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 5e0:	03 72 04             	add    0x4(%edx),%esi
- 5e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5e6:	8b 10                	mov    (%eax),%edx
- 5e8:	8b 12                	mov    (%edx),%edx
- 5ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 5ed:	8b 50 04             	mov    0x4(%eax),%edx
- 5f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5f3:	39 f1                	cmp    %esi,%ecx
- 5f5:	75 c6                	jne    5bd <free+0x3d>
-    p->s.size += bp->s.size;
- 5f7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 5fa:	a3 18 0a 00 00       	mov    %eax,0xa18
-    p->s.size += bp->s.size;
- 5ff:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 602:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 605:	89 08                	mov    %ecx,(%eax)
-}
- 607:	5b                   	pop    %ebx
- 608:	5e                   	pop    %esi
- 609:	5f                   	pop    %edi
- 60a:	5d                   	pop    %ebp
- 60b:	c3                   	ret
- 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000610 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 610:	55                   	push   %ebp
- 611:	89 e5                	mov    %esp,%ebp
- 613:	57                   	push   %edi
- 614:	56                   	push   %esi
- 615:	53                   	push   %ebx
- 616:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 619:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 61c:	8b 15 18 0a 00 00    	mov    0xa18,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 622:	8d 78 07             	lea    0x7(%eax),%edi
- 625:	c1 ef 03             	shr    $0x3,%edi
- 628:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 62b:	85 d2                	test   %edx,%edx
- 62d:	0f 84 8d 00 00 00    	je     6c0 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 633:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 635:	8b 48 04             	mov    0x4(%eax),%ecx
- 638:	39 f9                	cmp    %edi,%ecx
- 63a:	73 64                	jae    6a0 <malloc+0x90>
-  if(nu < 4096)
- 63c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 641:	39 df                	cmp    %ebx,%edi
- 643:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 646:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 64d:	eb 0a                	jmp    659 <malloc+0x49>
- 64f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 650:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 652:	8b 48 04             	mov    0x4(%eax),%ecx
- 655:	39 f9                	cmp    %edi,%ecx
- 657:	73 47                	jae    6a0 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 659:	89 c2                	mov    %eax,%edx
- 65b:	3b 05 18 0a 00 00    	cmp    0xa18,%eax
- 661:	75 ed                	jne    650 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 663:	83 ec 0c             	sub    $0xc,%esp
- 666:	56                   	push   %esi
- 667:	e8 bf fc ff ff       	call   32b <sbrk>
-  if(p == (char*)-1)
- 66c:	83 c4 10             	add    $0x10,%esp
- 66f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 672:	74 1c                	je     690 <malloc+0x80>
-  hp->s.size = nu;
- 674:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 677:	83 ec 0c             	sub    $0xc,%esp
- 67a:	83 c0 08             	add    $0x8,%eax
- 67d:	50                   	push   %eax
- 67e:	e8 fd fe ff ff       	call   580 <free>
-  return freep;
- 683:	8b 15 18 0a 00 00    	mov    0xa18,%edx
-      if((p = morecore(nunits)) == 0)
- 689:	83 c4 10             	add    $0x10,%esp
- 68c:	85 d2                	test   %edx,%edx
- 68e:	75 c0                	jne    650 <malloc+0x40>
-        return 0;
-  }
-}
- 690:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 693:	31 c0                	xor    %eax,%eax
-}
- 695:	5b                   	pop    %ebx
- 696:	5e                   	pop    %esi
- 697:	5f                   	pop    %edi
- 698:	5d                   	pop    %ebp
- 699:	c3                   	ret
- 69a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 6a0:	39 cf                	cmp    %ecx,%edi
- 6a2:	74 4c                	je     6f0 <malloc+0xe0>
-        p->s.size -= nunits;
- 6a4:	29 f9                	sub    %edi,%ecx
- 6a6:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 6a9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 6ac:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 6af:	89 15 18 0a 00 00    	mov    %edx,0xa18
-}
- 6b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 6b8:	83 c0 08             	add    $0x8,%eax
-}
- 6bb:	5b                   	pop    %ebx
- 6bc:	5e                   	pop    %esi
- 6bd:	5f                   	pop    %edi
- 6be:	5d                   	pop    %ebp
- 6bf:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 6c0:	c7 05 18 0a 00 00 1c 	movl   $0xa1c,0xa18
- 6c7:	0a 00 00 
-    base.s.size = 0;
- 6ca:	b8 1c 0a 00 00       	mov    $0xa1c,%eax
-    base.s.ptr = freep = prevp = &base;
- 6cf:	c7 05 1c 0a 00 00 1c 	movl   $0xa1c,0xa1c
- 6d6:	0a 00 00 
-    base.s.size = 0;
- 6d9:	c7 05 20 0a 00 00 00 	movl   $0x0,0xa20
- 6e0:	00 00 00 
-    if(p->s.size >= nunits){
- 6e3:	e9 54 ff ff ff       	jmp    63c <malloc+0x2c>
- 6e8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 6ef:	00 
-        prevp->s.ptr = p->s.ptr;
- 6f0:	8b 08                	mov    (%eax),%ecx
- 6f2:	89 0a                	mov    %ecx,(%edx)
- 6f4:	eb b9                	jmp    6af <malloc+0x9f>
diff --git a/kill.d b/kill.d
deleted file mode 100644
index 078f4f8..0000000
--- a/kill.d
+++ /dev/null
@@ -1 +0,0 @@
-kill.o: kill.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/kill.o b/kill.o
deleted file mode 100644
index c2ee5a7..0000000
Binary files a/kill.o and /dev/null differ
diff --git a/kill.sym b/kill.sym
deleted file mode 100644
index def0cdb..0000000
--- a/kill.sym
+++ /dev/null
@@ -1,45 +0,0 @@
-00000000 kill.c
-00000000 ulib.c
-00000000 printf.c
-00000350 printint
-0000076c digits.0
-00000000 umalloc.c
-00000a18 freep
-00000a1c base
-00000060 strcpy
-000003f0 printf
-00000270 memmove
-000002eb mknod
-00000180 gets
-00000323 getpid
-00000610 malloc
-00000333 sleep
-000002b3 pipe
-000002c3 write
-000002fb fstat
-000002d3 kill
-00000313 chdir
-000002db exec
-000002ab wait
-000002bb read
-000002f3 unlink
-0000029b fork
-0000032b sbrk
-0000033b uptime
-00000a18 __bss_start
-00000120 memset
-00000000 main
-00000090 strcmp
-0000031b dup
-000001e0 stat
-00000a18 _edata
-00000a24 _end
-00000303 link
-000002a3 exit
-00000230 atoi
-000000f0 strlen
-000002e3 open
-00000140 strchr
-0000030b mkdir
-000002cb close
-00000580 free
diff --git a/lapic.d b/lapic.d
deleted file mode 100644
index 6e62387..0000000
--- a/lapic.d
+++ /dev/null
@@ -1,2 +0,0 @@
-lapic.o: lapic.c /usr/include/stdc-predef.h param.h types.h defs.h date.h \
- memlayout.h traps.h mmu.h x86.h
diff --git a/lapic.o b/lapic.o
deleted file mode 100644
index 67ce344..0000000
Binary files a/lapic.o and /dev/null differ
diff --git a/ln.asm b/ln.asm
deleted file mode 100644
index 499213a..0000000
--- a/ln.asm
+++ /dev/null
@@ -1,1124 +0,0 @@
-
-_ln:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	53                   	push   %ebx
-   e:	51                   	push   %ecx
-  if(argc != 3){
-   f:	83 39 03             	cmpl   $0x3,(%ecx)
-{
-  12:	8b 59 04             	mov    0x4(%ecx),%ebx
-  if(argc != 3){
-  15:	74 13                	je     2a <main+0x2a>
-    printf(2, "Usage: ln old new\n");
-  17:	52                   	push   %edx
-  18:	52                   	push   %edx
-  19:	68 f8 06 00 00       	push   $0x6f8
-  1e:	6a 02                	push   $0x2
-  20:	e8 cb 03 00 00       	call   3f0 <printf>
-    exit();
-  25:	e8 79 02 00 00       	call   2a3 <exit>
-  }
-  if(link(argv[1], argv[2]) < 0)
-  2a:	50                   	push   %eax
-  2b:	50                   	push   %eax
-  2c:	ff 73 08             	push   0x8(%ebx)
-  2f:	ff 73 04             	push   0x4(%ebx)
-  32:	e8 cc 02 00 00       	call   303 <link>
-  37:	83 c4 10             	add    $0x10,%esp
-  3a:	85 c0                	test   %eax,%eax
-  3c:	78 05                	js     43 <main+0x43>
-    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  exit();
-  3e:	e8 60 02 00 00       	call   2a3 <exit>
-    printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  43:	ff 73 08             	push   0x8(%ebx)
-  46:	ff 73 04             	push   0x4(%ebx)
-  49:	68 0b 07 00 00       	push   $0x70b
-  4e:	6a 02                	push   $0x2
-  50:	e8 9b 03 00 00       	call   3f0 <printf>
-  55:	83 c4 10             	add    $0x10,%esp
-  58:	eb e4                	jmp    3e <main+0x3e>
-  5a:	66 90                	xchg   %ax,%ax
-  5c:	66 90                	xchg   %ax,%ax
-  5e:	66 90                	xchg   %ax,%ax
-
-00000060 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  60:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  61:	31 c0                	xor    %eax,%eax
-{
-  63:	89 e5                	mov    %esp,%ebp
-  65:	53                   	push   %ebx
-  66:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  69:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  6c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
-  70:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  74:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  77:	83 c0 01             	add    $0x1,%eax
-  7a:	84 d2                	test   %dl,%dl
-  7c:	75 f2                	jne    70 <strcpy+0x10>
-    ;
-  return os;
-}
-  7e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  81:	89 c8                	mov    %ecx,%eax
-  83:	c9                   	leave
-  84:	c3                   	ret
-  85:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  8c:	00 
-  8d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000090 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  90:	55                   	push   %ebp
-  91:	89 e5                	mov    %esp,%ebp
-  93:	53                   	push   %ebx
-  94:	8b 55 08             	mov    0x8(%ebp),%edx
-  97:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-  9a:	0f b6 02             	movzbl (%edx),%eax
-  9d:	84 c0                	test   %al,%al
-  9f:	75 17                	jne    b8 <strcmp+0x28>
-  a1:	eb 3a                	jmp    dd <strcmp+0x4d>
-  a3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  a8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
-  ac:	83 c2 01             	add    $0x1,%edx
-  af:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
-  b2:	84 c0                	test   %al,%al
-  b4:	74 1a                	je     d0 <strcmp+0x40>
-  b6:	89 d9                	mov    %ebx,%ecx
-  b8:	0f b6 19             	movzbl (%ecx),%ebx
-  bb:	38 c3                	cmp    %al,%bl
-  bd:	74 e9                	je     a8 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
-  bf:	29 d8                	sub    %ebx,%eax
-}
-  c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  c4:	c9                   	leave
-  c5:	c3                   	ret
-  c6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  cd:	00 
-  ce:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
-  d0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
-  d4:	31 c0                	xor    %eax,%eax
-  d6:	29 d8                	sub    %ebx,%eax
-}
-  d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  db:	c9                   	leave
-  dc:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
-  dd:	0f b6 19             	movzbl (%ecx),%ebx
-  e0:	31 c0                	xor    %eax,%eax
-  e2:	eb db                	jmp    bf <strcmp+0x2f>
-  e4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  eb:	00 
-  ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000000f0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-  f0:	55                   	push   %ebp
-  f1:	89 e5                	mov    %esp,%ebp
-  f3:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-  f6:	80 3a 00             	cmpb   $0x0,(%edx)
-  f9:	74 15                	je     110 <strlen+0x20>
-  fb:	31 c0                	xor    %eax,%eax
-  fd:	8d 76 00             	lea    0x0(%esi),%esi
- 100:	83 c0 01             	add    $0x1,%eax
- 103:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 107:	89 c1                	mov    %eax,%ecx
- 109:	75 f5                	jne    100 <strlen+0x10>
-    ;
-  return n;
-}
- 10b:	89 c8                	mov    %ecx,%eax
- 10d:	5d                   	pop    %ebp
- 10e:	c3                   	ret
- 10f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 110:	31 c9                	xor    %ecx,%ecx
-}
- 112:	5d                   	pop    %ebp
- 113:	89 c8                	mov    %ecx,%eax
- 115:	c3                   	ret
- 116:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 11d:	00 
- 11e:	66 90                	xchg   %ax,%ax
-
-00000120 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 120:	55                   	push   %ebp
- 121:	89 e5                	mov    %esp,%ebp
- 123:	57                   	push   %edi
- 124:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 127:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 12a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 12d:	89 d7                	mov    %edx,%edi
- 12f:	fc                   	cld
- 130:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 132:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 135:	89 d0                	mov    %edx,%eax
- 137:	c9                   	leave
- 138:	c3                   	ret
- 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000140 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 140:	55                   	push   %ebp
- 141:	89 e5                	mov    %esp,%ebp
- 143:	8b 45 08             	mov    0x8(%ebp),%eax
- 146:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 14a:	0f b6 10             	movzbl (%eax),%edx
- 14d:	84 d2                	test   %dl,%dl
- 14f:	75 12                	jne    163 <strchr+0x23>
- 151:	eb 1d                	jmp    170 <strchr+0x30>
- 153:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 158:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 15c:	83 c0 01             	add    $0x1,%eax
- 15f:	84 d2                	test   %dl,%dl
- 161:	74 0d                	je     170 <strchr+0x30>
-    if(*s == c)
- 163:	38 d1                	cmp    %dl,%cl
- 165:	75 f1                	jne    158 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 167:	5d                   	pop    %ebp
- 168:	c3                   	ret
- 169:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 170:	31 c0                	xor    %eax,%eax
-}
- 172:	5d                   	pop    %ebp
- 173:	c3                   	ret
- 174:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 17b:	00 
- 17c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000180 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 180:	55                   	push   %ebp
- 181:	89 e5                	mov    %esp,%ebp
- 183:	57                   	push   %edi
- 184:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 185:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 188:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 189:	31 db                	xor    %ebx,%ebx
-{
- 18b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 18e:	eb 27                	jmp    1b7 <gets+0x37>
-    cc = read(0, &c, 1);
- 190:	83 ec 04             	sub    $0x4,%esp
- 193:	6a 01                	push   $0x1
- 195:	56                   	push   %esi
- 196:	6a 00                	push   $0x0
- 198:	e8 1e 01 00 00       	call   2bb <read>
-    if(cc < 1)
- 19d:	83 c4 10             	add    $0x10,%esp
- 1a0:	85 c0                	test   %eax,%eax
- 1a2:	7e 1d                	jle    1c1 <gets+0x41>
-      break;
-    buf[i++] = c;
- 1a4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1a8:	8b 55 08             	mov    0x8(%ebp),%edx
- 1ab:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 1af:	3c 0a                	cmp    $0xa,%al
- 1b1:	74 10                	je     1c3 <gets+0x43>
- 1b3:	3c 0d                	cmp    $0xd,%al
- 1b5:	74 0c                	je     1c3 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 1b7:	89 df                	mov    %ebx,%edi
- 1b9:	83 c3 01             	add    $0x1,%ebx
- 1bc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1bf:	7c cf                	jl     190 <gets+0x10>
- 1c1:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 1c3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1c6:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 1ca:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1cd:	5b                   	pop    %ebx
- 1ce:	5e                   	pop    %esi
- 1cf:	5f                   	pop    %edi
- 1d0:	5d                   	pop    %ebp
- 1d1:	c3                   	ret
- 1d2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1d9:	00 
- 1da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000001e0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 1e0:	55                   	push   %ebp
- 1e1:	89 e5                	mov    %esp,%ebp
- 1e3:	56                   	push   %esi
- 1e4:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1e5:	83 ec 08             	sub    $0x8,%esp
- 1e8:	6a 00                	push   $0x0
- 1ea:	ff 75 08             	push   0x8(%ebp)
- 1ed:	e8 f1 00 00 00       	call   2e3 <open>
-  if(fd < 0)
- 1f2:	83 c4 10             	add    $0x10,%esp
- 1f5:	85 c0                	test   %eax,%eax
- 1f7:	78 27                	js     220 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 1f9:	83 ec 08             	sub    $0x8,%esp
- 1fc:	ff 75 0c             	push   0xc(%ebp)
- 1ff:	89 c3                	mov    %eax,%ebx
- 201:	50                   	push   %eax
- 202:	e8 f4 00 00 00       	call   2fb <fstat>
-  close(fd);
- 207:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 20a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 20c:	e8 ba 00 00 00       	call   2cb <close>
-  return r;
- 211:	83 c4 10             	add    $0x10,%esp
-}
- 214:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 217:	89 f0                	mov    %esi,%eax
- 219:	5b                   	pop    %ebx
- 21a:	5e                   	pop    %esi
- 21b:	5d                   	pop    %ebp
- 21c:	c3                   	ret
- 21d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 220:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 225:	eb ed                	jmp    214 <stat+0x34>
- 227:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 22e:	00 
- 22f:	90                   	nop
-
-00000230 <atoi>:
-
-int
-atoi(const char *s)
-{
- 230:	55                   	push   %ebp
- 231:	89 e5                	mov    %esp,%ebp
- 233:	53                   	push   %ebx
- 234:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 237:	0f be 02             	movsbl (%edx),%eax
- 23a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 23d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 240:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 245:	77 1e                	ja     265 <atoi+0x35>
- 247:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 24e:	00 
- 24f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 250:	83 c2 01             	add    $0x1,%edx
- 253:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 256:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 25a:	0f be 02             	movsbl (%edx),%eax
- 25d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 260:	80 fb 09             	cmp    $0x9,%bl
- 263:	76 eb                	jbe    250 <atoi+0x20>
-  return n;
-}
- 265:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 268:	89 c8                	mov    %ecx,%eax
- 26a:	c9                   	leave
- 26b:	c3                   	ret
- 26c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000270 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 270:	55                   	push   %ebp
- 271:	89 e5                	mov    %esp,%ebp
- 273:	57                   	push   %edi
- 274:	8b 45 10             	mov    0x10(%ebp),%eax
- 277:	8b 55 08             	mov    0x8(%ebp),%edx
- 27a:	56                   	push   %esi
- 27b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 27e:	85 c0                	test   %eax,%eax
- 280:	7e 13                	jle    295 <memmove+0x25>
- 282:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 284:	89 d7                	mov    %edx,%edi
- 286:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 28d:	00 
- 28e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 290:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 291:	39 f8                	cmp    %edi,%eax
- 293:	75 fb                	jne    290 <memmove+0x20>
-  return vdst;
-}
- 295:	5e                   	pop    %esi
- 296:	89 d0                	mov    %edx,%eax
- 298:	5f                   	pop    %edi
- 299:	5d                   	pop    %ebp
- 29a:	c3                   	ret
-
-0000029b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 29b:	b8 01 00 00 00       	mov    $0x1,%eax
- 2a0:	cd 40                	int    $0x40
- 2a2:	c3                   	ret
-
-000002a3 <exit>:
-SYSCALL(exit)
- 2a3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2a8:	cd 40                	int    $0x40
- 2aa:	c3                   	ret
-
-000002ab <wait>:
-SYSCALL(wait)
- 2ab:	b8 03 00 00 00       	mov    $0x3,%eax
- 2b0:	cd 40                	int    $0x40
- 2b2:	c3                   	ret
-
-000002b3 <pipe>:
-SYSCALL(pipe)
- 2b3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2b8:	cd 40                	int    $0x40
- 2ba:	c3                   	ret
-
-000002bb <read>:
-SYSCALL(read)
- 2bb:	b8 05 00 00 00       	mov    $0x5,%eax
- 2c0:	cd 40                	int    $0x40
- 2c2:	c3                   	ret
-
-000002c3 <write>:
-SYSCALL(write)
- 2c3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2c8:	cd 40                	int    $0x40
- 2ca:	c3                   	ret
-
-000002cb <close>:
-SYSCALL(close)
- 2cb:	b8 15 00 00 00       	mov    $0x15,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret
-
-000002d3 <kill>:
-SYSCALL(kill)
- 2d3:	b8 06 00 00 00       	mov    $0x6,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret
-
-000002db <exec>:
-SYSCALL(exec)
- 2db:	b8 07 00 00 00       	mov    $0x7,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret
-
-000002e3 <open>:
-SYSCALL(open)
- 2e3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret
-
-000002eb <mknod>:
-SYSCALL(mknod)
- 2eb:	b8 11 00 00 00       	mov    $0x11,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret
-
-000002f3 <unlink>:
-SYSCALL(unlink)
- 2f3:	b8 12 00 00 00       	mov    $0x12,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret
-
-000002fb <fstat>:
-SYSCALL(fstat)
- 2fb:	b8 08 00 00 00       	mov    $0x8,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret
-
-00000303 <link>:
-SYSCALL(link)
- 303:	b8 13 00 00 00       	mov    $0x13,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret
-
-0000030b <mkdir>:
-SYSCALL(mkdir)
- 30b:	b8 14 00 00 00       	mov    $0x14,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret
-
-00000313 <chdir>:
-SYSCALL(chdir)
- 313:	b8 09 00 00 00       	mov    $0x9,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret
-
-0000031b <dup>:
-SYSCALL(dup)
- 31b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret
-
-00000323 <getpid>:
-SYSCALL(getpid)
- 323:	b8 0b 00 00 00       	mov    $0xb,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret
-
-0000032b <sbrk>:
-SYSCALL(sbrk)
- 32b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret
-
-00000333 <sleep>:
-SYSCALL(sleep)
- 333:	b8 0d 00 00 00       	mov    $0xd,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret
-
-0000033b <uptime>:
-SYSCALL(uptime)
- 33b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret
- 343:	66 90                	xchg   %ax,%ax
- 345:	66 90                	xchg   %ax,%ax
- 347:	66 90                	xchg   %ax,%ax
- 349:	66 90                	xchg   %ax,%ax
- 34b:	66 90                	xchg   %ax,%ax
- 34d:	66 90                	xchg   %ax,%ax
- 34f:	90                   	nop
-
-00000350 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	57                   	push   %edi
- 354:	56                   	push   %esi
- 355:	53                   	push   %ebx
- 356:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 358:	89 d1                	mov    %edx,%ecx
-{
- 35a:	83 ec 3c             	sub    $0x3c,%esp
- 35d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 360:	85 d2                	test   %edx,%edx
- 362:	0f 89 80 00 00 00    	jns    3e8 <printint+0x98>
- 368:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 36c:	74 7a                	je     3e8 <printint+0x98>
-    x = -xx;
- 36e:	f7 d9                	neg    %ecx
-    neg = 1;
- 370:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 375:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 378:	31 f6                	xor    %esi,%esi
- 37a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 380:	89 c8                	mov    %ecx,%eax
- 382:	31 d2                	xor    %edx,%edx
- 384:	89 f7                	mov    %esi,%edi
- 386:	f7 f3                	div    %ebx
- 388:	8d 76 01             	lea    0x1(%esi),%esi
- 38b:	0f b6 92 80 07 00 00 	movzbl 0x780(%edx),%edx
- 392:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 396:	89 ca                	mov    %ecx,%edx
- 398:	89 c1                	mov    %eax,%ecx
- 39a:	39 da                	cmp    %ebx,%edx
- 39c:	73 e2                	jae    380 <printint+0x30>
-  if(neg)
- 39e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3a1:	85 c0                	test   %eax,%eax
- 3a3:	74 07                	je     3ac <printint+0x5c>
-    buf[i++] = '-';
- 3a5:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 3aa:	89 f7                	mov    %esi,%edi
- 3ac:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 3af:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 3b2:	01 df                	add    %ebx,%edi
- 3b4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 3b8:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 3bb:	83 ec 04             	sub    $0x4,%esp
- 3be:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3c1:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 3c4:	6a 01                	push   $0x1
- 3c6:	50                   	push   %eax
- 3c7:	56                   	push   %esi
- 3c8:	e8 f6 fe ff ff       	call   2c3 <write>
-  while(--i >= 0)
- 3cd:	89 f8                	mov    %edi,%eax
- 3cf:	83 c4 10             	add    $0x10,%esp
- 3d2:	83 ef 01             	sub    $0x1,%edi
- 3d5:	39 c3                	cmp    %eax,%ebx
- 3d7:	75 df                	jne    3b8 <printint+0x68>
-}
- 3d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3dc:	5b                   	pop    %ebx
- 3dd:	5e                   	pop    %esi
- 3de:	5f                   	pop    %edi
- 3df:	5d                   	pop    %ebp
- 3e0:	c3                   	ret
- 3e1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 3e8:	31 c0                	xor    %eax,%eax
- 3ea:	eb 89                	jmp    375 <printint+0x25>
- 3ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000003f0 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
- 3f4:	56                   	push   %esi
- 3f5:	53                   	push   %ebx
- 3f6:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 3f9:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 3fc:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 3ff:	0f b6 1e             	movzbl (%esi),%ebx
- 402:	83 c6 01             	add    $0x1,%esi
- 405:	84 db                	test   %bl,%bl
- 407:	74 67                	je     470 <printf+0x80>
- 409:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 40c:	31 d2                	xor    %edx,%edx
- 40e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 411:	eb 34                	jmp    447 <printf+0x57>
- 413:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 418:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 41b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 420:	83 f8 25             	cmp    $0x25,%eax
- 423:	74 18                	je     43d <printf+0x4d>
-  write(fd, &c, 1);
- 425:	83 ec 04             	sub    $0x4,%esp
- 428:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 42b:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 42e:	6a 01                	push   $0x1
- 430:	50                   	push   %eax
- 431:	57                   	push   %edi
- 432:	e8 8c fe ff ff       	call   2c3 <write>
- 437:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 43a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 43d:	0f b6 1e             	movzbl (%esi),%ebx
- 440:	83 c6 01             	add    $0x1,%esi
- 443:	84 db                	test   %bl,%bl
- 445:	74 29                	je     470 <printf+0x80>
-    c = fmt[i] & 0xff;
- 447:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 44a:	85 d2                	test   %edx,%edx
- 44c:	74 ca                	je     418 <printf+0x28>
-      }
-    } else if(state == '%'){
- 44e:	83 fa 25             	cmp    $0x25,%edx
- 451:	75 ea                	jne    43d <printf+0x4d>
-      if(c == 'd'){
- 453:	83 f8 25             	cmp    $0x25,%eax
- 456:	0f 84 04 01 00 00    	je     560 <printf+0x170>
- 45c:	83 e8 63             	sub    $0x63,%eax
- 45f:	83 f8 15             	cmp    $0x15,%eax
- 462:	77 1c                	ja     480 <printf+0x90>
- 464:	ff 24 85 28 07 00 00 	jmp    *0x728(,%eax,4)
- 46b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 470:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 473:	5b                   	pop    %ebx
- 474:	5e                   	pop    %esi
- 475:	5f                   	pop    %edi
- 476:	5d                   	pop    %ebp
- 477:	c3                   	ret
- 478:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 47f:	00 
-  write(fd, &c, 1);
- 480:	83 ec 04             	sub    $0x4,%esp
- 483:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 486:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 48a:	6a 01                	push   $0x1
- 48c:	52                   	push   %edx
- 48d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 490:	57                   	push   %edi
- 491:	e8 2d fe ff ff       	call   2c3 <write>
- 496:	83 c4 0c             	add    $0xc,%esp
- 499:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 49c:	6a 01                	push   $0x1
- 49e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 4a1:	52                   	push   %edx
- 4a2:	57                   	push   %edi
- 4a3:	e8 1b fe ff ff       	call   2c3 <write>
-        putc(fd, c);
- 4a8:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4ab:	31 d2                	xor    %edx,%edx
- 4ad:	eb 8e                	jmp    43d <printf+0x4d>
- 4af:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 4b0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4b3:	83 ec 0c             	sub    $0xc,%esp
- 4b6:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4bb:	8b 13                	mov    (%ebx),%edx
- 4bd:	6a 00                	push   $0x0
- 4bf:	89 f8                	mov    %edi,%eax
-        ap++;
- 4c1:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 4c4:	e8 87 fe ff ff       	call   350 <printint>
-        ap++;
- 4c9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 4cc:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4cf:	31 d2                	xor    %edx,%edx
- 4d1:	e9 67 ff ff ff       	jmp    43d <printf+0x4d>
-        s = (char*)*ap;
- 4d6:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4d9:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 4db:	83 c0 04             	add    $0x4,%eax
- 4de:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 4e1:	85 db                	test   %ebx,%ebx
- 4e3:	0f 84 87 00 00 00    	je     570 <printf+0x180>
-        while(*s != 0){
- 4e9:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 4ec:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 4ee:	84 c0                	test   %al,%al
- 4f0:	0f 84 47 ff ff ff    	je     43d <printf+0x4d>
- 4f6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 4f9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 4fc:	89 de                	mov    %ebx,%esi
- 4fe:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 500:	83 ec 04             	sub    $0x4,%esp
- 503:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 506:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 509:	6a 01                	push   $0x1
- 50b:	53                   	push   %ebx
- 50c:	57                   	push   %edi
- 50d:	e8 b1 fd ff ff       	call   2c3 <write>
-        while(*s != 0){
- 512:	0f b6 06             	movzbl (%esi),%eax
- 515:	83 c4 10             	add    $0x10,%esp
- 518:	84 c0                	test   %al,%al
- 51a:	75 e4                	jne    500 <printf+0x110>
-      state = 0;
- 51c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 51f:	31 d2                	xor    %edx,%edx
- 521:	e9 17 ff ff ff       	jmp    43d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 526:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 529:	83 ec 0c             	sub    $0xc,%esp
- 52c:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 531:	8b 13                	mov    (%ebx),%edx
- 533:	6a 01                	push   $0x1
- 535:	eb 88                	jmp    4bf <printf+0xcf>
-        putc(fd, *ap);
- 537:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 53a:	83 ec 04             	sub    $0x4,%esp
- 53d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 540:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 542:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 545:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 548:	6a 01                	push   $0x1
- 54a:	52                   	push   %edx
- 54b:	57                   	push   %edi
- 54c:	e8 72 fd ff ff       	call   2c3 <write>
-        ap++;
- 551:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 554:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 557:	31 d2                	xor    %edx,%edx
- 559:	e9 df fe ff ff       	jmp    43d <printf+0x4d>
- 55e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 560:	83 ec 04             	sub    $0x4,%esp
- 563:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 566:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 569:	6a 01                	push   $0x1
- 56b:	e9 31 ff ff ff       	jmp    4a1 <printf+0xb1>
- 570:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 575:	bb 1f 07 00 00       	mov    $0x71f,%ebx
- 57a:	e9 77 ff ff ff       	jmp    4f6 <printf+0x106>
- 57f:	90                   	nop
-
-00000580 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 580:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 581:	a1 20 0a 00 00       	mov    0xa20,%eax
-{
- 586:	89 e5                	mov    %esp,%ebp
- 588:	57                   	push   %edi
- 589:	56                   	push   %esi
- 58a:	53                   	push   %ebx
- 58b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 58e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 591:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 598:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 59a:	39 c8                	cmp    %ecx,%eax
- 59c:	73 32                	jae    5d0 <free+0x50>
- 59e:	39 d1                	cmp    %edx,%ecx
- 5a0:	72 04                	jb     5a6 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5a2:	39 d0                	cmp    %edx,%eax
- 5a4:	72 32                	jb     5d8 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 5a6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5a9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5ac:	39 fa                	cmp    %edi,%edx
- 5ae:	74 30                	je     5e0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5b0:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 5b3:	8b 50 04             	mov    0x4(%eax),%edx
- 5b6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5b9:	39 f1                	cmp    %esi,%ecx
- 5bb:	74 3a                	je     5f7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 5bd:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 5bf:	5b                   	pop    %ebx
-  freep = p;
- 5c0:	a3 20 0a 00 00       	mov    %eax,0xa20
-}
- 5c5:	5e                   	pop    %esi
- 5c6:	5f                   	pop    %edi
- 5c7:	5d                   	pop    %ebp
- 5c8:	c3                   	ret
- 5c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5d0:	39 d0                	cmp    %edx,%eax
- 5d2:	72 04                	jb     5d8 <free+0x58>
- 5d4:	39 d1                	cmp    %edx,%ecx
- 5d6:	72 ce                	jb     5a6 <free+0x26>
-{
- 5d8:	89 d0                	mov    %edx,%eax
- 5da:	eb bc                	jmp    598 <free+0x18>
- 5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 5e0:	03 72 04             	add    0x4(%edx),%esi
- 5e3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5e6:	8b 10                	mov    (%eax),%edx
- 5e8:	8b 12                	mov    (%edx),%edx
- 5ea:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 5ed:	8b 50 04             	mov    0x4(%eax),%edx
- 5f0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5f3:	39 f1                	cmp    %esi,%ecx
- 5f5:	75 c6                	jne    5bd <free+0x3d>
-    p->s.size += bp->s.size;
- 5f7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 5fa:	a3 20 0a 00 00       	mov    %eax,0xa20
-    p->s.size += bp->s.size;
- 5ff:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 602:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 605:	89 08                	mov    %ecx,(%eax)
-}
- 607:	5b                   	pop    %ebx
- 608:	5e                   	pop    %esi
- 609:	5f                   	pop    %edi
- 60a:	5d                   	pop    %ebp
- 60b:	c3                   	ret
- 60c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000610 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 610:	55                   	push   %ebp
- 611:	89 e5                	mov    %esp,%ebp
- 613:	57                   	push   %edi
- 614:	56                   	push   %esi
- 615:	53                   	push   %ebx
- 616:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 619:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 61c:	8b 15 20 0a 00 00    	mov    0xa20,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 622:	8d 78 07             	lea    0x7(%eax),%edi
- 625:	c1 ef 03             	shr    $0x3,%edi
- 628:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 62b:	85 d2                	test   %edx,%edx
- 62d:	0f 84 8d 00 00 00    	je     6c0 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 633:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 635:	8b 48 04             	mov    0x4(%eax),%ecx
- 638:	39 f9                	cmp    %edi,%ecx
- 63a:	73 64                	jae    6a0 <malloc+0x90>
-  if(nu < 4096)
- 63c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 641:	39 df                	cmp    %ebx,%edi
- 643:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 646:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 64d:	eb 0a                	jmp    659 <malloc+0x49>
- 64f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 650:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 652:	8b 48 04             	mov    0x4(%eax),%ecx
- 655:	39 f9                	cmp    %edi,%ecx
- 657:	73 47                	jae    6a0 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 659:	89 c2                	mov    %eax,%edx
- 65b:	3b 05 20 0a 00 00    	cmp    0xa20,%eax
- 661:	75 ed                	jne    650 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 663:	83 ec 0c             	sub    $0xc,%esp
- 666:	56                   	push   %esi
- 667:	e8 bf fc ff ff       	call   32b <sbrk>
-  if(p == (char*)-1)
- 66c:	83 c4 10             	add    $0x10,%esp
- 66f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 672:	74 1c                	je     690 <malloc+0x80>
-  hp->s.size = nu;
- 674:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 677:	83 ec 0c             	sub    $0xc,%esp
- 67a:	83 c0 08             	add    $0x8,%eax
- 67d:	50                   	push   %eax
- 67e:	e8 fd fe ff ff       	call   580 <free>
-  return freep;
- 683:	8b 15 20 0a 00 00    	mov    0xa20,%edx
-      if((p = morecore(nunits)) == 0)
- 689:	83 c4 10             	add    $0x10,%esp
- 68c:	85 d2                	test   %edx,%edx
- 68e:	75 c0                	jne    650 <malloc+0x40>
-        return 0;
-  }
-}
- 690:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 693:	31 c0                	xor    %eax,%eax
-}
- 695:	5b                   	pop    %ebx
- 696:	5e                   	pop    %esi
- 697:	5f                   	pop    %edi
- 698:	5d                   	pop    %ebp
- 699:	c3                   	ret
- 69a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 6a0:	39 cf                	cmp    %ecx,%edi
- 6a2:	74 4c                	je     6f0 <malloc+0xe0>
-        p->s.size -= nunits;
- 6a4:	29 f9                	sub    %edi,%ecx
- 6a6:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 6a9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 6ac:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 6af:	89 15 20 0a 00 00    	mov    %edx,0xa20
-}
- 6b5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 6b8:	83 c0 08             	add    $0x8,%eax
-}
- 6bb:	5b                   	pop    %ebx
- 6bc:	5e                   	pop    %esi
- 6bd:	5f                   	pop    %edi
- 6be:	5d                   	pop    %ebp
- 6bf:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 6c0:	c7 05 20 0a 00 00 24 	movl   $0xa24,0xa20
- 6c7:	0a 00 00 
-    base.s.size = 0;
- 6ca:	b8 24 0a 00 00       	mov    $0xa24,%eax
-    base.s.ptr = freep = prevp = &base;
- 6cf:	c7 05 24 0a 00 00 24 	movl   $0xa24,0xa24
- 6d6:	0a 00 00 
-    base.s.size = 0;
- 6d9:	c7 05 28 0a 00 00 00 	movl   $0x0,0xa28
- 6e0:	00 00 00 
-    if(p->s.size >= nunits){
- 6e3:	e9 54 ff ff ff       	jmp    63c <malloc+0x2c>
- 6e8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 6ef:	00 
-        prevp->s.ptr = p->s.ptr;
- 6f0:	8b 08                	mov    (%eax),%ecx
- 6f2:	89 0a                	mov    %ecx,(%edx)
- 6f4:	eb b9                	jmp    6af <malloc+0x9f>
diff --git a/ln.d b/ln.d
deleted file mode 100644
index 6728be9..0000000
--- a/ln.d
+++ /dev/null
@@ -1 +0,0 @@
-ln.o: ln.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/ln.o b/ln.o
deleted file mode 100644
index 41595a4..0000000
Binary files a/ln.o and /dev/null differ
diff --git a/ln.sym b/ln.sym
deleted file mode 100644
index 41bd299..0000000
--- a/ln.sym
+++ /dev/null
@@ -1,45 +0,0 @@
-00000000 ln.c
-00000000 ulib.c
-00000000 printf.c
-00000350 printint
-00000780 digits.0
-00000000 umalloc.c
-00000a20 freep
-00000a24 base
-00000060 strcpy
-000003f0 printf
-00000270 memmove
-000002eb mknod
-00000180 gets
-00000323 getpid
-00000610 malloc
-00000333 sleep
-000002b3 pipe
-000002c3 write
-000002fb fstat
-000002d3 kill
-00000313 chdir
-000002db exec
-000002ab wait
-000002bb read
-000002f3 unlink
-0000029b fork
-0000032b sbrk
-0000033b uptime
-00000a20 __bss_start
-00000120 memset
-00000000 main
-00000090 strcmp
-0000031b dup
-000001e0 stat
-00000a20 _edata
-00000a2c _end
-00000303 link
-000002a3 exit
-00000230 atoi
-000000f0 strlen
-000002e3 open
-00000140 strchr
-0000030b mkdir
-000002cb close
-00000580 free
diff --git a/log.d b/log.d
deleted file mode 100644
index 04c8930..0000000
--- a/log.d
+++ /dev/null
@@ -1,2 +0,0 @@
-log.o: log.c /usr/include/stdc-predef.h types.h defs.h param.h spinlock.h \
- sleeplock.h fs.h buf.h
diff --git a/log.o b/log.o
deleted file mode 100644
index 17e0b7d..0000000
Binary files a/log.o and /dev/null differ
diff --git a/ls.asm b/ls.asm
deleted file mode 100644
index 5722c67..0000000
--- a/ls.asm
+++ /dev/null
@@ -1,1406 +0,0 @@
-
-_ls:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  close(fd);
-}
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	57                   	push   %edi
-   e:	56                   	push   %esi
-   f:	53                   	push   %ebx
-  10:	bb 01 00 00 00       	mov    $0x1,%ebx
-  15:	51                   	push   %ecx
-  16:	83 ec 08             	sub    $0x8,%esp
-  19:	8b 31                	mov    (%ecx),%esi
-  1b:	8b 79 04             	mov    0x4(%ecx),%edi
-  int i;
-
-  if(argc < 2){
-  1e:	83 fe 01             	cmp    $0x1,%esi
-  21:	7e 1f                	jle    42 <main+0x42>
-  23:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    ls(".");
-    exit();
-  }
-  for(i=1; i<argc; i++)
-    ls(argv[i]);
-  28:	83 ec 0c             	sub    $0xc,%esp
-  2b:	ff 34 9f             	push   (%edi,%ebx,4)
-  for(i=1; i<argc; i++)
-  2e:	83 c3 01             	add    $0x1,%ebx
-    ls(argv[i]);
-  31:	e8 ca 00 00 00       	call   100 <ls>
-  for(i=1; i<argc; i++)
-  36:	83 c4 10             	add    $0x10,%esp
-  39:	39 de                	cmp    %ebx,%esi
-  3b:	75 eb                	jne    28 <main+0x28>
-  exit();
-  3d:	e8 31 05 00 00       	call   573 <exit>
-    ls(".");
-  42:	83 ec 0c             	sub    $0xc,%esp
-  45:	68 10 0a 00 00       	push   $0xa10
-  4a:	e8 b1 00 00 00       	call   100 <ls>
-    exit();
-  4f:	e8 1f 05 00 00       	call   573 <exit>
-  54:	66 90                	xchg   %ax,%ax
-  56:	66 90                	xchg   %ax,%ax
-  58:	66 90                	xchg   %ax,%ax
-  5a:	66 90                	xchg   %ax,%ax
-  5c:	66 90                	xchg   %ax,%ax
-  5e:	66 90                	xchg   %ax,%ax
-
-00000060 <fmtname>:
-{
-  60:	55                   	push   %ebp
-  61:	89 e5                	mov    %esp,%ebp
-  63:	56                   	push   %esi
-  64:	53                   	push   %ebx
-  65:	8b 75 08             	mov    0x8(%ebp),%esi
-  for(p=path+strlen(path); p >= path && *p != '/'; p--)
-  68:	83 ec 0c             	sub    $0xc,%esp
-  6b:	56                   	push   %esi
-  6c:	e8 4f 03 00 00       	call   3c0 <strlen>
-  71:	83 c4 10             	add    $0x10,%esp
-  74:	01 f0                	add    %esi,%eax
-  76:	89 c3                	mov    %eax,%ebx
-  78:	73 0f                	jae    89 <fmtname+0x29>
-  7a:	eb 12                	jmp    8e <fmtname+0x2e>
-  7c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  80:	8d 43 ff             	lea    -0x1(%ebx),%eax
-  83:	39 f0                	cmp    %esi,%eax
-  85:	72 0a                	jb     91 <fmtname+0x31>
-  87:	89 c3                	mov    %eax,%ebx
-  89:	80 3b 2f             	cmpb   $0x2f,(%ebx)
-  8c:	75 f2                	jne    80 <fmtname+0x20>
-  p++;
-  8e:	83 c3 01             	add    $0x1,%ebx
-  if(strlen(p) >= DIRSIZ)
-  91:	83 ec 0c             	sub    $0xc,%esp
-  94:	53                   	push   %ebx
-  95:	e8 26 03 00 00       	call   3c0 <strlen>
-  9a:	83 c4 10             	add    $0x10,%esp
-  9d:	83 f8 0d             	cmp    $0xd,%eax
-  a0:	77 4a                	ja     ec <fmtname+0x8c>
-  memmove(buf, p, strlen(p));
-  a2:	83 ec 0c             	sub    $0xc,%esp
-  a5:	53                   	push   %ebx
-  a6:	e8 15 03 00 00       	call   3c0 <strlen>
-  ab:	83 c4 0c             	add    $0xc,%esp
-  ae:	50                   	push   %eax
-  af:	53                   	push   %ebx
-  b0:	68 98 0d 00 00       	push   $0xd98
-  b5:	e8 86 04 00 00       	call   540 <memmove>
-  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
-  ba:	89 1c 24             	mov    %ebx,(%esp)
-  bd:	e8 fe 02 00 00       	call   3c0 <strlen>
-  c2:	89 1c 24             	mov    %ebx,(%esp)
-  return buf;
-  c5:	bb 98 0d 00 00       	mov    $0xd98,%ebx
-  memset(buf+strlen(p), ' ', DIRSIZ-strlen(p));
-  ca:	89 c6                	mov    %eax,%esi
-  cc:	e8 ef 02 00 00       	call   3c0 <strlen>
-  d1:	ba 0e 00 00 00       	mov    $0xe,%edx
-  d6:	83 c4 0c             	add    $0xc,%esp
-  d9:	29 f2                	sub    %esi,%edx
-  db:	05 98 0d 00 00       	add    $0xd98,%eax
-  e0:	52                   	push   %edx
-  e1:	6a 20                	push   $0x20
-  e3:	50                   	push   %eax
-  e4:	e8 07 03 00 00       	call   3f0 <memset>
-  return buf;
-  e9:	83 c4 10             	add    $0x10,%esp
-}
-  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp
-  ef:	89 d8                	mov    %ebx,%eax
-  f1:	5b                   	pop    %ebx
-  f2:	5e                   	pop    %esi
-  f3:	5d                   	pop    %ebp
-  f4:	c3                   	ret
-  f5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  fc:	00 
-  fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000100 <ls>:
-{
- 100:	55                   	push   %ebp
- 101:	89 e5                	mov    %esp,%ebp
- 103:	57                   	push   %edi
- 104:	56                   	push   %esi
- 105:	53                   	push   %ebx
- 106:	81 ec 64 02 00 00    	sub    $0x264,%esp
- 10c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  if((fd = open(path, 0)) < 0){
- 10f:	6a 00                	push   $0x0
- 111:	57                   	push   %edi
- 112:	e8 9c 04 00 00       	call   5b3 <open>
- 117:	83 c4 10             	add    $0x10,%esp
- 11a:	85 c0                	test   %eax,%eax
- 11c:	0f 88 8e 01 00 00    	js     2b0 <ls+0x1b0>
-  if(fstat(fd, &st) < 0){
- 122:	83 ec 08             	sub    $0x8,%esp
- 125:	8d b5 d4 fd ff ff    	lea    -0x22c(%ebp),%esi
- 12b:	89 c3                	mov    %eax,%ebx
- 12d:	56                   	push   %esi
- 12e:	50                   	push   %eax
- 12f:	e8 97 04 00 00       	call   5cb <fstat>
- 134:	83 c4 10             	add    $0x10,%esp
- 137:	85 c0                	test   %eax,%eax
- 139:	0f 88 b1 01 00 00    	js     2f0 <ls+0x1f0>
-  switch(st.type){
- 13f:	0f b7 85 d4 fd ff ff 	movzwl -0x22c(%ebp),%eax
- 146:	66 83 f8 01          	cmp    $0x1,%ax
- 14a:	74 54                	je     1a0 <ls+0xa0>
- 14c:	66 83 f8 02          	cmp    $0x2,%ax
- 150:	75 37                	jne    189 <ls+0x89>
-    printf(1, "%s %d %d %d\n", fmtname(path), st.type, st.ino, st.size);
- 152:	8b 95 e4 fd ff ff    	mov    -0x21c(%ebp),%edx
- 158:	83 ec 0c             	sub    $0xc,%esp
- 15b:	8b b5 dc fd ff ff    	mov    -0x224(%ebp),%esi
- 161:	89 95 b4 fd ff ff    	mov    %edx,-0x24c(%ebp)
- 167:	57                   	push   %edi
- 168:	e8 f3 fe ff ff       	call   60 <fmtname>
- 16d:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
- 173:	59                   	pop    %ecx
- 174:	5f                   	pop    %edi
- 175:	52                   	push   %edx
- 176:	56                   	push   %esi
- 177:	6a 02                	push   $0x2
- 179:	50                   	push   %eax
- 17a:	68 f0 09 00 00       	push   $0x9f0
- 17f:	6a 01                	push   $0x1
- 181:	e8 3a 05 00 00       	call   6c0 <printf>
-    break;
- 186:	83 c4 20             	add    $0x20,%esp
-  close(fd);
- 189:	83 ec 0c             	sub    $0xc,%esp
- 18c:	53                   	push   %ebx
- 18d:	e8 09 04 00 00       	call   59b <close>
- 192:	83 c4 10             	add    $0x10,%esp
-}
- 195:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 198:	5b                   	pop    %ebx
- 199:	5e                   	pop    %esi
- 19a:	5f                   	pop    %edi
- 19b:	5d                   	pop    %ebp
- 19c:	c3                   	ret
- 19d:	8d 76 00             	lea    0x0(%esi),%esi
-    if(strlen(path) + 1 + DIRSIZ + 1 > sizeof buf){
- 1a0:	83 ec 0c             	sub    $0xc,%esp
- 1a3:	57                   	push   %edi
- 1a4:	e8 17 02 00 00       	call   3c0 <strlen>
- 1a9:	83 c4 10             	add    $0x10,%esp
- 1ac:	83 c0 10             	add    $0x10,%eax
- 1af:	3d 00 02 00 00       	cmp    $0x200,%eax
- 1b4:	0f 87 16 01 00 00    	ja     2d0 <ls+0x1d0>
-    strcpy(buf, path);
- 1ba:	83 ec 08             	sub    $0x8,%esp
- 1bd:	57                   	push   %edi
- 1be:	8d bd e8 fd ff ff    	lea    -0x218(%ebp),%edi
- 1c4:	57                   	push   %edi
- 1c5:	e8 66 01 00 00       	call   330 <strcpy>
-    p = buf+strlen(buf);
- 1ca:	89 3c 24             	mov    %edi,(%esp)
- 1cd:	e8 ee 01 00 00       	call   3c0 <strlen>
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
- 1d2:	83 c4 10             	add    $0x10,%esp
-    p = buf+strlen(buf);
- 1d5:	01 f8                	add    %edi,%eax
-    *p++ = '/';
- 1d7:	8d 48 01             	lea    0x1(%eax),%ecx
-    p = buf+strlen(buf);
- 1da:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
-    *p++ = '/';
- 1e0:	89 8d a4 fd ff ff    	mov    %ecx,-0x25c(%ebp)
- 1e6:	c6 00 2f             	movb   $0x2f,(%eax)
-    while(read(fd, &de, sizeof(de)) == sizeof(de)){
- 1e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
- 1f0:	83 ec 04             	sub    $0x4,%esp
- 1f3:	8d 85 c4 fd ff ff    	lea    -0x23c(%ebp),%eax
- 1f9:	6a 10                	push   $0x10
- 1fb:	50                   	push   %eax
- 1fc:	53                   	push   %ebx
- 1fd:	e8 89 03 00 00       	call   58b <read>
- 202:	83 c4 10             	add    $0x10,%esp
- 205:	83 f8 10             	cmp    $0x10,%eax
- 208:	0f 85 7b ff ff ff    	jne    189 <ls+0x89>
-      if(de.inum == 0)
- 20e:	66 83 bd c4 fd ff ff 	cmpw   $0x0,-0x23c(%ebp)
- 215:	00 
- 216:	74 d8                	je     1f0 <ls+0xf0>
-      memmove(p, de.name, DIRSIZ);
- 218:	83 ec 04             	sub    $0x4,%esp
- 21b:	8d 85 c6 fd ff ff    	lea    -0x23a(%ebp),%eax
- 221:	6a 0e                	push   $0xe
- 223:	50                   	push   %eax
- 224:	ff b5 a4 fd ff ff    	push   -0x25c(%ebp)
- 22a:	e8 11 03 00 00       	call   540 <memmove>
-      p[DIRSIZ] = 0;
- 22f:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
- 235:	c6 40 0f 00          	movb   $0x0,0xf(%eax)
-      if(stat(buf, &st) < 0){
- 239:	58                   	pop    %eax
- 23a:	5a                   	pop    %edx
- 23b:	56                   	push   %esi
- 23c:	57                   	push   %edi
- 23d:	e8 6e 02 00 00       	call   4b0 <stat>
- 242:	83 c4 10             	add    $0x10,%esp
- 245:	85 c0                	test   %eax,%eax
- 247:	0f 88 cb 00 00 00    	js     318 <ls+0x218>
-      printf(1, "%s %d %d %d\n", fmtname(buf), st.type, st.ino, st.size);
- 24d:	8b 8d e4 fd ff ff    	mov    -0x21c(%ebp),%ecx
- 253:	8b 95 dc fd ff ff    	mov    -0x224(%ebp),%edx
- 259:	83 ec 0c             	sub    $0xc,%esp
- 25c:	0f bf 85 d4 fd ff ff 	movswl -0x22c(%ebp),%eax
- 263:	89 8d ac fd ff ff    	mov    %ecx,-0x254(%ebp)
- 269:	89 95 b0 fd ff ff    	mov    %edx,-0x250(%ebp)
- 26f:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
- 275:	57                   	push   %edi
- 276:	e8 e5 fd ff ff       	call   60 <fmtname>
- 27b:	5a                   	pop    %edx
- 27c:	59                   	pop    %ecx
- 27d:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
- 283:	51                   	push   %ecx
- 284:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
- 28a:	52                   	push   %edx
- 28b:	ff b5 b4 fd ff ff    	push   -0x24c(%ebp)
- 291:	50                   	push   %eax
- 292:	68 f0 09 00 00       	push   $0x9f0
- 297:	6a 01                	push   $0x1
- 299:	e8 22 04 00 00       	call   6c0 <printf>
- 29e:	83 c4 20             	add    $0x20,%esp
- 2a1:	e9 4a ff ff ff       	jmp    1f0 <ls+0xf0>
- 2a6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2ad:	00 
- 2ae:	66 90                	xchg   %ax,%ax
-    printf(2, "ls: cannot open %s\n", path);
- 2b0:	83 ec 04             	sub    $0x4,%esp
- 2b3:	57                   	push   %edi
- 2b4:	68 c8 09 00 00       	push   $0x9c8
- 2b9:	6a 02                	push   $0x2
- 2bb:	e8 00 04 00 00       	call   6c0 <printf>
-    return;
- 2c0:	83 c4 10             	add    $0x10,%esp
-}
- 2c3:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 2c6:	5b                   	pop    %ebx
- 2c7:	5e                   	pop    %esi
- 2c8:	5f                   	pop    %edi
- 2c9:	5d                   	pop    %ebp
- 2ca:	c3                   	ret
- 2cb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      printf(1, "ls: path too long\n");
- 2d0:	83 ec 08             	sub    $0x8,%esp
- 2d3:	68 fd 09 00 00       	push   $0x9fd
- 2d8:	6a 01                	push   $0x1
- 2da:	e8 e1 03 00 00       	call   6c0 <printf>
-      break;
- 2df:	83 c4 10             	add    $0x10,%esp
- 2e2:	e9 a2 fe ff ff       	jmp    189 <ls+0x89>
- 2e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2ee:	00 
- 2ef:	90                   	nop
-    printf(2, "ls: cannot stat %s\n", path);
- 2f0:	83 ec 04             	sub    $0x4,%esp
- 2f3:	57                   	push   %edi
- 2f4:	68 dc 09 00 00       	push   $0x9dc
- 2f9:	6a 02                	push   $0x2
- 2fb:	e8 c0 03 00 00       	call   6c0 <printf>
-    close(fd);
- 300:	89 1c 24             	mov    %ebx,(%esp)
- 303:	e8 93 02 00 00       	call   59b <close>
-    return;
- 308:	83 c4 10             	add    $0x10,%esp
-}
- 30b:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 30e:	5b                   	pop    %ebx
- 30f:	5e                   	pop    %esi
- 310:	5f                   	pop    %edi
- 311:	5d                   	pop    %ebp
- 312:	c3                   	ret
- 313:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        printf(1, "ls: cannot stat %s\n", buf);
- 318:	83 ec 04             	sub    $0x4,%esp
- 31b:	57                   	push   %edi
- 31c:	68 dc 09 00 00       	push   $0x9dc
- 321:	6a 01                	push   $0x1
- 323:	e8 98 03 00 00       	call   6c0 <printf>
-        continue;
- 328:	83 c4 10             	add    $0x10,%esp
- 32b:	e9 c0 fe ff ff       	jmp    1f0 <ls+0xf0>
-
-00000330 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 330:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 331:	31 c0                	xor    %eax,%eax
-{
- 333:	89 e5                	mov    %esp,%ebp
- 335:	53                   	push   %ebx
- 336:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 339:	8b 5d 0c             	mov    0xc(%ebp),%ebx
- 33c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
- 340:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 344:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 347:	83 c0 01             	add    $0x1,%eax
- 34a:	84 d2                	test   %dl,%dl
- 34c:	75 f2                	jne    340 <strcpy+0x10>
-    ;
-  return os;
-}
- 34e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 351:	89 c8                	mov    %ecx,%eax
- 353:	c9                   	leave
- 354:	c3                   	ret
- 355:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 35c:	00 
- 35d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000360 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 360:	55                   	push   %ebp
- 361:	89 e5                	mov    %esp,%ebp
- 363:	53                   	push   %ebx
- 364:	8b 55 08             	mov    0x8(%ebp),%edx
- 367:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 36a:	0f b6 02             	movzbl (%edx),%eax
- 36d:	84 c0                	test   %al,%al
- 36f:	75 17                	jne    388 <strcmp+0x28>
- 371:	eb 3a                	jmp    3ad <strcmp+0x4d>
- 373:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 378:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
- 37c:	83 c2 01             	add    $0x1,%edx
- 37f:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
- 382:	84 c0                	test   %al,%al
- 384:	74 1a                	je     3a0 <strcmp+0x40>
- 386:	89 d9                	mov    %ebx,%ecx
- 388:	0f b6 19             	movzbl (%ecx),%ebx
- 38b:	38 c3                	cmp    %al,%bl
- 38d:	74 e9                	je     378 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
- 38f:	29 d8                	sub    %ebx,%eax
-}
- 391:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 394:	c9                   	leave
- 395:	c3                   	ret
- 396:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 39d:	00 
- 39e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
- 3a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 3a4:	31 c0                	xor    %eax,%eax
- 3a6:	29 d8                	sub    %ebx,%eax
-}
- 3a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 3ab:	c9                   	leave
- 3ac:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
- 3ad:	0f b6 19             	movzbl (%ecx),%ebx
- 3b0:	31 c0                	xor    %eax,%eax
- 3b2:	eb db                	jmp    38f <strcmp+0x2f>
- 3b4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 3bb:	00 
- 3bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000003c0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 3c0:	55                   	push   %ebp
- 3c1:	89 e5                	mov    %esp,%ebp
- 3c3:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 3c6:	80 3a 00             	cmpb   $0x0,(%edx)
- 3c9:	74 15                	je     3e0 <strlen+0x20>
- 3cb:	31 c0                	xor    %eax,%eax
- 3cd:	8d 76 00             	lea    0x0(%esi),%esi
- 3d0:	83 c0 01             	add    $0x1,%eax
- 3d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 3d7:	89 c1                	mov    %eax,%ecx
- 3d9:	75 f5                	jne    3d0 <strlen+0x10>
-    ;
-  return n;
-}
- 3db:	89 c8                	mov    %ecx,%eax
- 3dd:	5d                   	pop    %ebp
- 3de:	c3                   	ret
- 3df:	90                   	nop
-  for(n = 0; s[n]; n++)
- 3e0:	31 c9                	xor    %ecx,%ecx
-}
- 3e2:	5d                   	pop    %ebp
- 3e3:	89 c8                	mov    %ecx,%eax
- 3e5:	c3                   	ret
- 3e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 3ed:	00 
- 3ee:	66 90                	xchg   %ax,%ax
-
-000003f0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 3f0:	55                   	push   %ebp
- 3f1:	89 e5                	mov    %esp,%ebp
- 3f3:	57                   	push   %edi
- 3f4:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 3f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 3fa:	8b 45 0c             	mov    0xc(%ebp),%eax
- 3fd:	89 d7                	mov    %edx,%edi
- 3ff:	fc                   	cld
- 400:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 402:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 405:	89 d0                	mov    %edx,%eax
- 407:	c9                   	leave
- 408:	c3                   	ret
- 409:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000410 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	8b 45 08             	mov    0x8(%ebp),%eax
- 416:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 41a:	0f b6 10             	movzbl (%eax),%edx
- 41d:	84 d2                	test   %dl,%dl
- 41f:	75 12                	jne    433 <strchr+0x23>
- 421:	eb 1d                	jmp    440 <strchr+0x30>
- 423:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 428:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 42c:	83 c0 01             	add    $0x1,%eax
- 42f:	84 d2                	test   %dl,%dl
- 431:	74 0d                	je     440 <strchr+0x30>
-    if(*s == c)
- 433:	38 d1                	cmp    %dl,%cl
- 435:	75 f1                	jne    428 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 437:	5d                   	pop    %ebp
- 438:	c3                   	ret
- 439:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 440:	31 c0                	xor    %eax,%eax
-}
- 442:	5d                   	pop    %ebp
- 443:	c3                   	ret
- 444:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 44b:	00 
- 44c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000450 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 450:	55                   	push   %ebp
- 451:	89 e5                	mov    %esp,%ebp
- 453:	57                   	push   %edi
- 454:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 455:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 458:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 459:	31 db                	xor    %ebx,%ebx
-{
- 45b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 45e:	eb 27                	jmp    487 <gets+0x37>
-    cc = read(0, &c, 1);
- 460:	83 ec 04             	sub    $0x4,%esp
- 463:	6a 01                	push   $0x1
- 465:	56                   	push   %esi
- 466:	6a 00                	push   $0x0
- 468:	e8 1e 01 00 00       	call   58b <read>
-    if(cc < 1)
- 46d:	83 c4 10             	add    $0x10,%esp
- 470:	85 c0                	test   %eax,%eax
- 472:	7e 1d                	jle    491 <gets+0x41>
-      break;
-    buf[i++] = c;
- 474:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 478:	8b 55 08             	mov    0x8(%ebp),%edx
- 47b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 47f:	3c 0a                	cmp    $0xa,%al
- 481:	74 10                	je     493 <gets+0x43>
- 483:	3c 0d                	cmp    $0xd,%al
- 485:	74 0c                	je     493 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 487:	89 df                	mov    %ebx,%edi
- 489:	83 c3 01             	add    $0x1,%ebx
- 48c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 48f:	7c cf                	jl     460 <gets+0x10>
- 491:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 493:	8b 45 08             	mov    0x8(%ebp),%eax
- 496:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 49a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 49d:	5b                   	pop    %ebx
- 49e:	5e                   	pop    %esi
- 49f:	5f                   	pop    %edi
- 4a0:	5d                   	pop    %ebp
- 4a1:	c3                   	ret
- 4a2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 4a9:	00 
- 4aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000004b0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 4b0:	55                   	push   %ebp
- 4b1:	89 e5                	mov    %esp,%ebp
- 4b3:	56                   	push   %esi
- 4b4:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 4b5:	83 ec 08             	sub    $0x8,%esp
- 4b8:	6a 00                	push   $0x0
- 4ba:	ff 75 08             	push   0x8(%ebp)
- 4bd:	e8 f1 00 00 00       	call   5b3 <open>
-  if(fd < 0)
- 4c2:	83 c4 10             	add    $0x10,%esp
- 4c5:	85 c0                	test   %eax,%eax
- 4c7:	78 27                	js     4f0 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 4c9:	83 ec 08             	sub    $0x8,%esp
- 4cc:	ff 75 0c             	push   0xc(%ebp)
- 4cf:	89 c3                	mov    %eax,%ebx
- 4d1:	50                   	push   %eax
- 4d2:	e8 f4 00 00 00       	call   5cb <fstat>
-  close(fd);
- 4d7:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 4da:	89 c6                	mov    %eax,%esi
-  close(fd);
- 4dc:	e8 ba 00 00 00       	call   59b <close>
-  return r;
- 4e1:	83 c4 10             	add    $0x10,%esp
-}
- 4e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 4e7:	89 f0                	mov    %esi,%eax
- 4e9:	5b                   	pop    %ebx
- 4ea:	5e                   	pop    %esi
- 4eb:	5d                   	pop    %ebp
- 4ec:	c3                   	ret
- 4ed:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 4f0:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 4f5:	eb ed                	jmp    4e4 <stat+0x34>
- 4f7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 4fe:	00 
- 4ff:	90                   	nop
-
-00000500 <atoi>:
-
-int
-atoi(const char *s)
-{
- 500:	55                   	push   %ebp
- 501:	89 e5                	mov    %esp,%ebp
- 503:	53                   	push   %ebx
- 504:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 507:	0f be 02             	movsbl (%edx),%eax
- 50a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 50d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 510:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 515:	77 1e                	ja     535 <atoi+0x35>
- 517:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 51e:	00 
- 51f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 520:	83 c2 01             	add    $0x1,%edx
- 523:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 526:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 52a:	0f be 02             	movsbl (%edx),%eax
- 52d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 530:	80 fb 09             	cmp    $0x9,%bl
- 533:	76 eb                	jbe    520 <atoi+0x20>
-  return n;
-}
- 535:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 538:	89 c8                	mov    %ecx,%eax
- 53a:	c9                   	leave
- 53b:	c3                   	ret
- 53c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000540 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 540:	55                   	push   %ebp
- 541:	89 e5                	mov    %esp,%ebp
- 543:	57                   	push   %edi
- 544:	8b 45 10             	mov    0x10(%ebp),%eax
- 547:	8b 55 08             	mov    0x8(%ebp),%edx
- 54a:	56                   	push   %esi
- 54b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 54e:	85 c0                	test   %eax,%eax
- 550:	7e 13                	jle    565 <memmove+0x25>
- 552:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 554:	89 d7                	mov    %edx,%edi
- 556:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 55d:	00 
- 55e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 560:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 561:	39 f8                	cmp    %edi,%eax
- 563:	75 fb                	jne    560 <memmove+0x20>
-  return vdst;
-}
- 565:	5e                   	pop    %esi
- 566:	89 d0                	mov    %edx,%eax
- 568:	5f                   	pop    %edi
- 569:	5d                   	pop    %ebp
- 56a:	c3                   	ret
-
-0000056b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 56b:	b8 01 00 00 00       	mov    $0x1,%eax
- 570:	cd 40                	int    $0x40
- 572:	c3                   	ret
-
-00000573 <exit>:
-SYSCALL(exit)
- 573:	b8 02 00 00 00       	mov    $0x2,%eax
- 578:	cd 40                	int    $0x40
- 57a:	c3                   	ret
-
-0000057b <wait>:
-SYSCALL(wait)
- 57b:	b8 03 00 00 00       	mov    $0x3,%eax
- 580:	cd 40                	int    $0x40
- 582:	c3                   	ret
-
-00000583 <pipe>:
-SYSCALL(pipe)
- 583:	b8 04 00 00 00       	mov    $0x4,%eax
- 588:	cd 40                	int    $0x40
- 58a:	c3                   	ret
-
-0000058b <read>:
-SYSCALL(read)
- 58b:	b8 05 00 00 00       	mov    $0x5,%eax
- 590:	cd 40                	int    $0x40
- 592:	c3                   	ret
-
-00000593 <write>:
-SYSCALL(write)
- 593:	b8 10 00 00 00       	mov    $0x10,%eax
- 598:	cd 40                	int    $0x40
- 59a:	c3                   	ret
-
-0000059b <close>:
-SYSCALL(close)
- 59b:	b8 15 00 00 00       	mov    $0x15,%eax
- 5a0:	cd 40                	int    $0x40
- 5a2:	c3                   	ret
-
-000005a3 <kill>:
-SYSCALL(kill)
- 5a3:	b8 06 00 00 00       	mov    $0x6,%eax
- 5a8:	cd 40                	int    $0x40
- 5aa:	c3                   	ret
-
-000005ab <exec>:
-SYSCALL(exec)
- 5ab:	b8 07 00 00 00       	mov    $0x7,%eax
- 5b0:	cd 40                	int    $0x40
- 5b2:	c3                   	ret
-
-000005b3 <open>:
-SYSCALL(open)
- 5b3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 5b8:	cd 40                	int    $0x40
- 5ba:	c3                   	ret
-
-000005bb <mknod>:
-SYSCALL(mknod)
- 5bb:	b8 11 00 00 00       	mov    $0x11,%eax
- 5c0:	cd 40                	int    $0x40
- 5c2:	c3                   	ret
-
-000005c3 <unlink>:
-SYSCALL(unlink)
- 5c3:	b8 12 00 00 00       	mov    $0x12,%eax
- 5c8:	cd 40                	int    $0x40
- 5ca:	c3                   	ret
-
-000005cb <fstat>:
-SYSCALL(fstat)
- 5cb:	b8 08 00 00 00       	mov    $0x8,%eax
- 5d0:	cd 40                	int    $0x40
- 5d2:	c3                   	ret
-
-000005d3 <link>:
-SYSCALL(link)
- 5d3:	b8 13 00 00 00       	mov    $0x13,%eax
- 5d8:	cd 40                	int    $0x40
- 5da:	c3                   	ret
-
-000005db <mkdir>:
-SYSCALL(mkdir)
- 5db:	b8 14 00 00 00       	mov    $0x14,%eax
- 5e0:	cd 40                	int    $0x40
- 5e2:	c3                   	ret
-
-000005e3 <chdir>:
-SYSCALL(chdir)
- 5e3:	b8 09 00 00 00       	mov    $0x9,%eax
- 5e8:	cd 40                	int    $0x40
- 5ea:	c3                   	ret
-
-000005eb <dup>:
-SYSCALL(dup)
- 5eb:	b8 0a 00 00 00       	mov    $0xa,%eax
- 5f0:	cd 40                	int    $0x40
- 5f2:	c3                   	ret
-
-000005f3 <getpid>:
-SYSCALL(getpid)
- 5f3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 5f8:	cd 40                	int    $0x40
- 5fa:	c3                   	ret
-
-000005fb <sbrk>:
-SYSCALL(sbrk)
- 5fb:	b8 0c 00 00 00       	mov    $0xc,%eax
- 600:	cd 40                	int    $0x40
- 602:	c3                   	ret
-
-00000603 <sleep>:
-SYSCALL(sleep)
- 603:	b8 0d 00 00 00       	mov    $0xd,%eax
- 608:	cd 40                	int    $0x40
- 60a:	c3                   	ret
-
-0000060b <uptime>:
-SYSCALL(uptime)
- 60b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 610:	cd 40                	int    $0x40
- 612:	c3                   	ret
- 613:	66 90                	xchg   %ax,%ax
- 615:	66 90                	xchg   %ax,%ax
- 617:	66 90                	xchg   %ax,%ax
- 619:	66 90                	xchg   %ax,%ax
- 61b:	66 90                	xchg   %ax,%ax
- 61d:	66 90                	xchg   %ax,%ax
- 61f:	90                   	nop
-
-00000620 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 620:	55                   	push   %ebp
- 621:	89 e5                	mov    %esp,%ebp
- 623:	57                   	push   %edi
- 624:	56                   	push   %esi
- 625:	53                   	push   %ebx
- 626:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 628:	89 d1                	mov    %edx,%ecx
-{
- 62a:	83 ec 3c             	sub    $0x3c,%esp
- 62d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 630:	85 d2                	test   %edx,%edx
- 632:	0f 89 80 00 00 00    	jns    6b8 <printint+0x98>
- 638:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 63c:	74 7a                	je     6b8 <printint+0x98>
-    x = -xx;
- 63e:	f7 d9                	neg    %ecx
-    neg = 1;
- 640:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 645:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 648:	31 f6                	xor    %esi,%esi
- 64a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 650:	89 c8                	mov    %ecx,%eax
- 652:	31 d2                	xor    %edx,%edx
- 654:	89 f7                	mov    %esi,%edi
- 656:	f7 f3                	div    %ebx
- 658:	8d 76 01             	lea    0x1(%esi),%esi
- 65b:	0f b6 92 74 0a 00 00 	movzbl 0xa74(%edx),%edx
- 662:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 666:	89 ca                	mov    %ecx,%edx
- 668:	89 c1                	mov    %eax,%ecx
- 66a:	39 da                	cmp    %ebx,%edx
- 66c:	73 e2                	jae    650 <printint+0x30>
-  if(neg)
- 66e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 671:	85 c0                	test   %eax,%eax
- 673:	74 07                	je     67c <printint+0x5c>
-    buf[i++] = '-';
- 675:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 67a:	89 f7                	mov    %esi,%edi
- 67c:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 67f:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 682:	01 df                	add    %ebx,%edi
- 684:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 688:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 68b:	83 ec 04             	sub    $0x4,%esp
- 68e:	88 45 d7             	mov    %al,-0x29(%ebp)
- 691:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 694:	6a 01                	push   $0x1
- 696:	50                   	push   %eax
- 697:	56                   	push   %esi
- 698:	e8 f6 fe ff ff       	call   593 <write>
-  while(--i >= 0)
- 69d:	89 f8                	mov    %edi,%eax
- 69f:	83 c4 10             	add    $0x10,%esp
- 6a2:	83 ef 01             	sub    $0x1,%edi
- 6a5:	39 c3                	cmp    %eax,%ebx
- 6a7:	75 df                	jne    688 <printint+0x68>
-}
- 6a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 6ac:	5b                   	pop    %ebx
- 6ad:	5e                   	pop    %esi
- 6ae:	5f                   	pop    %edi
- 6af:	5d                   	pop    %ebp
- 6b0:	c3                   	ret
- 6b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 6b8:	31 c0                	xor    %eax,%eax
- 6ba:	eb 89                	jmp    645 <printint+0x25>
- 6bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006c0 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 6c0:	55                   	push   %ebp
- 6c1:	89 e5                	mov    %esp,%ebp
- 6c3:	57                   	push   %edi
- 6c4:	56                   	push   %esi
- 6c5:	53                   	push   %ebx
- 6c6:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 6c9:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 6cc:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 6cf:	0f b6 1e             	movzbl (%esi),%ebx
- 6d2:	83 c6 01             	add    $0x1,%esi
- 6d5:	84 db                	test   %bl,%bl
- 6d7:	74 67                	je     740 <printf+0x80>
- 6d9:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 6dc:	31 d2                	xor    %edx,%edx
- 6de:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 6e1:	eb 34                	jmp    717 <printf+0x57>
- 6e3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 6e8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 6eb:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 6f0:	83 f8 25             	cmp    $0x25,%eax
- 6f3:	74 18                	je     70d <printf+0x4d>
-  write(fd, &c, 1);
- 6f5:	83 ec 04             	sub    $0x4,%esp
- 6f8:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 6fb:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 6fe:	6a 01                	push   $0x1
- 700:	50                   	push   %eax
- 701:	57                   	push   %edi
- 702:	e8 8c fe ff ff       	call   593 <write>
- 707:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 70a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 70d:	0f b6 1e             	movzbl (%esi),%ebx
- 710:	83 c6 01             	add    $0x1,%esi
- 713:	84 db                	test   %bl,%bl
- 715:	74 29                	je     740 <printf+0x80>
-    c = fmt[i] & 0xff;
- 717:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 71a:	85 d2                	test   %edx,%edx
- 71c:	74 ca                	je     6e8 <printf+0x28>
-      }
-    } else if(state == '%'){
- 71e:	83 fa 25             	cmp    $0x25,%edx
- 721:	75 ea                	jne    70d <printf+0x4d>
-      if(c == 'd'){
- 723:	83 f8 25             	cmp    $0x25,%eax
- 726:	0f 84 04 01 00 00    	je     830 <printf+0x170>
- 72c:	83 e8 63             	sub    $0x63,%eax
- 72f:	83 f8 15             	cmp    $0x15,%eax
- 732:	77 1c                	ja     750 <printf+0x90>
- 734:	ff 24 85 1c 0a 00 00 	jmp    *0xa1c(,%eax,4)
- 73b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 740:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 743:	5b                   	pop    %ebx
- 744:	5e                   	pop    %esi
- 745:	5f                   	pop    %edi
- 746:	5d                   	pop    %ebp
- 747:	c3                   	ret
- 748:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 74f:	00 
-  write(fd, &c, 1);
- 750:	83 ec 04             	sub    $0x4,%esp
- 753:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 756:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 75a:	6a 01                	push   $0x1
- 75c:	52                   	push   %edx
- 75d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 760:	57                   	push   %edi
- 761:	e8 2d fe ff ff       	call   593 <write>
- 766:	83 c4 0c             	add    $0xc,%esp
- 769:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 76c:	6a 01                	push   $0x1
- 76e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 771:	52                   	push   %edx
- 772:	57                   	push   %edi
- 773:	e8 1b fe ff ff       	call   593 <write>
-        putc(fd, c);
- 778:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 77b:	31 d2                	xor    %edx,%edx
- 77d:	eb 8e                	jmp    70d <printf+0x4d>
- 77f:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 780:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 783:	83 ec 0c             	sub    $0xc,%esp
- 786:	b9 10 00 00 00       	mov    $0x10,%ecx
- 78b:	8b 13                	mov    (%ebx),%edx
- 78d:	6a 00                	push   $0x0
- 78f:	89 f8                	mov    %edi,%eax
-        ap++;
- 791:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 794:	e8 87 fe ff ff       	call   620 <printint>
-        ap++;
- 799:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 79c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 79f:	31 d2                	xor    %edx,%edx
- 7a1:	e9 67 ff ff ff       	jmp    70d <printf+0x4d>
-        s = (char*)*ap;
- 7a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 7a9:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 7ab:	83 c0 04             	add    $0x4,%eax
- 7ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 7b1:	85 db                	test   %ebx,%ebx
- 7b3:	0f 84 87 00 00 00    	je     840 <printf+0x180>
-        while(*s != 0){
- 7b9:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 7bc:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 7be:	84 c0                	test   %al,%al
- 7c0:	0f 84 47 ff ff ff    	je     70d <printf+0x4d>
- 7c6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 7c9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 7cc:	89 de                	mov    %ebx,%esi
- 7ce:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 7d0:	83 ec 04             	sub    $0x4,%esp
- 7d3:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 7d6:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 7d9:	6a 01                	push   $0x1
- 7db:	53                   	push   %ebx
- 7dc:	57                   	push   %edi
- 7dd:	e8 b1 fd ff ff       	call   593 <write>
-        while(*s != 0){
- 7e2:	0f b6 06             	movzbl (%esi),%eax
- 7e5:	83 c4 10             	add    $0x10,%esp
- 7e8:	84 c0                	test   %al,%al
- 7ea:	75 e4                	jne    7d0 <printf+0x110>
-      state = 0;
- 7ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 7ef:	31 d2                	xor    %edx,%edx
- 7f1:	e9 17 ff ff ff       	jmp    70d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 7f6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 7f9:	83 ec 0c             	sub    $0xc,%esp
- 7fc:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 801:	8b 13                	mov    (%ebx),%edx
- 803:	6a 01                	push   $0x1
- 805:	eb 88                	jmp    78f <printf+0xcf>
-        putc(fd, *ap);
- 807:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 80a:	83 ec 04             	sub    $0x4,%esp
- 80d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 810:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 812:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 815:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 818:	6a 01                	push   $0x1
- 81a:	52                   	push   %edx
- 81b:	57                   	push   %edi
- 81c:	e8 72 fd ff ff       	call   593 <write>
-        ap++;
- 821:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 824:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 827:	31 d2                	xor    %edx,%edx
- 829:	e9 df fe ff ff       	jmp    70d <printf+0x4d>
- 82e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 830:	83 ec 04             	sub    $0x4,%esp
- 833:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 836:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 839:	6a 01                	push   $0x1
- 83b:	e9 31 ff ff ff       	jmp    771 <printf+0xb1>
- 840:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 845:	bb 12 0a 00 00       	mov    $0xa12,%ebx
- 84a:	e9 77 ff ff ff       	jmp    7c6 <printf+0x106>
- 84f:	90                   	nop
-
-00000850 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 850:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 851:	a1 a8 0d 00 00       	mov    0xda8,%eax
-{
- 856:	89 e5                	mov    %esp,%ebp
- 858:	57                   	push   %edi
- 859:	56                   	push   %esi
- 85a:	53                   	push   %ebx
- 85b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 85e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 861:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 868:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 86a:	39 c8                	cmp    %ecx,%eax
- 86c:	73 32                	jae    8a0 <free+0x50>
- 86e:	39 d1                	cmp    %edx,%ecx
- 870:	72 04                	jb     876 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 872:	39 d0                	cmp    %edx,%eax
- 874:	72 32                	jb     8a8 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 876:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 879:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 87c:	39 fa                	cmp    %edi,%edx
- 87e:	74 30                	je     8b0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 880:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 883:	8b 50 04             	mov    0x4(%eax),%edx
- 886:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 889:	39 f1                	cmp    %esi,%ecx
- 88b:	74 3a                	je     8c7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 88d:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 88f:	5b                   	pop    %ebx
-  freep = p;
- 890:	a3 a8 0d 00 00       	mov    %eax,0xda8
-}
- 895:	5e                   	pop    %esi
- 896:	5f                   	pop    %edi
- 897:	5d                   	pop    %ebp
- 898:	c3                   	ret
- 899:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 8a0:	39 d0                	cmp    %edx,%eax
- 8a2:	72 04                	jb     8a8 <free+0x58>
- 8a4:	39 d1                	cmp    %edx,%ecx
- 8a6:	72 ce                	jb     876 <free+0x26>
-{
- 8a8:	89 d0                	mov    %edx,%eax
- 8aa:	eb bc                	jmp    868 <free+0x18>
- 8ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 8b0:	03 72 04             	add    0x4(%edx),%esi
- 8b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 8b6:	8b 10                	mov    (%eax),%edx
- 8b8:	8b 12                	mov    (%edx),%edx
- 8ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 8bd:	8b 50 04             	mov    0x4(%eax),%edx
- 8c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 8c3:	39 f1                	cmp    %esi,%ecx
- 8c5:	75 c6                	jne    88d <free+0x3d>
-    p->s.size += bp->s.size;
- 8c7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 8ca:	a3 a8 0d 00 00       	mov    %eax,0xda8
-    p->s.size += bp->s.size;
- 8cf:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 8d2:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 8d5:	89 08                	mov    %ecx,(%eax)
-}
- 8d7:	5b                   	pop    %ebx
- 8d8:	5e                   	pop    %esi
- 8d9:	5f                   	pop    %edi
- 8da:	5d                   	pop    %ebp
- 8db:	c3                   	ret
- 8dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000008e0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 8e0:	55                   	push   %ebp
- 8e1:	89 e5                	mov    %esp,%ebp
- 8e3:	57                   	push   %edi
- 8e4:	56                   	push   %esi
- 8e5:	53                   	push   %ebx
- 8e6:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8e9:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 8ec:	8b 15 a8 0d 00 00    	mov    0xda8,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 8f2:	8d 78 07             	lea    0x7(%eax),%edi
- 8f5:	c1 ef 03             	shr    $0x3,%edi
- 8f8:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 8fb:	85 d2                	test   %edx,%edx
- 8fd:	0f 84 8d 00 00 00    	je     990 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 903:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 905:	8b 48 04             	mov    0x4(%eax),%ecx
- 908:	39 f9                	cmp    %edi,%ecx
- 90a:	73 64                	jae    970 <malloc+0x90>
-  if(nu < 4096)
- 90c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 911:	39 df                	cmp    %ebx,%edi
- 913:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 916:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 91d:	eb 0a                	jmp    929 <malloc+0x49>
- 91f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 920:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 922:	8b 48 04             	mov    0x4(%eax),%ecx
- 925:	39 f9                	cmp    %edi,%ecx
- 927:	73 47                	jae    970 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 929:	89 c2                	mov    %eax,%edx
- 92b:	3b 05 a8 0d 00 00    	cmp    0xda8,%eax
- 931:	75 ed                	jne    920 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 933:	83 ec 0c             	sub    $0xc,%esp
- 936:	56                   	push   %esi
- 937:	e8 bf fc ff ff       	call   5fb <sbrk>
-  if(p == (char*)-1)
- 93c:	83 c4 10             	add    $0x10,%esp
- 93f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 942:	74 1c                	je     960 <malloc+0x80>
-  hp->s.size = nu;
- 944:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 947:	83 ec 0c             	sub    $0xc,%esp
- 94a:	83 c0 08             	add    $0x8,%eax
- 94d:	50                   	push   %eax
- 94e:	e8 fd fe ff ff       	call   850 <free>
-  return freep;
- 953:	8b 15 a8 0d 00 00    	mov    0xda8,%edx
-      if((p = morecore(nunits)) == 0)
- 959:	83 c4 10             	add    $0x10,%esp
- 95c:	85 d2                	test   %edx,%edx
- 95e:	75 c0                	jne    920 <malloc+0x40>
-        return 0;
-  }
-}
- 960:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 963:	31 c0                	xor    %eax,%eax
-}
- 965:	5b                   	pop    %ebx
- 966:	5e                   	pop    %esi
- 967:	5f                   	pop    %edi
- 968:	5d                   	pop    %ebp
- 969:	c3                   	ret
- 96a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 970:	39 cf                	cmp    %ecx,%edi
- 972:	74 4c                	je     9c0 <malloc+0xe0>
-        p->s.size -= nunits;
- 974:	29 f9                	sub    %edi,%ecx
- 976:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 979:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 97c:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 97f:	89 15 a8 0d 00 00    	mov    %edx,0xda8
-}
- 985:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 988:	83 c0 08             	add    $0x8,%eax
-}
- 98b:	5b                   	pop    %ebx
- 98c:	5e                   	pop    %esi
- 98d:	5f                   	pop    %edi
- 98e:	5d                   	pop    %ebp
- 98f:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 990:	c7 05 a8 0d 00 00 ac 	movl   $0xdac,0xda8
- 997:	0d 00 00 
-    base.s.size = 0;
- 99a:	b8 ac 0d 00 00       	mov    $0xdac,%eax
-    base.s.ptr = freep = prevp = &base;
- 99f:	c7 05 ac 0d 00 00 ac 	movl   $0xdac,0xdac
- 9a6:	0d 00 00 
-    base.s.size = 0;
- 9a9:	c7 05 b0 0d 00 00 00 	movl   $0x0,0xdb0
- 9b0:	00 00 00 
-    if(p->s.size >= nunits){
- 9b3:	e9 54 ff ff ff       	jmp    90c <malloc+0x2c>
- 9b8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 9bf:	00 
-        prevp->s.ptr = p->s.ptr;
- 9c0:	8b 08                	mov    (%eax),%ecx
- 9c2:	89 0a                	mov    %ecx,(%edx)
- 9c4:	eb b9                	jmp    97f <malloc+0x9f>
diff --git a/ls.d b/ls.d
deleted file mode 100644
index a55b6d4..0000000
--- a/ls.d
+++ /dev/null
@@ -1 +0,0 @@
-ls.o: ls.c /usr/include/stdc-predef.h types.h stat.h user.h fs.h
diff --git a/ls.o b/ls.o
deleted file mode 100644
index 0280989..0000000
Binary files a/ls.o and /dev/null differ
diff --git a/ls.sym b/ls.sym
deleted file mode 100644
index 080b350..0000000
--- a/ls.sym
+++ /dev/null
@@ -1,48 +0,0 @@
-00000000 ls.c
-00000d98 buf.0
-00000000 ulib.c
-00000000 printf.c
-00000620 printint
-00000a74 digits.0
-00000000 umalloc.c
-00000da8 freep
-00000dac base
-00000330 strcpy
-00000060 fmtname
-000006c0 printf
-00000540 memmove
-000005bb mknod
-00000450 gets
-000005f3 getpid
-000008e0 malloc
-00000603 sleep
-00000583 pipe
-00000593 write
-000005cb fstat
-000005a3 kill
-000005e3 chdir
-000005ab exec
-0000057b wait
-0000058b read
-000005c3 unlink
-0000056b fork
-000005fb sbrk
-0000060b uptime
-00000d98 __bss_start
-000003f0 memset
-00000000 main
-00000360 strcmp
-000005eb dup
-000004b0 stat
-00000d98 _edata
-00000db4 _end
-000005d3 link
-00000100 ls
-00000573 exit
-00000500 atoi
-000003c0 strlen
-000005b3 open
-00000410 strchr
-000005db mkdir
-0000059b close
-00000850 free
diff --git a/main.c b/main.c
index 9924e64..8d5e7f2 100644
--- a/main.c
+++ b/main.c
@@ -14,9 +14,11 @@ extern char end[]; // first address after kernel loaded from ELF file
 // Bootstrap processor starts running C code here.
 // Allocate a real stack and switch to it, first
 // doing some setup required for memory allocator to work.
+extern void init_swap_table(void);
 int
 main(void)
 {
+  init_swap_table();
   kinit1(end, P2V(4*1024*1024)); // phys page allocator
   kvmalloc();      // kernel page table
   mpinit();        // detect other processors
diff --git a/main.d b/main.d
deleted file mode 100644
index 354dab4..0000000
--- a/main.d
+++ /dev/null
@@ -1,2 +0,0 @@
-main.o: main.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h
diff --git a/main.o b/main.o
deleted file mode 100644
index 75c3d3b..0000000
Binary files a/main.o and /dev/null differ
diff --git a/memlayout.h b/memlayout.h
index d1615f7..cd10ec4 100644
--- a/memlayout.h
+++ b/memlayout.h
@@ -1,7 +1,7 @@
 // Memory layout
 
 #define EXTMEM  0x100000            // Start of extended memory
-#define PHYSTOP 0xE000000           // Top physical memory
+#define PHYSTOP 0x400000           // Top physical memory
 #define DEVSPACE 0xFE000000         // Other devices are at high addresses
 
 // Key addresses for address space layout (see kmap in vm.c for layout)
diff --git a/mkdir.asm b/mkdir.asm
deleted file mode 100644
index a967279..0000000
--- a/mkdir.asm
+++ /dev/null
@@ -1,1144 +0,0 @@
-
-_mkdir:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	57                   	push   %edi
-   e:	bf 01 00 00 00       	mov    $0x1,%edi
-  13:	56                   	push   %esi
-  14:	53                   	push   %ebx
-  15:	51                   	push   %ecx
-  16:	83 ec 08             	sub    $0x8,%esp
-  19:	8b 59 04             	mov    0x4(%ecx),%ebx
-  1c:	8b 31                	mov    (%ecx),%esi
-  1e:	83 c3 04             	add    $0x4,%ebx
-  int i;
-
-  if(argc < 2){
-  21:	83 fe 01             	cmp    $0x1,%esi
-  24:	7f 14                	jg     3a <main+0x3a>
-  26:	eb 3a                	jmp    62 <main+0x62>
-  28:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  2f:	00 
-    printf(2, "Usage: mkdir files...\n");
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-  30:	83 c7 01             	add    $0x1,%edi
-  33:	83 c3 04             	add    $0x4,%ebx
-  36:	39 fe                	cmp    %edi,%esi
-  38:	74 23                	je     5d <main+0x5d>
-    if(mkdir(argv[i]) < 0){
-  3a:	83 ec 0c             	sub    $0xc,%esp
-  3d:	ff 33                	push   (%ebx)
-  3f:	e8 e7 02 00 00       	call   32b <mkdir>
-  44:	83 c4 10             	add    $0x10,%esp
-  47:	85 c0                	test   %eax,%eax
-  49:	79 e5                	jns    30 <main+0x30>
-      printf(2, "mkdir: %s failed to create\n", argv[i]);
-  4b:	50                   	push   %eax
-  4c:	ff 33                	push   (%ebx)
-  4e:	68 2f 07 00 00       	push   $0x72f
-  53:	6a 02                	push   $0x2
-  55:	e8 b6 03 00 00       	call   410 <printf>
-      break;
-  5a:	83 c4 10             	add    $0x10,%esp
-    }
-  }
-
-  exit();
-  5d:	e8 61 02 00 00       	call   2c3 <exit>
-    printf(2, "Usage: mkdir files...\n");
-  62:	52                   	push   %edx
-  63:	52                   	push   %edx
-  64:	68 18 07 00 00       	push   $0x718
-  69:	6a 02                	push   $0x2
-  6b:	e8 a0 03 00 00       	call   410 <printf>
-    exit();
-  70:	e8 4e 02 00 00       	call   2c3 <exit>
-  75:	66 90                	xchg   %ax,%ax
-  77:	66 90                	xchg   %ax,%ax
-  79:	66 90                	xchg   %ax,%ax
-  7b:	66 90                	xchg   %ax,%ax
-  7d:	66 90                	xchg   %ax,%ax
-  7f:	90                   	nop
-
-00000080 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  80:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  81:	31 c0                	xor    %eax,%eax
-{
-  83:	89 e5                	mov    %esp,%ebp
-  85:	53                   	push   %ebx
-  86:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
-  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  97:	83 c0 01             	add    $0x1,%eax
-  9a:	84 d2                	test   %dl,%dl
-  9c:	75 f2                	jne    90 <strcpy+0x10>
-    ;
-  return os;
-}
-  9e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  a1:	89 c8                	mov    %ecx,%eax
-  a3:	c9                   	leave
-  a4:	c3                   	ret
-  a5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  ac:	00 
-  ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-000000b0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  b0:	55                   	push   %ebp
-  b1:	89 e5                	mov    %esp,%ebp
-  b3:	53                   	push   %ebx
-  b4:	8b 55 08             	mov    0x8(%ebp),%edx
-  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-  ba:	0f b6 02             	movzbl (%edx),%eax
-  bd:	84 c0                	test   %al,%al
-  bf:	75 17                	jne    d8 <strcmp+0x28>
-  c1:	eb 3a                	jmp    fd <strcmp+0x4d>
-  c3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
-  cc:	83 c2 01             	add    $0x1,%edx
-  cf:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
-  d2:	84 c0                	test   %al,%al
-  d4:	74 1a                	je     f0 <strcmp+0x40>
-  d6:	89 d9                	mov    %ebx,%ecx
-  d8:	0f b6 19             	movzbl (%ecx),%ebx
-  db:	38 c3                	cmp    %al,%bl
-  dd:	74 e9                	je     c8 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
-  df:	29 d8                	sub    %ebx,%eax
-}
-  e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  e4:	c9                   	leave
-  e5:	c3                   	ret
-  e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  ed:	00 
-  ee:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
-  f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
-  f4:	31 c0                	xor    %eax,%eax
-  f6:	29 d8                	sub    %ebx,%eax
-}
-  f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  fb:	c9                   	leave
-  fc:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
-  fd:	0f b6 19             	movzbl (%ecx),%ebx
- 100:	31 c0                	xor    %eax,%eax
- 102:	eb db                	jmp    df <strcmp+0x2f>
- 104:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 10b:	00 
- 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000110 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 110:	55                   	push   %ebp
- 111:	89 e5                	mov    %esp,%ebp
- 113:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 116:	80 3a 00             	cmpb   $0x0,(%edx)
- 119:	74 15                	je     130 <strlen+0x20>
- 11b:	31 c0                	xor    %eax,%eax
- 11d:	8d 76 00             	lea    0x0(%esi),%esi
- 120:	83 c0 01             	add    $0x1,%eax
- 123:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 127:	89 c1                	mov    %eax,%ecx
- 129:	75 f5                	jne    120 <strlen+0x10>
-    ;
-  return n;
-}
- 12b:	89 c8                	mov    %ecx,%eax
- 12d:	5d                   	pop    %ebp
- 12e:	c3                   	ret
- 12f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 130:	31 c9                	xor    %ecx,%ecx
-}
- 132:	5d                   	pop    %ebp
- 133:	89 c8                	mov    %ecx,%eax
- 135:	c3                   	ret
- 136:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 13d:	00 
- 13e:	66 90                	xchg   %ax,%ax
-
-00000140 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 140:	55                   	push   %ebp
- 141:	89 e5                	mov    %esp,%ebp
- 143:	57                   	push   %edi
- 144:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 147:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 14a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 14d:	89 d7                	mov    %edx,%edi
- 14f:	fc                   	cld
- 150:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 152:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 155:	89 d0                	mov    %edx,%eax
- 157:	c9                   	leave
- 158:	c3                   	ret
- 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000160 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 160:	55                   	push   %ebp
- 161:	89 e5                	mov    %esp,%ebp
- 163:	8b 45 08             	mov    0x8(%ebp),%eax
- 166:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 16a:	0f b6 10             	movzbl (%eax),%edx
- 16d:	84 d2                	test   %dl,%dl
- 16f:	75 12                	jne    183 <strchr+0x23>
- 171:	eb 1d                	jmp    190 <strchr+0x30>
- 173:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 178:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 17c:	83 c0 01             	add    $0x1,%eax
- 17f:	84 d2                	test   %dl,%dl
- 181:	74 0d                	je     190 <strchr+0x30>
-    if(*s == c)
- 183:	38 d1                	cmp    %dl,%cl
- 185:	75 f1                	jne    178 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 187:	5d                   	pop    %ebp
- 188:	c3                   	ret
- 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 190:	31 c0                	xor    %eax,%eax
-}
- 192:	5d                   	pop    %ebp
- 193:	c3                   	ret
- 194:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 19b:	00 
- 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001a0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1a0:	55                   	push   %ebp
- 1a1:	89 e5                	mov    %esp,%ebp
- 1a3:	57                   	push   %edi
- 1a4:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 1a5:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 1a8:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 1a9:	31 db                	xor    %ebx,%ebx
-{
- 1ab:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 1ae:	eb 27                	jmp    1d7 <gets+0x37>
-    cc = read(0, &c, 1);
- 1b0:	83 ec 04             	sub    $0x4,%esp
- 1b3:	6a 01                	push   $0x1
- 1b5:	56                   	push   %esi
- 1b6:	6a 00                	push   $0x0
- 1b8:	e8 1e 01 00 00       	call   2db <read>
-    if(cc < 1)
- 1bd:	83 c4 10             	add    $0x10,%esp
- 1c0:	85 c0                	test   %eax,%eax
- 1c2:	7e 1d                	jle    1e1 <gets+0x41>
-      break;
-    buf[i++] = c;
- 1c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1c8:	8b 55 08             	mov    0x8(%ebp),%edx
- 1cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 1cf:	3c 0a                	cmp    $0xa,%al
- 1d1:	74 10                	je     1e3 <gets+0x43>
- 1d3:	3c 0d                	cmp    $0xd,%al
- 1d5:	74 0c                	je     1e3 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 1d7:	89 df                	mov    %ebx,%edi
- 1d9:	83 c3 01             	add    $0x1,%ebx
- 1dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1df:	7c cf                	jl     1b0 <gets+0x10>
- 1e1:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1e6:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 1ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1ed:	5b                   	pop    %ebx
- 1ee:	5e                   	pop    %esi
- 1ef:	5f                   	pop    %edi
- 1f0:	5d                   	pop    %ebp
- 1f1:	c3                   	ret
- 1f2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1f9:	00 
- 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000200 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 200:	55                   	push   %ebp
- 201:	89 e5                	mov    %esp,%ebp
- 203:	56                   	push   %esi
- 204:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 205:	83 ec 08             	sub    $0x8,%esp
- 208:	6a 00                	push   $0x0
- 20a:	ff 75 08             	push   0x8(%ebp)
- 20d:	e8 f1 00 00 00       	call   303 <open>
-  if(fd < 0)
- 212:	83 c4 10             	add    $0x10,%esp
- 215:	85 c0                	test   %eax,%eax
- 217:	78 27                	js     240 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 219:	83 ec 08             	sub    $0x8,%esp
- 21c:	ff 75 0c             	push   0xc(%ebp)
- 21f:	89 c3                	mov    %eax,%ebx
- 221:	50                   	push   %eax
- 222:	e8 f4 00 00 00       	call   31b <fstat>
-  close(fd);
- 227:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 22a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 22c:	e8 ba 00 00 00       	call   2eb <close>
-  return r;
- 231:	83 c4 10             	add    $0x10,%esp
-}
- 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 237:	89 f0                	mov    %esi,%eax
- 239:	5b                   	pop    %ebx
- 23a:	5e                   	pop    %esi
- 23b:	5d                   	pop    %ebp
- 23c:	c3                   	ret
- 23d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 245:	eb ed                	jmp    234 <stat+0x34>
- 247:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 24e:	00 
- 24f:	90                   	nop
-
-00000250 <atoi>:
-
-int
-atoi(const char *s)
-{
- 250:	55                   	push   %ebp
- 251:	89 e5                	mov    %esp,%ebp
- 253:	53                   	push   %ebx
- 254:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 257:	0f be 02             	movsbl (%edx),%eax
- 25a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 25d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 260:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 265:	77 1e                	ja     285 <atoi+0x35>
- 267:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 26e:	00 
- 26f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 270:	83 c2 01             	add    $0x1,%edx
- 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 27a:	0f be 02             	movsbl (%edx),%eax
- 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 280:	80 fb 09             	cmp    $0x9,%bl
- 283:	76 eb                	jbe    270 <atoi+0x20>
-  return n;
-}
- 285:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 288:	89 c8                	mov    %ecx,%eax
- 28a:	c9                   	leave
- 28b:	c3                   	ret
- 28c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000290 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 290:	55                   	push   %ebp
- 291:	89 e5                	mov    %esp,%ebp
- 293:	57                   	push   %edi
- 294:	8b 45 10             	mov    0x10(%ebp),%eax
- 297:	8b 55 08             	mov    0x8(%ebp),%edx
- 29a:	56                   	push   %esi
- 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 29e:	85 c0                	test   %eax,%eax
- 2a0:	7e 13                	jle    2b5 <memmove+0x25>
- 2a2:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2a4:	89 d7                	mov    %edx,%edi
- 2a6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2ad:	00 
- 2ae:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2b1:	39 f8                	cmp    %edi,%eax
- 2b3:	75 fb                	jne    2b0 <memmove+0x20>
-  return vdst;
-}
- 2b5:	5e                   	pop    %esi
- 2b6:	89 d0                	mov    %edx,%eax
- 2b8:	5f                   	pop    %edi
- 2b9:	5d                   	pop    %ebp
- 2ba:	c3                   	ret
-
-000002bb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
- 2c0:	cd 40                	int    $0x40
- 2c2:	c3                   	ret
-
-000002c3 <exit>:
-SYSCALL(exit)
- 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2c8:	cd 40                	int    $0x40
- 2ca:	c3                   	ret
-
-000002cb <wait>:
-SYSCALL(wait)
- 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret
-
-000002d3 <pipe>:
-SYSCALL(pipe)
- 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret
-
-000002db <read>:
-SYSCALL(read)
- 2db:	b8 05 00 00 00       	mov    $0x5,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret
-
-000002e3 <write>:
-SYSCALL(write)
- 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret
-
-000002eb <close>:
-SYSCALL(close)
- 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret
-
-000002f3 <kill>:
-SYSCALL(kill)
- 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret
-
-000002fb <exec>:
-SYSCALL(exec)
- 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret
-
-00000303 <open>:
-SYSCALL(open)
- 303:	b8 0f 00 00 00       	mov    $0xf,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret
-
-0000030b <mknod>:
-SYSCALL(mknod)
- 30b:	b8 11 00 00 00       	mov    $0x11,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret
-
-00000313 <unlink>:
-SYSCALL(unlink)
- 313:	b8 12 00 00 00       	mov    $0x12,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret
-
-0000031b <fstat>:
-SYSCALL(fstat)
- 31b:	b8 08 00 00 00       	mov    $0x8,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret
-
-00000323 <link>:
-SYSCALL(link)
- 323:	b8 13 00 00 00       	mov    $0x13,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret
-
-0000032b <mkdir>:
-SYSCALL(mkdir)
- 32b:	b8 14 00 00 00       	mov    $0x14,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret
-
-00000333 <chdir>:
-SYSCALL(chdir)
- 333:	b8 09 00 00 00       	mov    $0x9,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret
-
-0000033b <dup>:
-SYSCALL(dup)
- 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret
-
-00000343 <getpid>:
-SYSCALL(getpid)
- 343:	b8 0b 00 00 00       	mov    $0xb,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret
-
-0000034b <sbrk>:
-SYSCALL(sbrk)
- 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret
-
-00000353 <sleep>:
-SYSCALL(sleep)
- 353:	b8 0d 00 00 00       	mov    $0xd,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret
-
-0000035b <uptime>:
-SYSCALL(uptime)
- 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret
- 363:	66 90                	xchg   %ax,%ax
- 365:	66 90                	xchg   %ax,%ax
- 367:	66 90                	xchg   %ax,%ax
- 369:	66 90                	xchg   %ax,%ax
- 36b:	66 90                	xchg   %ax,%ax
- 36d:	66 90                	xchg   %ax,%ax
- 36f:	90                   	nop
-
-00000370 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	57                   	push   %edi
- 374:	56                   	push   %esi
- 375:	53                   	push   %ebx
- 376:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 378:	89 d1                	mov    %edx,%ecx
-{
- 37a:	83 ec 3c             	sub    $0x3c,%esp
- 37d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 380:	85 d2                	test   %edx,%edx
- 382:	0f 89 80 00 00 00    	jns    408 <printint+0x98>
- 388:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 38c:	74 7a                	je     408 <printint+0x98>
-    x = -xx;
- 38e:	f7 d9                	neg    %ecx
-    neg = 1;
- 390:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 395:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 398:	31 f6                	xor    %esi,%esi
- 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3a0:	89 c8                	mov    %ecx,%eax
- 3a2:	31 d2                	xor    %edx,%edx
- 3a4:	89 f7                	mov    %esi,%edi
- 3a6:	f7 f3                	div    %ebx
- 3a8:	8d 76 01             	lea    0x1(%esi),%esi
- 3ab:	0f b6 92 ac 07 00 00 	movzbl 0x7ac(%edx),%edx
- 3b2:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 3b6:	89 ca                	mov    %ecx,%edx
- 3b8:	89 c1                	mov    %eax,%ecx
- 3ba:	39 da                	cmp    %ebx,%edx
- 3bc:	73 e2                	jae    3a0 <printint+0x30>
-  if(neg)
- 3be:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3c1:	85 c0                	test   %eax,%eax
- 3c3:	74 07                	je     3cc <printint+0x5c>
-    buf[i++] = '-';
- 3c5:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 3ca:	89 f7                	mov    %esi,%edi
- 3cc:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 3cf:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 3d2:	01 df                	add    %ebx,%edi
- 3d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 3d8:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 3db:	83 ec 04             	sub    $0x4,%esp
- 3de:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3e1:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 3e4:	6a 01                	push   $0x1
- 3e6:	50                   	push   %eax
- 3e7:	56                   	push   %esi
- 3e8:	e8 f6 fe ff ff       	call   2e3 <write>
-  while(--i >= 0)
- 3ed:	89 f8                	mov    %edi,%eax
- 3ef:	83 c4 10             	add    $0x10,%esp
- 3f2:	83 ef 01             	sub    $0x1,%edi
- 3f5:	39 c3                	cmp    %eax,%ebx
- 3f7:	75 df                	jne    3d8 <printint+0x68>
-}
- 3f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3fc:	5b                   	pop    %ebx
- 3fd:	5e                   	pop    %esi
- 3fe:	5f                   	pop    %edi
- 3ff:	5d                   	pop    %ebp
- 400:	c3                   	ret
- 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 408:	31 c0                	xor    %eax,%eax
- 40a:	eb 89                	jmp    395 <printint+0x25>
- 40c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000410 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 419:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 41c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 41f:	0f b6 1e             	movzbl (%esi),%ebx
- 422:	83 c6 01             	add    $0x1,%esi
- 425:	84 db                	test   %bl,%bl
- 427:	74 67                	je     490 <printf+0x80>
- 429:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 42c:	31 d2                	xor    %edx,%edx
- 42e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 431:	eb 34                	jmp    467 <printf+0x57>
- 433:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 438:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 43b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 440:	83 f8 25             	cmp    $0x25,%eax
- 443:	74 18                	je     45d <printf+0x4d>
-  write(fd, &c, 1);
- 445:	83 ec 04             	sub    $0x4,%esp
- 448:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 44b:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 44e:	6a 01                	push   $0x1
- 450:	50                   	push   %eax
- 451:	57                   	push   %edi
- 452:	e8 8c fe ff ff       	call   2e3 <write>
- 457:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 45a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 45d:	0f b6 1e             	movzbl (%esi),%ebx
- 460:	83 c6 01             	add    $0x1,%esi
- 463:	84 db                	test   %bl,%bl
- 465:	74 29                	je     490 <printf+0x80>
-    c = fmt[i] & 0xff;
- 467:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 46a:	85 d2                	test   %edx,%edx
- 46c:	74 ca                	je     438 <printf+0x28>
-      }
-    } else if(state == '%'){
- 46e:	83 fa 25             	cmp    $0x25,%edx
- 471:	75 ea                	jne    45d <printf+0x4d>
-      if(c == 'd'){
- 473:	83 f8 25             	cmp    $0x25,%eax
- 476:	0f 84 04 01 00 00    	je     580 <printf+0x170>
- 47c:	83 e8 63             	sub    $0x63,%eax
- 47f:	83 f8 15             	cmp    $0x15,%eax
- 482:	77 1c                	ja     4a0 <printf+0x90>
- 484:	ff 24 85 54 07 00 00 	jmp    *0x754(,%eax,4)
- 48b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 490:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 493:	5b                   	pop    %ebx
- 494:	5e                   	pop    %esi
- 495:	5f                   	pop    %edi
- 496:	5d                   	pop    %ebp
- 497:	c3                   	ret
- 498:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 49f:	00 
-  write(fd, &c, 1);
- 4a0:	83 ec 04             	sub    $0x4,%esp
- 4a3:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 4a6:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4aa:	6a 01                	push   $0x1
- 4ac:	52                   	push   %edx
- 4ad:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 4b0:	57                   	push   %edi
- 4b1:	e8 2d fe ff ff       	call   2e3 <write>
- 4b6:	83 c4 0c             	add    $0xc,%esp
- 4b9:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4bc:	6a 01                	push   $0x1
- 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 4c1:	52                   	push   %edx
- 4c2:	57                   	push   %edi
- 4c3:	e8 1b fe ff ff       	call   2e3 <write>
-        putc(fd, c);
- 4c8:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4cb:	31 d2                	xor    %edx,%edx
- 4cd:	eb 8e                	jmp    45d <printf+0x4d>
- 4cf:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 4d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4d3:	83 ec 0c             	sub    $0xc,%esp
- 4d6:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4db:	8b 13                	mov    (%ebx),%edx
- 4dd:	6a 00                	push   $0x0
- 4df:	89 f8                	mov    %edi,%eax
-        ap++;
- 4e1:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 4e4:	e8 87 fe ff ff       	call   370 <printint>
-        ap++;
- 4e9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 4ec:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4ef:	31 d2                	xor    %edx,%edx
- 4f1:	e9 67 ff ff ff       	jmp    45d <printf+0x4d>
-        s = (char*)*ap;
- 4f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4f9:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 4fb:	83 c0 04             	add    $0x4,%eax
- 4fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 501:	85 db                	test   %ebx,%ebx
- 503:	0f 84 87 00 00 00    	je     590 <printf+0x180>
-        while(*s != 0){
- 509:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 50c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 50e:	84 c0                	test   %al,%al
- 510:	0f 84 47 ff ff ff    	je     45d <printf+0x4d>
- 516:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 519:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 51c:	89 de                	mov    %ebx,%esi
- 51e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 520:	83 ec 04             	sub    $0x4,%esp
- 523:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 526:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 529:	6a 01                	push   $0x1
- 52b:	53                   	push   %ebx
- 52c:	57                   	push   %edi
- 52d:	e8 b1 fd ff ff       	call   2e3 <write>
-        while(*s != 0){
- 532:	0f b6 06             	movzbl (%esi),%eax
- 535:	83 c4 10             	add    $0x10,%esp
- 538:	84 c0                	test   %al,%al
- 53a:	75 e4                	jne    520 <printf+0x110>
-      state = 0;
- 53c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 53f:	31 d2                	xor    %edx,%edx
- 541:	e9 17 ff ff ff       	jmp    45d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 546:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 549:	83 ec 0c             	sub    $0xc,%esp
- 54c:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 551:	8b 13                	mov    (%ebx),%edx
- 553:	6a 01                	push   $0x1
- 555:	eb 88                	jmp    4df <printf+0xcf>
-        putc(fd, *ap);
- 557:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 55a:	83 ec 04             	sub    $0x4,%esp
- 55d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 560:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 562:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 565:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
- 56a:	52                   	push   %edx
- 56b:	57                   	push   %edi
- 56c:	e8 72 fd ff ff       	call   2e3 <write>
-        ap++;
- 571:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 574:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 577:	31 d2                	xor    %edx,%edx
- 579:	e9 df fe ff ff       	jmp    45d <printf+0x4d>
- 57e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 580:	83 ec 04             	sub    $0x4,%esp
- 583:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 586:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 589:	6a 01                	push   $0x1
- 58b:	e9 31 ff ff ff       	jmp    4c1 <printf+0xb1>
- 590:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 595:	bb 4b 07 00 00       	mov    $0x74b,%ebx
- 59a:	e9 77 ff ff ff       	jmp    516 <printf+0x106>
- 59f:	90                   	nop
-
-000005a0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 5a0:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5a1:	a1 58 0a 00 00       	mov    0xa58,%eax
-{
- 5a6:	89 e5                	mov    %esp,%ebp
- 5a8:	57                   	push   %edi
- 5a9:	56                   	push   %esi
- 5aa:	53                   	push   %ebx
- 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 5ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5b8:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5ba:	39 c8                	cmp    %ecx,%eax
- 5bc:	73 32                	jae    5f0 <free+0x50>
- 5be:	39 d1                	cmp    %edx,%ecx
- 5c0:	72 04                	jb     5c6 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5c2:	39 d0                	cmp    %edx,%eax
- 5c4:	72 32                	jb     5f8 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 5c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5cc:	39 fa                	cmp    %edi,%edx
- 5ce:	74 30                	je     600 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 5d3:	8b 50 04             	mov    0x4(%eax),%edx
- 5d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5d9:	39 f1                	cmp    %esi,%ecx
- 5db:	74 3a                	je     617 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 5dd:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 5df:	5b                   	pop    %ebx
-  freep = p;
- 5e0:	a3 58 0a 00 00       	mov    %eax,0xa58
-}
- 5e5:	5e                   	pop    %esi
- 5e6:	5f                   	pop    %edi
- 5e7:	5d                   	pop    %ebp
- 5e8:	c3                   	ret
- 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f0:	39 d0                	cmp    %edx,%eax
- 5f2:	72 04                	jb     5f8 <free+0x58>
- 5f4:	39 d1                	cmp    %edx,%ecx
- 5f6:	72 ce                	jb     5c6 <free+0x26>
-{
- 5f8:	89 d0                	mov    %edx,%eax
- 5fa:	eb bc                	jmp    5b8 <free+0x18>
- 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 600:	03 72 04             	add    0x4(%edx),%esi
- 603:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 606:	8b 10                	mov    (%eax),%edx
- 608:	8b 12                	mov    (%edx),%edx
- 60a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 60d:	8b 50 04             	mov    0x4(%eax),%edx
- 610:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 613:	39 f1                	cmp    %esi,%ecx
- 615:	75 c6                	jne    5dd <free+0x3d>
-    p->s.size += bp->s.size;
- 617:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 61a:	a3 58 0a 00 00       	mov    %eax,0xa58
-    p->s.size += bp->s.size;
- 61f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 622:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 625:	89 08                	mov    %ecx,(%eax)
-}
- 627:	5b                   	pop    %ebx
- 628:	5e                   	pop    %esi
- 629:	5f                   	pop    %edi
- 62a:	5d                   	pop    %ebp
- 62b:	c3                   	ret
- 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000630 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 630:	55                   	push   %ebp
- 631:	89 e5                	mov    %esp,%ebp
- 633:	57                   	push   %edi
- 634:	56                   	push   %esi
- 635:	53                   	push   %ebx
- 636:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 639:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 63c:	8b 15 58 0a 00 00    	mov    0xa58,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 642:	8d 78 07             	lea    0x7(%eax),%edi
- 645:	c1 ef 03             	shr    $0x3,%edi
- 648:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 64b:	85 d2                	test   %edx,%edx
- 64d:	0f 84 8d 00 00 00    	je     6e0 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 653:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 655:	8b 48 04             	mov    0x4(%eax),%ecx
- 658:	39 f9                	cmp    %edi,%ecx
- 65a:	73 64                	jae    6c0 <malloc+0x90>
-  if(nu < 4096)
- 65c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 661:	39 df                	cmp    %ebx,%edi
- 663:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 666:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 66d:	eb 0a                	jmp    679 <malloc+0x49>
- 66f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 670:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 672:	8b 48 04             	mov    0x4(%eax),%ecx
- 675:	39 f9                	cmp    %edi,%ecx
- 677:	73 47                	jae    6c0 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 679:	89 c2                	mov    %eax,%edx
- 67b:	3b 05 58 0a 00 00    	cmp    0xa58,%eax
- 681:	75 ed                	jne    670 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 683:	83 ec 0c             	sub    $0xc,%esp
- 686:	56                   	push   %esi
- 687:	e8 bf fc ff ff       	call   34b <sbrk>
-  if(p == (char*)-1)
- 68c:	83 c4 10             	add    $0x10,%esp
- 68f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 692:	74 1c                	je     6b0 <malloc+0x80>
-  hp->s.size = nu;
- 694:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 697:	83 ec 0c             	sub    $0xc,%esp
- 69a:	83 c0 08             	add    $0x8,%eax
- 69d:	50                   	push   %eax
- 69e:	e8 fd fe ff ff       	call   5a0 <free>
-  return freep;
- 6a3:	8b 15 58 0a 00 00    	mov    0xa58,%edx
-      if((p = morecore(nunits)) == 0)
- 6a9:	83 c4 10             	add    $0x10,%esp
- 6ac:	85 d2                	test   %edx,%edx
- 6ae:	75 c0                	jne    670 <malloc+0x40>
-        return 0;
-  }
-}
- 6b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 6b3:	31 c0                	xor    %eax,%eax
-}
- 6b5:	5b                   	pop    %ebx
- 6b6:	5e                   	pop    %esi
- 6b7:	5f                   	pop    %edi
- 6b8:	5d                   	pop    %ebp
- 6b9:	c3                   	ret
- 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 6c0:	39 cf                	cmp    %ecx,%edi
- 6c2:	74 4c                	je     710 <malloc+0xe0>
-        p->s.size -= nunits;
- 6c4:	29 f9                	sub    %edi,%ecx
- 6c6:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 6c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 6cc:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 6cf:	89 15 58 0a 00 00    	mov    %edx,0xa58
-}
- 6d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 6d8:	83 c0 08             	add    $0x8,%eax
-}
- 6db:	5b                   	pop    %ebx
- 6dc:	5e                   	pop    %esi
- 6dd:	5f                   	pop    %edi
- 6de:	5d                   	pop    %ebp
- 6df:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 6e0:	c7 05 58 0a 00 00 5c 	movl   $0xa5c,0xa58
- 6e7:	0a 00 00 
-    base.s.size = 0;
- 6ea:	b8 5c 0a 00 00       	mov    $0xa5c,%eax
-    base.s.ptr = freep = prevp = &base;
- 6ef:	c7 05 5c 0a 00 00 5c 	movl   $0xa5c,0xa5c
- 6f6:	0a 00 00 
-    base.s.size = 0;
- 6f9:	c7 05 60 0a 00 00 00 	movl   $0x0,0xa60
- 700:	00 00 00 
-    if(p->s.size >= nunits){
- 703:	e9 54 ff ff ff       	jmp    65c <malloc+0x2c>
- 708:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 70f:	00 
-        prevp->s.ptr = p->s.ptr;
- 710:	8b 08                	mov    (%eax),%ecx
- 712:	89 0a                	mov    %ecx,(%edx)
- 714:	eb b9                	jmp    6cf <malloc+0x9f>
diff --git a/mkdir.d b/mkdir.d
deleted file mode 100644
index 0c77808..0000000
--- a/mkdir.d
+++ /dev/null
@@ -1 +0,0 @@
-mkdir.o: mkdir.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/mkdir.o b/mkdir.o
deleted file mode 100644
index b1277c5..0000000
Binary files a/mkdir.o and /dev/null differ
diff --git a/mkdir.sym b/mkdir.sym
deleted file mode 100644
index 2002681..0000000
--- a/mkdir.sym
+++ /dev/null
@@ -1,45 +0,0 @@
-00000000 mkdir.c
-00000000 ulib.c
-00000000 printf.c
-00000370 printint
-000007ac digits.0
-00000000 umalloc.c
-00000a58 freep
-00000a5c base
-00000080 strcpy
-00000410 printf
-00000290 memmove
-0000030b mknod
-000001a0 gets
-00000343 getpid
-00000630 malloc
-00000353 sleep
-000002d3 pipe
-000002e3 write
-0000031b fstat
-000002f3 kill
-00000333 chdir
-000002fb exec
-000002cb wait
-000002db read
-00000313 unlink
-000002bb fork
-0000034b sbrk
-0000035b uptime
-00000a58 __bss_start
-00000140 memset
-00000000 main
-000000b0 strcmp
-0000033b dup
-00000200 stat
-00000a58 _edata
-00000a64 _end
-00000323 link
-000002c3 exit
-00000250 atoi
-00000110 strlen
-00000303 open
-00000160 strchr
-0000032b mkdir
-000002eb close
-000005a0 free
diff --git a/mkfs b/mkfs
deleted file mode 100755
index 2f833fd..0000000
Binary files a/mkfs and /dev/null differ
diff --git a/mkfs.c b/mkfs.c
index 8e011a7..99ff1fd 100644
--- a/mkfs.c
+++ b/mkfs.c
@@ -18,7 +18,7 @@
 #define NINODES 200
 
 // Disk layout:
-// [ boot block | sb block | log | inode blocks | free bit map | data blocks ]
+// [ boot block | sb block | swap | log | inode blocks | free bit map | data blocks ]
 
 int nbitmap = FSSIZE/(BSIZE*8) + 1;
 int ninodeblocks = NINODES / IPB + 1;
@@ -91,16 +91,21 @@ main(int argc, char *argv[])
   }
 
   // 1 fs block = 1 disk sector
-  nmeta = 2 + nlog + ninodeblocks + nbitmap;
+  // Disk layout:
+  // [ boot block | sb block | swap | log | inode blocks | free bit map | data blocks ]
+  nmeta = 2 + SWAPBLOCKS + nlog + ninodeblocks + nbitmap;
   nblocks = FSSIZE - nmeta;
 
   sb.size = xint(FSSIZE);
   sb.nblocks = xint(nblocks);
   sb.ninodes = xint(NINODES);
   sb.nlog = xint(nlog);
-  sb.logstart = xint(2);
-  sb.inodestart = xint(2+nlog);
-  sb.bmapstart = xint(2+nlog+ninodeblocks);
+  sb.nswapblocks=xint(SWAPBLOCKS);
+  sb.swapstart=xint(2);
+  sb.logstart = xint(2+ SWAPBLOCKS);
+  sb.inodestart = xint(2+nlog + SWAPBLOCKS);
+  sb.bmapstart = xint(2+nlog+ninodeblocks + SWAPBLOCKS);
+
 
   printf("nmeta %d (boot, super, log blocks %u inode blocks %u, bitmap blocks %u) blocks %d total %d\n",
          nmeta, nlog, ninodeblocks, nbitmap, nblocks, FSSIZE);
@@ -114,6 +119,18 @@ main(int argc, char *argv[])
   memmove(buf, &sb, sizeof(sb));
   wsect(1, buf);
 
+  // uchar bitmap[nbitmap*BSIZE];
+  // memset(bitmap,0,sizeof(bitmap));
+  // for(int i=0;i<SWAPBLOCKS;i++)
+  // {
+  //   int blockno=2+i;
+  //   bitmap[blockno/8]|=(1<<(blockno%8));
+  // }
+  // for(int i=0;i<nbitmap;i++)
+  // {
+  //   wsect(sb.bmapstart+i,bitmap+i*BSIZE);
+  // }
+
   rootino = ialloc(T_DIR);
   assert(rootino == ROOTINO);
 
@@ -241,13 +258,19 @@ balloc(int used)
   int i;
 
   printf("balloc: first %d blocks have been allocated\n", used);
-  assert(used < BSIZE*8);
-  bzero(buf, BSIZE);
-  for(i = 0; i < used; i++){
-    buf[i/8] = buf[i/8] | (0x1 << (i%8));
+  // assert(used < nblocks);
+  for(i=0;i<nbitmap;i++)
+  {
+    bzero(buf, BSIZE);
+    int b;
+    for(b = i*4096; (b < (i+1)*4096)&&(b<used); b++)
+    {
+      int bit=b-i*4096;
+      buf[bit/8] |= (0x1 << (bit%8));
+    }
+    // printf("balloc: write bitmap block at sector %d\n", sb.bmapstart);
+    wsect(sb.bmapstart+i, buf);
   }
-  printf("balloc: write bitmap block at sector %d\n", sb.bmapstart);
-  wsect(sb.bmapstart, buf);
 }
 
 #define min(a, b) ((a) < (b) ? (a) : (b))
diff --git a/mmu.h b/mmu.h
index a82d8e2..9496f64 100644
--- a/mmu.h
+++ b/mmu.h
@@ -95,6 +95,9 @@ struct segdesc {
 #define PTE_W           0x002   // Writeable
 #define PTE_U           0x004   // User
 #define PTE_PS          0x080   // Page Size
+#define PTE_A           0x020   // Accessed (set by CPU on any read/write)
+#define PTE_D           0x040   // Dirty    (set by CPU on write)
+#define PTE_SLOT(pteval) (((pteval) >> 12) & 0xFFFFF)
 
 // Address in page table or page directory entry
 #define PTE_ADDR(pte)   ((uint)(pte) & ~0xFFF)
diff --git a/mp.d b/mp.d
deleted file mode 100644
index 0714441..0000000
--- a/mp.d
+++ /dev/null
@@ -1,2 +0,0 @@
-mp.o: mp.c /usr/include/stdc-predef.h types.h defs.h param.h memlayout.h \
- mp.h x86.h mmu.h proc.h
diff --git a/mp.o b/mp.o
deleted file mode 100644
index 38c91dd..0000000
Binary files a/mp.o and /dev/null differ
diff --git a/param.h b/param.h
index a7e90ef..14d4088 100644
--- a/param.h
+++ b/param.h
@@ -12,3 +12,8 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
 
+#define NSWAP        800 
+#define BLOCKSPERSLOT 8
+#define SWAPBLOCKS    (NSWAP*BLOCKSPERSLOT)
+#undef FSSIZE
+#define FSSIZE       (1000+SWAPBLOCKS) 
diff --git a/picirq.d b/picirq.d
deleted file mode 100644
index 5233e7e..0000000
--- a/picirq.d
+++ /dev/null
@@ -1 +0,0 @@
-picirq.o: picirq.c /usr/include/stdc-predef.h types.h x86.h traps.h
diff --git a/picirq.o b/picirq.o
deleted file mode 100644
index 2857b11..0000000
Binary files a/picirq.o and /dev/null differ
diff --git a/pipe.d b/pipe.d
deleted file mode 100644
index 3d0eac9..0000000
--- a/pipe.d
+++ /dev/null
@@ -1,2 +0,0 @@
-pipe.o: pipe.c /usr/include/stdc-predef.h types.h defs.h param.h mmu.h \
- proc.h fs.h spinlock.h sleeplock.h file.h
diff --git a/pipe.o b/pipe.o
deleted file mode 100644
index 5d5339f..0000000
Binary files a/pipe.o and /dev/null differ
diff --git a/printf.d b/printf.d
deleted file mode 100644
index ddd3a8d..0000000
--- a/printf.d
+++ /dev/null
@@ -1 +0,0 @@
-printf.o: printf.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/printf.o b/printf.o
deleted file mode 100644
index 2b5e397..0000000
Binary files a/printf.o and /dev/null differ
diff --git a/proc.c b/proc.c
index 525ce75..15f3a99 100644
--- a/proc.c
+++ b/proc.c
@@ -21,23 +21,23 @@ extern void trapret(void);
 static void wakeup1(void *chan);
 
 extern struct proc proc[NPROC];
+extern int count_mem_pages(struct proc*);
 void print_mem_layout() {
   struct proc *p;
 
-  cprintf("Printing Memory Layout\n");
-  cprintf("PID\tNUM_PAGES\n");
-
+  cprintf("PID NUM_PAGES\n");
+  acquire(&ptable.lock);
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++) {
     if(p->state == RUNNING || p->state == RUNNABLE || p->state == SLEEPING) {
       if(p->pid >= 1) {
-        int num_pages = p->sz / PGSIZE;
-        if(p->sz % PGSIZE)
-          num_pages++;  // If not perfectly divisible, count extra page
-
-        cprintf("%d\t%d\n", p->pid, num_pages);
+        int num_pages = count_mem_pages(p);
+        
+        cprintf("%d %d\n", p->pid, num_pages);
+        // cprintf("rss is %d %d\n",p->pid,p->rss);
       }
     }
   }
+  release(&ptable.lock);
 }
 
 void
@@ -108,6 +108,7 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->rss=0;
 
   release(&ptable.lock);
 
@@ -214,10 +215,12 @@ fork(void)
     kfree(np->kstack);
     np->kstack = 0;
     np->state = UNUSED;
+    // np->rss=0;
     return -1;
   }
   np->sz = curproc->sz;
   np->parent = curproc;
+  np->rss=curproc->rss;
   *np->tf = *curproc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
@@ -244,6 +247,7 @@ fork(void)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait() to find out it exited.
+extern int clear_disk_of_proc(int);
 void
 exit(void)
 {
@@ -283,6 +287,7 @@ exit(void)
 
   // Jump into the scheduler, never to return.
   curproc->state = ZOMBIE;
+  clear_disk_of_proc(curproc->pid);
   sched();
   panic("zombie exit");
 }
@@ -552,3 +557,17 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+struct proc* choose_victim()
+{
+  struct proc* temp=0;
+  struct proc* p;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state!=RUNNING && p->state!=SLEEPING) continue;
+    if(!temp) temp=p;
+    else if(temp->rss<p->rss || (temp->rss==p->rss && p->pid<temp->pid)) temp=p;
+  }
+  release(&ptable.lock);
+  return temp;
+}
\ No newline at end of file
diff --git a/proc.d b/proc.d
deleted file mode 100644
index 9396fef..0000000
--- a/proc.d
+++ /dev/null
@@ -1,2 +0,0 @@
-proc.o: proc.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h x86.h proc.h spinlock.h
diff --git a/proc.h b/proc.h
index c7b0195..5bb6d2d 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,7 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int rss;
 };
 
 void print_mem_layout(void);
diff --git a/proc.o b/proc.o
deleted file mode 100644
index eb5a955..0000000
Binary files a/proc.o and /dev/null differ
diff --git a/rm.asm b/rm.asm
deleted file mode 100644
index d34e9a0..0000000
--- a/rm.asm
+++ /dev/null
@@ -1,1144 +0,0 @@
-
-_rm:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	57                   	push   %edi
-   e:	bf 01 00 00 00       	mov    $0x1,%edi
-  13:	56                   	push   %esi
-  14:	53                   	push   %ebx
-  15:	51                   	push   %ecx
-  16:	83 ec 08             	sub    $0x8,%esp
-  19:	8b 59 04             	mov    0x4(%ecx),%ebx
-  1c:	8b 31                	mov    (%ecx),%esi
-  1e:	83 c3 04             	add    $0x4,%ebx
-  int i;
-
-  if(argc < 2){
-  21:	83 fe 01             	cmp    $0x1,%esi
-  24:	7f 14                	jg     3a <main+0x3a>
-  26:	eb 3a                	jmp    62 <main+0x62>
-  28:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  2f:	00 
-    printf(2, "Usage: rm files...\n");
-    exit();
-  }
-
-  for(i = 1; i < argc; i++){
-  30:	83 c7 01             	add    $0x1,%edi
-  33:	83 c3 04             	add    $0x4,%ebx
-  36:	39 fe                	cmp    %edi,%esi
-  38:	74 23                	je     5d <main+0x5d>
-    if(unlink(argv[i]) < 0){
-  3a:	83 ec 0c             	sub    $0xc,%esp
-  3d:	ff 33                	push   (%ebx)
-  3f:	e8 cf 02 00 00       	call   313 <unlink>
-  44:	83 c4 10             	add    $0x10,%esp
-  47:	85 c0                	test   %eax,%eax
-  49:	79 e5                	jns    30 <main+0x30>
-      printf(2, "rm: %s failed to delete\n", argv[i]);
-  4b:	50                   	push   %eax
-  4c:	ff 33                	push   (%ebx)
-  4e:	68 2c 07 00 00       	push   $0x72c
-  53:	6a 02                	push   $0x2
-  55:	e8 b6 03 00 00       	call   410 <printf>
-      break;
-  5a:	83 c4 10             	add    $0x10,%esp
-    }
-  }
-
-  exit();
-  5d:	e8 61 02 00 00       	call   2c3 <exit>
-    printf(2, "Usage: rm files...\n");
-  62:	52                   	push   %edx
-  63:	52                   	push   %edx
-  64:	68 18 07 00 00       	push   $0x718
-  69:	6a 02                	push   $0x2
-  6b:	e8 a0 03 00 00       	call   410 <printf>
-    exit();
-  70:	e8 4e 02 00 00       	call   2c3 <exit>
-  75:	66 90                	xchg   %ax,%ax
-  77:	66 90                	xchg   %ax,%ax
-  79:	66 90                	xchg   %ax,%ax
-  7b:	66 90                	xchg   %ax,%ax
-  7d:	66 90                	xchg   %ax,%ax
-  7f:	90                   	nop
-
-00000080 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  80:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  81:	31 c0                	xor    %eax,%eax
-{
-  83:	89 e5                	mov    %esp,%ebp
-  85:	53                   	push   %ebx
-  86:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  89:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  8c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
-  90:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  94:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  97:	83 c0 01             	add    $0x1,%eax
-  9a:	84 d2                	test   %dl,%dl
-  9c:	75 f2                	jne    90 <strcpy+0x10>
-    ;
-  return os;
-}
-  9e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  a1:	89 c8                	mov    %ecx,%eax
-  a3:	c9                   	leave
-  a4:	c3                   	ret
-  a5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  ac:	00 
-  ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-000000b0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  b0:	55                   	push   %ebp
-  b1:	89 e5                	mov    %esp,%ebp
-  b3:	53                   	push   %ebx
-  b4:	8b 55 08             	mov    0x8(%ebp),%edx
-  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-  ba:	0f b6 02             	movzbl (%edx),%eax
-  bd:	84 c0                	test   %al,%al
-  bf:	75 17                	jne    d8 <strcmp+0x28>
-  c1:	eb 3a                	jmp    fd <strcmp+0x4d>
-  c3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
-  cc:	83 c2 01             	add    $0x1,%edx
-  cf:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
-  d2:	84 c0                	test   %al,%al
-  d4:	74 1a                	je     f0 <strcmp+0x40>
-  d6:	89 d9                	mov    %ebx,%ecx
-  d8:	0f b6 19             	movzbl (%ecx),%ebx
-  db:	38 c3                	cmp    %al,%bl
-  dd:	74 e9                	je     c8 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
-  df:	29 d8                	sub    %ebx,%eax
-}
-  e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  e4:	c9                   	leave
-  e5:	c3                   	ret
-  e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  ed:	00 
-  ee:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
-  f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
-  f4:	31 c0                	xor    %eax,%eax
-  f6:	29 d8                	sub    %ebx,%eax
-}
-  f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  fb:	c9                   	leave
-  fc:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
-  fd:	0f b6 19             	movzbl (%ecx),%ebx
- 100:	31 c0                	xor    %eax,%eax
- 102:	eb db                	jmp    df <strcmp+0x2f>
- 104:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 10b:	00 
- 10c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000110 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 110:	55                   	push   %ebp
- 111:	89 e5                	mov    %esp,%ebp
- 113:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 116:	80 3a 00             	cmpb   $0x0,(%edx)
- 119:	74 15                	je     130 <strlen+0x20>
- 11b:	31 c0                	xor    %eax,%eax
- 11d:	8d 76 00             	lea    0x0(%esi),%esi
- 120:	83 c0 01             	add    $0x1,%eax
- 123:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 127:	89 c1                	mov    %eax,%ecx
- 129:	75 f5                	jne    120 <strlen+0x10>
-    ;
-  return n;
-}
- 12b:	89 c8                	mov    %ecx,%eax
- 12d:	5d                   	pop    %ebp
- 12e:	c3                   	ret
- 12f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 130:	31 c9                	xor    %ecx,%ecx
-}
- 132:	5d                   	pop    %ebp
- 133:	89 c8                	mov    %ecx,%eax
- 135:	c3                   	ret
- 136:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 13d:	00 
- 13e:	66 90                	xchg   %ax,%ax
-
-00000140 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 140:	55                   	push   %ebp
- 141:	89 e5                	mov    %esp,%ebp
- 143:	57                   	push   %edi
- 144:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 147:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 14a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 14d:	89 d7                	mov    %edx,%edi
- 14f:	fc                   	cld
- 150:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 152:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 155:	89 d0                	mov    %edx,%eax
- 157:	c9                   	leave
- 158:	c3                   	ret
- 159:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000160 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 160:	55                   	push   %ebp
- 161:	89 e5                	mov    %esp,%ebp
- 163:	8b 45 08             	mov    0x8(%ebp),%eax
- 166:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 16a:	0f b6 10             	movzbl (%eax),%edx
- 16d:	84 d2                	test   %dl,%dl
- 16f:	75 12                	jne    183 <strchr+0x23>
- 171:	eb 1d                	jmp    190 <strchr+0x30>
- 173:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 178:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 17c:	83 c0 01             	add    $0x1,%eax
- 17f:	84 d2                	test   %dl,%dl
- 181:	74 0d                	je     190 <strchr+0x30>
-    if(*s == c)
- 183:	38 d1                	cmp    %dl,%cl
- 185:	75 f1                	jne    178 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 187:	5d                   	pop    %ebp
- 188:	c3                   	ret
- 189:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 190:	31 c0                	xor    %eax,%eax
-}
- 192:	5d                   	pop    %ebp
- 193:	c3                   	ret
- 194:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 19b:	00 
- 19c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001a0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 1a0:	55                   	push   %ebp
- 1a1:	89 e5                	mov    %esp,%ebp
- 1a3:	57                   	push   %edi
- 1a4:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 1a5:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 1a8:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 1a9:	31 db                	xor    %ebx,%ebx
-{
- 1ab:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 1ae:	eb 27                	jmp    1d7 <gets+0x37>
-    cc = read(0, &c, 1);
- 1b0:	83 ec 04             	sub    $0x4,%esp
- 1b3:	6a 01                	push   $0x1
- 1b5:	56                   	push   %esi
- 1b6:	6a 00                	push   $0x0
- 1b8:	e8 1e 01 00 00       	call   2db <read>
-    if(cc < 1)
- 1bd:	83 c4 10             	add    $0x10,%esp
- 1c0:	85 c0                	test   %eax,%eax
- 1c2:	7e 1d                	jle    1e1 <gets+0x41>
-      break;
-    buf[i++] = c;
- 1c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 1c8:	8b 55 08             	mov    0x8(%ebp),%edx
- 1cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 1cf:	3c 0a                	cmp    $0xa,%al
- 1d1:	74 10                	je     1e3 <gets+0x43>
- 1d3:	3c 0d                	cmp    $0xd,%al
- 1d5:	74 0c                	je     1e3 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 1d7:	89 df                	mov    %ebx,%edi
- 1d9:	83 c3 01             	add    $0x1,%ebx
- 1dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 1df:	7c cf                	jl     1b0 <gets+0x10>
- 1e1:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 1e3:	8b 45 08             	mov    0x8(%ebp),%eax
- 1e6:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 1ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 1ed:	5b                   	pop    %ebx
- 1ee:	5e                   	pop    %esi
- 1ef:	5f                   	pop    %edi
- 1f0:	5d                   	pop    %ebp
- 1f1:	c3                   	ret
- 1f2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1f9:	00 
- 1fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000200 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 200:	55                   	push   %ebp
- 201:	89 e5                	mov    %esp,%ebp
- 203:	56                   	push   %esi
- 204:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 205:	83 ec 08             	sub    $0x8,%esp
- 208:	6a 00                	push   $0x0
- 20a:	ff 75 08             	push   0x8(%ebp)
- 20d:	e8 f1 00 00 00       	call   303 <open>
-  if(fd < 0)
- 212:	83 c4 10             	add    $0x10,%esp
- 215:	85 c0                	test   %eax,%eax
- 217:	78 27                	js     240 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 219:	83 ec 08             	sub    $0x8,%esp
- 21c:	ff 75 0c             	push   0xc(%ebp)
- 21f:	89 c3                	mov    %eax,%ebx
- 221:	50                   	push   %eax
- 222:	e8 f4 00 00 00       	call   31b <fstat>
-  close(fd);
- 227:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 22a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 22c:	e8 ba 00 00 00       	call   2eb <close>
-  return r;
- 231:	83 c4 10             	add    $0x10,%esp
-}
- 234:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 237:	89 f0                	mov    %esi,%eax
- 239:	5b                   	pop    %ebx
- 23a:	5e                   	pop    %esi
- 23b:	5d                   	pop    %ebp
- 23c:	c3                   	ret
- 23d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 240:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 245:	eb ed                	jmp    234 <stat+0x34>
- 247:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 24e:	00 
- 24f:	90                   	nop
-
-00000250 <atoi>:
-
-int
-atoi(const char *s)
-{
- 250:	55                   	push   %ebp
- 251:	89 e5                	mov    %esp,%ebp
- 253:	53                   	push   %ebx
- 254:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 257:	0f be 02             	movsbl (%edx),%eax
- 25a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 25d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 260:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 265:	77 1e                	ja     285 <atoi+0x35>
- 267:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 26e:	00 
- 26f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 270:	83 c2 01             	add    $0x1,%edx
- 273:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 276:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 27a:	0f be 02             	movsbl (%edx),%eax
- 27d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 280:	80 fb 09             	cmp    $0x9,%bl
- 283:	76 eb                	jbe    270 <atoi+0x20>
-  return n;
-}
- 285:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 288:	89 c8                	mov    %ecx,%eax
- 28a:	c9                   	leave
- 28b:	c3                   	ret
- 28c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000290 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 290:	55                   	push   %ebp
- 291:	89 e5                	mov    %esp,%ebp
- 293:	57                   	push   %edi
- 294:	8b 45 10             	mov    0x10(%ebp),%eax
- 297:	8b 55 08             	mov    0x8(%ebp),%edx
- 29a:	56                   	push   %esi
- 29b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 29e:	85 c0                	test   %eax,%eax
- 2a0:	7e 13                	jle    2b5 <memmove+0x25>
- 2a2:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 2a4:	89 d7                	mov    %edx,%edi
- 2a6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2ad:	00 
- 2ae:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 2b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 2b1:	39 f8                	cmp    %edi,%eax
- 2b3:	75 fb                	jne    2b0 <memmove+0x20>
-  return vdst;
-}
- 2b5:	5e                   	pop    %esi
- 2b6:	89 d0                	mov    %edx,%eax
- 2b8:	5f                   	pop    %edi
- 2b9:	5d                   	pop    %ebp
- 2ba:	c3                   	ret
-
-000002bb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 2bb:	b8 01 00 00 00       	mov    $0x1,%eax
- 2c0:	cd 40                	int    $0x40
- 2c2:	c3                   	ret
-
-000002c3 <exit>:
-SYSCALL(exit)
- 2c3:	b8 02 00 00 00       	mov    $0x2,%eax
- 2c8:	cd 40                	int    $0x40
- 2ca:	c3                   	ret
-
-000002cb <wait>:
-SYSCALL(wait)
- 2cb:	b8 03 00 00 00       	mov    $0x3,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret
-
-000002d3 <pipe>:
-SYSCALL(pipe)
- 2d3:	b8 04 00 00 00       	mov    $0x4,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret
-
-000002db <read>:
-SYSCALL(read)
- 2db:	b8 05 00 00 00       	mov    $0x5,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret
-
-000002e3 <write>:
-SYSCALL(write)
- 2e3:	b8 10 00 00 00       	mov    $0x10,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret
-
-000002eb <close>:
-SYSCALL(close)
- 2eb:	b8 15 00 00 00       	mov    $0x15,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret
-
-000002f3 <kill>:
-SYSCALL(kill)
- 2f3:	b8 06 00 00 00       	mov    $0x6,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret
-
-000002fb <exec>:
-SYSCALL(exec)
- 2fb:	b8 07 00 00 00       	mov    $0x7,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret
-
-00000303 <open>:
-SYSCALL(open)
- 303:	b8 0f 00 00 00       	mov    $0xf,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret
-
-0000030b <mknod>:
-SYSCALL(mknod)
- 30b:	b8 11 00 00 00       	mov    $0x11,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret
-
-00000313 <unlink>:
-SYSCALL(unlink)
- 313:	b8 12 00 00 00       	mov    $0x12,%eax
- 318:	cd 40                	int    $0x40
- 31a:	c3                   	ret
-
-0000031b <fstat>:
-SYSCALL(fstat)
- 31b:	b8 08 00 00 00       	mov    $0x8,%eax
- 320:	cd 40                	int    $0x40
- 322:	c3                   	ret
-
-00000323 <link>:
-SYSCALL(link)
- 323:	b8 13 00 00 00       	mov    $0x13,%eax
- 328:	cd 40                	int    $0x40
- 32a:	c3                   	ret
-
-0000032b <mkdir>:
-SYSCALL(mkdir)
- 32b:	b8 14 00 00 00       	mov    $0x14,%eax
- 330:	cd 40                	int    $0x40
- 332:	c3                   	ret
-
-00000333 <chdir>:
-SYSCALL(chdir)
- 333:	b8 09 00 00 00       	mov    $0x9,%eax
- 338:	cd 40                	int    $0x40
- 33a:	c3                   	ret
-
-0000033b <dup>:
-SYSCALL(dup)
- 33b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 340:	cd 40                	int    $0x40
- 342:	c3                   	ret
-
-00000343 <getpid>:
-SYSCALL(getpid)
- 343:	b8 0b 00 00 00       	mov    $0xb,%eax
- 348:	cd 40                	int    $0x40
- 34a:	c3                   	ret
-
-0000034b <sbrk>:
-SYSCALL(sbrk)
- 34b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 350:	cd 40                	int    $0x40
- 352:	c3                   	ret
-
-00000353 <sleep>:
-SYSCALL(sleep)
- 353:	b8 0d 00 00 00       	mov    $0xd,%eax
- 358:	cd 40                	int    $0x40
- 35a:	c3                   	ret
-
-0000035b <uptime>:
-SYSCALL(uptime)
- 35b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret
- 363:	66 90                	xchg   %ax,%ax
- 365:	66 90                	xchg   %ax,%ax
- 367:	66 90                	xchg   %ax,%ax
- 369:	66 90                	xchg   %ax,%ax
- 36b:	66 90                	xchg   %ax,%ax
- 36d:	66 90                	xchg   %ax,%ax
- 36f:	90                   	nop
-
-00000370 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 370:	55                   	push   %ebp
- 371:	89 e5                	mov    %esp,%ebp
- 373:	57                   	push   %edi
- 374:	56                   	push   %esi
- 375:	53                   	push   %ebx
- 376:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 378:	89 d1                	mov    %edx,%ecx
-{
- 37a:	83 ec 3c             	sub    $0x3c,%esp
- 37d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 380:	85 d2                	test   %edx,%edx
- 382:	0f 89 80 00 00 00    	jns    408 <printint+0x98>
- 388:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 38c:	74 7a                	je     408 <printint+0x98>
-    x = -xx;
- 38e:	f7 d9                	neg    %ecx
-    neg = 1;
- 390:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 395:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 398:	31 f6                	xor    %esi,%esi
- 39a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 3a0:	89 c8                	mov    %ecx,%eax
- 3a2:	31 d2                	xor    %edx,%edx
- 3a4:	89 f7                	mov    %esi,%edi
- 3a6:	f7 f3                	div    %ebx
- 3a8:	8d 76 01             	lea    0x1(%esi),%esi
- 3ab:	0f b6 92 a4 07 00 00 	movzbl 0x7a4(%edx),%edx
- 3b2:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 3b6:	89 ca                	mov    %ecx,%edx
- 3b8:	89 c1                	mov    %eax,%ecx
- 3ba:	39 da                	cmp    %ebx,%edx
- 3bc:	73 e2                	jae    3a0 <printint+0x30>
-  if(neg)
- 3be:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 3c1:	85 c0                	test   %eax,%eax
- 3c3:	74 07                	je     3cc <printint+0x5c>
-    buf[i++] = '-';
- 3c5:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 3ca:	89 f7                	mov    %esi,%edi
- 3cc:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 3cf:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 3d2:	01 df                	add    %ebx,%edi
- 3d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 3d8:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 3db:	83 ec 04             	sub    $0x4,%esp
- 3de:	88 45 d7             	mov    %al,-0x29(%ebp)
- 3e1:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 3e4:	6a 01                	push   $0x1
- 3e6:	50                   	push   %eax
- 3e7:	56                   	push   %esi
- 3e8:	e8 f6 fe ff ff       	call   2e3 <write>
-  while(--i >= 0)
- 3ed:	89 f8                	mov    %edi,%eax
- 3ef:	83 c4 10             	add    $0x10,%esp
- 3f2:	83 ef 01             	sub    $0x1,%edi
- 3f5:	39 c3                	cmp    %eax,%ebx
- 3f7:	75 df                	jne    3d8 <printint+0x68>
-}
- 3f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3fc:	5b                   	pop    %ebx
- 3fd:	5e                   	pop    %esi
- 3fe:	5f                   	pop    %edi
- 3ff:	5d                   	pop    %ebp
- 400:	c3                   	ret
- 401:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 408:	31 c0                	xor    %eax,%eax
- 40a:	eb 89                	jmp    395 <printint+0x25>
- 40c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000410 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 419:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 41c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 41f:	0f b6 1e             	movzbl (%esi),%ebx
- 422:	83 c6 01             	add    $0x1,%esi
- 425:	84 db                	test   %bl,%bl
- 427:	74 67                	je     490 <printf+0x80>
- 429:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 42c:	31 d2                	xor    %edx,%edx
- 42e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 431:	eb 34                	jmp    467 <printf+0x57>
- 433:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 438:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 43b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 440:	83 f8 25             	cmp    $0x25,%eax
- 443:	74 18                	je     45d <printf+0x4d>
-  write(fd, &c, 1);
- 445:	83 ec 04             	sub    $0x4,%esp
- 448:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 44b:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 44e:	6a 01                	push   $0x1
- 450:	50                   	push   %eax
- 451:	57                   	push   %edi
- 452:	e8 8c fe ff ff       	call   2e3 <write>
- 457:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 45a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 45d:	0f b6 1e             	movzbl (%esi),%ebx
- 460:	83 c6 01             	add    $0x1,%esi
- 463:	84 db                	test   %bl,%bl
- 465:	74 29                	je     490 <printf+0x80>
-    c = fmt[i] & 0xff;
- 467:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 46a:	85 d2                	test   %edx,%edx
- 46c:	74 ca                	je     438 <printf+0x28>
-      }
-    } else if(state == '%'){
- 46e:	83 fa 25             	cmp    $0x25,%edx
- 471:	75 ea                	jne    45d <printf+0x4d>
-      if(c == 'd'){
- 473:	83 f8 25             	cmp    $0x25,%eax
- 476:	0f 84 04 01 00 00    	je     580 <printf+0x170>
- 47c:	83 e8 63             	sub    $0x63,%eax
- 47f:	83 f8 15             	cmp    $0x15,%eax
- 482:	77 1c                	ja     4a0 <printf+0x90>
- 484:	ff 24 85 4c 07 00 00 	jmp    *0x74c(,%eax,4)
- 48b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 490:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 493:	5b                   	pop    %ebx
- 494:	5e                   	pop    %esi
- 495:	5f                   	pop    %edi
- 496:	5d                   	pop    %ebp
- 497:	c3                   	ret
- 498:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 49f:	00 
-  write(fd, &c, 1);
- 4a0:	83 ec 04             	sub    $0x4,%esp
- 4a3:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 4a6:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 4aa:	6a 01                	push   $0x1
- 4ac:	52                   	push   %edx
- 4ad:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 4b0:	57                   	push   %edi
- 4b1:	e8 2d fe ff ff       	call   2e3 <write>
- 4b6:	83 c4 0c             	add    $0xc,%esp
- 4b9:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4bc:	6a 01                	push   $0x1
- 4be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 4c1:	52                   	push   %edx
- 4c2:	57                   	push   %edi
- 4c3:	e8 1b fe ff ff       	call   2e3 <write>
-        putc(fd, c);
- 4c8:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4cb:	31 d2                	xor    %edx,%edx
- 4cd:	eb 8e                	jmp    45d <printf+0x4d>
- 4cf:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 4d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4d3:	83 ec 0c             	sub    $0xc,%esp
- 4d6:	b9 10 00 00 00       	mov    $0x10,%ecx
- 4db:	8b 13                	mov    (%ebx),%edx
- 4dd:	6a 00                	push   $0x0
- 4df:	89 f8                	mov    %edi,%eax
-        ap++;
- 4e1:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 4e4:	e8 87 fe ff ff       	call   370 <printint>
-        ap++;
- 4e9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 4ec:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 4ef:	31 d2                	xor    %edx,%edx
- 4f1:	e9 67 ff ff ff       	jmp    45d <printf+0x4d>
-        s = (char*)*ap;
- 4f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4f9:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 4fb:	83 c0 04             	add    $0x4,%eax
- 4fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 501:	85 db                	test   %ebx,%ebx
- 503:	0f 84 87 00 00 00    	je     590 <printf+0x180>
-        while(*s != 0){
- 509:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 50c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 50e:	84 c0                	test   %al,%al
- 510:	0f 84 47 ff ff ff    	je     45d <printf+0x4d>
- 516:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 519:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 51c:	89 de                	mov    %ebx,%esi
- 51e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 520:	83 ec 04             	sub    $0x4,%esp
- 523:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 526:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 529:	6a 01                	push   $0x1
- 52b:	53                   	push   %ebx
- 52c:	57                   	push   %edi
- 52d:	e8 b1 fd ff ff       	call   2e3 <write>
-        while(*s != 0){
- 532:	0f b6 06             	movzbl (%esi),%eax
- 535:	83 c4 10             	add    $0x10,%esp
- 538:	84 c0                	test   %al,%al
- 53a:	75 e4                	jne    520 <printf+0x110>
-      state = 0;
- 53c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 53f:	31 d2                	xor    %edx,%edx
- 541:	e9 17 ff ff ff       	jmp    45d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 546:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 549:	83 ec 0c             	sub    $0xc,%esp
- 54c:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 551:	8b 13                	mov    (%ebx),%edx
- 553:	6a 01                	push   $0x1
- 555:	eb 88                	jmp    4df <printf+0xcf>
-        putc(fd, *ap);
- 557:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 55a:	83 ec 04             	sub    $0x4,%esp
- 55d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 560:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 562:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 565:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 568:	6a 01                	push   $0x1
- 56a:	52                   	push   %edx
- 56b:	57                   	push   %edi
- 56c:	e8 72 fd ff ff       	call   2e3 <write>
-        ap++;
- 571:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 574:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 577:	31 d2                	xor    %edx,%edx
- 579:	e9 df fe ff ff       	jmp    45d <printf+0x4d>
- 57e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 580:	83 ec 04             	sub    $0x4,%esp
- 583:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 586:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 589:	6a 01                	push   $0x1
- 58b:	e9 31 ff ff ff       	jmp    4c1 <printf+0xb1>
- 590:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 595:	bb 45 07 00 00       	mov    $0x745,%ebx
- 59a:	e9 77 ff ff ff       	jmp    516 <printf+0x106>
- 59f:	90                   	nop
-
-000005a0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 5a0:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5a1:	a1 50 0a 00 00       	mov    0xa50,%eax
-{
- 5a6:	89 e5                	mov    %esp,%ebp
- 5a8:	57                   	push   %edi
- 5a9:	56                   	push   %esi
- 5aa:	53                   	push   %ebx
- 5ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 5ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5b8:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 5ba:	39 c8                	cmp    %ecx,%eax
- 5bc:	73 32                	jae    5f0 <free+0x50>
- 5be:	39 d1                	cmp    %edx,%ecx
- 5c0:	72 04                	jb     5c6 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5c2:	39 d0                	cmp    %edx,%eax
- 5c4:	72 32                	jb     5f8 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 5c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 5c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 5cc:	39 fa                	cmp    %edi,%edx
- 5ce:	74 30                	je     600 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 5d3:	8b 50 04             	mov    0x4(%eax),%edx
- 5d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5d9:	39 f1                	cmp    %esi,%ecx
- 5db:	74 3a                	je     617 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 5dd:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 5df:	5b                   	pop    %ebx
-  freep = p;
- 5e0:	a3 50 0a 00 00       	mov    %eax,0xa50
-}
- 5e5:	5e                   	pop    %esi
- 5e6:	5f                   	pop    %edi
- 5e7:	5d                   	pop    %ebp
- 5e8:	c3                   	ret
- 5e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5f0:	39 d0                	cmp    %edx,%eax
- 5f2:	72 04                	jb     5f8 <free+0x58>
- 5f4:	39 d1                	cmp    %edx,%ecx
- 5f6:	72 ce                	jb     5c6 <free+0x26>
-{
- 5f8:	89 d0                	mov    %edx,%eax
- 5fa:	eb bc                	jmp    5b8 <free+0x18>
- 5fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 600:	03 72 04             	add    0x4(%edx),%esi
- 603:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 606:	8b 10                	mov    (%eax),%edx
- 608:	8b 12                	mov    (%edx),%edx
- 60a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 60d:	8b 50 04             	mov    0x4(%eax),%edx
- 610:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 613:	39 f1                	cmp    %esi,%ecx
- 615:	75 c6                	jne    5dd <free+0x3d>
-    p->s.size += bp->s.size;
- 617:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 61a:	a3 50 0a 00 00       	mov    %eax,0xa50
-    p->s.size += bp->s.size;
- 61f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 622:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 625:	89 08                	mov    %ecx,(%eax)
-}
- 627:	5b                   	pop    %ebx
- 628:	5e                   	pop    %esi
- 629:	5f                   	pop    %edi
- 62a:	5d                   	pop    %ebp
- 62b:	c3                   	ret
- 62c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000630 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 630:	55                   	push   %ebp
- 631:	89 e5                	mov    %esp,%ebp
- 633:	57                   	push   %edi
- 634:	56                   	push   %esi
- 635:	53                   	push   %ebx
- 636:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 639:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 63c:	8b 15 50 0a 00 00    	mov    0xa50,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 642:	8d 78 07             	lea    0x7(%eax),%edi
- 645:	c1 ef 03             	shr    $0x3,%edi
- 648:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 64b:	85 d2                	test   %edx,%edx
- 64d:	0f 84 8d 00 00 00    	je     6e0 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 653:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 655:	8b 48 04             	mov    0x4(%eax),%ecx
- 658:	39 f9                	cmp    %edi,%ecx
- 65a:	73 64                	jae    6c0 <malloc+0x90>
-  if(nu < 4096)
- 65c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 661:	39 df                	cmp    %ebx,%edi
- 663:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 666:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 66d:	eb 0a                	jmp    679 <malloc+0x49>
- 66f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 670:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 672:	8b 48 04             	mov    0x4(%eax),%ecx
- 675:	39 f9                	cmp    %edi,%ecx
- 677:	73 47                	jae    6c0 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 679:	89 c2                	mov    %eax,%edx
- 67b:	3b 05 50 0a 00 00    	cmp    0xa50,%eax
- 681:	75 ed                	jne    670 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 683:	83 ec 0c             	sub    $0xc,%esp
- 686:	56                   	push   %esi
- 687:	e8 bf fc ff ff       	call   34b <sbrk>
-  if(p == (char*)-1)
- 68c:	83 c4 10             	add    $0x10,%esp
- 68f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 692:	74 1c                	je     6b0 <malloc+0x80>
-  hp->s.size = nu;
- 694:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 697:	83 ec 0c             	sub    $0xc,%esp
- 69a:	83 c0 08             	add    $0x8,%eax
- 69d:	50                   	push   %eax
- 69e:	e8 fd fe ff ff       	call   5a0 <free>
-  return freep;
- 6a3:	8b 15 50 0a 00 00    	mov    0xa50,%edx
-      if((p = morecore(nunits)) == 0)
- 6a9:	83 c4 10             	add    $0x10,%esp
- 6ac:	85 d2                	test   %edx,%edx
- 6ae:	75 c0                	jne    670 <malloc+0x40>
-        return 0;
-  }
-}
- 6b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 6b3:	31 c0                	xor    %eax,%eax
-}
- 6b5:	5b                   	pop    %ebx
- 6b6:	5e                   	pop    %esi
- 6b7:	5f                   	pop    %edi
- 6b8:	5d                   	pop    %ebp
- 6b9:	c3                   	ret
- 6ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 6c0:	39 cf                	cmp    %ecx,%edi
- 6c2:	74 4c                	je     710 <malloc+0xe0>
-        p->s.size -= nunits;
- 6c4:	29 f9                	sub    %edi,%ecx
- 6c6:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 6c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 6cc:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 6cf:	89 15 50 0a 00 00    	mov    %edx,0xa50
-}
- 6d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 6d8:	83 c0 08             	add    $0x8,%eax
-}
- 6db:	5b                   	pop    %ebx
- 6dc:	5e                   	pop    %esi
- 6dd:	5f                   	pop    %edi
- 6de:	5d                   	pop    %ebp
- 6df:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 6e0:	c7 05 50 0a 00 00 54 	movl   $0xa54,0xa50
- 6e7:	0a 00 00 
-    base.s.size = 0;
- 6ea:	b8 54 0a 00 00       	mov    $0xa54,%eax
-    base.s.ptr = freep = prevp = &base;
- 6ef:	c7 05 54 0a 00 00 54 	movl   $0xa54,0xa54
- 6f6:	0a 00 00 
-    base.s.size = 0;
- 6f9:	c7 05 58 0a 00 00 00 	movl   $0x0,0xa58
- 700:	00 00 00 
-    if(p->s.size >= nunits){
- 703:	e9 54 ff ff ff       	jmp    65c <malloc+0x2c>
- 708:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 70f:	00 
-        prevp->s.ptr = p->s.ptr;
- 710:	8b 08                	mov    (%eax),%ecx
- 712:	89 0a                	mov    %ecx,(%edx)
- 714:	eb b9                	jmp    6cf <malloc+0x9f>
diff --git a/rm.d b/rm.d
deleted file mode 100644
index ba50b6b..0000000
--- a/rm.d
+++ /dev/null
@@ -1 +0,0 @@
-rm.o: rm.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/rm.o b/rm.o
deleted file mode 100644
index 0264b17..0000000
Binary files a/rm.o and /dev/null differ
diff --git a/rm.sym b/rm.sym
deleted file mode 100644
index cdeed8a..0000000
--- a/rm.sym
+++ /dev/null
@@ -1,45 +0,0 @@
-00000000 rm.c
-00000000 ulib.c
-00000000 printf.c
-00000370 printint
-000007a4 digits.0
-00000000 umalloc.c
-00000a50 freep
-00000a54 base
-00000080 strcpy
-00000410 printf
-00000290 memmove
-0000030b mknod
-000001a0 gets
-00000343 getpid
-00000630 malloc
-00000353 sleep
-000002d3 pipe
-000002e3 write
-0000031b fstat
-000002f3 kill
-00000333 chdir
-000002fb exec
-000002cb wait
-000002db read
-00000313 unlink
-000002bb fork
-0000034b sbrk
-0000035b uptime
-00000a50 __bss_start
-00000140 memset
-00000000 main
-000000b0 strcmp
-0000033b dup
-00000200 stat
-00000a50 _edata
-00000a5c _end
-00000323 link
-000002c3 exit
-00000250 atoi
-00000110 strlen
-00000303 open
-00000160 strchr
-0000032b mkdir
-000002eb close
-000005a0 free
diff --git a/sh.asm b/sh.asm
deleted file mode 100644
index 3cb1875..0000000
--- a/sh.asm
+++ /dev/null
@@ -1,2672 +0,0 @@
-
-_sh:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  return 0;
-}
-
-int
-main(void)
-{
-       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-       4:	83 e4 f0             	and    $0xfffffff0,%esp
-       7:	ff 71 fc             	push   -0x4(%ecx)
-       a:	55                   	push   %ebp
-       b:	89 e5                	mov    %esp,%ebp
-       d:	51                   	push   %ecx
-       e:	83 ec 04             	sub    $0x4,%esp
-  static char buf[100];
-  int fd;
-
-  // Ensure that three file descriptors are open.
-  while((fd = open("console", O_RDWR)) >= 0){
-      11:	eb 0e                	jmp    21 <main+0x21>
-      13:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    if(fd >= 3){
-      18:	83 f8 02             	cmp    $0x2,%eax
-      1b:	0f 8f 96 00 00 00    	jg     b7 <main+0xb7>
-  while((fd = open("console", O_RDWR)) >= 0){
-      21:	83 ec 08             	sub    $0x8,%esp
-      24:	6a 02                	push   $0x2
-      26:	68 f9 12 00 00       	push   $0x12f9
-      2b:	e8 13 0e 00 00       	call   e43 <open>
-      30:	83 c4 10             	add    $0x10,%esp
-      33:	85 c0                	test   %eax,%eax
-      35:	79 e1                	jns    18 <main+0x18>
-      37:	eb 2e                	jmp    67 <main+0x67>
-      39:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    }
-  }
-
-  // Read and run input commands.
-  while(getcmd(buf, sizeof(buf)) >= 0){
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      40:	80 3d 82 19 00 00 20 	cmpb   $0x20,0x1982
-      47:	0f 84 8d 00 00 00    	je     da <main+0xda>
-      4d:	8d 76 00             	lea    0x0(%esi),%esi
-int
-fork1(void)
-{
-  int pid;
-
-  pid = fork();
-      50:	e8 a6 0d 00 00       	call   dfb <fork>
-  if(pid == -1)
-      55:	83 f8 ff             	cmp    $0xffffffff,%eax
-      58:	0f 84 c1 00 00 00    	je     11f <main+0x11f>
-    if(fork1() == 0)
-      5e:	85 c0                	test   %eax,%eax
-      60:	74 63                	je     c5 <main+0xc5>
-    wait();
-      62:	e8 a4 0d 00 00       	call   e0b <wait>
-  printf(2, "$ ");
-      67:	83 ec 08             	sub    $0x8,%esp
-      6a:	68 58 12 00 00       	push   $0x1258
-      6f:	6a 02                	push   $0x2
-      71:	e8 da 0e 00 00       	call   f50 <printf>
-  memset(buf, 0, nbuf);
-      76:	83 c4 0c             	add    $0xc,%esp
-      79:	6a 64                	push   $0x64
-      7b:	6a 00                	push   $0x0
-      7d:	68 80 19 00 00       	push   $0x1980
-      82:	e8 f9 0b 00 00       	call   c80 <memset>
-  gets(buf, nbuf);
-      87:	58                   	pop    %eax
-      88:	5a                   	pop    %edx
-      89:	6a 64                	push   $0x64
-      8b:	68 80 19 00 00       	push   $0x1980
-      90:	e8 4b 0c 00 00       	call   ce0 <gets>
-  if(buf[0] == 0) // EOF
-      95:	0f b6 05 80 19 00 00 	movzbl 0x1980,%eax
-      9c:	83 c4 10             	add    $0x10,%esp
-      9f:	84 c0                	test   %al,%al
-      a1:	74 0f                	je     b2 <main+0xb2>
-    if(buf[0] == 'c' && buf[1] == 'd' && buf[2] == ' '){
-      a3:	3c 63                	cmp    $0x63,%al
-      a5:	75 a9                	jne    50 <main+0x50>
-      a7:	80 3d 81 19 00 00 64 	cmpb   $0x64,0x1981
-      ae:	75 a0                	jne    50 <main+0x50>
-      b0:	eb 8e                	jmp    40 <main+0x40>
-  exit();
-      b2:	e8 4c 0d 00 00       	call   e03 <exit>
-      close(fd);
-      b7:	83 ec 0c             	sub    $0xc,%esp
-      ba:	50                   	push   %eax
-      bb:	e8 6b 0d 00 00       	call   e2b <close>
-      break;
-      c0:	83 c4 10             	add    $0x10,%esp
-      c3:	eb a2                	jmp    67 <main+0x67>
-      runcmd(parsecmd(buf));
-      c5:	83 ec 0c             	sub    $0xc,%esp
-      c8:	68 80 19 00 00       	push   $0x1980
-      cd:	e8 7e 0a 00 00       	call   b50 <parsecmd>
-      d2:	89 04 24             	mov    %eax,(%esp)
-      d5:	e8 d6 00 00 00       	call   1b0 <runcmd>
-      buf[strlen(buf)-1] = 0;  // chop \n
-      da:	83 ec 0c             	sub    $0xc,%esp
-      dd:	68 80 19 00 00       	push   $0x1980
-      e2:	e8 69 0b 00 00       	call   c50 <strlen>
-      if(chdir(buf+3) < 0)
-      e7:	c7 04 24 83 19 00 00 	movl   $0x1983,(%esp)
-      buf[strlen(buf)-1] = 0;  // chop \n
-      ee:	c6 80 7f 19 00 00 00 	movb   $0x0,0x197f(%eax)
-      if(chdir(buf+3) < 0)
-      f5:	e8 79 0d 00 00       	call   e73 <chdir>
-      fa:	83 c4 10             	add    $0x10,%esp
-      fd:	85 c0                	test   %eax,%eax
-      ff:	0f 89 62 ff ff ff    	jns    67 <main+0x67>
-        printf(2, "cannot cd %s\n", buf+3);
-     105:	51                   	push   %ecx
-     106:	68 83 19 00 00       	push   $0x1983
-     10b:	68 01 13 00 00       	push   $0x1301
-     110:	6a 02                	push   $0x2
-     112:	e8 39 0e 00 00       	call   f50 <printf>
-     117:	83 c4 10             	add    $0x10,%esp
-     11a:	e9 48 ff ff ff       	jmp    67 <main+0x67>
-    panic("fork");
-     11f:	83 ec 0c             	sub    $0xc,%esp
-     122:	68 5b 12 00 00       	push   $0x125b
-     127:	e8 44 00 00 00       	call   170 <panic>
-     12c:	66 90                	xchg   %ax,%ax
-     12e:	66 90                	xchg   %ax,%ax
-
-00000130 <getcmd>:
-{
-     130:	55                   	push   %ebp
-     131:	89 e5                	mov    %esp,%ebp
-     133:	56                   	push   %esi
-     134:	53                   	push   %ebx
-     135:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     138:	8b 75 0c             	mov    0xc(%ebp),%esi
-  printf(2, "$ ");
-     13b:	83 ec 08             	sub    $0x8,%esp
-     13e:	68 58 12 00 00       	push   $0x1258
-     143:	6a 02                	push   $0x2
-     145:	e8 06 0e 00 00       	call   f50 <printf>
-  memset(buf, 0, nbuf);
-     14a:	83 c4 0c             	add    $0xc,%esp
-     14d:	56                   	push   %esi
-     14e:	6a 00                	push   $0x0
-     150:	53                   	push   %ebx
-     151:	e8 2a 0b 00 00       	call   c80 <memset>
-  gets(buf, nbuf);
-     156:	58                   	pop    %eax
-     157:	5a                   	pop    %edx
-     158:	56                   	push   %esi
-     159:	53                   	push   %ebx
-     15a:	e8 81 0b 00 00       	call   ce0 <gets>
-  if(buf[0] == 0) // EOF
-     15f:	83 c4 10             	add    $0x10,%esp
-     162:	80 3b 01             	cmpb   $0x1,(%ebx)
-     165:	19 c0                	sbb    %eax,%eax
-}
-     167:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     16a:	5b                   	pop    %ebx
-     16b:	5e                   	pop    %esi
-     16c:	5d                   	pop    %ebp
-     16d:	c3                   	ret
-     16e:	66 90                	xchg   %ax,%ax
-
-00000170 <panic>:
-{
-     170:	55                   	push   %ebp
-     171:	89 e5                	mov    %esp,%ebp
-     173:	83 ec 0c             	sub    $0xc,%esp
-  printf(2, "%s\n", s);
-     176:	ff 75 08             	push   0x8(%ebp)
-     179:	68 f5 12 00 00       	push   $0x12f5
-     17e:	6a 02                	push   $0x2
-     180:	e8 cb 0d 00 00       	call   f50 <printf>
-  exit();
-     185:	e8 79 0c 00 00       	call   e03 <exit>
-     18a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000190 <fork1>:
-{
-     190:	55                   	push   %ebp
-     191:	89 e5                	mov    %esp,%ebp
-     193:	83 ec 08             	sub    $0x8,%esp
-  pid = fork();
-     196:	e8 60 0c 00 00       	call   dfb <fork>
-  if(pid == -1)
-     19b:	83 f8 ff             	cmp    $0xffffffff,%eax
-     19e:	74 02                	je     1a2 <fork1+0x12>
-  return pid;
-}
-     1a0:	c9                   	leave
-     1a1:	c3                   	ret
-    panic("fork");
-     1a2:	83 ec 0c             	sub    $0xc,%esp
-     1a5:	68 5b 12 00 00       	push   $0x125b
-     1aa:	e8 c1 ff ff ff       	call   170 <panic>
-     1af:	90                   	nop
-
-000001b0 <runcmd>:
-{
-     1b0:	55                   	push   %ebp
-     1b1:	89 e5                	mov    %esp,%ebp
-     1b3:	53                   	push   %ebx
-     1b4:	83 ec 14             	sub    $0x14,%esp
-     1b7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  if(cmd == 0)
-     1ba:	85 db                	test   %ebx,%ebx
-     1bc:	74 3a                	je     1f8 <runcmd+0x48>
-  switch(cmd->type){
-     1be:	83 3b 05             	cmpl   $0x5,(%ebx)
-     1c1:	0f 87 e6 00 00 00    	ja     2ad <runcmd+0xfd>
-     1c7:	8b 03                	mov    (%ebx),%eax
-     1c9:	ff 24 85 18 13 00 00 	jmp    *0x1318(,%eax,4)
-    if(ecmd->argv[0] == 0)
-     1d0:	8b 43 04             	mov    0x4(%ebx),%eax
-     1d3:	85 c0                	test   %eax,%eax
-     1d5:	74 21                	je     1f8 <runcmd+0x48>
-    exec(ecmd->argv[0], ecmd->argv);
-     1d7:	8d 53 04             	lea    0x4(%ebx),%edx
-     1da:	51                   	push   %ecx
-     1db:	51                   	push   %ecx
-     1dc:	52                   	push   %edx
-     1dd:	50                   	push   %eax
-     1de:	e8 58 0c 00 00       	call   e3b <exec>
-    printf(2, "exec %s failed\n", ecmd->argv[0]);
-     1e3:	83 c4 0c             	add    $0xc,%esp
-     1e6:	ff 73 04             	push   0x4(%ebx)
-     1e9:	68 67 12 00 00       	push   $0x1267
-     1ee:	6a 02                	push   $0x2
-     1f0:	e8 5b 0d 00 00       	call   f50 <printf>
-    break;
-     1f5:	83 c4 10             	add    $0x10,%esp
-    exit();
-     1f8:	e8 06 0c 00 00       	call   e03 <exit>
-    if(fork1() == 0)
-     1fd:	e8 8e ff ff ff       	call   190 <fork1>
-     202:	85 c0                	test   %eax,%eax
-     204:	75 f2                	jne    1f8 <runcmd+0x48>
-     206:	e9 97 00 00 00       	jmp    2a2 <runcmd+0xf2>
-    if(pipe(p) < 0)
-     20b:	83 ec 0c             	sub    $0xc,%esp
-     20e:	8d 45 f0             	lea    -0x10(%ebp),%eax
-     211:	50                   	push   %eax
-     212:	e8 fc 0b 00 00       	call   e13 <pipe>
-     217:	83 c4 10             	add    $0x10,%esp
-     21a:	85 c0                	test   %eax,%eax
-     21c:	0f 88 ad 00 00 00    	js     2cf <runcmd+0x11f>
-    if(fork1() == 0){
-     222:	e8 69 ff ff ff       	call   190 <fork1>
-     227:	85 c0                	test   %eax,%eax
-     229:	0f 84 ad 00 00 00    	je     2dc <runcmd+0x12c>
-    if(fork1() == 0){
-     22f:	e8 5c ff ff ff       	call   190 <fork1>
-     234:	85 c0                	test   %eax,%eax
-     236:	0f 85 ce 00 00 00    	jne    30a <runcmd+0x15a>
-      close(0);
-     23c:	83 ec 0c             	sub    $0xc,%esp
-     23f:	6a 00                	push   $0x0
-     241:	e8 e5 0b 00 00       	call   e2b <close>
-      dup(p[0]);
-     246:	5a                   	pop    %edx
-     247:	ff 75 f0             	push   -0x10(%ebp)
-     24a:	e8 2c 0c 00 00       	call   e7b <dup>
-      close(p[0]);
-     24f:	59                   	pop    %ecx
-     250:	ff 75 f0             	push   -0x10(%ebp)
-     253:	e8 d3 0b 00 00       	call   e2b <close>
-      close(p[1]);
-     258:	58                   	pop    %eax
-     259:	ff 75 f4             	push   -0xc(%ebp)
-     25c:	e8 ca 0b 00 00       	call   e2b <close>
-      runcmd(pcmd->right);
-     261:	58                   	pop    %eax
-     262:	ff 73 08             	push   0x8(%ebx)
-     265:	e8 46 ff ff ff       	call   1b0 <runcmd>
-    if(fork1() == 0)
-     26a:	e8 21 ff ff ff       	call   190 <fork1>
-     26f:	85 c0                	test   %eax,%eax
-     271:	74 2f                	je     2a2 <runcmd+0xf2>
-    wait();
-     273:	e8 93 0b 00 00       	call   e0b <wait>
-    runcmd(lcmd->right);
-     278:	83 ec 0c             	sub    $0xc,%esp
-     27b:	ff 73 08             	push   0x8(%ebx)
-     27e:	e8 2d ff ff ff       	call   1b0 <runcmd>
-    close(rcmd->fd);
-     283:	83 ec 0c             	sub    $0xc,%esp
-     286:	ff 73 14             	push   0x14(%ebx)
-     289:	e8 9d 0b 00 00       	call   e2b <close>
-    if(open(rcmd->file, rcmd->mode) < 0){
-     28e:	58                   	pop    %eax
-     28f:	5a                   	pop    %edx
-     290:	ff 73 10             	push   0x10(%ebx)
-     293:	ff 73 08             	push   0x8(%ebx)
-     296:	e8 a8 0b 00 00       	call   e43 <open>
-     29b:	83 c4 10             	add    $0x10,%esp
-     29e:	85 c0                	test   %eax,%eax
-     2a0:	78 18                	js     2ba <runcmd+0x10a>
-      runcmd(bcmd->cmd);
-     2a2:	83 ec 0c             	sub    $0xc,%esp
-     2a5:	ff 73 04             	push   0x4(%ebx)
-     2a8:	e8 03 ff ff ff       	call   1b0 <runcmd>
-    panic("runcmd");
-     2ad:	83 ec 0c             	sub    $0xc,%esp
-     2b0:	68 60 12 00 00       	push   $0x1260
-     2b5:	e8 b6 fe ff ff       	call   170 <panic>
-      printf(2, "open %s failed\n", rcmd->file);
-     2ba:	51                   	push   %ecx
-     2bb:	ff 73 08             	push   0x8(%ebx)
-     2be:	68 77 12 00 00       	push   $0x1277
-     2c3:	6a 02                	push   $0x2
-     2c5:	e8 86 0c 00 00       	call   f50 <printf>
-      exit();
-     2ca:	e8 34 0b 00 00       	call   e03 <exit>
-      panic("pipe");
-     2cf:	83 ec 0c             	sub    $0xc,%esp
-     2d2:	68 87 12 00 00       	push   $0x1287
-     2d7:	e8 94 fe ff ff       	call   170 <panic>
-      close(1);
-     2dc:	83 ec 0c             	sub    $0xc,%esp
-     2df:	6a 01                	push   $0x1
-     2e1:	e8 45 0b 00 00       	call   e2b <close>
-      dup(p[1]);
-     2e6:	58                   	pop    %eax
-     2e7:	ff 75 f4             	push   -0xc(%ebp)
-     2ea:	e8 8c 0b 00 00       	call   e7b <dup>
-      close(p[0]);
-     2ef:	58                   	pop    %eax
-     2f0:	ff 75 f0             	push   -0x10(%ebp)
-     2f3:	e8 33 0b 00 00       	call   e2b <close>
-      close(p[1]);
-     2f8:	58                   	pop    %eax
-     2f9:	ff 75 f4             	push   -0xc(%ebp)
-     2fc:	e8 2a 0b 00 00       	call   e2b <close>
-      runcmd(pcmd->left);
-     301:	5a                   	pop    %edx
-     302:	ff 73 04             	push   0x4(%ebx)
-     305:	e8 a6 fe ff ff       	call   1b0 <runcmd>
-    close(p[0]);
-     30a:	83 ec 0c             	sub    $0xc,%esp
-     30d:	ff 75 f0             	push   -0x10(%ebp)
-     310:	e8 16 0b 00 00       	call   e2b <close>
-    close(p[1]);
-     315:	58                   	pop    %eax
-     316:	ff 75 f4             	push   -0xc(%ebp)
-     319:	e8 0d 0b 00 00       	call   e2b <close>
-    wait();
-     31e:	e8 e8 0a 00 00       	call   e0b <wait>
-    wait();
-     323:	e8 e3 0a 00 00       	call   e0b <wait>
-    break;
-     328:	83 c4 10             	add    $0x10,%esp
-     32b:	e9 c8 fe ff ff       	jmp    1f8 <runcmd+0x48>
-
-00000330 <execcmd>:
-//PAGEBREAK!
-// Constructors
-
-struct cmd*
-execcmd(void)
-{
-     330:	55                   	push   %ebp
-     331:	89 e5                	mov    %esp,%ebp
-     333:	53                   	push   %ebx
-     334:	83 ec 10             	sub    $0x10,%esp
-  struct execcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     337:	6a 54                	push   $0x54
-     339:	e8 32 0e 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     33e:	83 c4 0c             	add    $0xc,%esp
-     341:	6a 54                	push   $0x54
-  cmd = malloc(sizeof(*cmd));
-     343:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     345:	6a 00                	push   $0x0
-     347:	50                   	push   %eax
-     348:	e8 33 09 00 00       	call   c80 <memset>
-  cmd->type = EXEC;
-     34d:	c7 03 01 00 00 00    	movl   $0x1,(%ebx)
-  return (struct cmd*)cmd;
-}
-     353:	89 d8                	mov    %ebx,%eax
-     355:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     358:	c9                   	leave
-     359:	c3                   	ret
-     35a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000360 <redircmd>:
-
-struct cmd*
-redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)
-{
-     360:	55                   	push   %ebp
-     361:	89 e5                	mov    %esp,%ebp
-     363:	53                   	push   %ebx
-     364:	83 ec 10             	sub    $0x10,%esp
-  struct redircmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     367:	6a 18                	push   $0x18
-     369:	e8 02 0e 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     36e:	83 c4 0c             	add    $0xc,%esp
-     371:	6a 18                	push   $0x18
-  cmd = malloc(sizeof(*cmd));
-     373:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     375:	6a 00                	push   $0x0
-     377:	50                   	push   %eax
-     378:	e8 03 09 00 00       	call   c80 <memset>
-  cmd->type = REDIR;
-  cmd->cmd = subcmd;
-     37d:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->type = REDIR;
-     380:	c7 03 02 00 00 00    	movl   $0x2,(%ebx)
-  cmd->cmd = subcmd;
-     386:	89 43 04             	mov    %eax,0x4(%ebx)
-  cmd->file = file;
-     389:	8b 45 0c             	mov    0xc(%ebp),%eax
-     38c:	89 43 08             	mov    %eax,0x8(%ebx)
-  cmd->efile = efile;
-     38f:	8b 45 10             	mov    0x10(%ebp),%eax
-     392:	89 43 0c             	mov    %eax,0xc(%ebx)
-  cmd->mode = mode;
-     395:	8b 45 14             	mov    0x14(%ebp),%eax
-     398:	89 43 10             	mov    %eax,0x10(%ebx)
-  cmd->fd = fd;
-     39b:	8b 45 18             	mov    0x18(%ebp),%eax
-     39e:	89 43 14             	mov    %eax,0x14(%ebx)
-  return (struct cmd*)cmd;
-}
-     3a1:	89 d8                	mov    %ebx,%eax
-     3a3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     3a6:	c9                   	leave
-     3a7:	c3                   	ret
-     3a8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     3af:	00 
-
-000003b0 <pipecmd>:
-
-struct cmd*
-pipecmd(struct cmd *left, struct cmd *right)
-{
-     3b0:	55                   	push   %ebp
-     3b1:	89 e5                	mov    %esp,%ebp
-     3b3:	53                   	push   %ebx
-     3b4:	83 ec 10             	sub    $0x10,%esp
-  struct pipecmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     3b7:	6a 0c                	push   $0xc
-     3b9:	e8 b2 0d 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     3be:	83 c4 0c             	add    $0xc,%esp
-     3c1:	6a 0c                	push   $0xc
-  cmd = malloc(sizeof(*cmd));
-     3c3:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     3c5:	6a 00                	push   $0x0
-     3c7:	50                   	push   %eax
-     3c8:	e8 b3 08 00 00       	call   c80 <memset>
-  cmd->type = PIPE;
-  cmd->left = left;
-     3cd:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->type = PIPE;
-     3d0:	c7 03 03 00 00 00    	movl   $0x3,(%ebx)
-  cmd->left = left;
-     3d6:	89 43 04             	mov    %eax,0x4(%ebx)
-  cmd->right = right;
-     3d9:	8b 45 0c             	mov    0xc(%ebp),%eax
-     3dc:	89 43 08             	mov    %eax,0x8(%ebx)
-  return (struct cmd*)cmd;
-}
-     3df:	89 d8                	mov    %ebx,%eax
-     3e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     3e4:	c9                   	leave
-     3e5:	c3                   	ret
-     3e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     3ed:	00 
-     3ee:	66 90                	xchg   %ax,%ax
-
-000003f0 <listcmd>:
-
-struct cmd*
-listcmd(struct cmd *left, struct cmd *right)
-{
-     3f0:	55                   	push   %ebp
-     3f1:	89 e5                	mov    %esp,%ebp
-     3f3:	53                   	push   %ebx
-     3f4:	83 ec 10             	sub    $0x10,%esp
-  struct listcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     3f7:	6a 0c                	push   $0xc
-     3f9:	e8 72 0d 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     3fe:	83 c4 0c             	add    $0xc,%esp
-     401:	6a 0c                	push   $0xc
-  cmd = malloc(sizeof(*cmd));
-     403:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     405:	6a 00                	push   $0x0
-     407:	50                   	push   %eax
-     408:	e8 73 08 00 00       	call   c80 <memset>
-  cmd->type = LIST;
-  cmd->left = left;
-     40d:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->type = LIST;
-     410:	c7 03 04 00 00 00    	movl   $0x4,(%ebx)
-  cmd->left = left;
-     416:	89 43 04             	mov    %eax,0x4(%ebx)
-  cmd->right = right;
-     419:	8b 45 0c             	mov    0xc(%ebp),%eax
-     41c:	89 43 08             	mov    %eax,0x8(%ebx)
-  return (struct cmd*)cmd;
-}
-     41f:	89 d8                	mov    %ebx,%eax
-     421:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     424:	c9                   	leave
-     425:	c3                   	ret
-     426:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     42d:	00 
-     42e:	66 90                	xchg   %ax,%ax
-
-00000430 <backcmd>:
-
-struct cmd*
-backcmd(struct cmd *subcmd)
-{
-     430:	55                   	push   %ebp
-     431:	89 e5                	mov    %esp,%ebp
-     433:	53                   	push   %ebx
-     434:	83 ec 10             	sub    $0x10,%esp
-  struct backcmd *cmd;
-
-  cmd = malloc(sizeof(*cmd));
-     437:	6a 08                	push   $0x8
-     439:	e8 32 0d 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     43e:	83 c4 0c             	add    $0xc,%esp
-     441:	6a 08                	push   $0x8
-  cmd = malloc(sizeof(*cmd));
-     443:	89 c3                	mov    %eax,%ebx
-  memset(cmd, 0, sizeof(*cmd));
-     445:	6a 00                	push   $0x0
-     447:	50                   	push   %eax
-     448:	e8 33 08 00 00       	call   c80 <memset>
-  cmd->type = BACK;
-  cmd->cmd = subcmd;
-     44d:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->type = BACK;
-     450:	c7 03 05 00 00 00    	movl   $0x5,(%ebx)
-  cmd->cmd = subcmd;
-     456:	89 43 04             	mov    %eax,0x4(%ebx)
-  return (struct cmd*)cmd;
-}
-     459:	89 d8                	mov    %ebx,%eax
-     45b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     45e:	c9                   	leave
-     45f:	c3                   	ret
-
-00000460 <gettoken>:
-char whitespace[] = " \t\r\n\v";
-char symbols[] = "<|>&;()";
-
-int
-gettoken(char **ps, char *es, char **q, char **eq)
-{
-     460:	55                   	push   %ebp
-     461:	89 e5                	mov    %esp,%ebp
-     463:	57                   	push   %edi
-     464:	56                   	push   %esi
-     465:	53                   	push   %ebx
-     466:	83 ec 0c             	sub    $0xc,%esp
-  char *s;
-  int ret;
-
-  s = *ps;
-     469:	8b 45 08             	mov    0x8(%ebp),%eax
-{
-     46c:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-     46f:	8b 75 10             	mov    0x10(%ebp),%esi
-  s = *ps;
-     472:	8b 38                	mov    (%eax),%edi
-  while(s < es && strchr(whitespace, *s))
-     474:	39 df                	cmp    %ebx,%edi
-     476:	72 0f                	jb     487 <gettoken+0x27>
-     478:	eb 25                	jmp    49f <gettoken+0x3f>
-     47a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    s++;
-     480:	83 c7 01             	add    $0x1,%edi
-  while(s < es && strchr(whitespace, *s))
-     483:	39 fb                	cmp    %edi,%ebx
-     485:	74 18                	je     49f <gettoken+0x3f>
-     487:	0f be 07             	movsbl (%edi),%eax
-     48a:	83 ec 08             	sub    $0x8,%esp
-     48d:	50                   	push   %eax
-     48e:	68 70 19 00 00       	push   $0x1970
-     493:	e8 08 08 00 00       	call   ca0 <strchr>
-     498:	83 c4 10             	add    $0x10,%esp
-     49b:	85 c0                	test   %eax,%eax
-     49d:	75 e1                	jne    480 <gettoken+0x20>
-  if(q)
-     49f:	85 f6                	test   %esi,%esi
-     4a1:	74 02                	je     4a5 <gettoken+0x45>
-    *q = s;
-     4a3:	89 3e                	mov    %edi,(%esi)
-  ret = *s;
-     4a5:	0f b6 07             	movzbl (%edi),%eax
-  switch(*s){
-     4a8:	3c 3c                	cmp    $0x3c,%al
-     4aa:	0f 8f c8 00 00 00    	jg     578 <gettoken+0x118>
-     4b0:	3c 3a                	cmp    $0x3a,%al
-     4b2:	7f 5a                	jg     50e <gettoken+0xae>
-     4b4:	84 c0                	test   %al,%al
-     4b6:	75 48                	jne    500 <gettoken+0xa0>
-     4b8:	31 f6                	xor    %esi,%esi
-    ret = 'a';
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-      s++;
-    break;
-  }
-  if(eq)
-     4ba:	8b 4d 14             	mov    0x14(%ebp),%ecx
-     4bd:	85 c9                	test   %ecx,%ecx
-     4bf:	74 05                	je     4c6 <gettoken+0x66>
-    *eq = s;
-     4c1:	8b 45 14             	mov    0x14(%ebp),%eax
-     4c4:	89 38                	mov    %edi,(%eax)
-
-  while(s < es && strchr(whitespace, *s))
-     4c6:	39 df                	cmp    %ebx,%edi
-     4c8:	72 0d                	jb     4d7 <gettoken+0x77>
-     4ca:	eb 23                	jmp    4ef <gettoken+0x8f>
-     4cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    s++;
-     4d0:	83 c7 01             	add    $0x1,%edi
-  while(s < es && strchr(whitespace, *s))
-     4d3:	39 fb                	cmp    %edi,%ebx
-     4d5:	74 18                	je     4ef <gettoken+0x8f>
-     4d7:	0f be 07             	movsbl (%edi),%eax
-     4da:	83 ec 08             	sub    $0x8,%esp
-     4dd:	50                   	push   %eax
-     4de:	68 70 19 00 00       	push   $0x1970
-     4e3:	e8 b8 07 00 00       	call   ca0 <strchr>
-     4e8:	83 c4 10             	add    $0x10,%esp
-     4eb:	85 c0                	test   %eax,%eax
-     4ed:	75 e1                	jne    4d0 <gettoken+0x70>
-  *ps = s;
-     4ef:	8b 45 08             	mov    0x8(%ebp),%eax
-     4f2:	89 38                	mov    %edi,(%eax)
-  return ret;
-}
-     4f4:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     4f7:	89 f0                	mov    %esi,%eax
-     4f9:	5b                   	pop    %ebx
-     4fa:	5e                   	pop    %esi
-     4fb:	5f                   	pop    %edi
-     4fc:	5d                   	pop    %ebp
-     4fd:	c3                   	ret
-     4fe:	66 90                	xchg   %ax,%ax
-  switch(*s){
-     500:	78 22                	js     524 <gettoken+0xc4>
-     502:	3c 26                	cmp    $0x26,%al
-     504:	74 08                	je     50e <gettoken+0xae>
-     506:	8d 48 d8             	lea    -0x28(%eax),%ecx
-     509:	80 f9 01             	cmp    $0x1,%cl
-     50c:	77 16                	ja     524 <gettoken+0xc4>
-  ret = *s;
-     50e:	0f be f0             	movsbl %al,%esi
-    s++;
-     511:	83 c7 01             	add    $0x1,%edi
-    break;
-     514:	eb a4                	jmp    4ba <gettoken+0x5a>
-     516:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     51d:	00 
-     51e:	66 90                	xchg   %ax,%ax
-  switch(*s){
-     520:	3c 7c                	cmp    $0x7c,%al
-     522:	74 ea                	je     50e <gettoken+0xae>
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     524:	39 df                	cmp    %ebx,%edi
-     526:	72 27                	jb     54f <gettoken+0xef>
-     528:	e9 87 00 00 00       	jmp    5b4 <gettoken+0x154>
-     52d:	8d 76 00             	lea    0x0(%esi),%esi
-     530:	0f be 07             	movsbl (%edi),%eax
-     533:	83 ec 08             	sub    $0x8,%esp
-     536:	50                   	push   %eax
-     537:	68 68 19 00 00       	push   $0x1968
-     53c:	e8 5f 07 00 00       	call   ca0 <strchr>
-     541:	83 c4 10             	add    $0x10,%esp
-     544:	85 c0                	test   %eax,%eax
-     546:	75 1f                	jne    567 <gettoken+0x107>
-      s++;
-     548:	83 c7 01             	add    $0x1,%edi
-    while(s < es && !strchr(whitespace, *s) && !strchr(symbols, *s))
-     54b:	39 fb                	cmp    %edi,%ebx
-     54d:	74 4d                	je     59c <gettoken+0x13c>
-     54f:	0f be 07             	movsbl (%edi),%eax
-     552:	83 ec 08             	sub    $0x8,%esp
-     555:	50                   	push   %eax
-     556:	68 70 19 00 00       	push   $0x1970
-     55b:	e8 40 07 00 00       	call   ca0 <strchr>
-     560:	83 c4 10             	add    $0x10,%esp
-     563:	85 c0                	test   %eax,%eax
-     565:	74 c9                	je     530 <gettoken+0xd0>
-    ret = 'a';
-     567:	be 61 00 00 00       	mov    $0x61,%esi
-     56c:	e9 49 ff ff ff       	jmp    4ba <gettoken+0x5a>
-     571:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  switch(*s){
-     578:	3c 3e                	cmp    $0x3e,%al
-     57a:	75 a4                	jne    520 <gettoken+0xc0>
-    if(*s == '>'){
-     57c:	80 7f 01 3e          	cmpb   $0x3e,0x1(%edi)
-     580:	74 0d                	je     58f <gettoken+0x12f>
-    s++;
-     582:	83 c7 01             	add    $0x1,%edi
-  ret = *s;
-     585:	be 3e 00 00 00       	mov    $0x3e,%esi
-     58a:	e9 2b ff ff ff       	jmp    4ba <gettoken+0x5a>
-      s++;
-     58f:	83 c7 02             	add    $0x2,%edi
-      ret = '+';
-     592:	be 2b 00 00 00       	mov    $0x2b,%esi
-     597:	e9 1e ff ff ff       	jmp    4ba <gettoken+0x5a>
-  if(eq)
-     59c:	8b 45 14             	mov    0x14(%ebp),%eax
-     59f:	85 c0                	test   %eax,%eax
-     5a1:	74 05                	je     5a8 <gettoken+0x148>
-    *eq = s;
-     5a3:	8b 45 14             	mov    0x14(%ebp),%eax
-     5a6:	89 18                	mov    %ebx,(%eax)
-  while(s < es && strchr(whitespace, *s))
-     5a8:	89 df                	mov    %ebx,%edi
-    ret = 'a';
-     5aa:	be 61 00 00 00       	mov    $0x61,%esi
-     5af:	e9 3b ff ff ff       	jmp    4ef <gettoken+0x8f>
-  if(eq)
-     5b4:	8b 55 14             	mov    0x14(%ebp),%edx
-     5b7:	85 d2                	test   %edx,%edx
-     5b9:	74 ef                	je     5aa <gettoken+0x14a>
-    *eq = s;
-     5bb:	8b 45 14             	mov    0x14(%ebp),%eax
-     5be:	89 38                	mov    %edi,(%eax)
-  while(s < es && strchr(whitespace, *s))
-     5c0:	eb e8                	jmp    5aa <gettoken+0x14a>
-     5c2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     5c9:	00 
-     5ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000005d0 <peek>:
-
-int
-peek(char **ps, char *es, char *toks)
-{
-     5d0:	55                   	push   %ebp
-     5d1:	89 e5                	mov    %esp,%ebp
-     5d3:	57                   	push   %edi
-     5d4:	56                   	push   %esi
-     5d5:	53                   	push   %ebx
-     5d6:	83 ec 0c             	sub    $0xc,%esp
-     5d9:	8b 7d 08             	mov    0x8(%ebp),%edi
-     5dc:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *s;
-
-  s = *ps;
-     5df:	8b 1f                	mov    (%edi),%ebx
-  while(s < es && strchr(whitespace, *s))
-     5e1:	39 f3                	cmp    %esi,%ebx
-     5e3:	72 12                	jb     5f7 <peek+0x27>
-     5e5:	eb 28                	jmp    60f <peek+0x3f>
-     5e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     5ee:	00 
-     5ef:	90                   	nop
-    s++;
-     5f0:	83 c3 01             	add    $0x1,%ebx
-  while(s < es && strchr(whitespace, *s))
-     5f3:	39 de                	cmp    %ebx,%esi
-     5f5:	74 18                	je     60f <peek+0x3f>
-     5f7:	0f be 03             	movsbl (%ebx),%eax
-     5fa:	83 ec 08             	sub    $0x8,%esp
-     5fd:	50                   	push   %eax
-     5fe:	68 70 19 00 00       	push   $0x1970
-     603:	e8 98 06 00 00       	call   ca0 <strchr>
-     608:	83 c4 10             	add    $0x10,%esp
-     60b:	85 c0                	test   %eax,%eax
-     60d:	75 e1                	jne    5f0 <peek+0x20>
-  *ps = s;
-     60f:	89 1f                	mov    %ebx,(%edi)
-  return *s && strchr(toks, *s);
-     611:	0f be 03             	movsbl (%ebx),%eax
-     614:	31 d2                	xor    %edx,%edx
-     616:	84 c0                	test   %al,%al
-     618:	75 0e                	jne    628 <peek+0x58>
-}
-     61a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     61d:	89 d0                	mov    %edx,%eax
-     61f:	5b                   	pop    %ebx
-     620:	5e                   	pop    %esi
-     621:	5f                   	pop    %edi
-     622:	5d                   	pop    %ebp
-     623:	c3                   	ret
-     624:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  return *s && strchr(toks, *s);
-     628:	83 ec 08             	sub    $0x8,%esp
-     62b:	50                   	push   %eax
-     62c:	ff 75 10             	push   0x10(%ebp)
-     62f:	e8 6c 06 00 00       	call   ca0 <strchr>
-     634:	83 c4 10             	add    $0x10,%esp
-     637:	31 d2                	xor    %edx,%edx
-     639:	85 c0                	test   %eax,%eax
-     63b:	0f 95 c2             	setne  %dl
-}
-     63e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     641:	5b                   	pop    %ebx
-     642:	89 d0                	mov    %edx,%eax
-     644:	5e                   	pop    %esi
-     645:	5f                   	pop    %edi
-     646:	5d                   	pop    %ebp
-     647:	c3                   	ret
-     648:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     64f:	00 
-
-00000650 <parseredirs>:
-  return cmd;
-}
-
-struct cmd*
-parseredirs(struct cmd *cmd, char **ps, char *es)
-{
-     650:	55                   	push   %ebp
-     651:	89 e5                	mov    %esp,%ebp
-     653:	57                   	push   %edi
-     654:	56                   	push   %esi
-     655:	53                   	push   %ebx
-     656:	83 ec 2c             	sub    $0x2c,%esp
-     659:	8b 75 0c             	mov    0xc(%ebp),%esi
-     65c:	8b 5d 10             	mov    0x10(%ebp),%ebx
-  int tok;
-  char *q, *eq;
-
-  while(peek(ps, es, "<>")){
-     65f:	90                   	nop
-     660:	83 ec 04             	sub    $0x4,%esp
-     663:	68 a9 12 00 00       	push   $0x12a9
-     668:	53                   	push   %ebx
-     669:	56                   	push   %esi
-     66a:	e8 61 ff ff ff       	call   5d0 <peek>
-     66f:	83 c4 10             	add    $0x10,%esp
-     672:	85 c0                	test   %eax,%eax
-     674:	0f 84 f6 00 00 00    	je     770 <parseredirs+0x120>
-    tok = gettoken(ps, es, 0, 0);
-     67a:	6a 00                	push   $0x0
-     67c:	6a 00                	push   $0x0
-     67e:	53                   	push   %ebx
-     67f:	56                   	push   %esi
-     680:	e8 db fd ff ff       	call   460 <gettoken>
-     685:	89 c7                	mov    %eax,%edi
-    if(gettoken(ps, es, &q, &eq) != 'a')
-     687:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     68a:	50                   	push   %eax
-     68b:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     68e:	50                   	push   %eax
-     68f:	53                   	push   %ebx
-     690:	56                   	push   %esi
-     691:	e8 ca fd ff ff       	call   460 <gettoken>
-     696:	83 c4 20             	add    $0x20,%esp
-     699:	83 f8 61             	cmp    $0x61,%eax
-     69c:	0f 85 d9 00 00 00    	jne    77b <parseredirs+0x12b>
-      panic("missing file for redirection");
-    switch(tok){
-     6a2:	83 ff 3c             	cmp    $0x3c,%edi
-     6a5:	74 69                	je     710 <parseredirs+0xc0>
-     6a7:	83 ff 3e             	cmp    $0x3e,%edi
-     6aa:	74 05                	je     6b1 <parseredirs+0x61>
-     6ac:	83 ff 2b             	cmp    $0x2b,%edi
-     6af:	75 af                	jne    660 <parseredirs+0x10>
-      break;
-    case '>':
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-      break;
-    case '+':  // >>
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     6b1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-     6b4:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-  cmd = malloc(sizeof(*cmd));
-     6b7:	83 ec 0c             	sub    $0xc,%esp
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     6ba:	89 55 d0             	mov    %edx,-0x30(%ebp)
-     6bd:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
-  cmd = malloc(sizeof(*cmd));
-     6c0:	6a 18                	push   $0x18
-     6c2:	e8 a9 0a 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     6c7:	83 c4 0c             	add    $0xc,%esp
-     6ca:	6a 18                	push   $0x18
-  cmd = malloc(sizeof(*cmd));
-     6cc:	89 c7                	mov    %eax,%edi
-  memset(cmd, 0, sizeof(*cmd));
-     6ce:	6a 00                	push   $0x0
-     6d0:	50                   	push   %eax
-     6d1:	e8 aa 05 00 00       	call   c80 <memset>
-  cmd->type = REDIR;
-     6d6:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
-  cmd->cmd = subcmd;
-     6dc:	8b 45 08             	mov    0x8(%ebp),%eax
-      break;
-     6df:	83 c4 10             	add    $0x10,%esp
-  cmd->cmd = subcmd;
-     6e2:	89 47 04             	mov    %eax,0x4(%edi)
-  cmd->file = file;
-     6e5:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
-     6e8:	89 4f 08             	mov    %ecx,0x8(%edi)
-  cmd->efile = efile;
-     6eb:	8b 55 d0             	mov    -0x30(%ebp),%edx
-  cmd->mode = mode;
-     6ee:	c7 47 10 01 02 00 00 	movl   $0x201,0x10(%edi)
-  cmd->efile = efile;
-     6f5:	89 57 0c             	mov    %edx,0xc(%edi)
-  cmd->fd = fd;
-     6f8:	c7 47 14 01 00 00 00 	movl   $0x1,0x14(%edi)
-      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);
-     6ff:	89 7d 08             	mov    %edi,0x8(%ebp)
-      break;
-     702:	e9 59 ff ff ff       	jmp    660 <parseredirs+0x10>
-     707:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     70e:	00 
-     70f:	90                   	nop
-      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-     710:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-     713:	8b 4d e0             	mov    -0x20(%ebp),%ecx
-  cmd = malloc(sizeof(*cmd));
-     716:	83 ec 0c             	sub    $0xc,%esp
-      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-     719:	89 55 d0             	mov    %edx,-0x30(%ebp)
-     71c:	89 4d d4             	mov    %ecx,-0x2c(%ebp)
-  cmd = malloc(sizeof(*cmd));
-     71f:	6a 18                	push   $0x18
-     721:	e8 4a 0a 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     726:	83 c4 0c             	add    $0xc,%esp
-     729:	6a 18                	push   $0x18
-  cmd = malloc(sizeof(*cmd));
-     72b:	89 c7                	mov    %eax,%edi
-  memset(cmd, 0, sizeof(*cmd));
-     72d:	6a 00                	push   $0x0
-     72f:	50                   	push   %eax
-     730:	e8 4b 05 00 00       	call   c80 <memset>
-  cmd->cmd = subcmd;
-     735:	8b 45 08             	mov    0x8(%ebp),%eax
-  cmd->file = file;
-     738:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
-      break;
-     73b:	83 c4 10             	add    $0x10,%esp
-  cmd->efile = efile;
-     73e:	8b 55 d0             	mov    -0x30(%ebp),%edx
-  cmd->type = REDIR;
-     741:	c7 07 02 00 00 00    	movl   $0x2,(%edi)
-  cmd->cmd = subcmd;
-     747:	89 47 04             	mov    %eax,0x4(%edi)
-  cmd->file = file;
-     74a:	89 4f 08             	mov    %ecx,0x8(%edi)
-  cmd->efile = efile;
-     74d:	89 57 0c             	mov    %edx,0xc(%edi)
-  cmd->mode = mode;
-     750:	c7 47 10 00 00 00 00 	movl   $0x0,0x10(%edi)
-  cmd->fd = fd;
-     757:	c7 47 14 00 00 00 00 	movl   $0x0,0x14(%edi)
-      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);
-     75e:	89 7d 08             	mov    %edi,0x8(%ebp)
-      break;
-     761:	e9 fa fe ff ff       	jmp    660 <parseredirs+0x10>
-     766:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     76d:	00 
-     76e:	66 90                	xchg   %ax,%ax
-    }
-  }
-  return cmd;
-}
-     770:	8b 45 08             	mov    0x8(%ebp),%eax
-     773:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     776:	5b                   	pop    %ebx
-     777:	5e                   	pop    %esi
-     778:	5f                   	pop    %edi
-     779:	5d                   	pop    %ebp
-     77a:	c3                   	ret
-      panic("missing file for redirection");
-     77b:	83 ec 0c             	sub    $0xc,%esp
-     77e:	68 8c 12 00 00       	push   $0x128c
-     783:	e8 e8 f9 ff ff       	call   170 <panic>
-     788:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     78f:	00 
-
-00000790 <parseexec>:
-  return cmd;
-}
-
-struct cmd*
-parseexec(char **ps, char *es)
-{
-     790:	55                   	push   %ebp
-     791:	89 e5                	mov    %esp,%ebp
-     793:	57                   	push   %edi
-     794:	56                   	push   %esi
-     795:	53                   	push   %ebx
-     796:	83 ec 30             	sub    $0x30,%esp
-     799:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     79c:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *q, *eq;
-  int tok, argc;
-  struct execcmd *cmd;
-  struct cmd *ret;
-
-  if(peek(ps, es, "("))
-     79f:	68 ac 12 00 00       	push   $0x12ac
-     7a4:	56                   	push   %esi
-     7a5:	53                   	push   %ebx
-     7a6:	e8 25 fe ff ff       	call   5d0 <peek>
-     7ab:	83 c4 10             	add    $0x10,%esp
-     7ae:	85 c0                	test   %eax,%eax
-     7b0:	0f 85 aa 00 00 00    	jne    860 <parseexec+0xd0>
-  cmd = malloc(sizeof(*cmd));
-     7b6:	83 ec 0c             	sub    $0xc,%esp
-     7b9:	89 c7                	mov    %eax,%edi
-     7bb:	6a 54                	push   $0x54
-     7bd:	e8 ae 09 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     7c2:	83 c4 0c             	add    $0xc,%esp
-     7c5:	6a 54                	push   $0x54
-     7c7:	6a 00                	push   $0x0
-     7c9:	89 45 d0             	mov    %eax,-0x30(%ebp)
-     7cc:	50                   	push   %eax
-     7cd:	e8 ae 04 00 00       	call   c80 <memset>
-  cmd->type = EXEC;
-     7d2:	8b 45 d0             	mov    -0x30(%ebp),%eax
-
-  ret = execcmd();
-  cmd = (struct execcmd*)ret;
-
-  argc = 0;
-  ret = parseredirs(ret, ps, es);
-     7d5:	83 c4 0c             	add    $0xc,%esp
-  cmd->type = EXEC;
-     7d8:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
-  ret = parseredirs(ret, ps, es);
-     7de:	56                   	push   %esi
-     7df:	53                   	push   %ebx
-     7e0:	50                   	push   %eax
-     7e1:	e8 6a fe ff ff       	call   650 <parseredirs>
-  while(!peek(ps, es, "|)&;")){
-     7e6:	83 c4 10             	add    $0x10,%esp
-  ret = parseredirs(ret, ps, es);
-     7e9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-  while(!peek(ps, es, "|)&;")){
-     7ec:	eb 15                	jmp    803 <parseexec+0x73>
-     7ee:	66 90                	xchg   %ax,%ax
-    cmd->argv[argc] = q;
-    cmd->eargv[argc] = eq;
-    argc++;
-    if(argc >= MAXARGS)
-      panic("too many args");
-    ret = parseredirs(ret, ps, es);
-     7f0:	83 ec 04             	sub    $0x4,%esp
-     7f3:	56                   	push   %esi
-     7f4:	53                   	push   %ebx
-     7f5:	ff 75 d4             	push   -0x2c(%ebp)
-     7f8:	e8 53 fe ff ff       	call   650 <parseredirs>
-     7fd:	83 c4 10             	add    $0x10,%esp
-     800:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-  while(!peek(ps, es, "|)&;")){
-     803:	83 ec 04             	sub    $0x4,%esp
-     806:	68 c3 12 00 00       	push   $0x12c3
-     80b:	56                   	push   %esi
-     80c:	53                   	push   %ebx
-     80d:	e8 be fd ff ff       	call   5d0 <peek>
-     812:	83 c4 10             	add    $0x10,%esp
-     815:	85 c0                	test   %eax,%eax
-     817:	75 5f                	jne    878 <parseexec+0xe8>
-    if((tok=gettoken(ps, es, &q, &eq)) == 0)
-     819:	8d 45 e4             	lea    -0x1c(%ebp),%eax
-     81c:	50                   	push   %eax
-     81d:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     820:	50                   	push   %eax
-     821:	56                   	push   %esi
-     822:	53                   	push   %ebx
-     823:	e8 38 fc ff ff       	call   460 <gettoken>
-     828:	83 c4 10             	add    $0x10,%esp
-     82b:	85 c0                	test   %eax,%eax
-     82d:	74 49                	je     878 <parseexec+0xe8>
-    if(tok != 'a')
-     82f:	83 f8 61             	cmp    $0x61,%eax
-     832:	75 62                	jne    896 <parseexec+0x106>
-    cmd->argv[argc] = q;
-     834:	8b 45 e0             	mov    -0x20(%ebp),%eax
-     837:	8b 55 d0             	mov    -0x30(%ebp),%edx
-     83a:	89 44 ba 04          	mov    %eax,0x4(%edx,%edi,4)
-    cmd->eargv[argc] = eq;
-     83e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-     841:	89 44 ba 2c          	mov    %eax,0x2c(%edx,%edi,4)
-    argc++;
-     845:	83 c7 01             	add    $0x1,%edi
-    if(argc >= MAXARGS)
-     848:	83 ff 0a             	cmp    $0xa,%edi
-     84b:	75 a3                	jne    7f0 <parseexec+0x60>
-      panic("too many args");
-     84d:	83 ec 0c             	sub    $0xc,%esp
-     850:	68 b5 12 00 00       	push   $0x12b5
-     855:	e8 16 f9 ff ff       	call   170 <panic>
-     85a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    return parseblock(ps, es);
-     860:	89 75 0c             	mov    %esi,0xc(%ebp)
-     863:	89 5d 08             	mov    %ebx,0x8(%ebp)
-  }
-  cmd->argv[argc] = 0;
-  cmd->eargv[argc] = 0;
-  return ret;
-}
-     866:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     869:	5b                   	pop    %ebx
-     86a:	5e                   	pop    %esi
-     86b:	5f                   	pop    %edi
-     86c:	5d                   	pop    %ebp
-    return parseblock(ps, es);
-     86d:	e9 ae 01 00 00       	jmp    a20 <parseblock>
-     872:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  cmd->argv[argc] = 0;
-     878:	8b 45 d0             	mov    -0x30(%ebp),%eax
-     87b:	c7 44 b8 04 00 00 00 	movl   $0x0,0x4(%eax,%edi,4)
-     882:	00 
-  cmd->eargv[argc] = 0;
-     883:	c7 44 b8 2c 00 00 00 	movl   $0x0,0x2c(%eax,%edi,4)
-     88a:	00 
-}
-     88b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
-     88e:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     891:	5b                   	pop    %ebx
-     892:	5e                   	pop    %esi
-     893:	5f                   	pop    %edi
-     894:	5d                   	pop    %ebp
-     895:	c3                   	ret
-      panic("syntax");
-     896:	83 ec 0c             	sub    $0xc,%esp
-     899:	68 ae 12 00 00       	push   $0x12ae
-     89e:	e8 cd f8 ff ff       	call   170 <panic>
-     8a3:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     8aa:	00 
-     8ab:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-000008b0 <parsepipe>:
-{
-     8b0:	55                   	push   %ebp
-     8b1:	89 e5                	mov    %esp,%ebp
-     8b3:	57                   	push   %edi
-     8b4:	56                   	push   %esi
-     8b5:	53                   	push   %ebx
-     8b6:	83 ec 14             	sub    $0x14,%esp
-     8b9:	8b 75 08             	mov    0x8(%ebp),%esi
-     8bc:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  cmd = parseexec(ps, es);
-     8bf:	57                   	push   %edi
-     8c0:	56                   	push   %esi
-     8c1:	e8 ca fe ff ff       	call   790 <parseexec>
-  if(peek(ps, es, "|")){
-     8c6:	83 c4 0c             	add    $0xc,%esp
-     8c9:	68 c8 12 00 00       	push   $0x12c8
-  cmd = parseexec(ps, es);
-     8ce:	89 c3                	mov    %eax,%ebx
-  if(peek(ps, es, "|")){
-     8d0:	57                   	push   %edi
-     8d1:	56                   	push   %esi
-     8d2:	e8 f9 fc ff ff       	call   5d0 <peek>
-     8d7:	83 c4 10             	add    $0x10,%esp
-     8da:	85 c0                	test   %eax,%eax
-     8dc:	75 12                	jne    8f0 <parsepipe+0x40>
-}
-     8de:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     8e1:	89 d8                	mov    %ebx,%eax
-     8e3:	5b                   	pop    %ebx
-     8e4:	5e                   	pop    %esi
-     8e5:	5f                   	pop    %edi
-     8e6:	5d                   	pop    %ebp
-     8e7:	c3                   	ret
-     8e8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     8ef:	00 
-    gettoken(ps, es, 0, 0);
-     8f0:	6a 00                	push   $0x0
-     8f2:	6a 00                	push   $0x0
-     8f4:	57                   	push   %edi
-     8f5:	56                   	push   %esi
-     8f6:	e8 65 fb ff ff       	call   460 <gettoken>
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-     8fb:	58                   	pop    %eax
-     8fc:	5a                   	pop    %edx
-     8fd:	57                   	push   %edi
-     8fe:	56                   	push   %esi
-     8ff:	e8 ac ff ff ff       	call   8b0 <parsepipe>
-  cmd = malloc(sizeof(*cmd));
-     904:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-     90b:	89 c7                	mov    %eax,%edi
-  cmd = malloc(sizeof(*cmd));
-     90d:	e8 5e 08 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     912:	83 c4 0c             	add    $0xc,%esp
-     915:	6a 0c                	push   $0xc
-  cmd = malloc(sizeof(*cmd));
-     917:	89 c6                	mov    %eax,%esi
-  memset(cmd, 0, sizeof(*cmd));
-     919:	6a 00                	push   $0x0
-     91b:	50                   	push   %eax
-     91c:	e8 5f 03 00 00       	call   c80 <memset>
-  cmd->left = left;
-     921:	89 5e 04             	mov    %ebx,0x4(%esi)
-  cmd->right = right;
-     924:	83 c4 10             	add    $0x10,%esp
-    cmd = pipecmd(cmd, parsepipe(ps, es));
-     927:	89 f3                	mov    %esi,%ebx
-  cmd->type = PIPE;
-     929:	c7 06 03 00 00 00    	movl   $0x3,(%esi)
-}
-     92f:	89 d8                	mov    %ebx,%eax
-  cmd->right = right;
-     931:	89 7e 08             	mov    %edi,0x8(%esi)
-}
-     934:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     937:	5b                   	pop    %ebx
-     938:	5e                   	pop    %esi
-     939:	5f                   	pop    %edi
-     93a:	5d                   	pop    %ebp
-     93b:	c3                   	ret
-     93c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000940 <parseline>:
-{
-     940:	55                   	push   %ebp
-     941:	89 e5                	mov    %esp,%ebp
-     943:	57                   	push   %edi
-     944:	56                   	push   %esi
-     945:	53                   	push   %ebx
-     946:	83 ec 24             	sub    $0x24,%esp
-     949:	8b 75 08             	mov    0x8(%ebp),%esi
-     94c:	8b 7d 0c             	mov    0xc(%ebp),%edi
-  cmd = parsepipe(ps, es);
-     94f:	57                   	push   %edi
-     950:	56                   	push   %esi
-     951:	e8 5a ff ff ff       	call   8b0 <parsepipe>
-  while(peek(ps, es, "&")){
-     956:	83 c4 10             	add    $0x10,%esp
-  cmd = parsepipe(ps, es);
-     959:	89 c3                	mov    %eax,%ebx
-  while(peek(ps, es, "&")){
-     95b:	eb 3b                	jmp    998 <parseline+0x58>
-     95d:	8d 76 00             	lea    0x0(%esi),%esi
-    gettoken(ps, es, 0, 0);
-     960:	6a 00                	push   $0x0
-     962:	6a 00                	push   $0x0
-     964:	57                   	push   %edi
-     965:	56                   	push   %esi
-     966:	e8 f5 fa ff ff       	call   460 <gettoken>
-  cmd = malloc(sizeof(*cmd));
-     96b:	c7 04 24 08 00 00 00 	movl   $0x8,(%esp)
-     972:	e8 f9 07 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     977:	83 c4 0c             	add    $0xc,%esp
-     97a:	6a 08                	push   $0x8
-     97c:	6a 00                	push   $0x0
-     97e:	50                   	push   %eax
-     97f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-     982:	e8 f9 02 00 00       	call   c80 <memset>
-  cmd->type = BACK;
-     987:	8b 55 e4             	mov    -0x1c(%ebp),%edx
-  cmd->cmd = subcmd;
-     98a:	83 c4 10             	add    $0x10,%esp
-  cmd->type = BACK;
-     98d:	c7 02 05 00 00 00    	movl   $0x5,(%edx)
-  cmd->cmd = subcmd;
-     993:	89 5a 04             	mov    %ebx,0x4(%edx)
-    cmd = backcmd(cmd);
-     996:	89 d3                	mov    %edx,%ebx
-  while(peek(ps, es, "&")){
-     998:	83 ec 04             	sub    $0x4,%esp
-     99b:	68 ca 12 00 00       	push   $0x12ca
-     9a0:	57                   	push   %edi
-     9a1:	56                   	push   %esi
-     9a2:	e8 29 fc ff ff       	call   5d0 <peek>
-     9a7:	83 c4 10             	add    $0x10,%esp
-     9aa:	85 c0                	test   %eax,%eax
-     9ac:	75 b2                	jne    960 <parseline+0x20>
-  if(peek(ps, es, ";")){
-     9ae:	83 ec 04             	sub    $0x4,%esp
-     9b1:	68 c6 12 00 00       	push   $0x12c6
-     9b6:	57                   	push   %edi
-     9b7:	56                   	push   %esi
-     9b8:	e8 13 fc ff ff       	call   5d0 <peek>
-     9bd:	83 c4 10             	add    $0x10,%esp
-     9c0:	85 c0                	test   %eax,%eax
-     9c2:	75 0c                	jne    9d0 <parseline+0x90>
-}
-     9c4:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     9c7:	89 d8                	mov    %ebx,%eax
-     9c9:	5b                   	pop    %ebx
-     9ca:	5e                   	pop    %esi
-     9cb:	5f                   	pop    %edi
-     9cc:	5d                   	pop    %ebp
-     9cd:	c3                   	ret
-     9ce:	66 90                	xchg   %ax,%ax
-    gettoken(ps, es, 0, 0);
-     9d0:	6a 00                	push   $0x0
-     9d2:	6a 00                	push   $0x0
-     9d4:	57                   	push   %edi
-     9d5:	56                   	push   %esi
-     9d6:	e8 85 fa ff ff       	call   460 <gettoken>
-    cmd = listcmd(cmd, parseline(ps, es));
-     9db:	58                   	pop    %eax
-     9dc:	5a                   	pop    %edx
-     9dd:	57                   	push   %edi
-     9de:	56                   	push   %esi
-     9df:	e8 5c ff ff ff       	call   940 <parseline>
-  cmd = malloc(sizeof(*cmd));
-     9e4:	c7 04 24 0c 00 00 00 	movl   $0xc,(%esp)
-    cmd = listcmd(cmd, parseline(ps, es));
-     9eb:	89 c7                	mov    %eax,%edi
-  cmd = malloc(sizeof(*cmd));
-     9ed:	e8 7e 07 00 00       	call   1170 <malloc>
-  memset(cmd, 0, sizeof(*cmd));
-     9f2:	83 c4 0c             	add    $0xc,%esp
-     9f5:	6a 0c                	push   $0xc
-  cmd = malloc(sizeof(*cmd));
-     9f7:	89 c6                	mov    %eax,%esi
-  memset(cmd, 0, sizeof(*cmd));
-     9f9:	6a 00                	push   $0x0
-     9fb:	50                   	push   %eax
-     9fc:	e8 7f 02 00 00       	call   c80 <memset>
-  cmd->left = left;
-     a01:	89 5e 04             	mov    %ebx,0x4(%esi)
-  cmd->right = right;
-     a04:	83 c4 10             	add    $0x10,%esp
-    cmd = listcmd(cmd, parseline(ps, es));
-     a07:	89 f3                	mov    %esi,%ebx
-  cmd->type = LIST;
-     a09:	c7 06 04 00 00 00    	movl   $0x4,(%esi)
-}
-     a0f:	89 d8                	mov    %ebx,%eax
-  cmd->right = right;
-     a11:	89 7e 08             	mov    %edi,0x8(%esi)
-}
-     a14:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     a17:	5b                   	pop    %ebx
-     a18:	5e                   	pop    %esi
-     a19:	5f                   	pop    %edi
-     a1a:	5d                   	pop    %ebp
-     a1b:	c3                   	ret
-     a1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000a20 <parseblock>:
-{
-     a20:	55                   	push   %ebp
-     a21:	89 e5                	mov    %esp,%ebp
-     a23:	57                   	push   %edi
-     a24:	56                   	push   %esi
-     a25:	53                   	push   %ebx
-     a26:	83 ec 10             	sub    $0x10,%esp
-     a29:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     a2c:	8b 75 0c             	mov    0xc(%ebp),%esi
-  if(!peek(ps, es, "("))
-     a2f:	68 ac 12 00 00       	push   $0x12ac
-     a34:	56                   	push   %esi
-     a35:	53                   	push   %ebx
-     a36:	e8 95 fb ff ff       	call   5d0 <peek>
-     a3b:	83 c4 10             	add    $0x10,%esp
-     a3e:	85 c0                	test   %eax,%eax
-     a40:	74 4a                	je     a8c <parseblock+0x6c>
-  gettoken(ps, es, 0, 0);
-     a42:	6a 00                	push   $0x0
-     a44:	6a 00                	push   $0x0
-     a46:	56                   	push   %esi
-     a47:	53                   	push   %ebx
-     a48:	e8 13 fa ff ff       	call   460 <gettoken>
-  cmd = parseline(ps, es);
-     a4d:	58                   	pop    %eax
-     a4e:	5a                   	pop    %edx
-     a4f:	56                   	push   %esi
-     a50:	53                   	push   %ebx
-     a51:	e8 ea fe ff ff       	call   940 <parseline>
-  if(!peek(ps, es, ")"))
-     a56:	83 c4 0c             	add    $0xc,%esp
-     a59:	68 e8 12 00 00       	push   $0x12e8
-  cmd = parseline(ps, es);
-     a5e:	89 c7                	mov    %eax,%edi
-  if(!peek(ps, es, ")"))
-     a60:	56                   	push   %esi
-     a61:	53                   	push   %ebx
-     a62:	e8 69 fb ff ff       	call   5d0 <peek>
-     a67:	83 c4 10             	add    $0x10,%esp
-     a6a:	85 c0                	test   %eax,%eax
-     a6c:	74 2b                	je     a99 <parseblock+0x79>
-  gettoken(ps, es, 0, 0);
-     a6e:	6a 00                	push   $0x0
-     a70:	6a 00                	push   $0x0
-     a72:	56                   	push   %esi
-     a73:	53                   	push   %ebx
-     a74:	e8 e7 f9 ff ff       	call   460 <gettoken>
-  cmd = parseredirs(cmd, ps, es);
-     a79:	83 c4 0c             	add    $0xc,%esp
-     a7c:	56                   	push   %esi
-     a7d:	53                   	push   %ebx
-     a7e:	57                   	push   %edi
-     a7f:	e8 cc fb ff ff       	call   650 <parseredirs>
-}
-     a84:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     a87:	5b                   	pop    %ebx
-     a88:	5e                   	pop    %esi
-     a89:	5f                   	pop    %edi
-     a8a:	5d                   	pop    %ebp
-     a8b:	c3                   	ret
-    panic("parseblock");
-     a8c:	83 ec 0c             	sub    $0xc,%esp
-     a8f:	68 cc 12 00 00       	push   $0x12cc
-     a94:	e8 d7 f6 ff ff       	call   170 <panic>
-    panic("syntax - missing )");
-     a99:	83 ec 0c             	sub    $0xc,%esp
-     a9c:	68 d7 12 00 00       	push   $0x12d7
-     aa1:	e8 ca f6 ff ff       	call   170 <panic>
-     aa6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     aad:	00 
-     aae:	66 90                	xchg   %ax,%ax
-
-00000ab0 <nulterminate>:
-
-// NUL-terminate all the counted strings.
-struct cmd*
-nulterminate(struct cmd *cmd)
-{
-     ab0:	55                   	push   %ebp
-     ab1:	89 e5                	mov    %esp,%ebp
-     ab3:	53                   	push   %ebx
-     ab4:	83 ec 04             	sub    $0x4,%esp
-     ab7:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  struct execcmd *ecmd;
-  struct listcmd *lcmd;
-  struct pipecmd *pcmd;
-  struct redircmd *rcmd;
-
-  if(cmd == 0)
-     aba:	85 db                	test   %ebx,%ebx
-     abc:	74 29                	je     ae7 <nulterminate+0x37>
-    return 0;
-
-  switch(cmd->type){
-     abe:	83 3b 05             	cmpl   $0x5,(%ebx)
-     ac1:	77 24                	ja     ae7 <nulterminate+0x37>
-     ac3:	8b 03                	mov    (%ebx),%eax
-     ac5:	ff 24 85 30 13 00 00 	jmp    *0x1330(,%eax,4)
-     acc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    nulterminate(pcmd->right);
-    break;
-
-  case LIST:
-    lcmd = (struct listcmd*)cmd;
-    nulterminate(lcmd->left);
-     ad0:	83 ec 0c             	sub    $0xc,%esp
-     ad3:	ff 73 04             	push   0x4(%ebx)
-     ad6:	e8 d5 ff ff ff       	call   ab0 <nulterminate>
-    nulterminate(lcmd->right);
-     adb:	58                   	pop    %eax
-     adc:	ff 73 08             	push   0x8(%ebx)
-     adf:	e8 cc ff ff ff       	call   ab0 <nulterminate>
-    break;
-     ae4:	83 c4 10             	add    $0x10,%esp
-    bcmd = (struct backcmd*)cmd;
-    nulterminate(bcmd->cmd);
-    break;
-  }
-  return cmd;
-}
-     ae7:	89 d8                	mov    %ebx,%eax
-     ae9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     aec:	c9                   	leave
-     aed:	c3                   	ret
-     aee:	66 90                	xchg   %ax,%ax
-    nulterminate(bcmd->cmd);
-     af0:	83 ec 0c             	sub    $0xc,%esp
-     af3:	ff 73 04             	push   0x4(%ebx)
-     af6:	e8 b5 ff ff ff       	call   ab0 <nulterminate>
-}
-     afb:	89 d8                	mov    %ebx,%eax
-    break;
-     afd:	83 c4 10             	add    $0x10,%esp
-}
-     b00:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     b03:	c9                   	leave
-     b04:	c3                   	ret
-     b05:	8d 76 00             	lea    0x0(%esi),%esi
-    for(i=0; ecmd->argv[i]; i++)
-     b08:	8b 4b 04             	mov    0x4(%ebx),%ecx
-     b0b:	85 c9                	test   %ecx,%ecx
-     b0d:	74 d8                	je     ae7 <nulterminate+0x37>
-     b0f:	8d 43 08             	lea    0x8(%ebx),%eax
-     b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      *ecmd->eargv[i] = 0;
-     b18:	8b 50 24             	mov    0x24(%eax),%edx
-    for(i=0; ecmd->argv[i]; i++)
-     b1b:	83 c0 04             	add    $0x4,%eax
-      *ecmd->eargv[i] = 0;
-     b1e:	c6 02 00             	movb   $0x0,(%edx)
-    for(i=0; ecmd->argv[i]; i++)
-     b21:	8b 50 fc             	mov    -0x4(%eax),%edx
-     b24:	85 d2                	test   %edx,%edx
-     b26:	75 f0                	jne    b18 <nulterminate+0x68>
-}
-     b28:	89 d8                	mov    %ebx,%eax
-     b2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     b2d:	c9                   	leave
-     b2e:	c3                   	ret
-     b2f:	90                   	nop
-    nulterminate(rcmd->cmd);
-     b30:	83 ec 0c             	sub    $0xc,%esp
-     b33:	ff 73 04             	push   0x4(%ebx)
-     b36:	e8 75 ff ff ff       	call   ab0 <nulterminate>
-    *rcmd->efile = 0;
-     b3b:	8b 43 0c             	mov    0xc(%ebx),%eax
-    break;
-     b3e:	83 c4 10             	add    $0x10,%esp
-    *rcmd->efile = 0;
-     b41:	c6 00 00             	movb   $0x0,(%eax)
-}
-     b44:	89 d8                	mov    %ebx,%eax
-     b46:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     b49:	c9                   	leave
-     b4a:	c3                   	ret
-     b4b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00000b50 <parsecmd>:
-{
-     b50:	55                   	push   %ebp
-     b51:	89 e5                	mov    %esp,%ebp
-     b53:	57                   	push   %edi
-     b54:	56                   	push   %esi
-  cmd = parseline(&s, es);
-     b55:	8d 7d 08             	lea    0x8(%ebp),%edi
-{
-     b58:	53                   	push   %ebx
-     b59:	83 ec 18             	sub    $0x18,%esp
-  es = s + strlen(s);
-     b5c:	8b 5d 08             	mov    0x8(%ebp),%ebx
-     b5f:	53                   	push   %ebx
-     b60:	e8 eb 00 00 00       	call   c50 <strlen>
-  cmd = parseline(&s, es);
-     b65:	59                   	pop    %ecx
-     b66:	5e                   	pop    %esi
-  es = s + strlen(s);
-     b67:	01 c3                	add    %eax,%ebx
-  cmd = parseline(&s, es);
-     b69:	53                   	push   %ebx
-     b6a:	57                   	push   %edi
-     b6b:	e8 d0 fd ff ff       	call   940 <parseline>
-  peek(&s, es, "");
-     b70:	83 c4 0c             	add    $0xc,%esp
-     b73:	68 76 12 00 00       	push   $0x1276
-  cmd = parseline(&s, es);
-     b78:	89 c6                	mov    %eax,%esi
-  peek(&s, es, "");
-     b7a:	53                   	push   %ebx
-     b7b:	57                   	push   %edi
-     b7c:	e8 4f fa ff ff       	call   5d0 <peek>
-  if(s != es){
-     b81:	8b 45 08             	mov    0x8(%ebp),%eax
-     b84:	83 c4 10             	add    $0x10,%esp
-     b87:	39 d8                	cmp    %ebx,%eax
-     b89:	75 13                	jne    b9e <parsecmd+0x4e>
-  nulterminate(cmd);
-     b8b:	83 ec 0c             	sub    $0xc,%esp
-     b8e:	56                   	push   %esi
-     b8f:	e8 1c ff ff ff       	call   ab0 <nulterminate>
-}
-     b94:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     b97:	89 f0                	mov    %esi,%eax
-     b99:	5b                   	pop    %ebx
-     b9a:	5e                   	pop    %esi
-     b9b:	5f                   	pop    %edi
-     b9c:	5d                   	pop    %ebp
-     b9d:	c3                   	ret
-    printf(2, "leftovers: %s\n", s);
-     b9e:	52                   	push   %edx
-     b9f:	50                   	push   %eax
-     ba0:	68 ea 12 00 00       	push   $0x12ea
-     ba5:	6a 02                	push   $0x2
-     ba7:	e8 a4 03 00 00       	call   f50 <printf>
-    panic("syntax");
-     bac:	c7 04 24 ae 12 00 00 	movl   $0x12ae,(%esp)
-     bb3:	e8 b8 f5 ff ff       	call   170 <panic>
-     bb8:	66 90                	xchg   %ax,%ax
-     bba:	66 90                	xchg   %ax,%ax
-     bbc:	66 90                	xchg   %ax,%ax
-     bbe:	66 90                	xchg   %ax,%ax
-
-00000bc0 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-     bc0:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-     bc1:	31 c0                	xor    %eax,%eax
-{
-     bc3:	89 e5                	mov    %esp,%ebp
-     bc5:	53                   	push   %ebx
-     bc6:	8b 4d 08             	mov    0x8(%ebp),%ecx
-     bc9:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-     bcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
-     bd0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-     bd4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-     bd7:	83 c0 01             	add    $0x1,%eax
-     bda:	84 d2                	test   %dl,%dl
-     bdc:	75 f2                	jne    bd0 <strcpy+0x10>
-    ;
-  return os;
-}
-     bde:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     be1:	89 c8                	mov    %ecx,%eax
-     be3:	c9                   	leave
-     be4:	c3                   	ret
-     be5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     bec:	00 
-     bed:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000bf0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-     bf0:	55                   	push   %ebp
-     bf1:	89 e5                	mov    %esp,%ebp
-     bf3:	53                   	push   %ebx
-     bf4:	8b 55 08             	mov    0x8(%ebp),%edx
-     bf7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-     bfa:	0f b6 02             	movzbl (%edx),%eax
-     bfd:	84 c0                	test   %al,%al
-     bff:	75 17                	jne    c18 <strcmp+0x28>
-     c01:	eb 3a                	jmp    c3d <strcmp+0x4d>
-     c03:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-     c08:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
-     c0c:	83 c2 01             	add    $0x1,%edx
-     c0f:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
-     c12:	84 c0                	test   %al,%al
-     c14:	74 1a                	je     c30 <strcmp+0x40>
-     c16:	89 d9                	mov    %ebx,%ecx
-     c18:	0f b6 19             	movzbl (%ecx),%ebx
-     c1b:	38 c3                	cmp    %al,%bl
-     c1d:	74 e9                	je     c08 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
-     c1f:	29 d8                	sub    %ebx,%eax
-}
-     c21:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     c24:	c9                   	leave
-     c25:	c3                   	ret
-     c26:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     c2d:	00 
-     c2e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
-     c30:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
-     c34:	31 c0                	xor    %eax,%eax
-     c36:	29 d8                	sub    %ebx,%eax
-}
-     c38:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     c3b:	c9                   	leave
-     c3c:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
-     c3d:	0f b6 19             	movzbl (%ecx),%ebx
-     c40:	31 c0                	xor    %eax,%eax
-     c42:	eb db                	jmp    c1f <strcmp+0x2f>
-     c44:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     c4b:	00 
-     c4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000c50 <strlen>:
-
-uint
-strlen(const char *s)
-{
-     c50:	55                   	push   %ebp
-     c51:	89 e5                	mov    %esp,%ebp
-     c53:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-     c56:	80 3a 00             	cmpb   $0x0,(%edx)
-     c59:	74 15                	je     c70 <strlen+0x20>
-     c5b:	31 c0                	xor    %eax,%eax
-     c5d:	8d 76 00             	lea    0x0(%esi),%esi
-     c60:	83 c0 01             	add    $0x1,%eax
-     c63:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-     c67:	89 c1                	mov    %eax,%ecx
-     c69:	75 f5                	jne    c60 <strlen+0x10>
-    ;
-  return n;
-}
-     c6b:	89 c8                	mov    %ecx,%eax
-     c6d:	5d                   	pop    %ebp
-     c6e:	c3                   	ret
-     c6f:	90                   	nop
-  for(n = 0; s[n]; n++)
-     c70:	31 c9                	xor    %ecx,%ecx
-}
-     c72:	5d                   	pop    %ebp
-     c73:	89 c8                	mov    %ecx,%eax
-     c75:	c3                   	ret
-     c76:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     c7d:	00 
-     c7e:	66 90                	xchg   %ax,%ax
-
-00000c80 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-     c80:	55                   	push   %ebp
-     c81:	89 e5                	mov    %esp,%ebp
-     c83:	57                   	push   %edi
-     c84:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-     c87:	8b 4d 10             	mov    0x10(%ebp),%ecx
-     c8a:	8b 45 0c             	mov    0xc(%ebp),%eax
-     c8d:	89 d7                	mov    %edx,%edi
-     c8f:	fc                   	cld
-     c90:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
-     c92:	8b 7d fc             	mov    -0x4(%ebp),%edi
-     c95:	89 d0                	mov    %edx,%eax
-     c97:	c9                   	leave
-     c98:	c3                   	ret
-     c99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000ca0 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
-     ca0:	55                   	push   %ebp
-     ca1:	89 e5                	mov    %esp,%ebp
-     ca3:	8b 45 08             	mov    0x8(%ebp),%eax
-     ca6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
-     caa:	0f b6 10             	movzbl (%eax),%edx
-     cad:	84 d2                	test   %dl,%dl
-     caf:	75 12                	jne    cc3 <strchr+0x23>
-     cb1:	eb 1d                	jmp    cd0 <strchr+0x30>
-     cb3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-     cb8:	0f b6 50 01          	movzbl 0x1(%eax),%edx
-     cbc:	83 c0 01             	add    $0x1,%eax
-     cbf:	84 d2                	test   %dl,%dl
-     cc1:	74 0d                	je     cd0 <strchr+0x30>
-    if(*s == c)
-     cc3:	38 d1                	cmp    %dl,%cl
-     cc5:	75 f1                	jne    cb8 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
-     cc7:	5d                   	pop    %ebp
-     cc8:	c3                   	ret
-     cc9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
-     cd0:	31 c0                	xor    %eax,%eax
-}
-     cd2:	5d                   	pop    %ebp
-     cd3:	c3                   	ret
-     cd4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     cdb:	00 
-     cdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000ce0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
-     ce0:	55                   	push   %ebp
-     ce1:	89 e5                	mov    %esp,%ebp
-     ce3:	57                   	push   %edi
-     ce4:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
-     ce5:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
-     ce8:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
-     ce9:	31 db                	xor    %ebx,%ebx
-{
-     ceb:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
-     cee:	eb 27                	jmp    d17 <gets+0x37>
-    cc = read(0, &c, 1);
-     cf0:	83 ec 04             	sub    $0x4,%esp
-     cf3:	6a 01                	push   $0x1
-     cf5:	56                   	push   %esi
-     cf6:	6a 00                	push   $0x0
-     cf8:	e8 1e 01 00 00       	call   e1b <read>
-    if(cc < 1)
-     cfd:	83 c4 10             	add    $0x10,%esp
-     d00:	85 c0                	test   %eax,%eax
-     d02:	7e 1d                	jle    d21 <gets+0x41>
-      break;
-    buf[i++] = c;
-     d04:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-     d08:	8b 55 08             	mov    0x8(%ebp),%edx
-     d0b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
-     d0f:	3c 0a                	cmp    $0xa,%al
-     d11:	74 10                	je     d23 <gets+0x43>
-     d13:	3c 0d                	cmp    $0xd,%al
-     d15:	74 0c                	je     d23 <gets+0x43>
-  for(i=0; i+1 < max; ){
-     d17:	89 df                	mov    %ebx,%edi
-     d19:	83 c3 01             	add    $0x1,%ebx
-     d1c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
-     d1f:	7c cf                	jl     cf0 <gets+0x10>
-     d21:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-     d23:	8b 45 08             	mov    0x8(%ebp),%eax
-     d26:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
-     d2a:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     d2d:	5b                   	pop    %ebx
-     d2e:	5e                   	pop    %esi
-     d2f:	5f                   	pop    %edi
-     d30:	5d                   	pop    %ebp
-     d31:	c3                   	ret
-     d32:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     d39:	00 
-     d3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000d40 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
-     d40:	55                   	push   %ebp
-     d41:	89 e5                	mov    %esp,%ebp
-     d43:	56                   	push   %esi
-     d44:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
-     d45:	83 ec 08             	sub    $0x8,%esp
-     d48:	6a 00                	push   $0x0
-     d4a:	ff 75 08             	push   0x8(%ebp)
-     d4d:	e8 f1 00 00 00       	call   e43 <open>
-  if(fd < 0)
-     d52:	83 c4 10             	add    $0x10,%esp
-     d55:	85 c0                	test   %eax,%eax
-     d57:	78 27                	js     d80 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
-     d59:	83 ec 08             	sub    $0x8,%esp
-     d5c:	ff 75 0c             	push   0xc(%ebp)
-     d5f:	89 c3                	mov    %eax,%ebx
-     d61:	50                   	push   %eax
-     d62:	e8 f4 00 00 00       	call   e5b <fstat>
-  close(fd);
-     d67:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
-     d6a:	89 c6                	mov    %eax,%esi
-  close(fd);
-     d6c:	e8 ba 00 00 00       	call   e2b <close>
-  return r;
-     d71:	83 c4 10             	add    $0x10,%esp
-}
-     d74:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     d77:	89 f0                	mov    %esi,%eax
-     d79:	5b                   	pop    %ebx
-     d7a:	5e                   	pop    %esi
-     d7b:	5d                   	pop    %ebp
-     d7c:	c3                   	ret
-     d7d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-     d80:	be ff ff ff ff       	mov    $0xffffffff,%esi
-     d85:	eb ed                	jmp    d74 <stat+0x34>
-     d87:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     d8e:	00 
-     d8f:	90                   	nop
-
-00000d90 <atoi>:
-
-int
-atoi(const char *s)
-{
-     d90:	55                   	push   %ebp
-     d91:	89 e5                	mov    %esp,%ebp
-     d93:	53                   	push   %ebx
-     d94:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-     d97:	0f be 02             	movsbl (%edx),%eax
-     d9a:	8d 48 d0             	lea    -0x30(%eax),%ecx
-     d9d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
-     da0:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
-     da5:	77 1e                	ja     dc5 <atoi+0x35>
-     da7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     dae:	00 
-     daf:	90                   	nop
-    n = n*10 + *s++ - '0';
-     db0:	83 c2 01             	add    $0x1,%edx
-     db3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
-     db6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
-     dba:	0f be 02             	movsbl (%edx),%eax
-     dbd:	8d 58 d0             	lea    -0x30(%eax),%ebx
-     dc0:	80 fb 09             	cmp    $0x9,%bl
-     dc3:	76 eb                	jbe    db0 <atoi+0x20>
-  return n;
-}
-     dc5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     dc8:	89 c8                	mov    %ecx,%eax
-     dca:	c9                   	leave
-     dcb:	c3                   	ret
-     dcc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000dd0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
-     dd0:	55                   	push   %ebp
-     dd1:	89 e5                	mov    %esp,%ebp
-     dd3:	57                   	push   %edi
-     dd4:	8b 45 10             	mov    0x10(%ebp),%eax
-     dd7:	8b 55 08             	mov    0x8(%ebp),%edx
-     dda:	56                   	push   %esi
-     ddb:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
-     dde:	85 c0                	test   %eax,%eax
-     de0:	7e 13                	jle    df5 <memmove+0x25>
-     de2:	01 d0                	add    %edx,%eax
-  dst = vdst;
-     de4:	89 d7                	mov    %edx,%edi
-     de6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     ded:	00 
-     dee:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
-     df0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
-     df1:	39 f8                	cmp    %edi,%eax
-     df3:	75 fb                	jne    df0 <memmove+0x20>
-  return vdst;
-}
-     df5:	5e                   	pop    %esi
-     df6:	89 d0                	mov    %edx,%eax
-     df8:	5f                   	pop    %edi
-     df9:	5d                   	pop    %ebp
-     dfa:	c3                   	ret
-
-00000dfb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-     dfb:	b8 01 00 00 00       	mov    $0x1,%eax
-     e00:	cd 40                	int    $0x40
-     e02:	c3                   	ret
-
-00000e03 <exit>:
-SYSCALL(exit)
-     e03:	b8 02 00 00 00       	mov    $0x2,%eax
-     e08:	cd 40                	int    $0x40
-     e0a:	c3                   	ret
-
-00000e0b <wait>:
-SYSCALL(wait)
-     e0b:	b8 03 00 00 00       	mov    $0x3,%eax
-     e10:	cd 40                	int    $0x40
-     e12:	c3                   	ret
-
-00000e13 <pipe>:
-SYSCALL(pipe)
-     e13:	b8 04 00 00 00       	mov    $0x4,%eax
-     e18:	cd 40                	int    $0x40
-     e1a:	c3                   	ret
-
-00000e1b <read>:
-SYSCALL(read)
-     e1b:	b8 05 00 00 00       	mov    $0x5,%eax
-     e20:	cd 40                	int    $0x40
-     e22:	c3                   	ret
-
-00000e23 <write>:
-SYSCALL(write)
-     e23:	b8 10 00 00 00       	mov    $0x10,%eax
-     e28:	cd 40                	int    $0x40
-     e2a:	c3                   	ret
-
-00000e2b <close>:
-SYSCALL(close)
-     e2b:	b8 15 00 00 00       	mov    $0x15,%eax
-     e30:	cd 40                	int    $0x40
-     e32:	c3                   	ret
-
-00000e33 <kill>:
-SYSCALL(kill)
-     e33:	b8 06 00 00 00       	mov    $0x6,%eax
-     e38:	cd 40                	int    $0x40
-     e3a:	c3                   	ret
-
-00000e3b <exec>:
-SYSCALL(exec)
-     e3b:	b8 07 00 00 00       	mov    $0x7,%eax
-     e40:	cd 40                	int    $0x40
-     e42:	c3                   	ret
-
-00000e43 <open>:
-SYSCALL(open)
-     e43:	b8 0f 00 00 00       	mov    $0xf,%eax
-     e48:	cd 40                	int    $0x40
-     e4a:	c3                   	ret
-
-00000e4b <mknod>:
-SYSCALL(mknod)
-     e4b:	b8 11 00 00 00       	mov    $0x11,%eax
-     e50:	cd 40                	int    $0x40
-     e52:	c3                   	ret
-
-00000e53 <unlink>:
-SYSCALL(unlink)
-     e53:	b8 12 00 00 00       	mov    $0x12,%eax
-     e58:	cd 40                	int    $0x40
-     e5a:	c3                   	ret
-
-00000e5b <fstat>:
-SYSCALL(fstat)
-     e5b:	b8 08 00 00 00       	mov    $0x8,%eax
-     e60:	cd 40                	int    $0x40
-     e62:	c3                   	ret
-
-00000e63 <link>:
-SYSCALL(link)
-     e63:	b8 13 00 00 00       	mov    $0x13,%eax
-     e68:	cd 40                	int    $0x40
-     e6a:	c3                   	ret
-
-00000e6b <mkdir>:
-SYSCALL(mkdir)
-     e6b:	b8 14 00 00 00       	mov    $0x14,%eax
-     e70:	cd 40                	int    $0x40
-     e72:	c3                   	ret
-
-00000e73 <chdir>:
-SYSCALL(chdir)
-     e73:	b8 09 00 00 00       	mov    $0x9,%eax
-     e78:	cd 40                	int    $0x40
-     e7a:	c3                   	ret
-
-00000e7b <dup>:
-SYSCALL(dup)
-     e7b:	b8 0a 00 00 00       	mov    $0xa,%eax
-     e80:	cd 40                	int    $0x40
-     e82:	c3                   	ret
-
-00000e83 <getpid>:
-SYSCALL(getpid)
-     e83:	b8 0b 00 00 00       	mov    $0xb,%eax
-     e88:	cd 40                	int    $0x40
-     e8a:	c3                   	ret
-
-00000e8b <sbrk>:
-SYSCALL(sbrk)
-     e8b:	b8 0c 00 00 00       	mov    $0xc,%eax
-     e90:	cd 40                	int    $0x40
-     e92:	c3                   	ret
-
-00000e93 <sleep>:
-SYSCALL(sleep)
-     e93:	b8 0d 00 00 00       	mov    $0xd,%eax
-     e98:	cd 40                	int    $0x40
-     e9a:	c3                   	ret
-
-00000e9b <uptime>:
-SYSCALL(uptime)
-     e9b:	b8 0e 00 00 00       	mov    $0xe,%eax
-     ea0:	cd 40                	int    $0x40
-     ea2:	c3                   	ret
-     ea3:	66 90                	xchg   %ax,%ax
-     ea5:	66 90                	xchg   %ax,%ax
-     ea7:	66 90                	xchg   %ax,%ax
-     ea9:	66 90                	xchg   %ax,%ax
-     eab:	66 90                	xchg   %ax,%ax
-     ead:	66 90                	xchg   %ax,%ax
-     eaf:	90                   	nop
-
-00000eb0 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
-     eb0:	55                   	push   %ebp
-     eb1:	89 e5                	mov    %esp,%ebp
-     eb3:	57                   	push   %edi
-     eb4:	56                   	push   %esi
-     eb5:	53                   	push   %ebx
-     eb6:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
-     eb8:	89 d1                	mov    %edx,%ecx
-{
-     eba:	83 ec 3c             	sub    $0x3c,%esp
-     ebd:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
-     ec0:	85 d2                	test   %edx,%edx
-     ec2:	0f 89 80 00 00 00    	jns    f48 <printint+0x98>
-     ec8:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-     ecc:	74 7a                	je     f48 <printint+0x98>
-    x = -xx;
-     ece:	f7 d9                	neg    %ecx
-    neg = 1;
-     ed0:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
-     ed5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-     ed8:	31 f6                	xor    %esi,%esi
-     eda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
-     ee0:	89 c8                	mov    %ecx,%eax
-     ee2:	31 d2                	xor    %edx,%edx
-     ee4:	89 f7                	mov    %esi,%edi
-     ee6:	f7 f3                	div    %ebx
-     ee8:	8d 76 01             	lea    0x1(%esi),%esi
-     eeb:	0f b6 92 a0 13 00 00 	movzbl 0x13a0(%edx),%edx
-     ef2:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
-     ef6:	89 ca                	mov    %ecx,%edx
-     ef8:	89 c1                	mov    %eax,%ecx
-     efa:	39 da                	cmp    %ebx,%edx
-     efc:	73 e2                	jae    ee0 <printint+0x30>
-  if(neg)
-     efe:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-     f01:	85 c0                	test   %eax,%eax
-     f03:	74 07                	je     f0c <printint+0x5c>
-    buf[i++] = '-';
-     f05:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
-     f0a:	89 f7                	mov    %esi,%edi
-     f0c:	8d 5d d8             	lea    -0x28(%ebp),%ebx
-     f0f:	8b 75 c0             	mov    -0x40(%ebp),%esi
-     f12:	01 df                	add    %ebx,%edi
-     f14:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
-     f18:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
-     f1b:	83 ec 04             	sub    $0x4,%esp
-     f1e:	88 45 d7             	mov    %al,-0x29(%ebp)
-     f21:	8d 45 d7             	lea    -0x29(%ebp),%eax
-     f24:	6a 01                	push   $0x1
-     f26:	50                   	push   %eax
-     f27:	56                   	push   %esi
-     f28:	e8 f6 fe ff ff       	call   e23 <write>
-  while(--i >= 0)
-     f2d:	89 f8                	mov    %edi,%eax
-     f2f:	83 c4 10             	add    $0x10,%esp
-     f32:	83 ef 01             	sub    $0x1,%edi
-     f35:	39 c3                	cmp    %eax,%ebx
-     f37:	75 df                	jne    f18 <printint+0x68>
-}
-     f39:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     f3c:	5b                   	pop    %ebx
-     f3d:	5e                   	pop    %esi
-     f3e:	5f                   	pop    %edi
-     f3f:	5d                   	pop    %ebp
-     f40:	c3                   	ret
-     f41:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
-     f48:	31 c0                	xor    %eax,%eax
-     f4a:	eb 89                	jmp    ed5 <printint+0x25>
-     f4c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000f50 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
-     f50:	55                   	push   %ebp
-     f51:	89 e5                	mov    %esp,%ebp
-     f53:	57                   	push   %edi
-     f54:	56                   	push   %esi
-     f55:	53                   	push   %ebx
-     f56:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-     f59:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
-     f5c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
-     f5f:	0f b6 1e             	movzbl (%esi),%ebx
-     f62:	83 c6 01             	add    $0x1,%esi
-     f65:	84 db                	test   %bl,%bl
-     f67:	74 67                	je     fd0 <printf+0x80>
-     f69:	8d 4d 10             	lea    0x10(%ebp),%ecx
-     f6c:	31 d2                	xor    %edx,%edx
-     f6e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-     f71:	eb 34                	jmp    fa7 <printf+0x57>
-     f73:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-     f78:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
-     f7b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
-     f80:	83 f8 25             	cmp    $0x25,%eax
-     f83:	74 18                	je     f9d <printf+0x4d>
-  write(fd, &c, 1);
-     f85:	83 ec 04             	sub    $0x4,%esp
-     f88:	8d 45 e7             	lea    -0x19(%ebp),%eax
-     f8b:	88 5d e7             	mov    %bl,-0x19(%ebp)
-     f8e:	6a 01                	push   $0x1
-     f90:	50                   	push   %eax
-     f91:	57                   	push   %edi
-     f92:	e8 8c fe ff ff       	call   e23 <write>
-     f97:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
-     f9a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
-     f9d:	0f b6 1e             	movzbl (%esi),%ebx
-     fa0:	83 c6 01             	add    $0x1,%esi
-     fa3:	84 db                	test   %bl,%bl
-     fa5:	74 29                	je     fd0 <printf+0x80>
-    c = fmt[i] & 0xff;
-     fa7:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
-     faa:	85 d2                	test   %edx,%edx
-     fac:	74 ca                	je     f78 <printf+0x28>
-      }
-    } else if(state == '%'){
-     fae:	83 fa 25             	cmp    $0x25,%edx
-     fb1:	75 ea                	jne    f9d <printf+0x4d>
-      if(c == 'd'){
-     fb3:	83 f8 25             	cmp    $0x25,%eax
-     fb6:	0f 84 04 01 00 00    	je     10c0 <printf+0x170>
-     fbc:	83 e8 63             	sub    $0x63,%eax
-     fbf:	83 f8 15             	cmp    $0x15,%eax
-     fc2:	77 1c                	ja     fe0 <printf+0x90>
-     fc4:	ff 24 85 48 13 00 00 	jmp    *0x1348(,%eax,4)
-     fcb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
-     fd0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     fd3:	5b                   	pop    %ebx
-     fd4:	5e                   	pop    %esi
-     fd5:	5f                   	pop    %edi
-     fd6:	5d                   	pop    %ebp
-     fd7:	c3                   	ret
-     fd8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     fdf:	00 
-  write(fd, &c, 1);
-     fe0:	83 ec 04             	sub    $0x4,%esp
-     fe3:	8d 55 e7             	lea    -0x19(%ebp),%edx
-     fe6:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-     fea:	6a 01                	push   $0x1
-     fec:	52                   	push   %edx
-     fed:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-     ff0:	57                   	push   %edi
-     ff1:	e8 2d fe ff ff       	call   e23 <write>
-     ff6:	83 c4 0c             	add    $0xc,%esp
-     ff9:	88 5d e7             	mov    %bl,-0x19(%ebp)
-     ffc:	6a 01                	push   $0x1
-     ffe:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-    1001:	52                   	push   %edx
-    1002:	57                   	push   %edi
-    1003:	e8 1b fe ff ff       	call   e23 <write>
-        putc(fd, c);
-    1008:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    100b:	31 d2                	xor    %edx,%edx
-    100d:	eb 8e                	jmp    f9d <printf+0x4d>
-    100f:	90                   	nop
-        printint(fd, *ap, 16, 0);
-    1010:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-    1013:	83 ec 0c             	sub    $0xc,%esp
-    1016:	b9 10 00 00 00       	mov    $0x10,%ecx
-    101b:	8b 13                	mov    (%ebx),%edx
-    101d:	6a 00                	push   $0x0
-    101f:	89 f8                	mov    %edi,%eax
-        ap++;
-    1021:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
-    1024:	e8 87 fe ff ff       	call   eb0 <printint>
-        ap++;
-    1029:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    102c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    102f:	31 d2                	xor    %edx,%edx
-    1031:	e9 67 ff ff ff       	jmp    f9d <printf+0x4d>
-        s = (char*)*ap;
-    1036:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    1039:	8b 18                	mov    (%eax),%ebx
-        ap++;
-    103b:	83 c0 04             	add    $0x4,%eax
-    103e:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
-    1041:	85 db                	test   %ebx,%ebx
-    1043:	0f 84 87 00 00 00    	je     10d0 <printf+0x180>
-        while(*s != 0){
-    1049:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
-    104c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
-    104e:	84 c0                	test   %al,%al
-    1050:	0f 84 47 ff ff ff    	je     f9d <printf+0x4d>
-    1056:	8d 55 e7             	lea    -0x19(%ebp),%edx
-    1059:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    105c:	89 de                	mov    %ebx,%esi
-    105e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
-    1060:	83 ec 04             	sub    $0x4,%esp
-    1063:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
-    1066:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
-    1069:	6a 01                	push   $0x1
-    106b:	53                   	push   %ebx
-    106c:	57                   	push   %edi
-    106d:	e8 b1 fd ff ff       	call   e23 <write>
-        while(*s != 0){
-    1072:	0f b6 06             	movzbl (%esi),%eax
-    1075:	83 c4 10             	add    $0x10,%esp
-    1078:	84 c0                	test   %al,%al
-    107a:	75 e4                	jne    1060 <printf+0x110>
-      state = 0;
-    107c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-    107f:	31 d2                	xor    %edx,%edx
-    1081:	e9 17 ff ff ff       	jmp    f9d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
-    1086:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-    1089:	83 ec 0c             	sub    $0xc,%esp
-    108c:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    1091:	8b 13                	mov    (%ebx),%edx
-    1093:	6a 01                	push   $0x1
-    1095:	eb 88                	jmp    101f <printf+0xcf>
-        putc(fd, *ap);
-    1097:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
-    109a:	83 ec 04             	sub    $0x4,%esp
-    109d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
-    10a0:	8b 03                	mov    (%ebx),%eax
-        ap++;
-    10a2:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
-    10a5:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
-    10a8:	6a 01                	push   $0x1
-    10aa:	52                   	push   %edx
-    10ab:	57                   	push   %edi
-    10ac:	e8 72 fd ff ff       	call   e23 <write>
-        ap++;
-    10b1:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    10b4:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    10b7:	31 d2                	xor    %edx,%edx
-    10b9:	e9 df fe ff ff       	jmp    f9d <printf+0x4d>
-    10be:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
-    10c0:	83 ec 04             	sub    $0x4,%esp
-    10c3:	88 5d e7             	mov    %bl,-0x19(%ebp)
-    10c6:	8d 55 e7             	lea    -0x19(%ebp),%edx
-    10c9:	6a 01                	push   $0x1
-    10cb:	e9 31 ff ff ff       	jmp    1001 <printf+0xb1>
-    10d0:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
-    10d5:	bb 0f 13 00 00       	mov    $0x130f,%ebx
-    10da:	e9 77 ff ff ff       	jmp    1056 <printf+0x106>
-    10df:	90                   	nop
-
-000010e0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
-    10e0:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10e1:	a1 e4 19 00 00       	mov    0x19e4,%eax
-{
-    10e6:	89 e5                	mov    %esp,%ebp
-    10e8:	57                   	push   %edi
-    10e9:	56                   	push   %esi
-    10ea:	53                   	push   %ebx
-    10eb:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
-    10ee:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10f1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    10f8:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    10fa:	39 c8                	cmp    %ecx,%eax
-    10fc:	73 32                	jae    1130 <free+0x50>
-    10fe:	39 d1                	cmp    %edx,%ecx
-    1100:	72 04                	jb     1106 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1102:	39 d0                	cmp    %edx,%eax
-    1104:	72 32                	jb     1138 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    1106:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    1109:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    110c:	39 fa                	cmp    %edi,%edx
-    110e:	74 30                	je     1140 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-    1110:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
-    1113:	8b 50 04             	mov    0x4(%eax),%edx
-    1116:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    1119:	39 f1                	cmp    %esi,%ecx
-    111b:	74 3a                	je     1157 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-    111d:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
-    111f:	5b                   	pop    %ebx
-  freep = p;
-    1120:	a3 e4 19 00 00       	mov    %eax,0x19e4
-}
-    1125:	5e                   	pop    %esi
-    1126:	5f                   	pop    %edi
-    1127:	5d                   	pop    %ebp
-    1128:	c3                   	ret
-    1129:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    1130:	39 d0                	cmp    %edx,%eax
-    1132:	72 04                	jb     1138 <free+0x58>
-    1134:	39 d1                	cmp    %edx,%ecx
-    1136:	72 ce                	jb     1106 <free+0x26>
-{
-    1138:	89 d0                	mov    %edx,%eax
-    113a:	eb bc                	jmp    10f8 <free+0x18>
-    113c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
-    1140:	03 72 04             	add    0x4(%edx),%esi
-    1143:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
-    1146:	8b 10                	mov    (%eax),%edx
-    1148:	8b 12                	mov    (%edx),%edx
-    114a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
-    114d:	8b 50 04             	mov    0x4(%eax),%edx
-    1150:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    1153:	39 f1                	cmp    %esi,%ecx
-    1155:	75 c6                	jne    111d <free+0x3d>
-    p->s.size += bp->s.size;
-    1157:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
-    115a:	a3 e4 19 00 00       	mov    %eax,0x19e4
-    p->s.size += bp->s.size;
-    115f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
-    1162:	8b 4b f8             	mov    -0x8(%ebx),%ecx
-    1165:	89 08                	mov    %ecx,(%eax)
-}
-    1167:	5b                   	pop    %ebx
-    1168:	5e                   	pop    %esi
-    1169:	5f                   	pop    %edi
-    116a:	5d                   	pop    %ebp
-    116b:	c3                   	ret
-    116c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00001170 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
-    1170:	55                   	push   %ebp
-    1171:	89 e5                	mov    %esp,%ebp
-    1173:	57                   	push   %edi
-    1174:	56                   	push   %esi
-    1175:	53                   	push   %ebx
-    1176:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    1179:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
-    117c:	8b 15 e4 19 00 00    	mov    0x19e4,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    1182:	8d 78 07             	lea    0x7(%eax),%edi
-    1185:	c1 ef 03             	shr    $0x3,%edi
-    1188:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
-    118b:	85 d2                	test   %edx,%edx
-    118d:	0f 84 8d 00 00 00    	je     1220 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    1193:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
-    1195:	8b 48 04             	mov    0x4(%eax),%ecx
-    1198:	39 f9                	cmp    %edi,%ecx
-    119a:	73 64                	jae    1200 <malloc+0x90>
-  if(nu < 4096)
-    119c:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    11a1:	39 df                	cmp    %ebx,%edi
-    11a3:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
-    11a6:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
-    11ad:	eb 0a                	jmp    11b9 <malloc+0x49>
-    11af:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    11b0:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
-    11b2:	8b 48 04             	mov    0x4(%eax),%ecx
-    11b5:	39 f9                	cmp    %edi,%ecx
-    11b7:	73 47                	jae    1200 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-    11b9:	89 c2                	mov    %eax,%edx
-    11bb:	3b 05 e4 19 00 00    	cmp    0x19e4,%eax
-    11c1:	75 ed                	jne    11b0 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
-    11c3:	83 ec 0c             	sub    $0xc,%esp
-    11c6:	56                   	push   %esi
-    11c7:	e8 bf fc ff ff       	call   e8b <sbrk>
-  if(p == (char*)-1)
-    11cc:	83 c4 10             	add    $0x10,%esp
-    11cf:	83 f8 ff             	cmp    $0xffffffff,%eax
-    11d2:	74 1c                	je     11f0 <malloc+0x80>
-  hp->s.size = nu;
-    11d4:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
-    11d7:	83 ec 0c             	sub    $0xc,%esp
-    11da:	83 c0 08             	add    $0x8,%eax
-    11dd:	50                   	push   %eax
-    11de:	e8 fd fe ff ff       	call   10e0 <free>
-  return freep;
-    11e3:	8b 15 e4 19 00 00    	mov    0x19e4,%edx
-      if((p = morecore(nunits)) == 0)
-    11e9:	83 c4 10             	add    $0x10,%esp
-    11ec:	85 d2                	test   %edx,%edx
-    11ee:	75 c0                	jne    11b0 <malloc+0x40>
-        return 0;
-  }
-}
-    11f0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
-    11f3:	31 c0                	xor    %eax,%eax
-}
-    11f5:	5b                   	pop    %ebx
-    11f6:	5e                   	pop    %esi
-    11f7:	5f                   	pop    %edi
-    11f8:	5d                   	pop    %ebp
-    11f9:	c3                   	ret
-    11fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
-    1200:	39 cf                	cmp    %ecx,%edi
-    1202:	74 4c                	je     1250 <malloc+0xe0>
-        p->s.size -= nunits;
-    1204:	29 f9                	sub    %edi,%ecx
-    1206:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
-    1209:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
-    120c:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
-    120f:	89 15 e4 19 00 00    	mov    %edx,0x19e4
-}
-    1215:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
-    1218:	83 c0 08             	add    $0x8,%eax
-}
-    121b:	5b                   	pop    %ebx
-    121c:	5e                   	pop    %esi
-    121d:	5f                   	pop    %edi
-    121e:	5d                   	pop    %ebp
-    121f:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
-    1220:	c7 05 e4 19 00 00 e8 	movl   $0x19e8,0x19e4
-    1227:	19 00 00 
-    base.s.size = 0;
-    122a:	b8 e8 19 00 00       	mov    $0x19e8,%eax
-    base.s.ptr = freep = prevp = &base;
-    122f:	c7 05 e8 19 00 00 e8 	movl   $0x19e8,0x19e8
-    1236:	19 00 00 
-    base.s.size = 0;
-    1239:	c7 05 ec 19 00 00 00 	movl   $0x0,0x19ec
-    1240:	00 00 00 
-    if(p->s.size >= nunits){
-    1243:	e9 54 ff ff ff       	jmp    119c <malloc+0x2c>
-    1248:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    124f:	00 
-        prevp->s.ptr = p->s.ptr;
-    1250:	8b 08                	mov    (%eax),%ecx
-    1252:	89 0a                	mov    %ecx,(%edx)
-    1254:	eb b9                	jmp    120f <malloc+0x9f>
diff --git a/sh.d b/sh.d
deleted file mode 100644
index 51ddf2d..0000000
--- a/sh.d
+++ /dev/null
@@ -1 +0,0 @@
-sh.o: sh.c /usr/include/stdc-predef.h types.h user.h fcntl.h
diff --git a/sh.o b/sh.o
deleted file mode 100644
index 0911dd9..0000000
Binary files a/sh.o and /dev/null differ
diff --git a/sh.sym b/sh.sym
deleted file mode 100644
index bdd5248..0000000
--- a/sh.sym
+++ /dev/null
@@ -1,66 +0,0 @@
-00000000 sh.c
-00001980 buf.0
-00000000 ulib.c
-00000000 printf.c
-00000eb0 printint
-000013a0 digits.0
-00000000 umalloc.c
-000019e4 freep
-000019e8 base
-00000bc0 strcpy
-00000f50 printf
-00000dd0 memmove
-00000e4b mknod
-00000330 execcmd
-00000ce0 gets
-00000e83 getpid
-000008b0 parsepipe
-00000b50 parsecmd
-00000430 backcmd
-000005d0 peek
-00000650 parseredirs
-00000460 gettoken
-00001170 malloc
-00000e93 sleep
-00001970 whitespace
-00000190 fork1
-00000ab0 nulterminate
-00000e13 pipe
-00000130 getcmd
-00000e23 write
-00000e5b fstat
-00000e33 kill
-00000e73 chdir
-00000940 parseline
-000001b0 runcmd
-00000a20 parseblock
-00000e3b exec
-00000e0b wait
-00001968 symbols
-00000e1b read
-00000790 parseexec
-00000e53 unlink
-00000170 panic
-00000dfb fork
-00000e8b sbrk
-00000e9b uptime
-00001980 __bss_start
-00000c80 memset
-00000000 main
-00000bf0 strcmp
-00000e7b dup
-000003b0 pipecmd
-00000360 redircmd
-00000d40 stat
-00001976 _edata
-000019f0 _end
-00000e63 link
-00000e03 exit
-00000d90 atoi
-00000c50 strlen
-00000e43 open
-00000ca0 strchr
-00000e6b mkdir
-00000e2b close
-000003f0 listcmd
-000010e0 free
diff --git a/sleeplock.d b/sleeplock.d
deleted file mode 100644
index e50551a..0000000
--- a/sleeplock.d
+++ /dev/null
@@ -1,2 +0,0 @@
-sleeplock.o: sleeplock.c /usr/include/stdc-predef.h types.h defs.h \
- param.h x86.h memlayout.h mmu.h proc.h spinlock.h sleeplock.h
diff --git a/sleeplock.o b/sleeplock.o
deleted file mode 100644
index db8180c..0000000
Binary files a/sleeplock.o and /dev/null differ
diff --git a/spinlock.d b/spinlock.d
deleted file mode 100644
index 9f70952..0000000
--- a/spinlock.d
+++ /dev/null
@@ -1,2 +0,0 @@
-spinlock.o: spinlock.c /usr/include/stdc-predef.h types.h defs.h param.h \
- x86.h memlayout.h mmu.h proc.h spinlock.h
diff --git a/spinlock.o b/spinlock.o
deleted file mode 100644
index 51a8921..0000000
Binary files a/spinlock.o and /dev/null differ
diff --git a/stressfs.asm b/stressfs.asm
deleted file mode 100644
index daff50a..0000000
--- a/stressfs.asm
+++ /dev/null
@@ -1,1212 +0,0 @@
-
-_stressfs:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "fs.h"
-#include "fcntl.h"
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-  int fd, i;
-  char path[] = "stressfs0";
-   7:	b8 30 00 00 00       	mov    $0x30,%eax
-{
-   c:	ff 71 fc             	push   -0x4(%ecx)
-   f:	55                   	push   %ebp
-  10:	89 e5                	mov    %esp,%ebp
-  12:	57                   	push   %edi
-  13:	56                   	push   %esi
-  char data[512];
-
-  printf(1, "stressfs starting\n");
-  memset(data, 'a', sizeof(data));
-  14:	8d b5 e8 fd ff ff    	lea    -0x218(%ebp),%esi
-{
-  1a:	53                   	push   %ebx
-
-  for(i = 0; i < 4; i++)
-  1b:	31 db                	xor    %ebx,%ebx
-{
-  1d:	51                   	push   %ecx
-  1e:	81 ec 20 02 00 00    	sub    $0x220,%esp
-  char path[] = "stressfs0";
-  24:	66 89 85 e6 fd ff ff 	mov    %ax,-0x21a(%ebp)
-  printf(1, "stressfs starting\n");
-  2b:	68 b8 07 00 00       	push   $0x7b8
-  30:	6a 01                	push   $0x1
-  char path[] = "stressfs0";
-  32:	c7 85 de fd ff ff 73 	movl   $0x65727473,-0x222(%ebp)
-  39:	74 72 65 
-  3c:	c7 85 e2 fd ff ff 73 	movl   $0x73667373,-0x21e(%ebp)
-  43:	73 66 73 
-  printf(1, "stressfs starting\n");
-  46:	e8 65 04 00 00       	call   4b0 <printf>
-  memset(data, 'a', sizeof(data));
-  4b:	83 c4 0c             	add    $0xc,%esp
-  4e:	68 00 02 00 00       	push   $0x200
-  53:	6a 61                	push   $0x61
-  55:	56                   	push   %esi
-  56:	e8 85 01 00 00       	call   1e0 <memset>
-  5b:	83 c4 10             	add    $0x10,%esp
-    if(fork() > 0)
-  5e:	e8 f8 02 00 00       	call   35b <fork>
-  63:	85 c0                	test   %eax,%eax
-  65:	7f 08                	jg     6f <main+0x6f>
-  for(i = 0; i < 4; i++)
-  67:	83 c3 01             	add    $0x1,%ebx
-  6a:	83 fb 04             	cmp    $0x4,%ebx
-  6d:	75 ef                	jne    5e <main+0x5e>
-      break;
-
-  printf(1, "write %d\n", i);
-  6f:	83 ec 04             	sub    $0x4,%esp
-  72:	53                   	push   %ebx
-  73:	68 cb 07 00 00       	push   $0x7cb
-  78:	6a 01                	push   $0x1
-  7a:	e8 31 04 00 00       	call   4b0 <printf>
-
-  path[8] += i;
-  fd = open(path, O_CREATE | O_RDWR);
-  7f:	5f                   	pop    %edi
-  80:	58                   	pop    %eax
-  81:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
-  87:	68 02 02 00 00       	push   $0x202
-  8c:	50                   	push   %eax
-  path[8] += i;
-  8d:	00 9d e6 fd ff ff    	add    %bl,-0x21a(%ebp)
-  fd = open(path, O_CREATE | O_RDWR);
-  93:	bb 14 00 00 00       	mov    $0x14,%ebx
-  98:	e8 06 03 00 00       	call   3a3 <open>
-  9d:	83 c4 10             	add    $0x10,%esp
-  a0:	89 c7                	mov    %eax,%edi
-  for(i = 0; i < 20; i++)
-  a2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-//    printf(fd, "%d\n", i);
-    write(fd, data, sizeof(data));
-  a8:	83 ec 04             	sub    $0x4,%esp
-  ab:	68 00 02 00 00       	push   $0x200
-  b0:	56                   	push   %esi
-  b1:	57                   	push   %edi
-  b2:	e8 cc 02 00 00       	call   383 <write>
-  for(i = 0; i < 20; i++)
-  b7:	83 c4 10             	add    $0x10,%esp
-  ba:	83 eb 01             	sub    $0x1,%ebx
-  bd:	75 e9                	jne    a8 <main+0xa8>
-  close(fd);
-  bf:	83 ec 0c             	sub    $0xc,%esp
-  c2:	57                   	push   %edi
-  c3:	e8 c3 02 00 00       	call   38b <close>
-
-  printf(1, "read\n");
-  c8:	58                   	pop    %eax
-  c9:	5a                   	pop    %edx
-  ca:	68 d5 07 00 00       	push   $0x7d5
-  cf:	6a 01                	push   $0x1
-  d1:	e8 da 03 00 00       	call   4b0 <printf>
-
-  fd = open(path, O_RDONLY);
-  d6:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax
-  dc:	59                   	pop    %ecx
-  dd:	5b                   	pop    %ebx
-  de:	6a 00                	push   $0x0
-  e0:	bb 14 00 00 00       	mov    $0x14,%ebx
-  e5:	50                   	push   %eax
-  e6:	e8 b8 02 00 00       	call   3a3 <open>
-  eb:	83 c4 10             	add    $0x10,%esp
-  ee:	89 c7                	mov    %eax,%edi
-  for (i = 0; i < 20; i++)
-    read(fd, data, sizeof(data));
-  f0:	83 ec 04             	sub    $0x4,%esp
-  f3:	68 00 02 00 00       	push   $0x200
-  f8:	56                   	push   %esi
-  f9:	57                   	push   %edi
-  fa:	e8 7c 02 00 00       	call   37b <read>
-  for (i = 0; i < 20; i++)
-  ff:	83 c4 10             	add    $0x10,%esp
- 102:	83 eb 01             	sub    $0x1,%ebx
- 105:	75 e9                	jne    f0 <main+0xf0>
-  close(fd);
- 107:	83 ec 0c             	sub    $0xc,%esp
- 10a:	57                   	push   %edi
- 10b:	e8 7b 02 00 00       	call   38b <close>
-
-  wait();
- 110:	e8 56 02 00 00       	call   36b <wait>
-
-  exit();
- 115:	e8 49 02 00 00       	call   363 <exit>
- 11a:	66 90                	xchg   %ax,%ax
- 11c:	66 90                	xchg   %ax,%ax
- 11e:	66 90                	xchg   %ax,%ax
-
-00000120 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 120:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 121:	31 c0                	xor    %eax,%eax
-{
- 123:	89 e5                	mov    %esp,%ebp
- 125:	53                   	push   %ebx
- 126:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 129:	8b 5d 0c             	mov    0xc(%ebp),%ebx
- 12c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
- 130:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 134:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 137:	83 c0 01             	add    $0x1,%eax
- 13a:	84 d2                	test   %dl,%dl
- 13c:	75 f2                	jne    130 <strcpy+0x10>
-    ;
-  return os;
-}
- 13e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 141:	89 c8                	mov    %ecx,%eax
- 143:	c9                   	leave
- 144:	c3                   	ret
- 145:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 14c:	00 
- 14d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000150 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 150:	55                   	push   %ebp
- 151:	89 e5                	mov    %esp,%ebp
- 153:	53                   	push   %ebx
- 154:	8b 55 08             	mov    0x8(%ebp),%edx
- 157:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 15a:	0f b6 02             	movzbl (%edx),%eax
- 15d:	84 c0                	test   %al,%al
- 15f:	75 17                	jne    178 <strcmp+0x28>
- 161:	eb 3a                	jmp    19d <strcmp+0x4d>
- 163:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 168:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
- 16c:	83 c2 01             	add    $0x1,%edx
- 16f:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
- 172:	84 c0                	test   %al,%al
- 174:	74 1a                	je     190 <strcmp+0x40>
- 176:	89 d9                	mov    %ebx,%ecx
- 178:	0f b6 19             	movzbl (%ecx),%ebx
- 17b:	38 c3                	cmp    %al,%bl
- 17d:	74 e9                	je     168 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
- 17f:	29 d8                	sub    %ebx,%eax
-}
- 181:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 184:	c9                   	leave
- 185:	c3                   	ret
- 186:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 18d:	00 
- 18e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
- 190:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 194:	31 c0                	xor    %eax,%eax
- 196:	29 d8                	sub    %ebx,%eax
-}
- 198:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 19b:	c9                   	leave
- 19c:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
- 19d:	0f b6 19             	movzbl (%ecx),%ebx
- 1a0:	31 c0                	xor    %eax,%eax
- 1a2:	eb db                	jmp    17f <strcmp+0x2f>
- 1a4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1ab:	00 
- 1ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000001b0 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 1b0:	55                   	push   %ebp
- 1b1:	89 e5                	mov    %esp,%ebp
- 1b3:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 1b6:	80 3a 00             	cmpb   $0x0,(%edx)
- 1b9:	74 15                	je     1d0 <strlen+0x20>
- 1bb:	31 c0                	xor    %eax,%eax
- 1bd:	8d 76 00             	lea    0x0(%esi),%esi
- 1c0:	83 c0 01             	add    $0x1,%eax
- 1c3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 1c7:	89 c1                	mov    %eax,%ecx
- 1c9:	75 f5                	jne    1c0 <strlen+0x10>
-    ;
-  return n;
-}
- 1cb:	89 c8                	mov    %ecx,%eax
- 1cd:	5d                   	pop    %ebp
- 1ce:	c3                   	ret
- 1cf:	90                   	nop
-  for(n = 0; s[n]; n++)
- 1d0:	31 c9                	xor    %ecx,%ecx
-}
- 1d2:	5d                   	pop    %ebp
- 1d3:	89 c8                	mov    %ecx,%eax
- 1d5:	c3                   	ret
- 1d6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1dd:	00 
- 1de:	66 90                	xchg   %ax,%ax
-
-000001e0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 1e0:	55                   	push   %ebp
- 1e1:	89 e5                	mov    %esp,%ebp
- 1e3:	57                   	push   %edi
- 1e4:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 1e7:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 1ea:	8b 45 0c             	mov    0xc(%ebp),%eax
- 1ed:	89 d7                	mov    %edx,%edi
- 1ef:	fc                   	cld
- 1f0:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 1f2:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 1f5:	89 d0                	mov    %edx,%eax
- 1f7:	c9                   	leave
- 1f8:	c3                   	ret
- 1f9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000200 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 200:	55                   	push   %ebp
- 201:	89 e5                	mov    %esp,%ebp
- 203:	8b 45 08             	mov    0x8(%ebp),%eax
- 206:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 20a:	0f b6 10             	movzbl (%eax),%edx
- 20d:	84 d2                	test   %dl,%dl
- 20f:	75 12                	jne    223 <strchr+0x23>
- 211:	eb 1d                	jmp    230 <strchr+0x30>
- 213:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 218:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 21c:	83 c0 01             	add    $0x1,%eax
- 21f:	84 d2                	test   %dl,%dl
- 221:	74 0d                	je     230 <strchr+0x30>
-    if(*s == c)
- 223:	38 d1                	cmp    %dl,%cl
- 225:	75 f1                	jne    218 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 227:	5d                   	pop    %ebp
- 228:	c3                   	ret
- 229:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 230:	31 c0                	xor    %eax,%eax
-}
- 232:	5d                   	pop    %ebp
- 233:	c3                   	ret
- 234:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 23b:	00 
- 23c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000240 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 240:	55                   	push   %ebp
- 241:	89 e5                	mov    %esp,%ebp
- 243:	57                   	push   %edi
- 244:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 245:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 248:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 249:	31 db                	xor    %ebx,%ebx
-{
- 24b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 24e:	eb 27                	jmp    277 <gets+0x37>
-    cc = read(0, &c, 1);
- 250:	83 ec 04             	sub    $0x4,%esp
- 253:	6a 01                	push   $0x1
- 255:	56                   	push   %esi
- 256:	6a 00                	push   $0x0
- 258:	e8 1e 01 00 00       	call   37b <read>
-    if(cc < 1)
- 25d:	83 c4 10             	add    $0x10,%esp
- 260:	85 c0                	test   %eax,%eax
- 262:	7e 1d                	jle    281 <gets+0x41>
-      break;
-    buf[i++] = c;
- 264:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 268:	8b 55 08             	mov    0x8(%ebp),%edx
- 26b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 26f:	3c 0a                	cmp    $0xa,%al
- 271:	74 10                	je     283 <gets+0x43>
- 273:	3c 0d                	cmp    $0xd,%al
- 275:	74 0c                	je     283 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 277:	89 df                	mov    %ebx,%edi
- 279:	83 c3 01             	add    $0x1,%ebx
- 27c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 27f:	7c cf                	jl     250 <gets+0x10>
- 281:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 283:	8b 45 08             	mov    0x8(%ebp),%eax
- 286:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 28a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 28d:	5b                   	pop    %ebx
- 28e:	5e                   	pop    %esi
- 28f:	5f                   	pop    %edi
- 290:	5d                   	pop    %ebp
- 291:	c3                   	ret
- 292:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 299:	00 
- 29a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000002a0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 2a0:	55                   	push   %ebp
- 2a1:	89 e5                	mov    %esp,%ebp
- 2a3:	56                   	push   %esi
- 2a4:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 2a5:	83 ec 08             	sub    $0x8,%esp
- 2a8:	6a 00                	push   $0x0
- 2aa:	ff 75 08             	push   0x8(%ebp)
- 2ad:	e8 f1 00 00 00       	call   3a3 <open>
-  if(fd < 0)
- 2b2:	83 c4 10             	add    $0x10,%esp
- 2b5:	85 c0                	test   %eax,%eax
- 2b7:	78 27                	js     2e0 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 2b9:	83 ec 08             	sub    $0x8,%esp
- 2bc:	ff 75 0c             	push   0xc(%ebp)
- 2bf:	89 c3                	mov    %eax,%ebx
- 2c1:	50                   	push   %eax
- 2c2:	e8 f4 00 00 00       	call   3bb <fstat>
-  close(fd);
- 2c7:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 2ca:	89 c6                	mov    %eax,%esi
-  close(fd);
- 2cc:	e8 ba 00 00 00       	call   38b <close>
-  return r;
- 2d1:	83 c4 10             	add    $0x10,%esp
-}
- 2d4:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 2d7:	89 f0                	mov    %esi,%eax
- 2d9:	5b                   	pop    %ebx
- 2da:	5e                   	pop    %esi
- 2db:	5d                   	pop    %ebp
- 2dc:	c3                   	ret
- 2dd:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 2e0:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 2e5:	eb ed                	jmp    2d4 <stat+0x34>
- 2e7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2ee:	00 
- 2ef:	90                   	nop
-
-000002f0 <atoi>:
-
-int
-atoi(const char *s)
-{
- 2f0:	55                   	push   %ebp
- 2f1:	89 e5                	mov    %esp,%ebp
- 2f3:	53                   	push   %ebx
- 2f4:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 2f7:	0f be 02             	movsbl (%edx),%eax
- 2fa:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 2fd:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 300:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 305:	77 1e                	ja     325 <atoi+0x35>
- 307:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 30e:	00 
- 30f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 310:	83 c2 01             	add    $0x1,%edx
- 313:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 316:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 31a:	0f be 02             	movsbl (%edx),%eax
- 31d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 320:	80 fb 09             	cmp    $0x9,%bl
- 323:	76 eb                	jbe    310 <atoi+0x20>
-  return n;
-}
- 325:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 328:	89 c8                	mov    %ecx,%eax
- 32a:	c9                   	leave
- 32b:	c3                   	ret
- 32c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000330 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 330:	55                   	push   %ebp
- 331:	89 e5                	mov    %esp,%ebp
- 333:	57                   	push   %edi
- 334:	8b 45 10             	mov    0x10(%ebp),%eax
- 337:	8b 55 08             	mov    0x8(%ebp),%edx
- 33a:	56                   	push   %esi
- 33b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 33e:	85 c0                	test   %eax,%eax
- 340:	7e 13                	jle    355 <memmove+0x25>
- 342:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 344:	89 d7                	mov    %edx,%edi
- 346:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 34d:	00 
- 34e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 350:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 351:	39 f8                	cmp    %edi,%eax
- 353:	75 fb                	jne    350 <memmove+0x20>
-  return vdst;
-}
- 355:	5e                   	pop    %esi
- 356:	89 d0                	mov    %edx,%eax
- 358:	5f                   	pop    %edi
- 359:	5d                   	pop    %ebp
- 35a:	c3                   	ret
-
-0000035b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 35b:	b8 01 00 00 00       	mov    $0x1,%eax
- 360:	cd 40                	int    $0x40
- 362:	c3                   	ret
-
-00000363 <exit>:
-SYSCALL(exit)
- 363:	b8 02 00 00 00       	mov    $0x2,%eax
- 368:	cd 40                	int    $0x40
- 36a:	c3                   	ret
-
-0000036b <wait>:
-SYSCALL(wait)
- 36b:	b8 03 00 00 00       	mov    $0x3,%eax
- 370:	cd 40                	int    $0x40
- 372:	c3                   	ret
-
-00000373 <pipe>:
-SYSCALL(pipe)
- 373:	b8 04 00 00 00       	mov    $0x4,%eax
- 378:	cd 40                	int    $0x40
- 37a:	c3                   	ret
-
-0000037b <read>:
-SYSCALL(read)
- 37b:	b8 05 00 00 00       	mov    $0x5,%eax
- 380:	cd 40                	int    $0x40
- 382:	c3                   	ret
-
-00000383 <write>:
-SYSCALL(write)
- 383:	b8 10 00 00 00       	mov    $0x10,%eax
- 388:	cd 40                	int    $0x40
- 38a:	c3                   	ret
-
-0000038b <close>:
-SYSCALL(close)
- 38b:	b8 15 00 00 00       	mov    $0x15,%eax
- 390:	cd 40                	int    $0x40
- 392:	c3                   	ret
-
-00000393 <kill>:
-SYSCALL(kill)
- 393:	b8 06 00 00 00       	mov    $0x6,%eax
- 398:	cd 40                	int    $0x40
- 39a:	c3                   	ret
-
-0000039b <exec>:
-SYSCALL(exec)
- 39b:	b8 07 00 00 00       	mov    $0x7,%eax
- 3a0:	cd 40                	int    $0x40
- 3a2:	c3                   	ret
-
-000003a3 <open>:
-SYSCALL(open)
- 3a3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 3a8:	cd 40                	int    $0x40
- 3aa:	c3                   	ret
-
-000003ab <mknod>:
-SYSCALL(mknod)
- 3ab:	b8 11 00 00 00       	mov    $0x11,%eax
- 3b0:	cd 40                	int    $0x40
- 3b2:	c3                   	ret
-
-000003b3 <unlink>:
-SYSCALL(unlink)
- 3b3:	b8 12 00 00 00       	mov    $0x12,%eax
- 3b8:	cd 40                	int    $0x40
- 3ba:	c3                   	ret
-
-000003bb <fstat>:
-SYSCALL(fstat)
- 3bb:	b8 08 00 00 00       	mov    $0x8,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret
-
-000003c3 <link>:
-SYSCALL(link)
- 3c3:	b8 13 00 00 00       	mov    $0x13,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret
-
-000003cb <mkdir>:
-SYSCALL(mkdir)
- 3cb:	b8 14 00 00 00       	mov    $0x14,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret
-
-000003d3 <chdir>:
-SYSCALL(chdir)
- 3d3:	b8 09 00 00 00       	mov    $0x9,%eax
- 3d8:	cd 40                	int    $0x40
- 3da:	c3                   	ret
-
-000003db <dup>:
-SYSCALL(dup)
- 3db:	b8 0a 00 00 00       	mov    $0xa,%eax
- 3e0:	cd 40                	int    $0x40
- 3e2:	c3                   	ret
-
-000003e3 <getpid>:
-SYSCALL(getpid)
- 3e3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret
-
-000003eb <sbrk>:
-SYSCALL(sbrk)
- 3eb:	b8 0c 00 00 00       	mov    $0xc,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret
-
-000003f3 <sleep>:
-SYSCALL(sleep)
- 3f3:	b8 0d 00 00 00       	mov    $0xd,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret
-
-000003fb <uptime>:
-SYSCALL(uptime)
- 3fb:	b8 0e 00 00 00       	mov    $0xe,%eax
- 400:	cd 40                	int    $0x40
- 402:	c3                   	ret
- 403:	66 90                	xchg   %ax,%ax
- 405:	66 90                	xchg   %ax,%ax
- 407:	66 90                	xchg   %ax,%ax
- 409:	66 90                	xchg   %ax,%ax
- 40b:	66 90                	xchg   %ax,%ax
- 40d:	66 90                	xchg   %ax,%ax
- 40f:	90                   	nop
-
-00000410 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 410:	55                   	push   %ebp
- 411:	89 e5                	mov    %esp,%ebp
- 413:	57                   	push   %edi
- 414:	56                   	push   %esi
- 415:	53                   	push   %ebx
- 416:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 418:	89 d1                	mov    %edx,%ecx
-{
- 41a:	83 ec 3c             	sub    $0x3c,%esp
- 41d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 420:	85 d2                	test   %edx,%edx
- 422:	0f 89 80 00 00 00    	jns    4a8 <printint+0x98>
- 428:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 42c:	74 7a                	je     4a8 <printint+0x98>
-    x = -xx;
- 42e:	f7 d9                	neg    %ecx
-    neg = 1;
- 430:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 435:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 438:	31 f6                	xor    %esi,%esi
- 43a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 440:	89 c8                	mov    %ecx,%eax
- 442:	31 d2                	xor    %edx,%edx
- 444:	89 f7                	mov    %esi,%edi
- 446:	f7 f3                	div    %ebx
- 448:	8d 76 01             	lea    0x1(%esi),%esi
- 44b:	0f b6 92 3c 08 00 00 	movzbl 0x83c(%edx),%edx
- 452:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 456:	89 ca                	mov    %ecx,%edx
- 458:	89 c1                	mov    %eax,%ecx
- 45a:	39 da                	cmp    %ebx,%edx
- 45c:	73 e2                	jae    440 <printint+0x30>
-  if(neg)
- 45e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 461:	85 c0                	test   %eax,%eax
- 463:	74 07                	je     46c <printint+0x5c>
-    buf[i++] = '-';
- 465:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 46a:	89 f7                	mov    %esi,%edi
- 46c:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 46f:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 472:	01 df                	add    %ebx,%edi
- 474:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 478:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 47b:	83 ec 04             	sub    $0x4,%esp
- 47e:	88 45 d7             	mov    %al,-0x29(%ebp)
- 481:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 484:	6a 01                	push   $0x1
- 486:	50                   	push   %eax
- 487:	56                   	push   %esi
- 488:	e8 f6 fe ff ff       	call   383 <write>
-  while(--i >= 0)
- 48d:	89 f8                	mov    %edi,%eax
- 48f:	83 c4 10             	add    $0x10,%esp
- 492:	83 ef 01             	sub    $0x1,%edi
- 495:	39 c3                	cmp    %eax,%ebx
- 497:	75 df                	jne    478 <printint+0x68>
-}
- 499:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 49c:	5b                   	pop    %ebx
- 49d:	5e                   	pop    %esi
- 49e:	5f                   	pop    %edi
- 49f:	5d                   	pop    %ebp
- 4a0:	c3                   	ret
- 4a1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 4a8:	31 c0                	xor    %eax,%eax
- 4aa:	eb 89                	jmp    435 <printint+0x25>
- 4ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000004b0 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 4b0:	55                   	push   %ebp
- 4b1:	89 e5                	mov    %esp,%ebp
- 4b3:	57                   	push   %edi
- 4b4:	56                   	push   %esi
- 4b5:	53                   	push   %ebx
- 4b6:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 4b9:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 4bc:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 4bf:	0f b6 1e             	movzbl (%esi),%ebx
- 4c2:	83 c6 01             	add    $0x1,%esi
- 4c5:	84 db                	test   %bl,%bl
- 4c7:	74 67                	je     530 <printf+0x80>
- 4c9:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 4cc:	31 d2                	xor    %edx,%edx
- 4ce:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 4d1:	eb 34                	jmp    507 <printf+0x57>
- 4d3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 4d8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 4db:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 4e0:	83 f8 25             	cmp    $0x25,%eax
- 4e3:	74 18                	je     4fd <printf+0x4d>
-  write(fd, &c, 1);
- 4e5:	83 ec 04             	sub    $0x4,%esp
- 4e8:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 4eb:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 4ee:	6a 01                	push   $0x1
- 4f0:	50                   	push   %eax
- 4f1:	57                   	push   %edi
- 4f2:	e8 8c fe ff ff       	call   383 <write>
- 4f7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 4fa:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 4fd:	0f b6 1e             	movzbl (%esi),%ebx
- 500:	83 c6 01             	add    $0x1,%esi
- 503:	84 db                	test   %bl,%bl
- 505:	74 29                	je     530 <printf+0x80>
-    c = fmt[i] & 0xff;
- 507:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 50a:	85 d2                	test   %edx,%edx
- 50c:	74 ca                	je     4d8 <printf+0x28>
-      }
-    } else if(state == '%'){
- 50e:	83 fa 25             	cmp    $0x25,%edx
- 511:	75 ea                	jne    4fd <printf+0x4d>
-      if(c == 'd'){
- 513:	83 f8 25             	cmp    $0x25,%eax
- 516:	0f 84 04 01 00 00    	je     620 <printf+0x170>
- 51c:	83 e8 63             	sub    $0x63,%eax
- 51f:	83 f8 15             	cmp    $0x15,%eax
- 522:	77 1c                	ja     540 <printf+0x90>
- 524:	ff 24 85 e4 07 00 00 	jmp    *0x7e4(,%eax,4)
- 52b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 530:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 533:	5b                   	pop    %ebx
- 534:	5e                   	pop    %esi
- 535:	5f                   	pop    %edi
- 536:	5d                   	pop    %ebp
- 537:	c3                   	ret
- 538:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 53f:	00 
-  write(fd, &c, 1);
- 540:	83 ec 04             	sub    $0x4,%esp
- 543:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 546:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 54a:	6a 01                	push   $0x1
- 54c:	52                   	push   %edx
- 54d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 550:	57                   	push   %edi
- 551:	e8 2d fe ff ff       	call   383 <write>
- 556:	83 c4 0c             	add    $0xc,%esp
- 559:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 55c:	6a 01                	push   $0x1
- 55e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 561:	52                   	push   %edx
- 562:	57                   	push   %edi
- 563:	e8 1b fe ff ff       	call   383 <write>
-        putc(fd, c);
- 568:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 56b:	31 d2                	xor    %edx,%edx
- 56d:	eb 8e                	jmp    4fd <printf+0x4d>
- 56f:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 570:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 573:	83 ec 0c             	sub    $0xc,%esp
- 576:	b9 10 00 00 00       	mov    $0x10,%ecx
- 57b:	8b 13                	mov    (%ebx),%edx
- 57d:	6a 00                	push   $0x0
- 57f:	89 f8                	mov    %edi,%eax
-        ap++;
- 581:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 584:	e8 87 fe ff ff       	call   410 <printint>
-        ap++;
- 589:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 58c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 58f:	31 d2                	xor    %edx,%edx
- 591:	e9 67 ff ff ff       	jmp    4fd <printf+0x4d>
-        s = (char*)*ap;
- 596:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 599:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 59b:	83 c0 04             	add    $0x4,%eax
- 59e:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 5a1:	85 db                	test   %ebx,%ebx
- 5a3:	0f 84 87 00 00 00    	je     630 <printf+0x180>
-        while(*s != 0){
- 5a9:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 5ac:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 5ae:	84 c0                	test   %al,%al
- 5b0:	0f 84 47 ff ff ff    	je     4fd <printf+0x4d>
- 5b6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 5b9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 5bc:	89 de                	mov    %ebx,%esi
- 5be:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 5c0:	83 ec 04             	sub    $0x4,%esp
- 5c3:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 5c6:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 5c9:	6a 01                	push   $0x1
- 5cb:	53                   	push   %ebx
- 5cc:	57                   	push   %edi
- 5cd:	e8 b1 fd ff ff       	call   383 <write>
-        while(*s != 0){
- 5d2:	0f b6 06             	movzbl (%esi),%eax
- 5d5:	83 c4 10             	add    $0x10,%esp
- 5d8:	84 c0                	test   %al,%al
- 5da:	75 e4                	jne    5c0 <printf+0x110>
-      state = 0;
- 5dc:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 5df:	31 d2                	xor    %edx,%edx
- 5e1:	e9 17 ff ff ff       	jmp    4fd <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 5e6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5e9:	83 ec 0c             	sub    $0xc,%esp
- 5ec:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 5f1:	8b 13                	mov    (%ebx),%edx
- 5f3:	6a 01                	push   $0x1
- 5f5:	eb 88                	jmp    57f <printf+0xcf>
-        putc(fd, *ap);
- 5f7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 5fa:	83 ec 04             	sub    $0x4,%esp
- 5fd:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 600:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 602:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 605:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 608:	6a 01                	push   $0x1
- 60a:	52                   	push   %edx
- 60b:	57                   	push   %edi
- 60c:	e8 72 fd ff ff       	call   383 <write>
-        ap++;
- 611:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 614:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 617:	31 d2                	xor    %edx,%edx
- 619:	e9 df fe ff ff       	jmp    4fd <printf+0x4d>
- 61e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 620:	83 ec 04             	sub    $0x4,%esp
- 623:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 626:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 629:	6a 01                	push   $0x1
- 62b:	e9 31 ff ff ff       	jmp    561 <printf+0xb1>
- 630:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 635:	bb db 07 00 00       	mov    $0x7db,%ebx
- 63a:	e9 77 ff ff ff       	jmp    5b6 <printf+0x106>
- 63f:	90                   	nop
-
-00000640 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 640:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 641:	a1 e8 0a 00 00       	mov    0xae8,%eax
-{
- 646:	89 e5                	mov    %esp,%ebp
- 648:	57                   	push   %edi
- 649:	56                   	push   %esi
- 64a:	53                   	push   %ebx
- 64b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 64e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 651:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 658:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 65a:	39 c8                	cmp    %ecx,%eax
- 65c:	73 32                	jae    690 <free+0x50>
- 65e:	39 d1                	cmp    %edx,%ecx
- 660:	72 04                	jb     666 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 662:	39 d0                	cmp    %edx,%eax
- 664:	72 32                	jb     698 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 666:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 669:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 66c:	39 fa                	cmp    %edi,%edx
- 66e:	74 30                	je     6a0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 670:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 673:	8b 50 04             	mov    0x4(%eax),%edx
- 676:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 679:	39 f1                	cmp    %esi,%ecx
- 67b:	74 3a                	je     6b7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 67d:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 67f:	5b                   	pop    %ebx
-  freep = p;
- 680:	a3 e8 0a 00 00       	mov    %eax,0xae8
-}
- 685:	5e                   	pop    %esi
- 686:	5f                   	pop    %edi
- 687:	5d                   	pop    %ebp
- 688:	c3                   	ret
- 689:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 690:	39 d0                	cmp    %edx,%eax
- 692:	72 04                	jb     698 <free+0x58>
- 694:	39 d1                	cmp    %edx,%ecx
- 696:	72 ce                	jb     666 <free+0x26>
-{
- 698:	89 d0                	mov    %edx,%eax
- 69a:	eb bc                	jmp    658 <free+0x18>
- 69c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 6a0:	03 72 04             	add    0x4(%edx),%esi
- 6a3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6a6:	8b 10                	mov    (%eax),%edx
- 6a8:	8b 12                	mov    (%edx),%edx
- 6aa:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 6ad:	8b 50 04             	mov    0x4(%eax),%edx
- 6b0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6b3:	39 f1                	cmp    %esi,%ecx
- 6b5:	75 c6                	jne    67d <free+0x3d>
-    p->s.size += bp->s.size;
- 6b7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 6ba:	a3 e8 0a 00 00       	mov    %eax,0xae8
-    p->s.size += bp->s.size;
- 6bf:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 6c2:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 6c5:	89 08                	mov    %ecx,(%eax)
-}
- 6c7:	5b                   	pop    %ebx
- 6c8:	5e                   	pop    %esi
- 6c9:	5f                   	pop    %edi
- 6ca:	5d                   	pop    %ebp
- 6cb:	c3                   	ret
- 6cc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000006d0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 6d0:	55                   	push   %ebp
- 6d1:	89 e5                	mov    %esp,%ebp
- 6d3:	57                   	push   %edi
- 6d4:	56                   	push   %esi
- 6d5:	53                   	push   %ebx
- 6d6:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6d9:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 6dc:	8b 15 e8 0a 00 00    	mov    0xae8,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 6e2:	8d 78 07             	lea    0x7(%eax),%edi
- 6e5:	c1 ef 03             	shr    $0x3,%edi
- 6e8:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 6eb:	85 d2                	test   %edx,%edx
- 6ed:	0f 84 8d 00 00 00    	je     780 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 6f3:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 6f5:	8b 48 04             	mov    0x4(%eax),%ecx
- 6f8:	39 f9                	cmp    %edi,%ecx
- 6fa:	73 64                	jae    760 <malloc+0x90>
-  if(nu < 4096)
- 6fc:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 701:	39 df                	cmp    %ebx,%edi
- 703:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 706:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 70d:	eb 0a                	jmp    719 <malloc+0x49>
- 70f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 710:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 712:	8b 48 04             	mov    0x4(%eax),%ecx
- 715:	39 f9                	cmp    %edi,%ecx
- 717:	73 47                	jae    760 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 719:	89 c2                	mov    %eax,%edx
- 71b:	3b 05 e8 0a 00 00    	cmp    0xae8,%eax
- 721:	75 ed                	jne    710 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 723:	83 ec 0c             	sub    $0xc,%esp
- 726:	56                   	push   %esi
- 727:	e8 bf fc ff ff       	call   3eb <sbrk>
-  if(p == (char*)-1)
- 72c:	83 c4 10             	add    $0x10,%esp
- 72f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 732:	74 1c                	je     750 <malloc+0x80>
-  hp->s.size = nu;
- 734:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 737:	83 ec 0c             	sub    $0xc,%esp
- 73a:	83 c0 08             	add    $0x8,%eax
- 73d:	50                   	push   %eax
- 73e:	e8 fd fe ff ff       	call   640 <free>
-  return freep;
- 743:	8b 15 e8 0a 00 00    	mov    0xae8,%edx
-      if((p = morecore(nunits)) == 0)
- 749:	83 c4 10             	add    $0x10,%esp
- 74c:	85 d2                	test   %edx,%edx
- 74e:	75 c0                	jne    710 <malloc+0x40>
-        return 0;
-  }
-}
- 750:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 753:	31 c0                	xor    %eax,%eax
-}
- 755:	5b                   	pop    %ebx
- 756:	5e                   	pop    %esi
- 757:	5f                   	pop    %edi
- 758:	5d                   	pop    %ebp
- 759:	c3                   	ret
- 75a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 760:	39 cf                	cmp    %ecx,%edi
- 762:	74 4c                	je     7b0 <malloc+0xe0>
-        p->s.size -= nunits;
- 764:	29 f9                	sub    %edi,%ecx
- 766:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 769:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 76c:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 76f:	89 15 e8 0a 00 00    	mov    %edx,0xae8
-}
- 775:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 778:	83 c0 08             	add    $0x8,%eax
-}
- 77b:	5b                   	pop    %ebx
- 77c:	5e                   	pop    %esi
- 77d:	5f                   	pop    %edi
- 77e:	5d                   	pop    %ebp
- 77f:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 780:	c7 05 e8 0a 00 00 ec 	movl   $0xaec,0xae8
- 787:	0a 00 00 
-    base.s.size = 0;
- 78a:	b8 ec 0a 00 00       	mov    $0xaec,%eax
-    base.s.ptr = freep = prevp = &base;
- 78f:	c7 05 ec 0a 00 00 ec 	movl   $0xaec,0xaec
- 796:	0a 00 00 
-    base.s.size = 0;
- 799:	c7 05 f0 0a 00 00 00 	movl   $0x0,0xaf0
- 7a0:	00 00 00 
-    if(p->s.size >= nunits){
- 7a3:	e9 54 ff ff ff       	jmp    6fc <malloc+0x2c>
- 7a8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 7af:	00 
-        prevp->s.ptr = p->s.ptr;
- 7b0:	8b 08                	mov    (%eax),%ecx
- 7b2:	89 0a                	mov    %ecx,(%edx)
- 7b4:	eb b9                	jmp    76f <malloc+0x9f>
diff --git a/stressfs.d b/stressfs.d
deleted file mode 100644
index 7d5de54..0000000
--- a/stressfs.d
+++ /dev/null
@@ -1,2 +0,0 @@
-stressfs.o: stressfs.c /usr/include/stdc-predef.h types.h stat.h user.h \
- fs.h fcntl.h
diff --git a/stressfs.o b/stressfs.o
deleted file mode 100644
index ff1b5c5..0000000
Binary files a/stressfs.o and /dev/null differ
diff --git a/stressfs.sym b/stressfs.sym
deleted file mode 100644
index a33cad0..0000000
--- a/stressfs.sym
+++ /dev/null
@@ -1,45 +0,0 @@
-00000000 stressfs.c
-00000000 ulib.c
-00000000 printf.c
-00000410 printint
-0000083c digits.0
-00000000 umalloc.c
-00000ae8 freep
-00000aec base
-00000120 strcpy
-000004b0 printf
-00000330 memmove
-000003ab mknod
-00000240 gets
-000003e3 getpid
-000006d0 malloc
-000003f3 sleep
-00000373 pipe
-00000383 write
-000003bb fstat
-00000393 kill
-000003d3 chdir
-0000039b exec
-0000036b wait
-0000037b read
-000003b3 unlink
-0000035b fork
-000003eb sbrk
-000003fb uptime
-00000ae8 __bss_start
-000001e0 memset
-00000000 main
-00000150 strcmp
-000003db dup
-000002a0 stat
-00000ae8 _edata
-00000af4 _end
-000003c3 link
-00000363 exit
-000002f0 atoi
-000001b0 strlen
-000003a3 open
-00000200 strchr
-000003cb mkdir
-0000038b close
-00000640 free
diff --git a/string.d b/string.d
deleted file mode 100644
index 68931ed..0000000
--- a/string.d
+++ /dev/null
@@ -1 +0,0 @@
-string.o: string.c /usr/include/stdc-predef.h types.h x86.h
diff --git a/string.o b/string.o
deleted file mode 100644
index 4f9f4cf..0000000
Binary files a/string.o and /dev/null differ
diff --git a/swtch.o b/swtch.o
deleted file mode 100644
index 7880a14..0000000
Binary files a/swtch.o and /dev/null differ
diff --git a/syscall.d b/syscall.d
deleted file mode 100644
index 4649283..0000000
--- a/syscall.d
+++ /dev/null
@@ -1,2 +0,0 @@
-syscall.o: syscall.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h syscall.h
diff --git a/syscall.o b/syscall.o
deleted file mode 100644
index 0bfadf4..0000000
Binary files a/syscall.o and /dev/null differ
diff --git a/sysfile.d b/sysfile.d
deleted file mode 100644
index 74f1a20..0000000
--- a/sysfile.d
+++ /dev/null
@@ -1,2 +0,0 @@
-sysfile.o: sysfile.c /usr/include/stdc-predef.h types.h defs.h param.h \
- stat.h mmu.h proc.h fs.h spinlock.h sleeplock.h file.h fcntl.h
diff --git a/sysfile.o b/sysfile.o
deleted file mode 100644
index a5f58d9..0000000
Binary files a/sysfile.o and /dev/null differ
diff --git a/sysproc.d b/sysproc.d
deleted file mode 100644
index 2f26f0c..0000000
--- a/sysproc.d
+++ /dev/null
@@ -1,2 +0,0 @@
-sysproc.o: sysproc.c /usr/include/stdc-predef.h types.h x86.h defs.h \
- date.h param.h memlayout.h mmu.h proc.h
diff --git a/sysproc.o b/sysproc.o
deleted file mode 100644
index e798410..0000000
Binary files a/sysproc.o and /dev/null differ
diff --git a/trap.c b/trap.c
index 41c66eb..505cbb6 100644
--- a/trap.c
+++ b/trap.c
@@ -46,6 +46,7 @@ trap(struct trapframe *tf)
     return;
   }
 
+  extern void handle_page_fault(struct trapframe*);
   switch(tf->trapno){
   case T_IRQ0 + IRQ_TIMER:
     if(cpuid() == 0){
@@ -77,6 +78,9 @@ trap(struct trapframe *tf)
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
+  case T_PGFLT:
+    handle_page_fault(tf);
+    return;
 
   //PAGEBREAK: 13
   default:
diff --git a/trap.d b/trap.d
deleted file mode 100644
index c48ab89..0000000
--- a/trap.d
+++ /dev/null
@@ -1,2 +0,0 @@
-trap.o: trap.c /usr/include/stdc-predef.h types.h defs.h param.h \
- memlayout.h mmu.h proc.h x86.h traps.h spinlock.h
diff --git a/trap.o b/trap.o
deleted file mode 100644
index 998fa60..0000000
Binary files a/trap.o and /dev/null differ
diff --git a/trapasm.o b/trapasm.o
deleted file mode 100644
index e0dc4fe..0000000
Binary files a/trapasm.o and /dev/null differ
diff --git a/uart.d b/uart.d
deleted file mode 100644
index d156629..0000000
--- a/uart.d
+++ /dev/null
@@ -1,2 +0,0 @@
-uart.o: uart.c /usr/include/stdc-predef.h types.h defs.h param.h traps.h \
- spinlock.h sleeplock.h fs.h file.h mmu.h proc.h x86.h
diff --git a/uart.o b/uart.o
deleted file mode 100644
index 27c6607..0000000
Binary files a/uart.o and /dev/null differ
diff --git a/ulib.d b/ulib.d
deleted file mode 100644
index 61f575e..0000000
--- a/ulib.d
+++ /dev/null
@@ -1,2 +0,0 @@
-ulib.o: ulib.c /usr/include/stdc-predef.h types.h stat.h fcntl.h user.h \
- x86.h
diff --git a/ulib.o b/ulib.o
deleted file mode 100644
index b07600e..0000000
Binary files a/ulib.o and /dev/null differ
diff --git a/umalloc.d b/umalloc.d
deleted file mode 100644
index cc1d152..0000000
--- a/umalloc.d
+++ /dev/null
@@ -1,2 +0,0 @@
-umalloc.o: umalloc.c /usr/include/stdc-predef.h types.h stat.h user.h \
- param.h
diff --git a/umalloc.o b/umalloc.o
deleted file mode 100644
index 50e672a..0000000
Binary files a/umalloc.o and /dev/null differ
diff --git a/usertests.asm b/usertests.asm
deleted file mode 100644
index 213a533..0000000
--- a/usertests.asm
+++ /dev/null
@@ -1,6574 +0,0 @@
-
-_usertests:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  return randstate;
-}
-
-int
-main(int argc, char *argv[])
-{
-       0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-       4:	83 e4 f0             	and    $0xfffffff0,%esp
-       7:	ff 71 fc             	push   -0x4(%ecx)
-       a:	55                   	push   %ebp
-       b:	89 e5                	mov    %esp,%ebp
-       d:	51                   	push   %ecx
-       e:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "usertests starting\n");
-      11:	68 16 4d 00 00       	push   $0x4d16
-      16:	6a 01                	push   $0x1
-      18:	e8 03 3a 00 00       	call   3a20 <printf>
-
-  if(open("usertests.ran", 0) >= 0){
-      1d:	59                   	pop    %ecx
-      1e:	58                   	pop    %eax
-      1f:	6a 00                	push   $0x0
-      21:	68 2a 4d 00 00       	push   $0x4d2a
-      26:	e8 e8 38 00 00       	call   3913 <open>
-      2b:	83 c4 10             	add    $0x10,%esp
-      2e:	85 c0                	test   %eax,%eax
-      30:	78 13                	js     45 <main+0x45>
-    printf(1, "already ran user tests -- rebuild fs.img\n");
-      32:	52                   	push   %edx
-      33:	52                   	push   %edx
-      34:	68 9c 54 00 00       	push   $0x549c
-      39:	6a 01                	push   $0x1
-      3b:	e8 e0 39 00 00       	call   3a20 <printf>
-    exit();
-      40:	e8 8e 38 00 00       	call   38d3 <exit>
-  }
-  close(open("usertests.ran", O_CREATE));
-      45:	50                   	push   %eax
-      46:	50                   	push   %eax
-      47:	68 00 02 00 00       	push   $0x200
-      4c:	68 2a 4d 00 00       	push   $0x4d2a
-      51:	e8 bd 38 00 00       	call   3913 <open>
-      56:	89 04 24             	mov    %eax,(%esp)
-      59:	e8 9d 38 00 00       	call   38fb <close>
-
-  argptest();
-      5e:	e8 9d 35 00 00       	call   3600 <argptest>
-  createdelete();
-      63:	e8 c8 11 00 00       	call   1230 <createdelete>
-  linkunlink();
-      68:	e8 63 1a 00 00       	call   1ad0 <linkunlink>
-  concreate();
-      6d:	e8 5e 17 00 00       	call   17d0 <concreate>
-  fourfiles();
-      72:	e8 b9 0f 00 00       	call   1030 <fourfiles>
-  sharedfd();
-      77:	e8 f4 0d 00 00       	call   e70 <sharedfd>
-
-  bigargtest();
-      7c:	e8 1f 32 00 00       	call   32a0 <bigargtest>
-  bigwrite();
-      81:	e8 6a 23 00 00       	call   23f0 <bigwrite>
-  bigargtest();
-      86:	e8 15 32 00 00       	call   32a0 <bigargtest>
-  bsstest();
-      8b:	e8 a0 31 00 00       	call   3230 <bsstest>
-  sbrktest();
-      90:	e8 9b 2c 00 00       	call   2d30 <sbrktest>
-  validatetest();
-      95:	e8 e6 30 00 00       	call   3180 <validatetest>
-
-  opentest();
-      9a:	e8 61 03 00 00       	call   400 <opentest>
-  writetest();
-      9f:	e8 ec 03 00 00       	call   490 <writetest>
-  writetest1();
-      a4:	e8 c7 05 00 00       	call   670 <writetest1>
-  createtest();
-      a9:	e8 92 07 00 00       	call   840 <createtest>
-
-  openiputtest();
-      ae:	e8 4d 02 00 00       	call   300 <openiputtest>
-  exitiputtest();
-      b3:	e8 48 01 00 00       	call   200 <exitiputtest>
-  iputtest();
-      b8:	e8 63 00 00 00       	call   120 <iputtest>
-
-  mem();
-      bd:	e8 de 0c 00 00       	call   da0 <mem>
-  pipe1();
-      c2:	e8 59 09 00 00       	call   a20 <pipe1>
-  preempt();
-      c7:	e8 f4 0a 00 00       	call   bc0 <preempt>
-  exitwait();
-      cc:	e8 4f 0c 00 00       	call   d20 <exitwait>
-
-  rmdot();
-      d1:	e8 0a 27 00 00       	call   27e0 <rmdot>
-  fourteen();
-      d6:	e8 c5 25 00 00       	call   26a0 <fourteen>
-  bigfile();
-      db:	e8 f0 23 00 00       	call   24d0 <bigfile>
-  subdir();
-      e0:	e8 2b 1c 00 00       	call   1d10 <subdir>
-  linktest();
-      e5:	e8 d6 14 00 00       	call   15c0 <linktest>
-  unlinkread();
-      ea:	e8 41 13 00 00       	call   1430 <unlinkread>
-  dirfile();
-      ef:	e8 6c 28 00 00       	call   2960 <dirfile>
-  iref();
-      f4:	e8 67 2a 00 00       	call   2b60 <iref>
-  forktest();
-      f9:	e8 82 2b 00 00       	call   2c80 <forktest>
-  bigdir(); // slow
-      fe:	e8 dd 1a 00 00       	call   1be0 <bigdir>
-
-  uio();
-     103:	e8 88 34 00 00       	call   3590 <uio>
-
-  exectest();
-     108:	e8 c3 08 00 00       	call   9d0 <exectest>
-
-  exit();
-     10d:	e8 c1 37 00 00       	call   38d3 <exit>
-     112:	66 90                	xchg   %ax,%ax
-     114:	66 90                	xchg   %ax,%ax
-     116:	66 90                	xchg   %ax,%ax
-     118:	66 90                	xchg   %ax,%ax
-     11a:	66 90                	xchg   %ax,%ax
-     11c:	66 90                	xchg   %ax,%ax
-     11e:	66 90                	xchg   %ax,%ax
-
-00000120 <iputtest>:
-{
-     120:	55                   	push   %ebp
-     121:	89 e5                	mov    %esp,%ebp
-     123:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "iput test\n");
-     126:	68 bc 3d 00 00       	push   $0x3dbc
-     12b:	ff 35 08 5e 00 00    	push   0x5e08
-     131:	e8 ea 38 00 00       	call   3a20 <printf>
-  if(mkdir("iputdir") < 0){
-     136:	c7 04 24 4f 3d 00 00 	movl   $0x3d4f,(%esp)
-     13d:	e8 f9 37 00 00       	call   393b <mkdir>
-     142:	83 c4 10             	add    $0x10,%esp
-     145:	85 c0                	test   %eax,%eax
-     147:	78 58                	js     1a1 <iputtest+0x81>
-  if(chdir("iputdir") < 0){
-     149:	83 ec 0c             	sub    $0xc,%esp
-     14c:	68 4f 3d 00 00       	push   $0x3d4f
-     151:	e8 ed 37 00 00       	call   3943 <chdir>
-     156:	83 c4 10             	add    $0x10,%esp
-     159:	85 c0                	test   %eax,%eax
-     15b:	0f 88 85 00 00 00    	js     1e6 <iputtest+0xc6>
-  if(unlink("../iputdir") < 0){
-     161:	83 ec 0c             	sub    $0xc,%esp
-     164:	68 4c 3d 00 00       	push   $0x3d4c
-     169:	e8 b5 37 00 00       	call   3923 <unlink>
-     16e:	83 c4 10             	add    $0x10,%esp
-     171:	85 c0                	test   %eax,%eax
-     173:	78 5a                	js     1cf <iputtest+0xaf>
-  if(chdir("/") < 0){
-     175:	83 ec 0c             	sub    $0xc,%esp
-     178:	68 71 3d 00 00       	push   $0x3d71
-     17d:	e8 c1 37 00 00       	call   3943 <chdir>
-     182:	83 c4 10             	add    $0x10,%esp
-     185:	85 c0                	test   %eax,%eax
-     187:	78 2f                	js     1b8 <iputtest+0x98>
-  printf(stdout, "iput test ok\n");
-     189:	83 ec 08             	sub    $0x8,%esp
-     18c:	68 f4 3d 00 00       	push   $0x3df4
-     191:	ff 35 08 5e 00 00    	push   0x5e08
-     197:	e8 84 38 00 00       	call   3a20 <printf>
-}
-     19c:	83 c4 10             	add    $0x10,%esp
-     19f:	c9                   	leave
-     1a0:	c3                   	ret
-    printf(stdout, "mkdir failed\n");
-     1a1:	50                   	push   %eax
-     1a2:	50                   	push   %eax
-     1a3:	68 28 3d 00 00       	push   $0x3d28
-     1a8:	ff 35 08 5e 00 00    	push   0x5e08
-     1ae:	e8 6d 38 00 00       	call   3a20 <printf>
-    exit();
-     1b3:	e8 1b 37 00 00       	call   38d3 <exit>
-    printf(stdout, "chdir / failed\n");
-     1b8:	50                   	push   %eax
-     1b9:	50                   	push   %eax
-     1ba:	68 73 3d 00 00       	push   $0x3d73
-     1bf:	ff 35 08 5e 00 00    	push   0x5e08
-     1c5:	e8 56 38 00 00       	call   3a20 <printf>
-    exit();
-     1ca:	e8 04 37 00 00       	call   38d3 <exit>
-    printf(stdout, "unlink ../iputdir failed\n");
-     1cf:	52                   	push   %edx
-     1d0:	52                   	push   %edx
-     1d1:	68 57 3d 00 00       	push   $0x3d57
-     1d6:	ff 35 08 5e 00 00    	push   0x5e08
-     1dc:	e8 3f 38 00 00       	call   3a20 <printf>
-    exit();
-     1e1:	e8 ed 36 00 00       	call   38d3 <exit>
-    printf(stdout, "chdir iputdir failed\n");
-     1e6:	51                   	push   %ecx
-     1e7:	51                   	push   %ecx
-     1e8:	68 36 3d 00 00       	push   $0x3d36
-     1ed:	ff 35 08 5e 00 00    	push   0x5e08
-     1f3:	e8 28 38 00 00       	call   3a20 <printf>
-    exit();
-     1f8:	e8 d6 36 00 00       	call   38d3 <exit>
-     1fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000200 <exitiputtest>:
-{
-     200:	55                   	push   %ebp
-     201:	89 e5                	mov    %esp,%ebp
-     203:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "exitiput test\n");
-     206:	68 83 3d 00 00       	push   $0x3d83
-     20b:	ff 35 08 5e 00 00    	push   0x5e08
-     211:	e8 0a 38 00 00       	call   3a20 <printf>
-  pid = fork();
-     216:	e8 b0 36 00 00       	call   38cb <fork>
-  if(pid < 0){
-     21b:	83 c4 10             	add    $0x10,%esp
-     21e:	85 c0                	test   %eax,%eax
-     220:	0f 88 8a 00 00 00    	js     2b0 <exitiputtest+0xb0>
-  if(pid == 0){
-     226:	75 50                	jne    278 <exitiputtest+0x78>
-    if(mkdir("iputdir") < 0){
-     228:	83 ec 0c             	sub    $0xc,%esp
-     22b:	68 4f 3d 00 00       	push   $0x3d4f
-     230:	e8 06 37 00 00       	call   393b <mkdir>
-     235:	83 c4 10             	add    $0x10,%esp
-     238:	85 c0                	test   %eax,%eax
-     23a:	0f 88 87 00 00 00    	js     2c7 <exitiputtest+0xc7>
-    if(chdir("iputdir") < 0){
-     240:	83 ec 0c             	sub    $0xc,%esp
-     243:	68 4f 3d 00 00       	push   $0x3d4f
-     248:	e8 f6 36 00 00       	call   3943 <chdir>
-     24d:	83 c4 10             	add    $0x10,%esp
-     250:	85 c0                	test   %eax,%eax
-     252:	0f 88 86 00 00 00    	js     2de <exitiputtest+0xde>
-    if(unlink("../iputdir") < 0){
-     258:	83 ec 0c             	sub    $0xc,%esp
-     25b:	68 4c 3d 00 00       	push   $0x3d4c
-     260:	e8 be 36 00 00       	call   3923 <unlink>
-     265:	83 c4 10             	add    $0x10,%esp
-     268:	85 c0                	test   %eax,%eax
-     26a:	78 2c                	js     298 <exitiputtest+0x98>
-    exit();
-     26c:	e8 62 36 00 00       	call   38d3 <exit>
-     271:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  wait();
-     278:	e8 5e 36 00 00       	call   38db <wait>
-  printf(stdout, "exitiput test ok\n");
-     27d:	83 ec 08             	sub    $0x8,%esp
-     280:	68 a6 3d 00 00       	push   $0x3da6
-     285:	ff 35 08 5e 00 00    	push   0x5e08
-     28b:	e8 90 37 00 00       	call   3a20 <printf>
-}
-     290:	83 c4 10             	add    $0x10,%esp
-     293:	c9                   	leave
-     294:	c3                   	ret
-     295:	8d 76 00             	lea    0x0(%esi),%esi
-      printf(stdout, "unlink ../iputdir failed\n");
-     298:	83 ec 08             	sub    $0x8,%esp
-     29b:	68 57 3d 00 00       	push   $0x3d57
-     2a0:	ff 35 08 5e 00 00    	push   0x5e08
-     2a6:	e8 75 37 00 00       	call   3a20 <printf>
-      exit();
-     2ab:	e8 23 36 00 00       	call   38d3 <exit>
-    printf(stdout, "fork failed\n");
-     2b0:	51                   	push   %ecx
-     2b1:	51                   	push   %ecx
-     2b2:	68 69 4c 00 00       	push   $0x4c69
-     2b7:	ff 35 08 5e 00 00    	push   0x5e08
-     2bd:	e8 5e 37 00 00       	call   3a20 <printf>
-    exit();
-     2c2:	e8 0c 36 00 00       	call   38d3 <exit>
-      printf(stdout, "mkdir failed\n");
-     2c7:	52                   	push   %edx
-     2c8:	52                   	push   %edx
-     2c9:	68 28 3d 00 00       	push   $0x3d28
-     2ce:	ff 35 08 5e 00 00    	push   0x5e08
-     2d4:	e8 47 37 00 00       	call   3a20 <printf>
-      exit();
-     2d9:	e8 f5 35 00 00       	call   38d3 <exit>
-      printf(stdout, "child chdir failed\n");
-     2de:	50                   	push   %eax
-     2df:	50                   	push   %eax
-     2e0:	68 92 3d 00 00       	push   $0x3d92
-     2e5:	ff 35 08 5e 00 00    	push   0x5e08
-     2eb:	e8 30 37 00 00       	call   3a20 <printf>
-      exit();
-     2f0:	e8 de 35 00 00       	call   38d3 <exit>
-     2f5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     2fc:	00 
-     2fd:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000300 <openiputtest>:
-{
-     300:	55                   	push   %ebp
-     301:	89 e5                	mov    %esp,%ebp
-     303:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "openiput test\n");
-     306:	68 b8 3d 00 00       	push   $0x3db8
-     30b:	ff 35 08 5e 00 00    	push   0x5e08
-     311:	e8 0a 37 00 00       	call   3a20 <printf>
-  if(mkdir("oidir") < 0){
-     316:	c7 04 24 c7 3d 00 00 	movl   $0x3dc7,(%esp)
-     31d:	e8 19 36 00 00       	call   393b <mkdir>
-     322:	83 c4 10             	add    $0x10,%esp
-     325:	85 c0                	test   %eax,%eax
-     327:	0f 88 9f 00 00 00    	js     3cc <openiputtest+0xcc>
-  pid = fork();
-     32d:	e8 99 35 00 00       	call   38cb <fork>
-  if(pid < 0){
-     332:	85 c0                	test   %eax,%eax
-     334:	78 7f                	js     3b5 <openiputtest+0xb5>
-  if(pid == 0){
-     336:	75 38                	jne    370 <openiputtest+0x70>
-    int fd = open("oidir", O_RDWR);
-     338:	83 ec 08             	sub    $0x8,%esp
-     33b:	6a 02                	push   $0x2
-     33d:	68 c7 3d 00 00       	push   $0x3dc7
-     342:	e8 cc 35 00 00       	call   3913 <open>
-    if(fd >= 0){
-     347:	83 c4 10             	add    $0x10,%esp
-     34a:	85 c0                	test   %eax,%eax
-     34c:	78 62                	js     3b0 <openiputtest+0xb0>
-      printf(stdout, "open directory for write succeeded\n");
-     34e:	83 ec 08             	sub    $0x8,%esp
-     351:	68 50 4d 00 00       	push   $0x4d50
-     356:	ff 35 08 5e 00 00    	push   0x5e08
-     35c:	e8 bf 36 00 00       	call   3a20 <printf>
-      exit();
-     361:	e8 6d 35 00 00       	call   38d3 <exit>
-     366:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     36d:	00 
-     36e:	66 90                	xchg   %ax,%ax
-  sleep(1);
-     370:	83 ec 0c             	sub    $0xc,%esp
-     373:	6a 01                	push   $0x1
-     375:	e8 e9 35 00 00       	call   3963 <sleep>
-  if(unlink("oidir") != 0){
-     37a:	c7 04 24 c7 3d 00 00 	movl   $0x3dc7,(%esp)
-     381:	e8 9d 35 00 00       	call   3923 <unlink>
-     386:	83 c4 10             	add    $0x10,%esp
-     389:	85 c0                	test   %eax,%eax
-     38b:	75 56                	jne    3e3 <openiputtest+0xe3>
-  wait();
-     38d:	e8 49 35 00 00       	call   38db <wait>
-  printf(stdout, "openiput test ok\n");
-     392:	83 ec 08             	sub    $0x8,%esp
-     395:	68 f0 3d 00 00       	push   $0x3df0
-     39a:	ff 35 08 5e 00 00    	push   0x5e08
-     3a0:	e8 7b 36 00 00       	call   3a20 <printf>
-}
-     3a5:	83 c4 10             	add    $0x10,%esp
-     3a8:	c9                   	leave
-     3a9:	c3                   	ret
-     3aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    exit();
-     3b0:	e8 1e 35 00 00       	call   38d3 <exit>
-    printf(stdout, "fork failed\n");
-     3b5:	52                   	push   %edx
-     3b6:	52                   	push   %edx
-     3b7:	68 69 4c 00 00       	push   $0x4c69
-     3bc:	ff 35 08 5e 00 00    	push   0x5e08
-     3c2:	e8 59 36 00 00       	call   3a20 <printf>
-    exit();
-     3c7:	e8 07 35 00 00       	call   38d3 <exit>
-    printf(stdout, "mkdir oidir failed\n");
-     3cc:	51                   	push   %ecx
-     3cd:	51                   	push   %ecx
-     3ce:	68 cd 3d 00 00       	push   $0x3dcd
-     3d3:	ff 35 08 5e 00 00    	push   0x5e08
-     3d9:	e8 42 36 00 00       	call   3a20 <printf>
-    exit();
-     3de:	e8 f0 34 00 00       	call   38d3 <exit>
-    printf(stdout, "unlink failed\n");
-     3e3:	50                   	push   %eax
-     3e4:	50                   	push   %eax
-     3e5:	68 e1 3d 00 00       	push   $0x3de1
-     3ea:	ff 35 08 5e 00 00    	push   0x5e08
-     3f0:	e8 2b 36 00 00       	call   3a20 <printf>
-    exit();
-     3f5:	e8 d9 34 00 00       	call   38d3 <exit>
-     3fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000400 <opentest>:
-{
-     400:	55                   	push   %ebp
-     401:	89 e5                	mov    %esp,%ebp
-     403:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "open test\n");
-     406:	68 02 3e 00 00       	push   $0x3e02
-     40b:	ff 35 08 5e 00 00    	push   0x5e08
-     411:	e8 0a 36 00 00       	call   3a20 <printf>
-  fd = open("echo", 0);
-     416:	58                   	pop    %eax
-     417:	5a                   	pop    %edx
-     418:	6a 00                	push   $0x0
-     41a:	68 0d 3e 00 00       	push   $0x3e0d
-     41f:	e8 ef 34 00 00       	call   3913 <open>
-  if(fd < 0){
-     424:	83 c4 10             	add    $0x10,%esp
-     427:	85 c0                	test   %eax,%eax
-     429:	78 36                	js     461 <opentest+0x61>
-  close(fd);
-     42b:	83 ec 0c             	sub    $0xc,%esp
-     42e:	50                   	push   %eax
-     42f:	e8 c7 34 00 00       	call   38fb <close>
-  fd = open("doesnotexist", 0);
-     434:	5a                   	pop    %edx
-     435:	59                   	pop    %ecx
-     436:	6a 00                	push   $0x0
-     438:	68 25 3e 00 00       	push   $0x3e25
-     43d:	e8 d1 34 00 00       	call   3913 <open>
-  if(fd >= 0){
-     442:	83 c4 10             	add    $0x10,%esp
-     445:	85 c0                	test   %eax,%eax
-     447:	79 2f                	jns    478 <opentest+0x78>
-  printf(stdout, "open test ok\n");
-     449:	83 ec 08             	sub    $0x8,%esp
-     44c:	68 50 3e 00 00       	push   $0x3e50
-     451:	ff 35 08 5e 00 00    	push   0x5e08
-     457:	e8 c4 35 00 00       	call   3a20 <printf>
-}
-     45c:	83 c4 10             	add    $0x10,%esp
-     45f:	c9                   	leave
-     460:	c3                   	ret
-    printf(stdout, "open echo failed!\n");
-     461:	50                   	push   %eax
-     462:	50                   	push   %eax
-     463:	68 12 3e 00 00       	push   $0x3e12
-     468:	ff 35 08 5e 00 00    	push   0x5e08
-     46e:	e8 ad 35 00 00       	call   3a20 <printf>
-    exit();
-     473:	e8 5b 34 00 00       	call   38d3 <exit>
-    printf(stdout, "open doesnotexist succeeded!\n");
-     478:	50                   	push   %eax
-     479:	50                   	push   %eax
-     47a:	68 32 3e 00 00       	push   $0x3e32
-     47f:	ff 35 08 5e 00 00    	push   0x5e08
-     485:	e8 96 35 00 00       	call   3a20 <printf>
-    exit();
-     48a:	e8 44 34 00 00       	call   38d3 <exit>
-     48f:	90                   	nop
-
-00000490 <writetest>:
-{
-     490:	55                   	push   %ebp
-     491:	89 e5                	mov    %esp,%ebp
-     493:	56                   	push   %esi
-     494:	53                   	push   %ebx
-  printf(stdout, "small file test\n");
-     495:	83 ec 08             	sub    $0x8,%esp
-     498:	68 5e 3e 00 00       	push   $0x3e5e
-     49d:	ff 35 08 5e 00 00    	push   0x5e08
-     4a3:	e8 78 35 00 00       	call   3a20 <printf>
-  fd = open("small", O_CREATE|O_RDWR);
-     4a8:	58                   	pop    %eax
-     4a9:	5a                   	pop    %edx
-     4aa:	68 02 02 00 00       	push   $0x202
-     4af:	68 6f 3e 00 00       	push   $0x3e6f
-     4b4:	e8 5a 34 00 00       	call   3913 <open>
-  if(fd >= 0){
-     4b9:	83 c4 10             	add    $0x10,%esp
-     4bc:	85 c0                	test   %eax,%eax
-     4be:	0f 88 88 01 00 00    	js     64c <writetest+0x1bc>
-    printf(stdout, "creat small succeeded; ok\n");
-     4c4:	83 ec 08             	sub    $0x8,%esp
-     4c7:	89 c6                	mov    %eax,%esi
-  for(i = 0; i < 100; i++){
-     4c9:	31 db                	xor    %ebx,%ebx
-    printf(stdout, "creat small succeeded; ok\n");
-     4cb:	68 75 3e 00 00       	push   $0x3e75
-     4d0:	ff 35 08 5e 00 00    	push   0x5e08
-     4d6:	e8 45 35 00 00       	call   3a20 <printf>
-     4db:	83 c4 10             	add    $0x10,%esp
-     4de:	66 90                	xchg   %ax,%ax
-    if(write(fd, "aaaaaaaaaa", 10) != 10){
-     4e0:	83 ec 04             	sub    $0x4,%esp
-     4e3:	6a 0a                	push   $0xa
-     4e5:	68 ac 3e 00 00       	push   $0x3eac
-     4ea:	56                   	push   %esi
-     4eb:	e8 03 34 00 00       	call   38f3 <write>
-     4f0:	83 c4 10             	add    $0x10,%esp
-     4f3:	83 f8 0a             	cmp    $0xa,%eax
-     4f6:	0f 85 d9 00 00 00    	jne    5d5 <writetest+0x145>
-    if(write(fd, "bbbbbbbbbb", 10) != 10){
-     4fc:	83 ec 04             	sub    $0x4,%esp
-     4ff:	6a 0a                	push   $0xa
-     501:	68 b7 3e 00 00       	push   $0x3eb7
-     506:	56                   	push   %esi
-     507:	e8 e7 33 00 00       	call   38f3 <write>
-     50c:	83 c4 10             	add    $0x10,%esp
-     50f:	83 f8 0a             	cmp    $0xa,%eax
-     512:	0f 85 d6 00 00 00    	jne    5ee <writetest+0x15e>
-  for(i = 0; i < 100; i++){
-     518:	83 c3 01             	add    $0x1,%ebx
-     51b:	83 fb 64             	cmp    $0x64,%ebx
-     51e:	75 c0                	jne    4e0 <writetest+0x50>
-  printf(stdout, "writes ok\n");
-     520:	83 ec 08             	sub    $0x8,%esp
-     523:	68 c2 3e 00 00       	push   $0x3ec2
-     528:	ff 35 08 5e 00 00    	push   0x5e08
-     52e:	e8 ed 34 00 00       	call   3a20 <printf>
-  close(fd);
-     533:	89 34 24             	mov    %esi,(%esp)
-     536:	e8 c0 33 00 00       	call   38fb <close>
-  fd = open("small", O_RDONLY);
-     53b:	5b                   	pop    %ebx
-     53c:	5e                   	pop    %esi
-     53d:	6a 00                	push   $0x0
-     53f:	68 6f 3e 00 00       	push   $0x3e6f
-     544:	e8 ca 33 00 00       	call   3913 <open>
-  if(fd >= 0){
-     549:	83 c4 10             	add    $0x10,%esp
-  fd = open("small", O_RDONLY);
-     54c:	89 c3                	mov    %eax,%ebx
-  if(fd >= 0){
-     54e:	85 c0                	test   %eax,%eax
-     550:	0f 88 b1 00 00 00    	js     607 <writetest+0x177>
-    printf(stdout, "open small succeeded ok\n");
-     556:	83 ec 08             	sub    $0x8,%esp
-     559:	68 cd 3e 00 00       	push   $0x3ecd
-     55e:	ff 35 08 5e 00 00    	push   0x5e08
-     564:	e8 b7 34 00 00       	call   3a20 <printf>
-  i = read(fd, buf, 2000);
-     569:	83 c4 0c             	add    $0xc,%esp
-     56c:	68 d0 07 00 00       	push   $0x7d0
-     571:	68 40 85 00 00       	push   $0x8540
-     576:	53                   	push   %ebx
-     577:	e8 6f 33 00 00       	call   38eb <read>
-  if(i == 2000){
-     57c:	83 c4 10             	add    $0x10,%esp
-     57f:	3d d0 07 00 00       	cmp    $0x7d0,%eax
-     584:	0f 85 94 00 00 00    	jne    61e <writetest+0x18e>
-    printf(stdout, "read succeeded ok\n");
-     58a:	83 ec 08             	sub    $0x8,%esp
-     58d:	68 01 3f 00 00       	push   $0x3f01
-     592:	ff 35 08 5e 00 00    	push   0x5e08
-     598:	e8 83 34 00 00       	call   3a20 <printf>
-  close(fd);
-     59d:	89 1c 24             	mov    %ebx,(%esp)
-     5a0:	e8 56 33 00 00       	call   38fb <close>
-  if(unlink("small") < 0){
-     5a5:	c7 04 24 6f 3e 00 00 	movl   $0x3e6f,(%esp)
-     5ac:	e8 72 33 00 00       	call   3923 <unlink>
-     5b1:	83 c4 10             	add    $0x10,%esp
-     5b4:	85 c0                	test   %eax,%eax
-     5b6:	78 7d                	js     635 <writetest+0x1a5>
-  printf(stdout, "small file test ok\n");
-     5b8:	83 ec 08             	sub    $0x8,%esp
-     5bb:	68 29 3f 00 00       	push   $0x3f29
-     5c0:	ff 35 08 5e 00 00    	push   0x5e08
-     5c6:	e8 55 34 00 00       	call   3a20 <printf>
-}
-     5cb:	83 c4 10             	add    $0x10,%esp
-     5ce:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     5d1:	5b                   	pop    %ebx
-     5d2:	5e                   	pop    %esi
-     5d3:	5d                   	pop    %ebp
-     5d4:	c3                   	ret
-      printf(stdout, "error: write aa %d new file failed\n", i);
-     5d5:	83 ec 04             	sub    $0x4,%esp
-     5d8:	53                   	push   %ebx
-     5d9:	68 74 4d 00 00       	push   $0x4d74
-     5de:	ff 35 08 5e 00 00    	push   0x5e08
-     5e4:	e8 37 34 00 00       	call   3a20 <printf>
-      exit();
-     5e9:	e8 e5 32 00 00       	call   38d3 <exit>
-      printf(stdout, "error: write bb %d new file failed\n", i);
-     5ee:	83 ec 04             	sub    $0x4,%esp
-     5f1:	53                   	push   %ebx
-     5f2:	68 98 4d 00 00       	push   $0x4d98
-     5f7:	ff 35 08 5e 00 00    	push   0x5e08
-     5fd:	e8 1e 34 00 00       	call   3a20 <printf>
-      exit();
-     602:	e8 cc 32 00 00       	call   38d3 <exit>
-    printf(stdout, "error: open small failed!\n");
-     607:	51                   	push   %ecx
-     608:	51                   	push   %ecx
-     609:	68 e6 3e 00 00       	push   $0x3ee6
-     60e:	ff 35 08 5e 00 00    	push   0x5e08
-     614:	e8 07 34 00 00       	call   3a20 <printf>
-    exit();
-     619:	e8 b5 32 00 00       	call   38d3 <exit>
-    printf(stdout, "read failed\n");
-     61e:	52                   	push   %edx
-     61f:	52                   	push   %edx
-     620:	68 2d 42 00 00       	push   $0x422d
-     625:	ff 35 08 5e 00 00    	push   0x5e08
-     62b:	e8 f0 33 00 00       	call   3a20 <printf>
-    exit();
-     630:	e8 9e 32 00 00       	call   38d3 <exit>
-    printf(stdout, "unlink small failed\n");
-     635:	50                   	push   %eax
-     636:	50                   	push   %eax
-     637:	68 14 3f 00 00       	push   $0x3f14
-     63c:	ff 35 08 5e 00 00    	push   0x5e08
-     642:	e8 d9 33 00 00       	call   3a20 <printf>
-    exit();
-     647:	e8 87 32 00 00       	call   38d3 <exit>
-    printf(stdout, "error: creat small failed!\n");
-     64c:	50                   	push   %eax
-     64d:	50                   	push   %eax
-     64e:	68 90 3e 00 00       	push   $0x3e90
-     653:	ff 35 08 5e 00 00    	push   0x5e08
-     659:	e8 c2 33 00 00       	call   3a20 <printf>
-    exit();
-     65e:	e8 70 32 00 00       	call   38d3 <exit>
-     663:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     66a:	00 
-     66b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00000670 <writetest1>:
-{
-     670:	55                   	push   %ebp
-     671:	89 e5                	mov    %esp,%ebp
-     673:	56                   	push   %esi
-     674:	53                   	push   %ebx
-  printf(stdout, "big files test\n");
-     675:	83 ec 08             	sub    $0x8,%esp
-     678:	68 3d 3f 00 00       	push   $0x3f3d
-     67d:	ff 35 08 5e 00 00    	push   0x5e08
-     683:	e8 98 33 00 00       	call   3a20 <printf>
-  fd = open("big", O_CREATE|O_RDWR);
-     688:	58                   	pop    %eax
-     689:	5a                   	pop    %edx
-     68a:	68 02 02 00 00       	push   $0x202
-     68f:	68 b7 3f 00 00       	push   $0x3fb7
-     694:	e8 7a 32 00 00       	call   3913 <open>
-  if(fd < 0){
-     699:	83 c4 10             	add    $0x10,%esp
-     69c:	85 c0                	test   %eax,%eax
-     69e:	0f 88 61 01 00 00    	js     805 <writetest1+0x195>
-     6a4:	89 c6                	mov    %eax,%esi
-  for(i = 0; i < MAXFILE; i++){
-     6a6:	31 db                	xor    %ebx,%ebx
-     6a8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     6af:	00 
-    if(write(fd, buf, 512) != 512){
-     6b0:	83 ec 04             	sub    $0x4,%esp
-    ((int*)buf)[0] = i;
-     6b3:	89 1d 40 85 00 00    	mov    %ebx,0x8540
-    if(write(fd, buf, 512) != 512){
-     6b9:	68 00 02 00 00       	push   $0x200
-     6be:	68 40 85 00 00       	push   $0x8540
-     6c3:	56                   	push   %esi
-     6c4:	e8 2a 32 00 00       	call   38f3 <write>
-     6c9:	83 c4 10             	add    $0x10,%esp
-     6cc:	3d 00 02 00 00       	cmp    $0x200,%eax
-     6d1:	0f 85 b3 00 00 00    	jne    78a <writetest1+0x11a>
-  for(i = 0; i < MAXFILE; i++){
-     6d7:	83 c3 01             	add    $0x1,%ebx
-     6da:	81 fb 8c 00 00 00    	cmp    $0x8c,%ebx
-     6e0:	75 ce                	jne    6b0 <writetest1+0x40>
-  close(fd);
-     6e2:	83 ec 0c             	sub    $0xc,%esp
-     6e5:	56                   	push   %esi
-     6e6:	e8 10 32 00 00       	call   38fb <close>
-  fd = open("big", O_RDONLY);
-     6eb:	5b                   	pop    %ebx
-     6ec:	5e                   	pop    %esi
-     6ed:	6a 00                	push   $0x0
-     6ef:	68 b7 3f 00 00       	push   $0x3fb7
-     6f4:	e8 1a 32 00 00       	call   3913 <open>
-  if(fd < 0){
-     6f9:	83 c4 10             	add    $0x10,%esp
-  fd = open("big", O_RDONLY);
-     6fc:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-     6fe:	85 c0                	test   %eax,%eax
-     700:	0f 88 e8 00 00 00    	js     7ee <writetest1+0x17e>
-  n = 0;
-     706:	31 f6                	xor    %esi,%esi
-     708:	eb 1d                	jmp    727 <writetest1+0xb7>
-     70a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    } else if(i != 512){
-     710:	3d 00 02 00 00       	cmp    $0x200,%eax
-     715:	0f 85 9f 00 00 00    	jne    7ba <writetest1+0x14a>
-    if(((int*)buf)[0] != n){
-     71b:	a1 40 85 00 00       	mov    0x8540,%eax
-     720:	39 f0                	cmp    %esi,%eax
-     722:	75 7f                	jne    7a3 <writetest1+0x133>
-    n++;
-     724:	83 c6 01             	add    $0x1,%esi
-    i = read(fd, buf, 512);
-     727:	83 ec 04             	sub    $0x4,%esp
-     72a:	68 00 02 00 00       	push   $0x200
-     72f:	68 40 85 00 00       	push   $0x8540
-     734:	53                   	push   %ebx
-     735:	e8 b1 31 00 00       	call   38eb <read>
-    if(i == 0){
-     73a:	83 c4 10             	add    $0x10,%esp
-     73d:	85 c0                	test   %eax,%eax
-     73f:	75 cf                	jne    710 <writetest1+0xa0>
-      if(n == MAXFILE - 1){
-     741:	81 fe 8b 00 00 00    	cmp    $0x8b,%esi
-     747:	0f 84 86 00 00 00    	je     7d3 <writetest1+0x163>
-  close(fd);
-     74d:	83 ec 0c             	sub    $0xc,%esp
-     750:	53                   	push   %ebx
-     751:	e8 a5 31 00 00       	call   38fb <close>
-  if(unlink("big") < 0){
-     756:	c7 04 24 b7 3f 00 00 	movl   $0x3fb7,(%esp)
-     75d:	e8 c1 31 00 00       	call   3923 <unlink>
-     762:	83 c4 10             	add    $0x10,%esp
-     765:	85 c0                	test   %eax,%eax
-     767:	0f 88 af 00 00 00    	js     81c <writetest1+0x1ac>
-  printf(stdout, "big files ok\n");
-     76d:	83 ec 08             	sub    $0x8,%esp
-     770:	68 de 3f 00 00       	push   $0x3fde
-     775:	ff 35 08 5e 00 00    	push   0x5e08
-     77b:	e8 a0 32 00 00       	call   3a20 <printf>
-}
-     780:	83 c4 10             	add    $0x10,%esp
-     783:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     786:	5b                   	pop    %ebx
-     787:	5e                   	pop    %esi
-     788:	5d                   	pop    %ebp
-     789:	c3                   	ret
-      printf(stdout, "error: write big file failed\n", i);
-     78a:	83 ec 04             	sub    $0x4,%esp
-     78d:	53                   	push   %ebx
-     78e:	68 67 3f 00 00       	push   $0x3f67
-     793:	ff 35 08 5e 00 00    	push   0x5e08
-     799:	e8 82 32 00 00       	call   3a20 <printf>
-      exit();
-     79e:	e8 30 31 00 00       	call   38d3 <exit>
-      printf(stdout, "read content of block %d is %d\n",
-     7a3:	50                   	push   %eax
-     7a4:	56                   	push   %esi
-     7a5:	68 bc 4d 00 00       	push   $0x4dbc
-     7aa:	ff 35 08 5e 00 00    	push   0x5e08
-     7b0:	e8 6b 32 00 00       	call   3a20 <printf>
-      exit();
-     7b5:	e8 19 31 00 00       	call   38d3 <exit>
-      printf(stdout, "read failed %d\n", i);
-     7ba:	83 ec 04             	sub    $0x4,%esp
-     7bd:	50                   	push   %eax
-     7be:	68 bb 3f 00 00       	push   $0x3fbb
-     7c3:	ff 35 08 5e 00 00    	push   0x5e08
-     7c9:	e8 52 32 00 00       	call   3a20 <printf>
-      exit();
-     7ce:	e8 00 31 00 00       	call   38d3 <exit>
-        printf(stdout, "read only %d blocks from big", n);
-     7d3:	52                   	push   %edx
-     7d4:	68 8b 00 00 00       	push   $0x8b
-     7d9:	68 9e 3f 00 00       	push   $0x3f9e
-     7de:	ff 35 08 5e 00 00    	push   0x5e08
-     7e4:	e8 37 32 00 00       	call   3a20 <printf>
-        exit();
-     7e9:	e8 e5 30 00 00       	call   38d3 <exit>
-    printf(stdout, "error: open big failed!\n");
-     7ee:	51                   	push   %ecx
-     7ef:	51                   	push   %ecx
-     7f0:	68 85 3f 00 00       	push   $0x3f85
-     7f5:	ff 35 08 5e 00 00    	push   0x5e08
-     7fb:	e8 20 32 00 00       	call   3a20 <printf>
-    exit();
-     800:	e8 ce 30 00 00       	call   38d3 <exit>
-    printf(stdout, "error: creat big failed!\n");
-     805:	50                   	push   %eax
-     806:	50                   	push   %eax
-     807:	68 4d 3f 00 00       	push   $0x3f4d
-     80c:	ff 35 08 5e 00 00    	push   0x5e08
-     812:	e8 09 32 00 00       	call   3a20 <printf>
-    exit();
-     817:	e8 b7 30 00 00       	call   38d3 <exit>
-    printf(stdout, "unlink big failed\n");
-     81c:	50                   	push   %eax
-     81d:	50                   	push   %eax
-     81e:	68 cb 3f 00 00       	push   $0x3fcb
-     823:	ff 35 08 5e 00 00    	push   0x5e08
-     829:	e8 f2 31 00 00       	call   3a20 <printf>
-    exit();
-     82e:	e8 a0 30 00 00       	call   38d3 <exit>
-     833:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     83a:	00 
-     83b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00000840 <createtest>:
-{
-     840:	55                   	push   %ebp
-     841:	89 e5                	mov    %esp,%ebp
-     843:	53                   	push   %ebx
-  name[2] = '\0';
-     844:	bb 30 00 00 00       	mov    $0x30,%ebx
-{
-     849:	83 ec 0c             	sub    $0xc,%esp
-  printf(stdout, "many creates, followed by unlink test\n");
-     84c:	68 dc 4d 00 00       	push   $0x4ddc
-     851:	ff 35 08 5e 00 00    	push   0x5e08
-     857:	e8 c4 31 00 00       	call   3a20 <printf>
-  name[0] = 'a';
-     85c:	c6 05 30 85 00 00 61 	movb   $0x61,0x8530
-  name[2] = '\0';
-     863:	83 c4 10             	add    $0x10,%esp
-     866:	c6 05 32 85 00 00 00 	movb   $0x0,0x8532
-  for(i = 0; i < 52; i++){
-     86d:	8d 76 00             	lea    0x0(%esi),%esi
-    fd = open(name, O_CREATE|O_RDWR);
-     870:	83 ec 08             	sub    $0x8,%esp
-    name[1] = '0' + i;
-     873:	88 1d 31 85 00 00    	mov    %bl,0x8531
-  for(i = 0; i < 52; i++){
-     879:	83 c3 01             	add    $0x1,%ebx
-    fd = open(name, O_CREATE|O_RDWR);
-     87c:	68 02 02 00 00       	push   $0x202
-     881:	68 30 85 00 00       	push   $0x8530
-     886:	e8 88 30 00 00       	call   3913 <open>
-    close(fd);
-     88b:	89 04 24             	mov    %eax,(%esp)
-     88e:	e8 68 30 00 00       	call   38fb <close>
-  for(i = 0; i < 52; i++){
-     893:	83 c4 10             	add    $0x10,%esp
-     896:	80 fb 64             	cmp    $0x64,%bl
-     899:	75 d5                	jne    870 <createtest+0x30>
-  name[0] = 'a';
-     89b:	c6 05 30 85 00 00 61 	movb   $0x61,0x8530
-  name[2] = '\0';
-     8a2:	bb 30 00 00 00       	mov    $0x30,%ebx
-     8a7:	c6 05 32 85 00 00 00 	movb   $0x0,0x8532
-  for(i = 0; i < 52; i++){
-     8ae:	66 90                	xchg   %ax,%ax
-    unlink(name);
-     8b0:	83 ec 0c             	sub    $0xc,%esp
-    name[1] = '0' + i;
-     8b3:	88 1d 31 85 00 00    	mov    %bl,0x8531
-  for(i = 0; i < 52; i++){
-     8b9:	83 c3 01             	add    $0x1,%ebx
-    unlink(name);
-     8bc:	68 30 85 00 00       	push   $0x8530
-     8c1:	e8 5d 30 00 00       	call   3923 <unlink>
-  for(i = 0; i < 52; i++){
-     8c6:	83 c4 10             	add    $0x10,%esp
-     8c9:	80 fb 64             	cmp    $0x64,%bl
-     8cc:	75 e2                	jne    8b0 <createtest+0x70>
-  printf(stdout, "many creates, followed by unlink; ok\n");
-     8ce:	83 ec 08             	sub    $0x8,%esp
-     8d1:	68 08 4e 00 00       	push   $0x4e08
-     8d6:	ff 35 08 5e 00 00    	push   0x5e08
-     8dc:	e8 3f 31 00 00       	call   3a20 <printf>
-}
-     8e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-     8e4:	83 c4 10             	add    $0x10,%esp
-     8e7:	c9                   	leave
-     8e8:	c3                   	ret
-     8e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000008f0 <dirtest>:
-{
-     8f0:	55                   	push   %ebp
-     8f1:	89 e5                	mov    %esp,%ebp
-     8f3:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "mkdir test\n");
-     8f6:	68 ec 3f 00 00       	push   $0x3fec
-     8fb:	ff 35 08 5e 00 00    	push   0x5e08
-     901:	e8 1a 31 00 00       	call   3a20 <printf>
-  if(mkdir("dir0") < 0){
-     906:	c7 04 24 f8 3f 00 00 	movl   $0x3ff8,(%esp)
-     90d:	e8 29 30 00 00       	call   393b <mkdir>
-     912:	83 c4 10             	add    $0x10,%esp
-     915:	85 c0                	test   %eax,%eax
-     917:	78 58                	js     971 <dirtest+0x81>
-  if(chdir("dir0") < 0){
-     919:	83 ec 0c             	sub    $0xc,%esp
-     91c:	68 f8 3f 00 00       	push   $0x3ff8
-     921:	e8 1d 30 00 00       	call   3943 <chdir>
-     926:	83 c4 10             	add    $0x10,%esp
-     929:	85 c0                	test   %eax,%eax
-     92b:	0f 88 85 00 00 00    	js     9b6 <dirtest+0xc6>
-  if(chdir("..") < 0){
-     931:	83 ec 0c             	sub    $0xc,%esp
-     934:	68 9d 45 00 00       	push   $0x459d
-     939:	e8 05 30 00 00       	call   3943 <chdir>
-     93e:	83 c4 10             	add    $0x10,%esp
-     941:	85 c0                	test   %eax,%eax
-     943:	78 5a                	js     99f <dirtest+0xaf>
-  if(unlink("dir0") < 0){
-     945:	83 ec 0c             	sub    $0xc,%esp
-     948:	68 f8 3f 00 00       	push   $0x3ff8
-     94d:	e8 d1 2f 00 00       	call   3923 <unlink>
-     952:	83 c4 10             	add    $0x10,%esp
-     955:	85 c0                	test   %eax,%eax
-     957:	78 2f                	js     988 <dirtest+0x98>
-  printf(stdout, "mkdir test ok\n");
-     959:	83 ec 08             	sub    $0x8,%esp
-     95c:	68 35 40 00 00       	push   $0x4035
-     961:	ff 35 08 5e 00 00    	push   0x5e08
-     967:	e8 b4 30 00 00       	call   3a20 <printf>
-}
-     96c:	83 c4 10             	add    $0x10,%esp
-     96f:	c9                   	leave
-     970:	c3                   	ret
-    printf(stdout, "mkdir failed\n");
-     971:	50                   	push   %eax
-     972:	50                   	push   %eax
-     973:	68 28 3d 00 00       	push   $0x3d28
-     978:	ff 35 08 5e 00 00    	push   0x5e08
-     97e:	e8 9d 30 00 00       	call   3a20 <printf>
-    exit();
-     983:	e8 4b 2f 00 00       	call   38d3 <exit>
-    printf(stdout, "unlink dir0 failed\n");
-     988:	50                   	push   %eax
-     989:	50                   	push   %eax
-     98a:	68 21 40 00 00       	push   $0x4021
-     98f:	ff 35 08 5e 00 00    	push   0x5e08
-     995:	e8 86 30 00 00       	call   3a20 <printf>
-    exit();
-     99a:	e8 34 2f 00 00       	call   38d3 <exit>
-    printf(stdout, "chdir .. failed\n");
-     99f:	52                   	push   %edx
-     9a0:	52                   	push   %edx
-     9a1:	68 10 40 00 00       	push   $0x4010
-     9a6:	ff 35 08 5e 00 00    	push   0x5e08
-     9ac:	e8 6f 30 00 00       	call   3a20 <printf>
-    exit();
-     9b1:	e8 1d 2f 00 00       	call   38d3 <exit>
-    printf(stdout, "chdir dir0 failed\n");
-     9b6:	51                   	push   %ecx
-     9b7:	51                   	push   %ecx
-     9b8:	68 fd 3f 00 00       	push   $0x3ffd
-     9bd:	ff 35 08 5e 00 00    	push   0x5e08
-     9c3:	e8 58 30 00 00       	call   3a20 <printf>
-    exit();
-     9c8:	e8 06 2f 00 00       	call   38d3 <exit>
-     9cd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000009d0 <exectest>:
-{
-     9d0:	55                   	push   %ebp
-     9d1:	89 e5                	mov    %esp,%ebp
-     9d3:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "exec test\n");
-     9d6:	68 44 40 00 00       	push   $0x4044
-     9db:	ff 35 08 5e 00 00    	push   0x5e08
-     9e1:	e8 3a 30 00 00       	call   3a20 <printf>
-  if(exec("echo", echoargv) < 0){
-     9e6:	5a                   	pop    %edx
-     9e7:	59                   	pop    %ecx
-     9e8:	68 0c 5e 00 00       	push   $0x5e0c
-     9ed:	68 0d 3e 00 00       	push   $0x3e0d
-     9f2:	e8 14 2f 00 00       	call   390b <exec>
-     9f7:	83 c4 10             	add    $0x10,%esp
-     9fa:	85 c0                	test   %eax,%eax
-     9fc:	78 02                	js     a00 <exectest+0x30>
-}
-     9fe:	c9                   	leave
-     9ff:	c3                   	ret
-    printf(stdout, "exec echo failed\n");
-     a00:	50                   	push   %eax
-     a01:	50                   	push   %eax
-     a02:	68 4f 40 00 00       	push   $0x404f
-     a07:	ff 35 08 5e 00 00    	push   0x5e08
-     a0d:	e8 0e 30 00 00       	call   3a20 <printf>
-    exit();
-     a12:	e8 bc 2e 00 00       	call   38d3 <exit>
-     a17:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     a1e:	00 
-     a1f:	90                   	nop
-
-00000a20 <pipe1>:
-{
-     a20:	55                   	push   %ebp
-     a21:	89 e5                	mov    %esp,%ebp
-     a23:	57                   	push   %edi
-     a24:	56                   	push   %esi
-  if(pipe(fds) != 0){
-     a25:	8d 45 e0             	lea    -0x20(%ebp),%eax
-{
-     a28:	53                   	push   %ebx
-     a29:	83 ec 28             	sub    $0x28,%esp
-  if(pipe(fds) != 0){
-     a2c:	50                   	push   %eax
-     a2d:	e8 b1 2e 00 00       	call   38e3 <pipe>
-     a32:	83 c4 10             	add    $0x10,%esp
-     a35:	85 c0                	test   %eax,%eax
-     a37:	0f 85 41 01 00 00    	jne    b7e <pipe1+0x15e>
-     a3d:	89 c6                	mov    %eax,%esi
-  pid = fork();
-     a3f:	e8 87 2e 00 00       	call   38cb <fork>
-  if(pid == 0){
-     a44:	85 c0                	test   %eax,%eax
-     a46:	0f 84 92 00 00 00    	je     ade <pipe1+0xbe>
-  } else if(pid > 0){
-     a4c:	0f 8e 3f 01 00 00    	jle    b91 <pipe1+0x171>
-    close(fds[1]);
-     a52:	83 ec 0c             	sub    $0xc,%esp
-     a55:	ff 75 e4             	push   -0x1c(%ebp)
-    total = 0;
-     a58:	31 db                	xor    %ebx,%ebx
-    cc = 1;
-     a5a:	bf 01 00 00 00       	mov    $0x1,%edi
-    close(fds[1]);
-     a5f:	e8 97 2e 00 00       	call   38fb <close>
-    while((n = read(fds[0], buf, cc)) > 0){
-     a64:	83 c4 10             	add    $0x10,%esp
-     a67:	83 ec 04             	sub    $0x4,%esp
-     a6a:	57                   	push   %edi
-     a6b:	68 40 85 00 00       	push   $0x8540
-     a70:	ff 75 e0             	push   -0x20(%ebp)
-     a73:	e8 73 2e 00 00       	call   38eb <read>
-     a78:	83 c4 10             	add    $0x10,%esp
-     a7b:	89 c1                	mov    %eax,%ecx
-     a7d:	85 c0                	test   %eax,%eax
-     a7f:	0f 8e b8 00 00 00    	jle    b3d <pipe1+0x11d>
-        if((buf[i] & 0xff) != (seq++ & 0xff)){
-     a85:	89 f0                	mov    %esi,%eax
-     a87:	32 05 40 85 00 00    	xor    0x8540,%al
-     a8d:	0f b6 c0             	movzbl %al,%eax
-     a90:	85 c0                	test   %eax,%eax
-     a92:	75 30                	jne    ac4 <pipe1+0xa4>
-     a94:	83 c6 01             	add    $0x1,%esi
-     a97:	eb 0f                	jmp    aa8 <pipe1+0x88>
-     a99:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-     aa0:	38 90 40 85 00 00    	cmp    %dl,0x8540(%eax)
-     aa6:	75 1c                	jne    ac4 <pipe1+0xa4>
-     aa8:	8d 14 06             	lea    (%esi,%eax,1),%edx
-      for(i = 0; i < n; i++){
-     aab:	83 c0 01             	add    $0x1,%eax
-     aae:	39 c1                	cmp    %eax,%ecx
-     ab0:	75 ee                	jne    aa0 <pipe1+0x80>
-      cc = cc * 2;
-     ab2:	01 ff                	add    %edi,%edi
-      if(cc > sizeof(buf))
-     ab4:	b8 00 20 00 00       	mov    $0x2000,%eax
-      total += n;
-     ab9:	01 cb                	add    %ecx,%ebx
-      if(cc > sizeof(buf))
-     abb:	89 d6                	mov    %edx,%esi
-     abd:	39 c7                	cmp    %eax,%edi
-     abf:	0f 4f f8             	cmovg  %eax,%edi
-     ac2:	eb a3                	jmp    a67 <pipe1+0x47>
-          printf(1, "pipe1 oops 2\n");
-     ac4:	83 ec 08             	sub    $0x8,%esp
-     ac7:	68 7e 40 00 00       	push   $0x407e
-     acc:	6a 01                	push   $0x1
-     ace:	e8 4d 2f 00 00       	call   3a20 <printf>
-     ad3:	83 c4 10             	add    $0x10,%esp
-}
-     ad6:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     ad9:	5b                   	pop    %ebx
-     ada:	5e                   	pop    %esi
-     adb:	5f                   	pop    %edi
-     adc:	5d                   	pop    %ebp
-     add:	c3                   	ret
-    close(fds[0]);
-     ade:	83 ec 0c             	sub    $0xc,%esp
-     ae1:	ff 75 e0             	push   -0x20(%ebp)
-  seq = 0;
-     ae4:	31 db                	xor    %ebx,%ebx
-    close(fds[0]);
-     ae6:	e8 10 2e 00 00       	call   38fb <close>
-     aeb:	83 c4 10             	add    $0x10,%esp
-     aee:	66 90                	xchg   %ax,%ax
-      for(i = 0; i < 1033; i++)
-     af0:	31 c0                	xor    %eax,%eax
-     af2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-        buf[i] = seq++;
-     af8:	8d 14 03             	lea    (%ebx,%eax,1),%edx
-      for(i = 0; i < 1033; i++)
-     afb:	83 c0 01             	add    $0x1,%eax
-        buf[i] = seq++;
-     afe:	88 90 3f 85 00 00    	mov    %dl,0x853f(%eax)
-      for(i = 0; i < 1033; i++)
-     b04:	3d 09 04 00 00       	cmp    $0x409,%eax
-     b09:	75 ed                	jne    af8 <pipe1+0xd8>
-      if(write(fds[1], buf, 1033) != 1033){
-     b0b:	83 ec 04             	sub    $0x4,%esp
-     b0e:	81 c3 09 04 00 00    	add    $0x409,%ebx
-     b14:	68 09 04 00 00       	push   $0x409
-     b19:	68 40 85 00 00       	push   $0x8540
-     b1e:	ff 75 e4             	push   -0x1c(%ebp)
-     b21:	e8 cd 2d 00 00       	call   38f3 <write>
-     b26:	83 c4 10             	add    $0x10,%esp
-     b29:	3d 09 04 00 00       	cmp    $0x409,%eax
-     b2e:	75 74                	jne    ba4 <pipe1+0x184>
-    for(n = 0; n < 5; n++){
-     b30:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
-     b36:	75 b8                	jne    af0 <pipe1+0xd0>
-    exit();
-     b38:	e8 96 2d 00 00       	call   38d3 <exit>
-    if(total != 5 * 1033){
-     b3d:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx
-     b43:	75 26                	jne    b6b <pipe1+0x14b>
-    close(fds[0]);
-     b45:	83 ec 0c             	sub    $0xc,%esp
-     b48:	ff 75 e0             	push   -0x20(%ebp)
-     b4b:	e8 ab 2d 00 00       	call   38fb <close>
-    wait();
-     b50:	e8 86 2d 00 00       	call   38db <wait>
-  printf(1, "pipe1 ok\n");
-     b55:	5a                   	pop    %edx
-     b56:	59                   	pop    %ecx
-     b57:	68 a3 40 00 00       	push   $0x40a3
-     b5c:	6a 01                	push   $0x1
-     b5e:	e8 bd 2e 00 00       	call   3a20 <printf>
-     b63:	83 c4 10             	add    $0x10,%esp
-     b66:	e9 6b ff ff ff       	jmp    ad6 <pipe1+0xb6>
-      printf(1, "pipe1 oops 3 total %d\n", total);
-     b6b:	56                   	push   %esi
-     b6c:	53                   	push   %ebx
-     b6d:	68 8c 40 00 00       	push   $0x408c
-     b72:	6a 01                	push   $0x1
-     b74:	e8 a7 2e 00 00       	call   3a20 <printf>
-      exit();
-     b79:	e8 55 2d 00 00       	call   38d3 <exit>
-    printf(1, "pipe() failed\n");
-     b7e:	50                   	push   %eax
-     b7f:	50                   	push   %eax
-     b80:	68 61 40 00 00       	push   $0x4061
-     b85:	6a 01                	push   $0x1
-     b87:	e8 94 2e 00 00       	call   3a20 <printf>
-    exit();
-     b8c:	e8 42 2d 00 00       	call   38d3 <exit>
-    printf(1, "fork() failed\n");
-     b91:	50                   	push   %eax
-     b92:	50                   	push   %eax
-     b93:	68 ad 40 00 00       	push   $0x40ad
-     b98:	6a 01                	push   $0x1
-     b9a:	e8 81 2e 00 00       	call   3a20 <printf>
-    exit();
-     b9f:	e8 2f 2d 00 00       	call   38d3 <exit>
-        printf(1, "pipe1 oops 1\n");
-     ba4:	57                   	push   %edi
-     ba5:	57                   	push   %edi
-     ba6:	68 70 40 00 00       	push   $0x4070
-     bab:	6a 01                	push   $0x1
-     bad:	e8 6e 2e 00 00       	call   3a20 <printf>
-        exit();
-     bb2:	e8 1c 2d 00 00       	call   38d3 <exit>
-     bb7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     bbe:	00 
-     bbf:	90                   	nop
-
-00000bc0 <preempt>:
-{
-     bc0:	55                   	push   %ebp
-     bc1:	89 e5                	mov    %esp,%ebp
-     bc3:	57                   	push   %edi
-     bc4:	56                   	push   %esi
-     bc5:	53                   	push   %ebx
-     bc6:	83 ec 24             	sub    $0x24,%esp
-  printf(1, "preempt: ");
-     bc9:	68 bc 40 00 00       	push   $0x40bc
-     bce:	6a 01                	push   $0x1
-     bd0:	e8 4b 2e 00 00       	call   3a20 <printf>
-  pid1 = fork();
-     bd5:	e8 f1 2c 00 00       	call   38cb <fork>
-  if(pid1 == 0)
-     bda:	83 c4 10             	add    $0x10,%esp
-     bdd:	85 c0                	test   %eax,%eax
-     bdf:	75 07                	jne    be8 <preempt+0x28>
-    for(;;)
-     be1:	eb fe                	jmp    be1 <preempt+0x21>
-     be3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-     be8:	89 c3                	mov    %eax,%ebx
-  pid2 = fork();
-     bea:	e8 dc 2c 00 00       	call   38cb <fork>
-     bef:	89 c6                	mov    %eax,%esi
-  if(pid2 == 0)
-     bf1:	85 c0                	test   %eax,%eax
-     bf3:	75 0b                	jne    c00 <preempt+0x40>
-    for(;;)
-     bf5:	eb fe                	jmp    bf5 <preempt+0x35>
-     bf7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     bfe:	00 
-     bff:	90                   	nop
-  pipe(pfds);
-     c00:	83 ec 0c             	sub    $0xc,%esp
-     c03:	8d 45 e0             	lea    -0x20(%ebp),%eax
-     c06:	50                   	push   %eax
-     c07:	e8 d7 2c 00 00       	call   38e3 <pipe>
-  pid3 = fork();
-     c0c:	e8 ba 2c 00 00       	call   38cb <fork>
-  if(pid3 == 0){
-     c11:	83 c4 10             	add    $0x10,%esp
-  pid3 = fork();
-     c14:	89 c7                	mov    %eax,%edi
-  if(pid3 == 0){
-     c16:	85 c0                	test   %eax,%eax
-     c18:	75 3e                	jne    c58 <preempt+0x98>
-    close(pfds[0]);
-     c1a:	83 ec 0c             	sub    $0xc,%esp
-     c1d:	ff 75 e0             	push   -0x20(%ebp)
-     c20:	e8 d6 2c 00 00       	call   38fb <close>
-    if(write(pfds[1], "x", 1) != 1)
-     c25:	83 c4 0c             	add    $0xc,%esp
-     c28:	6a 01                	push   $0x1
-     c2a:	68 81 46 00 00       	push   $0x4681
-     c2f:	ff 75 e4             	push   -0x1c(%ebp)
-     c32:	e8 bc 2c 00 00       	call   38f3 <write>
-     c37:	83 c4 10             	add    $0x10,%esp
-     c3a:	83 f8 01             	cmp    $0x1,%eax
-     c3d:	0f 85 b8 00 00 00    	jne    cfb <preempt+0x13b>
-    close(pfds[1]);
-     c43:	83 ec 0c             	sub    $0xc,%esp
-     c46:	ff 75 e4             	push   -0x1c(%ebp)
-     c49:	e8 ad 2c 00 00       	call   38fb <close>
-     c4e:	83 c4 10             	add    $0x10,%esp
-    for(;;)
-     c51:	eb fe                	jmp    c51 <preempt+0x91>
-     c53:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  close(pfds[1]);
-     c58:	83 ec 0c             	sub    $0xc,%esp
-     c5b:	ff 75 e4             	push   -0x1c(%ebp)
-     c5e:	e8 98 2c 00 00       	call   38fb <close>
-  if(read(pfds[0], buf, sizeof(buf)) != 1){
-     c63:	83 c4 0c             	add    $0xc,%esp
-     c66:	68 00 20 00 00       	push   $0x2000
-     c6b:	68 40 85 00 00       	push   $0x8540
-     c70:	ff 75 e0             	push   -0x20(%ebp)
-     c73:	e8 73 2c 00 00       	call   38eb <read>
-     c78:	83 c4 10             	add    $0x10,%esp
-     c7b:	83 f8 01             	cmp    $0x1,%eax
-     c7e:	75 67                	jne    ce7 <preempt+0x127>
-  close(pfds[0]);
-     c80:	83 ec 0c             	sub    $0xc,%esp
-     c83:	ff 75 e0             	push   -0x20(%ebp)
-     c86:	e8 70 2c 00 00       	call   38fb <close>
-  printf(1, "kill... ");
-     c8b:	58                   	pop    %eax
-     c8c:	5a                   	pop    %edx
-     c8d:	68 ed 40 00 00       	push   $0x40ed
-     c92:	6a 01                	push   $0x1
-     c94:	e8 87 2d 00 00       	call   3a20 <printf>
-  kill(pid1);
-     c99:	89 1c 24             	mov    %ebx,(%esp)
-     c9c:	e8 62 2c 00 00       	call   3903 <kill>
-  kill(pid2);
-     ca1:	89 34 24             	mov    %esi,(%esp)
-     ca4:	e8 5a 2c 00 00       	call   3903 <kill>
-  kill(pid3);
-     ca9:	89 3c 24             	mov    %edi,(%esp)
-     cac:	e8 52 2c 00 00       	call   3903 <kill>
-  printf(1, "wait... ");
-     cb1:	59                   	pop    %ecx
-     cb2:	5b                   	pop    %ebx
-     cb3:	68 f6 40 00 00       	push   $0x40f6
-     cb8:	6a 01                	push   $0x1
-     cba:	e8 61 2d 00 00       	call   3a20 <printf>
-  wait();
-     cbf:	e8 17 2c 00 00       	call   38db <wait>
-  wait();
-     cc4:	e8 12 2c 00 00       	call   38db <wait>
-  wait();
-     cc9:	e8 0d 2c 00 00       	call   38db <wait>
-  printf(1, "preempt ok\n");
-     cce:	5e                   	pop    %esi
-     ccf:	5f                   	pop    %edi
-     cd0:	68 ff 40 00 00       	push   $0x40ff
-     cd5:	6a 01                	push   $0x1
-     cd7:	e8 44 2d 00 00       	call   3a20 <printf>
-     cdc:	83 c4 10             	add    $0x10,%esp
-}
-     cdf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     ce2:	5b                   	pop    %ebx
-     ce3:	5e                   	pop    %esi
-     ce4:	5f                   	pop    %edi
-     ce5:	5d                   	pop    %ebp
-     ce6:	c3                   	ret
-    printf(1, "preempt read error");
-     ce7:	83 ec 08             	sub    $0x8,%esp
-     cea:	68 da 40 00 00       	push   $0x40da
-     cef:	6a 01                	push   $0x1
-     cf1:	e8 2a 2d 00 00       	call   3a20 <printf>
-     cf6:	83 c4 10             	add    $0x10,%esp
-     cf9:	eb e4                	jmp    cdf <preempt+0x11f>
-      printf(1, "preempt write error");
-     cfb:	83 ec 08             	sub    $0x8,%esp
-     cfe:	68 c6 40 00 00       	push   $0x40c6
-     d03:	6a 01                	push   $0x1
-     d05:	e8 16 2d 00 00       	call   3a20 <printf>
-     d0a:	83 c4 10             	add    $0x10,%esp
-     d0d:	e9 31 ff ff ff       	jmp    c43 <preempt+0x83>
-     d12:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     d19:	00 
-     d1a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000d20 <exitwait>:
-{
-     d20:	55                   	push   %ebp
-     d21:	89 e5                	mov    %esp,%ebp
-     d23:	56                   	push   %esi
-     d24:	be 64 00 00 00       	mov    $0x64,%esi
-     d29:	53                   	push   %ebx
-     d2a:	eb 14                	jmp    d40 <exitwait+0x20>
-     d2c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if(pid){
-     d30:	74 68                	je     d9a <exitwait+0x7a>
-      if(wait() != pid){
-     d32:	e8 a4 2b 00 00       	call   38db <wait>
-     d37:	39 d8                	cmp    %ebx,%eax
-     d39:	75 2d                	jne    d68 <exitwait+0x48>
-  for(i = 0; i < 100; i++){
-     d3b:	83 ee 01             	sub    $0x1,%esi
-     d3e:	74 41                	je     d81 <exitwait+0x61>
-    pid = fork();
-     d40:	e8 86 2b 00 00       	call   38cb <fork>
-     d45:	89 c3                	mov    %eax,%ebx
-    if(pid < 0){
-     d47:	85 c0                	test   %eax,%eax
-     d49:	79 e5                	jns    d30 <exitwait+0x10>
-      printf(1, "fork failed\n");
-     d4b:	83 ec 08             	sub    $0x8,%esp
-     d4e:	68 69 4c 00 00       	push   $0x4c69
-     d53:	6a 01                	push   $0x1
-     d55:	e8 c6 2c 00 00       	call   3a20 <printf>
-      return;
-     d5a:	83 c4 10             	add    $0x10,%esp
-}
-     d5d:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     d60:	5b                   	pop    %ebx
-     d61:	5e                   	pop    %esi
-     d62:	5d                   	pop    %ebp
-     d63:	c3                   	ret
-     d64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        printf(1, "wait wrong pid\n");
-     d68:	83 ec 08             	sub    $0x8,%esp
-     d6b:	68 0b 41 00 00       	push   $0x410b
-     d70:	6a 01                	push   $0x1
-     d72:	e8 a9 2c 00 00       	call   3a20 <printf>
-        return;
-     d77:	83 c4 10             	add    $0x10,%esp
-}
-     d7a:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     d7d:	5b                   	pop    %ebx
-     d7e:	5e                   	pop    %esi
-     d7f:	5d                   	pop    %ebp
-     d80:	c3                   	ret
-  printf(1, "exitwait ok\n");
-     d81:	83 ec 08             	sub    $0x8,%esp
-     d84:	68 1b 41 00 00       	push   $0x411b
-     d89:	6a 01                	push   $0x1
-     d8b:	e8 90 2c 00 00       	call   3a20 <printf>
-     d90:	83 c4 10             	add    $0x10,%esp
-}
-     d93:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     d96:	5b                   	pop    %ebx
-     d97:	5e                   	pop    %esi
-     d98:	5d                   	pop    %ebp
-     d99:	c3                   	ret
-      exit();
-     d9a:	e8 34 2b 00 00       	call   38d3 <exit>
-     d9f:	90                   	nop
-
-00000da0 <mem>:
-{
-     da0:	55                   	push   %ebp
-     da1:	89 e5                	mov    %esp,%ebp
-     da3:	56                   	push   %esi
-     da4:	31 f6                	xor    %esi,%esi
-     da6:	53                   	push   %ebx
-  printf(1, "mem test\n");
-     da7:	83 ec 08             	sub    $0x8,%esp
-     daa:	68 28 41 00 00       	push   $0x4128
-     daf:	6a 01                	push   $0x1
-     db1:	e8 6a 2c 00 00       	call   3a20 <printf>
-  ppid = getpid();
-     db6:	e8 98 2b 00 00       	call   3953 <getpid>
-     dbb:	89 c3                	mov    %eax,%ebx
-  if((pid = fork()) == 0){
-     dbd:	e8 09 2b 00 00       	call   38cb <fork>
-     dc2:	83 c4 10             	add    $0x10,%esp
-     dc5:	85 c0                	test   %eax,%eax
-     dc7:	74 0b                	je     dd4 <mem+0x34>
-     dc9:	e9 8a 00 00 00       	jmp    e58 <mem+0xb8>
-     dce:	66 90                	xchg   %ax,%ax
-      *(char**)m2 = m1;
-     dd0:	89 30                	mov    %esi,(%eax)
-      m1 = m2;
-     dd2:	89 c6                	mov    %eax,%esi
-    while((m2 = malloc(10001)) != 0){
-     dd4:	83 ec 0c             	sub    $0xc,%esp
-     dd7:	68 11 27 00 00       	push   $0x2711
-     ddc:	e8 5f 2e 00 00       	call   3c40 <malloc>
-     de1:	83 c4 10             	add    $0x10,%esp
-     de4:	85 c0                	test   %eax,%eax
-     de6:	75 e8                	jne    dd0 <mem+0x30>
-    while(m1){
-     de8:	85 f6                	test   %esi,%esi
-     dea:	74 18                	je     e04 <mem+0x64>
-     dec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      m2 = *(char**)m1;
-     df0:	89 f0                	mov    %esi,%eax
-      free(m1);
-     df2:	83 ec 0c             	sub    $0xc,%esp
-      m2 = *(char**)m1;
-     df5:	8b 36                	mov    (%esi),%esi
-      free(m1);
-     df7:	50                   	push   %eax
-     df8:	e8 b3 2d 00 00       	call   3bb0 <free>
-    while(m1){
-     dfd:	83 c4 10             	add    $0x10,%esp
-     e00:	85 f6                	test   %esi,%esi
-     e02:	75 ec                	jne    df0 <mem+0x50>
-    m1 = malloc(1024*20);
-     e04:	83 ec 0c             	sub    $0xc,%esp
-     e07:	68 00 50 00 00       	push   $0x5000
-     e0c:	e8 2f 2e 00 00       	call   3c40 <malloc>
-    if(m1 == 0){
-     e11:	83 c4 10             	add    $0x10,%esp
-     e14:	85 c0                	test   %eax,%eax
-     e16:	74 20                	je     e38 <mem+0x98>
-    free(m1);
-     e18:	83 ec 0c             	sub    $0xc,%esp
-     e1b:	50                   	push   %eax
-     e1c:	e8 8f 2d 00 00       	call   3bb0 <free>
-    printf(1, "mem ok\n");
-     e21:	58                   	pop    %eax
-     e22:	5a                   	pop    %edx
-     e23:	68 4c 41 00 00       	push   $0x414c
-     e28:	6a 01                	push   $0x1
-     e2a:	e8 f1 2b 00 00       	call   3a20 <printf>
-    exit();
-     e2f:	e8 9f 2a 00 00       	call   38d3 <exit>
-     e34:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      printf(1, "couldn't allocate mem?!!\n");
-     e38:	83 ec 08             	sub    $0x8,%esp
-     e3b:	68 32 41 00 00       	push   $0x4132
-     e40:	6a 01                	push   $0x1
-     e42:	e8 d9 2b 00 00       	call   3a20 <printf>
-      kill(ppid);
-     e47:	89 1c 24             	mov    %ebx,(%esp)
-     e4a:	e8 b4 2a 00 00       	call   3903 <kill>
-      exit();
-     e4f:	e8 7f 2a 00 00       	call   38d3 <exit>
-     e54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-}
-     e58:	8d 65 f8             	lea    -0x8(%ebp),%esp
-     e5b:	5b                   	pop    %ebx
-     e5c:	5e                   	pop    %esi
-     e5d:	5d                   	pop    %ebp
-    wait();
-     e5e:	e9 78 2a 00 00       	jmp    38db <wait>
-     e63:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     e6a:	00 
-     e6b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00000e70 <sharedfd>:
-{
-     e70:	55                   	push   %ebp
-     e71:	89 e5                	mov    %esp,%ebp
-     e73:	57                   	push   %edi
-     e74:	56                   	push   %esi
-     e75:	53                   	push   %ebx
-     e76:	83 ec 34             	sub    $0x34,%esp
-  printf(1, "sharedfd test\n");
-     e79:	68 54 41 00 00       	push   $0x4154
-     e7e:	6a 01                	push   $0x1
-     e80:	e8 9b 2b 00 00       	call   3a20 <printf>
-  unlink("sharedfd");
-     e85:	c7 04 24 63 41 00 00 	movl   $0x4163,(%esp)
-     e8c:	e8 92 2a 00 00       	call   3923 <unlink>
-  fd = open("sharedfd", O_CREATE|O_RDWR);
-     e91:	5b                   	pop    %ebx
-     e92:	5e                   	pop    %esi
-     e93:	68 02 02 00 00       	push   $0x202
-     e98:	68 63 41 00 00       	push   $0x4163
-     e9d:	e8 71 2a 00 00       	call   3913 <open>
-  if(fd < 0){
-     ea2:	83 c4 10             	add    $0x10,%esp
-     ea5:	85 c0                	test   %eax,%eax
-     ea7:	0f 88 2a 01 00 00    	js     fd7 <sharedfd+0x167>
-     ead:	89 c7                	mov    %eax,%edi
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     eaf:	8d 75 de             	lea    -0x22(%ebp),%esi
-     eb2:	bb e8 03 00 00       	mov    $0x3e8,%ebx
-  pid = fork();
-     eb7:	e8 0f 2a 00 00       	call   38cb <fork>
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     ebc:	83 f8 01             	cmp    $0x1,%eax
-  pid = fork();
-     ebf:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-  memset(buf, pid==0?'c':'p', sizeof(buf));
-     ec2:	19 c0                	sbb    %eax,%eax
-     ec4:	83 ec 04             	sub    $0x4,%esp
-     ec7:	83 e0 f3             	and    $0xfffffff3,%eax
-     eca:	6a 0a                	push   $0xa
-     ecc:	83 c0 70             	add    $0x70,%eax
-     ecf:	50                   	push   %eax
-     ed0:	56                   	push   %esi
-     ed1:	e8 7a 28 00 00       	call   3750 <memset>
-     ed6:	83 c4 10             	add    $0x10,%esp
-     ed9:	eb 0a                	jmp    ee5 <sharedfd+0x75>
-     edb:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  for(i = 0; i < 1000; i++){
-     ee0:	83 eb 01             	sub    $0x1,%ebx
-     ee3:	74 26                	je     f0b <sharedfd+0x9b>
-    if(write(fd, buf, sizeof(buf)) != sizeof(buf)){
-     ee5:	83 ec 04             	sub    $0x4,%esp
-     ee8:	6a 0a                	push   $0xa
-     eea:	56                   	push   %esi
-     eeb:	57                   	push   %edi
-     eec:	e8 02 2a 00 00       	call   38f3 <write>
-     ef1:	83 c4 10             	add    $0x10,%esp
-     ef4:	83 f8 0a             	cmp    $0xa,%eax
-     ef7:	74 e7                	je     ee0 <sharedfd+0x70>
-      printf(1, "fstests: write sharedfd failed\n");
-     ef9:	83 ec 08             	sub    $0x8,%esp
-     efc:	68 5c 4e 00 00       	push   $0x4e5c
-     f01:	6a 01                	push   $0x1
-     f03:	e8 18 2b 00 00       	call   3a20 <printf>
-      break;
-     f08:	83 c4 10             	add    $0x10,%esp
-  if(pid == 0)
-     f0b:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
-     f0e:	85 c9                	test   %ecx,%ecx
-     f10:	0f 84 f5 00 00 00    	je     100b <sharedfd+0x19b>
-    wait();
-     f16:	e8 c0 29 00 00       	call   38db <wait>
-  close(fd);
-     f1b:	83 ec 0c             	sub    $0xc,%esp
-  nc = np = 0;
-     f1e:	31 db                	xor    %ebx,%ebx
-  close(fd);
-     f20:	57                   	push   %edi
-     f21:	8d 7d e8             	lea    -0x18(%ebp),%edi
-     f24:	e8 d2 29 00 00       	call   38fb <close>
-  fd = open("sharedfd", 0);
-     f29:	58                   	pop    %eax
-     f2a:	5a                   	pop    %edx
-     f2b:	6a 00                	push   $0x0
-     f2d:	68 63 41 00 00       	push   $0x4163
-     f32:	e8 dc 29 00 00       	call   3913 <open>
-  if(fd < 0){
-     f37:	83 c4 10             	add    $0x10,%esp
-  nc = np = 0;
-     f3a:	31 d2                	xor    %edx,%edx
-  fd = open("sharedfd", 0);
-     f3c:	89 45 d0             	mov    %eax,-0x30(%ebp)
-  if(fd < 0){
-     f3f:	85 c0                	test   %eax,%eax
-     f41:	0f 88 aa 00 00 00    	js     ff1 <sharedfd+0x181>
-     f47:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-     f4e:	00 
-     f4f:	90                   	nop
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-     f50:	83 ec 04             	sub    $0x4,%esp
-     f53:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-     f56:	6a 0a                	push   $0xa
-     f58:	56                   	push   %esi
-     f59:	ff 75 d0             	push   -0x30(%ebp)
-     f5c:	e8 8a 29 00 00       	call   38eb <read>
-     f61:	83 c4 10             	add    $0x10,%esp
-     f64:	85 c0                	test   %eax,%eax
-     f66:	7e 28                	jle    f90 <sharedfd+0x120>
-     f68:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-     f6b:	89 f0                	mov    %esi,%eax
-     f6d:	eb 13                	jmp    f82 <sharedfd+0x112>
-     f6f:	90                   	nop
-        np++;
-     f70:	80 f9 70             	cmp    $0x70,%cl
-     f73:	0f 94 c1             	sete   %cl
-     f76:	0f b6 c9             	movzbl %cl,%ecx
-     f79:	01 cb                	add    %ecx,%ebx
-    for(i = 0; i < sizeof(buf); i++){
-     f7b:	83 c0 01             	add    $0x1,%eax
-     f7e:	39 c7                	cmp    %eax,%edi
-     f80:	74 ce                	je     f50 <sharedfd+0xe0>
-      if(buf[i] == 'c')
-     f82:	0f b6 08             	movzbl (%eax),%ecx
-     f85:	80 f9 63             	cmp    $0x63,%cl
-     f88:	75 e6                	jne    f70 <sharedfd+0x100>
-        nc++;
-     f8a:	83 c2 01             	add    $0x1,%edx
-      if(buf[i] == 'p')
-     f8d:	eb ec                	jmp    f7b <sharedfd+0x10b>
-     f8f:	90                   	nop
-  close(fd);
-     f90:	83 ec 0c             	sub    $0xc,%esp
-     f93:	ff 75 d0             	push   -0x30(%ebp)
-     f96:	e8 60 29 00 00       	call   38fb <close>
-  unlink("sharedfd");
-     f9b:	c7 04 24 63 41 00 00 	movl   $0x4163,(%esp)
-     fa2:	e8 7c 29 00 00       	call   3923 <unlink>
-  if(nc == 10000 && np == 10000){
-     fa7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-     faa:	83 c4 10             	add    $0x10,%esp
-     fad:	81 fa 10 27 00 00    	cmp    $0x2710,%edx
-     fb3:	75 5b                	jne    1010 <sharedfd+0x1a0>
-     fb5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx
-     fbb:	75 53                	jne    1010 <sharedfd+0x1a0>
-    printf(1, "sharedfd ok\n");
-     fbd:	83 ec 08             	sub    $0x8,%esp
-     fc0:	68 6c 41 00 00       	push   $0x416c
-     fc5:	6a 01                	push   $0x1
-     fc7:	e8 54 2a 00 00       	call   3a20 <printf>
-     fcc:	83 c4 10             	add    $0x10,%esp
-}
-     fcf:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     fd2:	5b                   	pop    %ebx
-     fd3:	5e                   	pop    %esi
-     fd4:	5f                   	pop    %edi
-     fd5:	5d                   	pop    %ebp
-     fd6:	c3                   	ret
-    printf(1, "fstests: cannot open sharedfd for writing");
-     fd7:	83 ec 08             	sub    $0x8,%esp
-     fda:	68 30 4e 00 00       	push   $0x4e30
-     fdf:	6a 01                	push   $0x1
-     fe1:	e8 3a 2a 00 00       	call   3a20 <printf>
-    return;
-     fe6:	83 c4 10             	add    $0x10,%esp
-}
-     fe9:	8d 65 f4             	lea    -0xc(%ebp),%esp
-     fec:	5b                   	pop    %ebx
-     fed:	5e                   	pop    %esi
-     fee:	5f                   	pop    %edi
-     fef:	5d                   	pop    %ebp
-     ff0:	c3                   	ret
-    printf(1, "fstests: cannot open sharedfd for reading\n");
-     ff1:	83 ec 08             	sub    $0x8,%esp
-     ff4:	68 7c 4e 00 00       	push   $0x4e7c
-     ff9:	6a 01                	push   $0x1
-     ffb:	e8 20 2a 00 00       	call   3a20 <printf>
-    return;
-    1000:	83 c4 10             	add    $0x10,%esp
-}
-    1003:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1006:	5b                   	pop    %ebx
-    1007:	5e                   	pop    %esi
-    1008:	5f                   	pop    %edi
-    1009:	5d                   	pop    %ebp
-    100a:	c3                   	ret
-    exit();
-    100b:	e8 c3 28 00 00       	call   38d3 <exit>
-    printf(1, "sharedfd oops %d %d\n", nc, np);
-    1010:	53                   	push   %ebx
-    1011:	52                   	push   %edx
-    1012:	68 79 41 00 00       	push   $0x4179
-    1017:	6a 01                	push   $0x1
-    1019:	e8 02 2a 00 00       	call   3a20 <printf>
-    exit();
-    101e:	e8 b0 28 00 00       	call   38d3 <exit>
-    1023:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    102a:	00 
-    102b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00001030 <fourfiles>:
-{
-    1030:	55                   	push   %ebp
-    1031:	89 e5                	mov    %esp,%ebp
-    1033:	57                   	push   %edi
-    1034:	56                   	push   %esi
-    1035:	53                   	push   %ebx
-  for(pi = 0; pi < 4; pi++){
-    1036:	31 db                	xor    %ebx,%ebx
-{
-    1038:	83 ec 34             	sub    $0x34,%esp
-  char *names[] = { "f0", "f1", "f2", "f3" };
-    103b:	c7 45 d8 8e 41 00 00 	movl   $0x418e,-0x28(%ebp)
-    1042:	c7 45 dc d7 42 00 00 	movl   $0x42d7,-0x24(%ebp)
-    1049:	c7 45 e0 db 42 00 00 	movl   $0x42db,-0x20(%ebp)
-    1050:	c7 45 e4 91 41 00 00 	movl   $0x4191,-0x1c(%ebp)
-  printf(1, "fourfiles test\n");
-    1057:	68 94 41 00 00       	push   $0x4194
-    105c:	6a 01                	push   $0x1
-    105e:	e8 bd 29 00 00       	call   3a20 <printf>
-    1063:	83 c4 10             	add    $0x10,%esp
-    fname = names[pi];
-    1066:	8b 74 9d d8          	mov    -0x28(%ebp,%ebx,4),%esi
-    unlink(fname);
-    106a:	83 ec 0c             	sub    $0xc,%esp
-    106d:	56                   	push   %esi
-    106e:	e8 b0 28 00 00       	call   3923 <unlink>
-    pid = fork();
-    1073:	e8 53 28 00 00       	call   38cb <fork>
-    if(pid < 0){
-    1078:	83 c4 10             	add    $0x10,%esp
-    107b:	85 c0                	test   %eax,%eax
-    107d:	0f 88 6d 01 00 00    	js     11f0 <fourfiles+0x1c0>
-    if(pid == 0){
-    1083:	0f 84 f0 00 00 00    	je     1179 <fourfiles+0x149>
-  for(pi = 0; pi < 4; pi++){
-    1089:	83 c3 01             	add    $0x1,%ebx
-    108c:	83 fb 04             	cmp    $0x4,%ebx
-    108f:	75 d5                	jne    1066 <fourfiles+0x36>
-    wait();
-    1091:	e8 45 28 00 00       	call   38db <wait>
-    1096:	31 f6                	xor    %esi,%esi
-    1098:	e8 3e 28 00 00       	call   38db <wait>
-    109d:	e8 39 28 00 00       	call   38db <wait>
-    10a2:	e8 34 28 00 00       	call   38db <wait>
-    fname = names[i];
-    10a7:	8b 44 b5 d8          	mov    -0x28(%ebp,%esi,4),%eax
-    fd = open(fname, 0);
-    10ab:	83 ec 08             	sub    $0x8,%esp
-    10ae:	89 f3                	mov    %esi,%ebx
-    total = 0;
-    10b0:	31 ff                	xor    %edi,%edi
-    10b2:	83 f3 01             	xor    $0x1,%ebx
-    fname = names[i];
-    10b5:	89 45 d0             	mov    %eax,-0x30(%ebp)
-    fd = open(fname, 0);
-    10b8:	6a 00                	push   $0x0
-    10ba:	50                   	push   %eax
-    10bb:	e8 53 28 00 00       	call   3913 <open>
-    while((n = read(fd, buf, sizeof(buf))) > 0){
-    10c0:	83 c4 10             	add    $0x10,%esp
-    10c3:	89 75 cc             	mov    %esi,-0x34(%ebp)
-    10c6:	89 45 d4             	mov    %eax,-0x2c(%ebp)
-    10c9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    10d0:	83 ec 04             	sub    $0x4,%esp
-    10d3:	68 00 20 00 00       	push   $0x2000
-    10d8:	68 40 85 00 00       	push   $0x8540
-    10dd:	ff 75 d4             	push   -0x2c(%ebp)
-    10e0:	e8 06 28 00 00       	call   38eb <read>
-    10e5:	83 c4 10             	add    $0x10,%esp
-    10e8:	89 c6                	mov    %eax,%esi
-    10ea:	85 c0                	test   %eax,%eax
-    10ec:	7e 23                	jle    1111 <fourfiles+0xe1>
-      for(j = 0; j < n; j++){
-    10ee:	31 d2                	xor    %edx,%edx
-        if(buf[j] != '0'+i){
-    10f0:	89 d8                	mov    %ebx,%eax
-    10f2:	0f be 8a 40 85 00 00 	movsbl 0x8540(%edx),%ecx
-    10f9:	c1 e0 1f             	shl    $0x1f,%eax
-    10fc:	c1 f8 1f             	sar    $0x1f,%eax
-    10ff:	83 c0 31             	add    $0x31,%eax
-    1102:	39 c1                	cmp    %eax,%ecx
-    1104:	75 5f                	jne    1165 <fourfiles+0x135>
-      for(j = 0; j < n; j++){
-    1106:	83 c2 01             	add    $0x1,%edx
-    1109:	39 d6                	cmp    %edx,%esi
-    110b:	75 e3                	jne    10f0 <fourfiles+0xc0>
-      total += n;
-    110d:	01 f7                	add    %esi,%edi
-    110f:	eb bf                	jmp    10d0 <fourfiles+0xa0>
-    close(fd);
-    1111:	8b 4d d4             	mov    -0x2c(%ebp),%ecx
-    1114:	83 ec 0c             	sub    $0xc,%esp
-    1117:	8b 75 cc             	mov    -0x34(%ebp),%esi
-    111a:	51                   	push   %ecx
-    111b:	e8 db 27 00 00       	call   38fb <close>
-    if(total != 12*500){
-    1120:	83 c4 10             	add    $0x10,%esp
-    1123:	81 ff 70 17 00 00    	cmp    $0x1770,%edi
-    1129:	0f 85 d5 00 00 00    	jne    1204 <fourfiles+0x1d4>
-    unlink(fname);
-    112f:	83 ec 0c             	sub    $0xc,%esp
-    1132:	ff 75 d0             	push   -0x30(%ebp)
-    1135:	e8 e9 27 00 00       	call   3923 <unlink>
-  for(i = 0; i < 2; i++){
-    113a:	83 c4 10             	add    $0x10,%esp
-    113d:	85 f6                	test   %esi,%esi
-    113f:	75 0a                	jne    114b <fourfiles+0x11b>
-    1141:	be 01 00 00 00       	mov    $0x1,%esi
-    1146:	e9 5c ff ff ff       	jmp    10a7 <fourfiles+0x77>
-  printf(1, "fourfiles ok\n");
-    114b:	83 ec 08             	sub    $0x8,%esp
-    114e:	68 d2 41 00 00       	push   $0x41d2
-    1153:	6a 01                	push   $0x1
-    1155:	e8 c6 28 00 00       	call   3a20 <printf>
-}
-    115a:	83 c4 10             	add    $0x10,%esp
-    115d:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1160:	5b                   	pop    %ebx
-    1161:	5e                   	pop    %esi
-    1162:	5f                   	pop    %edi
-    1163:	5d                   	pop    %ebp
-    1164:	c3                   	ret
-          printf(1, "wrong char\n");
-    1165:	83 ec 08             	sub    $0x8,%esp
-    1168:	68 b5 41 00 00       	push   $0x41b5
-    116d:	6a 01                	push   $0x1
-    116f:	e8 ac 28 00 00       	call   3a20 <printf>
-          exit();
-    1174:	e8 5a 27 00 00       	call   38d3 <exit>
-      fd = open(fname, O_CREATE | O_RDWR);
-    1179:	83 ec 08             	sub    $0x8,%esp
-    117c:	68 02 02 00 00       	push   $0x202
-    1181:	56                   	push   %esi
-    1182:	e8 8c 27 00 00       	call   3913 <open>
-      if(fd < 0){
-    1187:	83 c4 10             	add    $0x10,%esp
-      fd = open(fname, O_CREATE | O_RDWR);
-    118a:	89 c6                	mov    %eax,%esi
-      if(fd < 0){
-    118c:	85 c0                	test   %eax,%eax
-    118e:	78 45                	js     11d5 <fourfiles+0x1a5>
-      memset(buf, '0'+pi, 512);
-    1190:	83 ec 04             	sub    $0x4,%esp
-    1193:	83 c3 30             	add    $0x30,%ebx
-    1196:	68 00 02 00 00       	push   $0x200
-    119b:	53                   	push   %ebx
-    119c:	bb 0c 00 00 00       	mov    $0xc,%ebx
-    11a1:	68 40 85 00 00       	push   $0x8540
-    11a6:	e8 a5 25 00 00       	call   3750 <memset>
-    11ab:	83 c4 10             	add    $0x10,%esp
-        if((n = write(fd, buf, 500)) != 500){
-    11ae:	83 ec 04             	sub    $0x4,%esp
-    11b1:	68 f4 01 00 00       	push   $0x1f4
-    11b6:	68 40 85 00 00       	push   $0x8540
-    11bb:	56                   	push   %esi
-    11bc:	e8 32 27 00 00       	call   38f3 <write>
-    11c1:	83 c4 10             	add    $0x10,%esp
-    11c4:	3d f4 01 00 00       	cmp    $0x1f4,%eax
-    11c9:	75 4c                	jne    1217 <fourfiles+0x1e7>
-      for(i = 0; i < 12; i++){
-    11cb:	83 eb 01             	sub    $0x1,%ebx
-    11ce:	75 de                	jne    11ae <fourfiles+0x17e>
-      exit();
-    11d0:	e8 fe 26 00 00       	call   38d3 <exit>
-        printf(1, "create failed\n");
-    11d5:	51                   	push   %ecx
-    11d6:	51                   	push   %ecx
-    11d7:	68 2f 44 00 00       	push   $0x442f
-    11dc:	6a 01                	push   $0x1
-    11de:	e8 3d 28 00 00       	call   3a20 <printf>
-        exit();
-    11e3:	e8 eb 26 00 00       	call   38d3 <exit>
-    11e8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    11ef:	00 
-      printf(1, "fork failed\n");
-    11f0:	83 ec 08             	sub    $0x8,%esp
-    11f3:	68 69 4c 00 00       	push   $0x4c69
-    11f8:	6a 01                	push   $0x1
-    11fa:	e8 21 28 00 00       	call   3a20 <printf>
-      exit();
-    11ff:	e8 cf 26 00 00       	call   38d3 <exit>
-      printf(1, "wrong length %d\n", total);
-    1204:	50                   	push   %eax
-    1205:	57                   	push   %edi
-    1206:	68 c1 41 00 00       	push   $0x41c1
-    120b:	6a 01                	push   $0x1
-    120d:	e8 0e 28 00 00       	call   3a20 <printf>
-      exit();
-    1212:	e8 bc 26 00 00       	call   38d3 <exit>
-          printf(1, "write failed %d\n", n);
-    1217:	52                   	push   %edx
-    1218:	50                   	push   %eax
-    1219:	68 a4 41 00 00       	push   $0x41a4
-    121e:	6a 01                	push   $0x1
-    1220:	e8 fb 27 00 00       	call   3a20 <printf>
-          exit();
-    1225:	e8 a9 26 00 00       	call   38d3 <exit>
-    122a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00001230 <createdelete>:
-{
-    1230:	55                   	push   %ebp
-    1231:	89 e5                	mov    %esp,%ebp
-    1233:	57                   	push   %edi
-    1234:	56                   	push   %esi
-  for(pi = 0; pi < 4; pi++){
-    1235:	31 f6                	xor    %esi,%esi
-{
-    1237:	53                   	push   %ebx
-    1238:	83 ec 44             	sub    $0x44,%esp
-  printf(1, "createdelete test\n");
-    123b:	68 e0 41 00 00       	push   $0x41e0
-    1240:	6a 01                	push   $0x1
-    1242:	e8 d9 27 00 00       	call   3a20 <printf>
-    1247:	83 c4 10             	add    $0x10,%esp
-    pid = fork();
-    124a:	e8 7c 26 00 00       	call   38cb <fork>
-    124f:	89 c3                	mov    %eax,%ebx
-    if(pid < 0){
-    1251:	85 c0                	test   %eax,%eax
-    1253:	0f 88 ac 01 00 00    	js     1405 <createdelete+0x1d5>
-    if(pid == 0){
-    1259:	0f 84 01 01 00 00    	je     1360 <createdelete+0x130>
-  for(pi = 0; pi < 4; pi++){
-    125f:	83 c6 01             	add    $0x1,%esi
-    1262:	83 fe 04             	cmp    $0x4,%esi
-    1265:	75 e3                	jne    124a <createdelete+0x1a>
-    wait();
-    1267:	e8 6f 26 00 00       	call   38db <wait>
-  for(i = 0; i < N; i++){
-    126c:	31 ff                	xor    %edi,%edi
-    126e:	8d 75 c8             	lea    -0x38(%ebp),%esi
-    wait();
-    1271:	e8 65 26 00 00       	call   38db <wait>
-    1276:	e8 60 26 00 00       	call   38db <wait>
-    127b:	e8 5b 26 00 00       	call   38db <wait>
-  name[0] = name[1] = name[2] = 0;
-    1280:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
-  for(i = 0; i < N; i++){
-    1284:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      if((i == 0 || i >= N/2) && fd < 0){
-    1288:	85 ff                	test   %edi,%edi
-      name[1] = '0' + i;
-    128a:	8d 47 30             	lea    0x30(%edi),%eax
-      if((i == 0 || i >= N/2) && fd < 0){
-    128d:	bb 70 00 00 00       	mov    $0x70,%ebx
-    1292:	0f 94 c2             	sete   %dl
-    1295:	83 ff 09             	cmp    $0x9,%edi
-      name[1] = '0' + i;
-    1298:	88 45 c6             	mov    %al,-0x3a(%ebp)
-      if((i == 0 || i >= N/2) && fd < 0){
-    129b:	0f 9f c0             	setg   %al
-    129e:	09 c2                	or     %eax,%edx
-    12a0:	88 55 c7             	mov    %dl,-0x39(%ebp)
-      name[1] = '0' + i;
-    12a3:	0f b6 45 c6          	movzbl -0x3a(%ebp),%eax
-      fd = open(name, 0);
-    12a7:	83 ec 08             	sub    $0x8,%esp
-      name[0] = 'p' + pi;
-    12aa:	88 5d c8             	mov    %bl,-0x38(%ebp)
-      name[1] = '0' + i;
-    12ad:	88 45 c9             	mov    %al,-0x37(%ebp)
-      fd = open(name, 0);
-    12b0:	6a 00                	push   $0x0
-    12b2:	56                   	push   %esi
-    12b3:	e8 5b 26 00 00       	call   3913 <open>
-      if((i == 0 || i >= N/2) && fd < 0){
-    12b8:	83 c4 10             	add    $0x10,%esp
-    12bb:	80 7d c7 00          	cmpb   $0x0,-0x39(%ebp)
-    12bf:	74 7f                	je     1340 <createdelete+0x110>
-    12c1:	85 c0                	test   %eax,%eax
-    12c3:	0f 88 27 01 00 00    	js     13f0 <createdelete+0x1c0>
-        close(fd);
-    12c9:	83 ec 0c             	sub    $0xc,%esp
-    12cc:	50                   	push   %eax
-    12cd:	e8 29 26 00 00       	call   38fb <close>
-    12d2:	83 c4 10             	add    $0x10,%esp
-    for(pi = 0; pi < 4; pi++){
-    12d5:	83 c3 01             	add    $0x1,%ebx
-    12d8:	80 fb 74             	cmp    $0x74,%bl
-    12db:	75 c6                	jne    12a3 <createdelete+0x73>
-  for(i = 0; i < N; i++){
-    12dd:	83 c7 01             	add    $0x1,%edi
-    12e0:	83 ff 14             	cmp    $0x14,%edi
-    12e3:	75 a3                	jne    1288 <createdelete+0x58>
-    12e5:	bf 70 00 00 00       	mov    $0x70,%edi
-    12ea:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      name[1] = '0' + i;
-    12f0:	8d 47 c0             	lea    -0x40(%edi),%eax
-    12f3:	bb 04 00 00 00       	mov    $0x4,%ebx
-    12f8:	88 45 c7             	mov    %al,-0x39(%ebp)
-      name[0] = 'p' + i;
-    12fb:	89 f8                	mov    %edi,%eax
-      unlink(name);
-    12fd:	83 ec 0c             	sub    $0xc,%esp
-      name[0] = 'p' + i;
-    1300:	88 45 c8             	mov    %al,-0x38(%ebp)
-      name[1] = '0' + i;
-    1303:	0f b6 45 c7          	movzbl -0x39(%ebp),%eax
-    1307:	88 45 c9             	mov    %al,-0x37(%ebp)
-      unlink(name);
-    130a:	56                   	push   %esi
-    130b:	e8 13 26 00 00       	call   3923 <unlink>
-    for(pi = 0; pi < 4; pi++){
-    1310:	83 c4 10             	add    $0x10,%esp
-    1313:	83 eb 01             	sub    $0x1,%ebx
-    1316:	75 e3                	jne    12fb <createdelete+0xcb>
-  for(i = 0; i < N; i++){
-    1318:	83 c7 01             	add    $0x1,%edi
-    131b:	89 f8                	mov    %edi,%eax
-    131d:	3c 84                	cmp    $0x84,%al
-    131f:	75 cf                	jne    12f0 <createdelete+0xc0>
-  printf(1, "createdelete ok\n");
-    1321:	83 ec 08             	sub    $0x8,%esp
-    1324:	68 f3 41 00 00       	push   $0x41f3
-    1329:	6a 01                	push   $0x1
-    132b:	e8 f0 26 00 00       	call   3a20 <printf>
-}
-    1330:	83 c4 10             	add    $0x10,%esp
-    1333:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1336:	5b                   	pop    %ebx
-    1337:	5e                   	pop    %esi
-    1338:	5f                   	pop    %edi
-    1339:	5d                   	pop    %ebp
-    133a:	c3                   	ret
-    133b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      } else if((i >= 1 && i < N/2) && fd >= 0){
-    1340:	85 c0                	test   %eax,%eax
-    1342:	78 91                	js     12d5 <createdelete+0xa5>
-        printf(1, "oops createdelete %s did exist\n", name);
-    1344:	50                   	push   %eax
-    1345:	56                   	push   %esi
-    1346:	68 cc 4e 00 00       	push   $0x4ecc
-    134b:	6a 01                	push   $0x1
-    134d:	e8 ce 26 00 00       	call   3a20 <printf>
-        exit();
-    1352:	e8 7c 25 00 00       	call   38d3 <exit>
-    1357:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    135e:	00 
-    135f:	90                   	nop
-      name[0] = 'p' + pi;
-    1360:	8d 46 70             	lea    0x70(%esi),%eax
-      name[2] = '\0';
-    1363:	c6 45 ca 00          	movb   $0x0,-0x36(%ebp)
-    1367:	8d 75 c8             	lea    -0x38(%ebp),%esi
-      name[0] = 'p' + pi;
-    136a:	88 45 c8             	mov    %al,-0x38(%ebp)
-      for(i = 0; i < N; i++){
-    136d:	8d 76 00             	lea    0x0(%esi),%esi
-        fd = open(name, O_CREATE | O_RDWR);
-    1370:	83 ec 08             	sub    $0x8,%esp
-        name[1] = '0' + i;
-    1373:	8d 43 30             	lea    0x30(%ebx),%eax
-    1376:	88 45 c9             	mov    %al,-0x37(%ebp)
-        fd = open(name, O_CREATE | O_RDWR);
-    1379:	68 02 02 00 00       	push   $0x202
-    137e:	56                   	push   %esi
-    137f:	e8 8f 25 00 00       	call   3913 <open>
-        if(fd < 0){
-    1384:	83 c4 10             	add    $0x10,%esp
-    1387:	85 c0                	test   %eax,%eax
-    1389:	0f 88 8a 00 00 00    	js     1419 <createdelete+0x1e9>
-        close(fd);
-    138f:	83 ec 0c             	sub    $0xc,%esp
-    1392:	50                   	push   %eax
-    1393:	e8 63 25 00 00       	call   38fb <close>
-        if(i > 0 && (i % 2 ) == 0){
-    1398:	83 c4 10             	add    $0x10,%esp
-    139b:	85 db                	test   %ebx,%ebx
-    139d:	74 19                	je     13b8 <createdelete+0x188>
-    139f:	f6 c3 01             	test   $0x1,%bl
-    13a2:	74 1b                	je     13bf <createdelete+0x18f>
-      for(i = 0; i < N; i++){
-    13a4:	83 c3 01             	add    $0x1,%ebx
-    13a7:	83 fb 14             	cmp    $0x14,%ebx
-    13aa:	75 c4                	jne    1370 <createdelete+0x140>
-      exit();
-    13ac:	e8 22 25 00 00       	call   38d3 <exit>
-    13b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-      for(i = 0; i < N; i++){
-    13b8:	bb 01 00 00 00       	mov    $0x1,%ebx
-    13bd:	eb b1                	jmp    1370 <createdelete+0x140>
-          name[1] = '0' + (i / 2);
-    13bf:	89 d8                	mov    %ebx,%eax
-          if(unlink(name) < 0){
-    13c1:	83 ec 0c             	sub    $0xc,%esp
-          name[1] = '0' + (i / 2);
-    13c4:	d1 f8                	sar    $1,%eax
-    13c6:	83 c0 30             	add    $0x30,%eax
-    13c9:	88 45 c9             	mov    %al,-0x37(%ebp)
-          if(unlink(name) < 0){
-    13cc:	56                   	push   %esi
-    13cd:	e8 51 25 00 00       	call   3923 <unlink>
-    13d2:	83 c4 10             	add    $0x10,%esp
-    13d5:	85 c0                	test   %eax,%eax
-    13d7:	79 cb                	jns    13a4 <createdelete+0x174>
-            printf(1, "unlink failed\n");
-    13d9:	52                   	push   %edx
-    13da:	52                   	push   %edx
-    13db:	68 e1 3d 00 00       	push   $0x3de1
-    13e0:	6a 01                	push   $0x1
-    13e2:	e8 39 26 00 00       	call   3a20 <printf>
-            exit();
-    13e7:	e8 e7 24 00 00       	call   38d3 <exit>
-    13ec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-        printf(1, "oops createdelete %s didn't exist\n", name);
-    13f0:	83 ec 04             	sub    $0x4,%esp
-    13f3:	56                   	push   %esi
-    13f4:	68 a8 4e 00 00       	push   $0x4ea8
-    13f9:	6a 01                	push   $0x1
-    13fb:	e8 20 26 00 00       	call   3a20 <printf>
-        exit();
-    1400:	e8 ce 24 00 00       	call   38d3 <exit>
-      printf(1, "fork failed\n");
-    1405:	83 ec 08             	sub    $0x8,%esp
-    1408:	68 69 4c 00 00       	push   $0x4c69
-    140d:	6a 01                	push   $0x1
-    140f:	e8 0c 26 00 00       	call   3a20 <printf>
-      exit();
-    1414:	e8 ba 24 00 00       	call   38d3 <exit>
-          printf(1, "create failed\n");
-    1419:	83 ec 08             	sub    $0x8,%esp
-    141c:	68 2f 44 00 00       	push   $0x442f
-    1421:	6a 01                	push   $0x1
-    1423:	e8 f8 25 00 00       	call   3a20 <printf>
-          exit();
-    1428:	e8 a6 24 00 00       	call   38d3 <exit>
-    142d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00001430 <unlinkread>:
-{
-    1430:	55                   	push   %ebp
-    1431:	89 e5                	mov    %esp,%ebp
-    1433:	56                   	push   %esi
-    1434:	53                   	push   %ebx
-  printf(1, "unlinkread test\n");
-    1435:	83 ec 08             	sub    $0x8,%esp
-    1438:	68 04 42 00 00       	push   $0x4204
-    143d:	6a 01                	push   $0x1
-    143f:	e8 dc 25 00 00       	call   3a20 <printf>
-  fd = open("unlinkread", O_CREATE | O_RDWR);
-    1444:	5b                   	pop    %ebx
-    1445:	5e                   	pop    %esi
-    1446:	68 02 02 00 00       	push   $0x202
-    144b:	68 15 42 00 00       	push   $0x4215
-    1450:	e8 be 24 00 00       	call   3913 <open>
-  if(fd < 0){
-    1455:	83 c4 10             	add    $0x10,%esp
-    1458:	85 c0                	test   %eax,%eax
-    145a:	0f 88 e6 00 00 00    	js     1546 <unlinkread+0x116>
-  write(fd, "hello", 5);
-    1460:	83 ec 04             	sub    $0x4,%esp
-    1463:	89 c3                	mov    %eax,%ebx
-    1465:	6a 05                	push   $0x5
-    1467:	68 3a 42 00 00       	push   $0x423a
-    146c:	50                   	push   %eax
-    146d:	e8 81 24 00 00       	call   38f3 <write>
-  close(fd);
-    1472:	89 1c 24             	mov    %ebx,(%esp)
-    1475:	e8 81 24 00 00       	call   38fb <close>
-  fd = open("unlinkread", O_RDWR);
-    147a:	58                   	pop    %eax
-    147b:	5a                   	pop    %edx
-    147c:	6a 02                	push   $0x2
-    147e:	68 15 42 00 00       	push   $0x4215
-    1483:	e8 8b 24 00 00       	call   3913 <open>
-  if(fd < 0){
-    1488:	83 c4 10             	add    $0x10,%esp
-  fd = open("unlinkread", O_RDWR);
-    148b:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    148d:	85 c0                	test   %eax,%eax
-    148f:	0f 88 10 01 00 00    	js     15a5 <unlinkread+0x175>
-  if(unlink("unlinkread") != 0){
-    1495:	83 ec 0c             	sub    $0xc,%esp
-    1498:	68 15 42 00 00       	push   $0x4215
-    149d:	e8 81 24 00 00       	call   3923 <unlink>
-    14a2:	83 c4 10             	add    $0x10,%esp
-    14a5:	85 c0                	test   %eax,%eax
-    14a7:	0f 85 e5 00 00 00    	jne    1592 <unlinkread+0x162>
-  fd1 = open("unlinkread", O_CREATE | O_RDWR);
-    14ad:	83 ec 08             	sub    $0x8,%esp
-    14b0:	68 02 02 00 00       	push   $0x202
-    14b5:	68 15 42 00 00       	push   $0x4215
-    14ba:	e8 54 24 00 00       	call   3913 <open>
-  write(fd1, "yyy", 3);
-    14bf:	83 c4 0c             	add    $0xc,%esp
-    14c2:	6a 03                	push   $0x3
-  fd1 = open("unlinkread", O_CREATE | O_RDWR);
-    14c4:	89 c6                	mov    %eax,%esi
-  write(fd1, "yyy", 3);
-    14c6:	68 72 42 00 00       	push   $0x4272
-    14cb:	50                   	push   %eax
-    14cc:	e8 22 24 00 00       	call   38f3 <write>
-  close(fd1);
-    14d1:	89 34 24             	mov    %esi,(%esp)
-    14d4:	e8 22 24 00 00       	call   38fb <close>
-  if(read(fd, buf, sizeof(buf)) != 5){
-    14d9:	83 c4 0c             	add    $0xc,%esp
-    14dc:	68 00 20 00 00       	push   $0x2000
-    14e1:	68 40 85 00 00       	push   $0x8540
-    14e6:	53                   	push   %ebx
-    14e7:	e8 ff 23 00 00       	call   38eb <read>
-    14ec:	83 c4 10             	add    $0x10,%esp
-    14ef:	83 f8 05             	cmp    $0x5,%eax
-    14f2:	0f 85 87 00 00 00    	jne    157f <unlinkread+0x14f>
-  if(buf[0] != 'h'){
-    14f8:	80 3d 40 85 00 00 68 	cmpb   $0x68,0x8540
-    14ff:	75 6b                	jne    156c <unlinkread+0x13c>
-  if(write(fd, buf, 10) != 10){
-    1501:	83 ec 04             	sub    $0x4,%esp
-    1504:	6a 0a                	push   $0xa
-    1506:	68 40 85 00 00       	push   $0x8540
-    150b:	53                   	push   %ebx
-    150c:	e8 e2 23 00 00       	call   38f3 <write>
-    1511:	83 c4 10             	add    $0x10,%esp
-    1514:	83 f8 0a             	cmp    $0xa,%eax
-    1517:	75 40                	jne    1559 <unlinkread+0x129>
-  close(fd);
-    1519:	83 ec 0c             	sub    $0xc,%esp
-    151c:	53                   	push   %ebx
-    151d:	e8 d9 23 00 00       	call   38fb <close>
-  unlink("unlinkread");
-    1522:	c7 04 24 15 42 00 00 	movl   $0x4215,(%esp)
-    1529:	e8 f5 23 00 00       	call   3923 <unlink>
-  printf(1, "unlinkread ok\n");
-    152e:	58                   	pop    %eax
-    152f:	5a                   	pop    %edx
-    1530:	68 bd 42 00 00       	push   $0x42bd
-    1535:	6a 01                	push   $0x1
-    1537:	e8 e4 24 00 00       	call   3a20 <printf>
-}
-    153c:	83 c4 10             	add    $0x10,%esp
-    153f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    1542:	5b                   	pop    %ebx
-    1543:	5e                   	pop    %esi
-    1544:	5d                   	pop    %ebp
-    1545:	c3                   	ret
-    printf(1, "create unlinkread failed\n");
-    1546:	51                   	push   %ecx
-    1547:	51                   	push   %ecx
-    1548:	68 20 42 00 00       	push   $0x4220
-    154d:	6a 01                	push   $0x1
-    154f:	e8 cc 24 00 00       	call   3a20 <printf>
-    exit();
-    1554:	e8 7a 23 00 00       	call   38d3 <exit>
-    printf(1, "unlinkread write failed\n");
-    1559:	51                   	push   %ecx
-    155a:	51                   	push   %ecx
-    155b:	68 a4 42 00 00       	push   $0x42a4
-    1560:	6a 01                	push   $0x1
-    1562:	e8 b9 24 00 00       	call   3a20 <printf>
-    exit();
-    1567:	e8 67 23 00 00       	call   38d3 <exit>
-    printf(1, "unlinkread wrong data\n");
-    156c:	53                   	push   %ebx
-    156d:	53                   	push   %ebx
-    156e:	68 8d 42 00 00       	push   $0x428d
-    1573:	6a 01                	push   $0x1
-    1575:	e8 a6 24 00 00       	call   3a20 <printf>
-    exit();
-    157a:	e8 54 23 00 00       	call   38d3 <exit>
-    printf(1, "unlinkread read failed");
-    157f:	56                   	push   %esi
-    1580:	56                   	push   %esi
-    1581:	68 76 42 00 00       	push   $0x4276
-    1586:	6a 01                	push   $0x1
-    1588:	e8 93 24 00 00       	call   3a20 <printf>
-    exit();
-    158d:	e8 41 23 00 00       	call   38d3 <exit>
-    printf(1, "unlink unlinkread failed\n");
-    1592:	50                   	push   %eax
-    1593:	50                   	push   %eax
-    1594:	68 58 42 00 00       	push   $0x4258
-    1599:	6a 01                	push   $0x1
-    159b:	e8 80 24 00 00       	call   3a20 <printf>
-    exit();
-    15a0:	e8 2e 23 00 00       	call   38d3 <exit>
-    printf(1, "open unlinkread failed\n");
-    15a5:	50                   	push   %eax
-    15a6:	50                   	push   %eax
-    15a7:	68 40 42 00 00       	push   $0x4240
-    15ac:	6a 01                	push   $0x1
-    15ae:	e8 6d 24 00 00       	call   3a20 <printf>
-    exit();
-    15b3:	e8 1b 23 00 00       	call   38d3 <exit>
-    15b8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    15bf:	00 
-
-000015c0 <linktest>:
-{
-    15c0:	55                   	push   %ebp
-    15c1:	89 e5                	mov    %esp,%ebp
-    15c3:	53                   	push   %ebx
-    15c4:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "linktest\n");
-    15c7:	68 cc 42 00 00       	push   $0x42cc
-    15cc:	6a 01                	push   $0x1
-    15ce:	e8 4d 24 00 00       	call   3a20 <printf>
-  unlink("lf1");
-    15d3:	c7 04 24 d6 42 00 00 	movl   $0x42d6,(%esp)
-    15da:	e8 44 23 00 00       	call   3923 <unlink>
-  unlink("lf2");
-    15df:	c7 04 24 da 42 00 00 	movl   $0x42da,(%esp)
-    15e6:	e8 38 23 00 00       	call   3923 <unlink>
-  fd = open("lf1", O_CREATE|O_RDWR);
-    15eb:	58                   	pop    %eax
-    15ec:	5a                   	pop    %edx
-    15ed:	68 02 02 00 00       	push   $0x202
-    15f2:	68 d6 42 00 00       	push   $0x42d6
-    15f7:	e8 17 23 00 00       	call   3913 <open>
-  if(fd < 0){
-    15fc:	83 c4 10             	add    $0x10,%esp
-    15ff:	85 c0                	test   %eax,%eax
-    1601:	0f 88 1e 01 00 00    	js     1725 <linktest+0x165>
-  if(write(fd, "hello", 5) != 5){
-    1607:	83 ec 04             	sub    $0x4,%esp
-    160a:	89 c3                	mov    %eax,%ebx
-    160c:	6a 05                	push   $0x5
-    160e:	68 3a 42 00 00       	push   $0x423a
-    1613:	50                   	push   %eax
-    1614:	e8 da 22 00 00       	call   38f3 <write>
-    1619:	83 c4 10             	add    $0x10,%esp
-    161c:	83 f8 05             	cmp    $0x5,%eax
-    161f:	0f 85 98 01 00 00    	jne    17bd <linktest+0x1fd>
-  close(fd);
-    1625:	83 ec 0c             	sub    $0xc,%esp
-    1628:	53                   	push   %ebx
-    1629:	e8 cd 22 00 00       	call   38fb <close>
-  if(link("lf1", "lf2") < 0){
-    162e:	5b                   	pop    %ebx
-    162f:	58                   	pop    %eax
-    1630:	68 da 42 00 00       	push   $0x42da
-    1635:	68 d6 42 00 00       	push   $0x42d6
-    163a:	e8 f4 22 00 00       	call   3933 <link>
-    163f:	83 c4 10             	add    $0x10,%esp
-    1642:	85 c0                	test   %eax,%eax
-    1644:	0f 88 60 01 00 00    	js     17aa <linktest+0x1ea>
-  unlink("lf1");
-    164a:	83 ec 0c             	sub    $0xc,%esp
-    164d:	68 d6 42 00 00       	push   $0x42d6
-    1652:	e8 cc 22 00 00       	call   3923 <unlink>
-  if(open("lf1", 0) >= 0){
-    1657:	58                   	pop    %eax
-    1658:	5a                   	pop    %edx
-    1659:	6a 00                	push   $0x0
-    165b:	68 d6 42 00 00       	push   $0x42d6
-    1660:	e8 ae 22 00 00       	call   3913 <open>
-    1665:	83 c4 10             	add    $0x10,%esp
-    1668:	85 c0                	test   %eax,%eax
-    166a:	0f 89 27 01 00 00    	jns    1797 <linktest+0x1d7>
-  fd = open("lf2", 0);
-    1670:	83 ec 08             	sub    $0x8,%esp
-    1673:	6a 00                	push   $0x0
-    1675:	68 da 42 00 00       	push   $0x42da
-    167a:	e8 94 22 00 00       	call   3913 <open>
-  if(fd < 0){
-    167f:	83 c4 10             	add    $0x10,%esp
-  fd = open("lf2", 0);
-    1682:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1684:	85 c0                	test   %eax,%eax
-    1686:	0f 88 f8 00 00 00    	js     1784 <linktest+0x1c4>
-  if(read(fd, buf, sizeof(buf)) != 5){
-    168c:	83 ec 04             	sub    $0x4,%esp
-    168f:	68 00 20 00 00       	push   $0x2000
-    1694:	68 40 85 00 00       	push   $0x8540
-    1699:	50                   	push   %eax
-    169a:	e8 4c 22 00 00       	call   38eb <read>
-    169f:	83 c4 10             	add    $0x10,%esp
-    16a2:	83 f8 05             	cmp    $0x5,%eax
-    16a5:	0f 85 c6 00 00 00    	jne    1771 <linktest+0x1b1>
-  close(fd);
-    16ab:	83 ec 0c             	sub    $0xc,%esp
-    16ae:	53                   	push   %ebx
-    16af:	e8 47 22 00 00       	call   38fb <close>
-  if(link("lf2", "lf2") >= 0){
-    16b4:	58                   	pop    %eax
-    16b5:	5a                   	pop    %edx
-    16b6:	68 da 42 00 00       	push   $0x42da
-    16bb:	68 da 42 00 00       	push   $0x42da
-    16c0:	e8 6e 22 00 00       	call   3933 <link>
-    16c5:	83 c4 10             	add    $0x10,%esp
-    16c8:	85 c0                	test   %eax,%eax
-    16ca:	0f 89 8e 00 00 00    	jns    175e <linktest+0x19e>
-  unlink("lf2");
-    16d0:	83 ec 0c             	sub    $0xc,%esp
-    16d3:	68 da 42 00 00       	push   $0x42da
-    16d8:	e8 46 22 00 00       	call   3923 <unlink>
-  if(link("lf2", "lf1") >= 0){
-    16dd:	59                   	pop    %ecx
-    16de:	5b                   	pop    %ebx
-    16df:	68 d6 42 00 00       	push   $0x42d6
-    16e4:	68 da 42 00 00       	push   $0x42da
-    16e9:	e8 45 22 00 00       	call   3933 <link>
-    16ee:	83 c4 10             	add    $0x10,%esp
-    16f1:	85 c0                	test   %eax,%eax
-    16f3:	79 56                	jns    174b <linktest+0x18b>
-  if(link(".", "lf1") >= 0){
-    16f5:	83 ec 08             	sub    $0x8,%esp
-    16f8:	68 d6 42 00 00       	push   $0x42d6
-    16fd:	68 9e 45 00 00       	push   $0x459e
-    1702:	e8 2c 22 00 00       	call   3933 <link>
-    1707:	83 c4 10             	add    $0x10,%esp
-    170a:	85 c0                	test   %eax,%eax
-    170c:	79 2a                	jns    1738 <linktest+0x178>
-  printf(1, "linktest ok\n");
-    170e:	83 ec 08             	sub    $0x8,%esp
-    1711:	68 74 43 00 00       	push   $0x4374
-    1716:	6a 01                	push   $0x1
-    1718:	e8 03 23 00 00       	call   3a20 <printf>
-}
-    171d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    1720:	83 c4 10             	add    $0x10,%esp
-    1723:	c9                   	leave
-    1724:	c3                   	ret
-    printf(1, "create lf1 failed\n");
-    1725:	50                   	push   %eax
-    1726:	50                   	push   %eax
-    1727:	68 de 42 00 00       	push   $0x42de
-    172c:	6a 01                	push   $0x1
-    172e:	e8 ed 22 00 00       	call   3a20 <printf>
-    exit();
-    1733:	e8 9b 21 00 00       	call   38d3 <exit>
-    printf(1, "link . lf1 succeeded! oops\n");
-    1738:	50                   	push   %eax
-    1739:	50                   	push   %eax
-    173a:	68 58 43 00 00       	push   $0x4358
-    173f:	6a 01                	push   $0x1
-    1741:	e8 da 22 00 00       	call   3a20 <printf>
-    exit();
-    1746:	e8 88 21 00 00       	call   38d3 <exit>
-    printf(1, "link non-existant succeeded! oops\n");
-    174b:	52                   	push   %edx
-    174c:	52                   	push   %edx
-    174d:	68 14 4f 00 00       	push   $0x4f14
-    1752:	6a 01                	push   $0x1
-    1754:	e8 c7 22 00 00       	call   3a20 <printf>
-    exit();
-    1759:	e8 75 21 00 00       	call   38d3 <exit>
-    printf(1, "link lf2 lf2 succeeded! oops\n");
-    175e:	50                   	push   %eax
-    175f:	50                   	push   %eax
-    1760:	68 3a 43 00 00       	push   $0x433a
-    1765:	6a 01                	push   $0x1
-    1767:	e8 b4 22 00 00       	call   3a20 <printf>
-    exit();
-    176c:	e8 62 21 00 00       	call   38d3 <exit>
-    printf(1, "read lf2 failed\n");
-    1771:	51                   	push   %ecx
-    1772:	51                   	push   %ecx
-    1773:	68 29 43 00 00       	push   $0x4329
-    1778:	6a 01                	push   $0x1
-    177a:	e8 a1 22 00 00       	call   3a20 <printf>
-    exit();
-    177f:	e8 4f 21 00 00       	call   38d3 <exit>
-    printf(1, "open lf2 failed\n");
-    1784:	53                   	push   %ebx
-    1785:	53                   	push   %ebx
-    1786:	68 18 43 00 00       	push   $0x4318
-    178b:	6a 01                	push   $0x1
-    178d:	e8 8e 22 00 00       	call   3a20 <printf>
-    exit();
-    1792:	e8 3c 21 00 00       	call   38d3 <exit>
-    printf(1, "unlinked lf1 but it is still there!\n");
-    1797:	50                   	push   %eax
-    1798:	50                   	push   %eax
-    1799:	68 ec 4e 00 00       	push   $0x4eec
-    179e:	6a 01                	push   $0x1
-    17a0:	e8 7b 22 00 00       	call   3a20 <printf>
-    exit();
-    17a5:	e8 29 21 00 00       	call   38d3 <exit>
-    printf(1, "link lf1 lf2 failed\n");
-    17aa:	51                   	push   %ecx
-    17ab:	51                   	push   %ecx
-    17ac:	68 03 43 00 00       	push   $0x4303
-    17b1:	6a 01                	push   $0x1
-    17b3:	e8 68 22 00 00       	call   3a20 <printf>
-    exit();
-    17b8:	e8 16 21 00 00       	call   38d3 <exit>
-    printf(1, "write lf1 failed\n");
-    17bd:	50                   	push   %eax
-    17be:	50                   	push   %eax
-    17bf:	68 f1 42 00 00       	push   $0x42f1
-    17c4:	6a 01                	push   $0x1
-    17c6:	e8 55 22 00 00       	call   3a20 <printf>
-    exit();
-    17cb:	e8 03 21 00 00       	call   38d3 <exit>
-
-000017d0 <concreate>:
-{
-    17d0:	55                   	push   %ebp
-    17d1:	89 e5                	mov    %esp,%ebp
-    17d3:	57                   	push   %edi
-    17d4:	56                   	push   %esi
-  for(i = 0; i < 40; i++){
-    17d5:	31 f6                	xor    %esi,%esi
-{
-    17d7:	53                   	push   %ebx
-    17d8:	8d 5d ad             	lea    -0x53(%ebp),%ebx
-    17db:	83 ec 64             	sub    $0x64,%esp
-  printf(1, "concreate test\n");
-    17de:	68 81 43 00 00       	push   $0x4381
-    17e3:	6a 01                	push   $0x1
-    17e5:	e8 36 22 00 00       	call   3a20 <printf>
-  file[0] = 'C';
-    17ea:	c6 45 ad 43          	movb   $0x43,-0x53(%ebp)
-  file[2] = '\0';
-    17ee:	83 c4 10             	add    $0x10,%esp
-    17f1:	c6 45 af 00          	movb   $0x0,-0x51(%ebp)
-  for(i = 0; i < 40; i++){
-    17f5:	eb 4c                	jmp    1843 <concreate+0x73>
-    17f7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    17fe:	00 
-    17ff:	90                   	nop
-    1800:	69 c6 ab aa aa aa    	imul   $0xaaaaaaab,%esi,%eax
-    if(pid && (i % 3) == 1){
-    1806:	3d ab aa aa aa       	cmp    $0xaaaaaaab,%eax
-    180b:	0f 83 8f 00 00 00    	jae    18a0 <concreate+0xd0>
-      fd = open(file, O_CREATE | O_RDWR);
-    1811:	83 ec 08             	sub    $0x8,%esp
-    1814:	68 02 02 00 00       	push   $0x202
-    1819:	53                   	push   %ebx
-    181a:	e8 f4 20 00 00       	call   3913 <open>
-      if(fd < 0){
-    181f:	83 c4 10             	add    $0x10,%esp
-    1822:	85 c0                	test   %eax,%eax
-    1824:	78 63                	js     1889 <concreate+0xb9>
-      close(fd);
-    1826:	83 ec 0c             	sub    $0xc,%esp
-  for(i = 0; i < 40; i++){
-    1829:	83 c6 01             	add    $0x1,%esi
-      close(fd);
-    182c:	50                   	push   %eax
-    182d:	e8 c9 20 00 00       	call   38fb <close>
-    1832:	83 c4 10             	add    $0x10,%esp
-      wait();
-    1835:	e8 a1 20 00 00       	call   38db <wait>
-  for(i = 0; i < 40; i++){
-    183a:	83 fe 28             	cmp    $0x28,%esi
-    183d:	0f 84 7f 00 00 00    	je     18c2 <concreate+0xf2>
-    unlink(file);
-    1843:	83 ec 0c             	sub    $0xc,%esp
-    file[1] = '0' + i;
-    1846:	8d 46 30             	lea    0x30(%esi),%eax
-    1849:	88 45 ae             	mov    %al,-0x52(%ebp)
-    unlink(file);
-    184c:	53                   	push   %ebx
-    184d:	e8 d1 20 00 00       	call   3923 <unlink>
-    pid = fork();
-    1852:	e8 74 20 00 00       	call   38cb <fork>
-    if(pid && (i % 3) == 1){
-    1857:	83 c4 10             	add    $0x10,%esp
-    185a:	85 c0                	test   %eax,%eax
-    185c:	75 a2                	jne    1800 <concreate+0x30>
-      link("C0", file);
-    185e:	69 f6 cd cc cc cc    	imul   $0xcccccccd,%esi,%esi
-    } else if(pid == 0 && (i % 5) == 1){
-    1864:	81 fe cd cc cc cc    	cmp    $0xcccccccd,%esi
-    186a:	0f 83 d0 00 00 00    	jae    1940 <concreate+0x170>
-      fd = open(file, O_CREATE | O_RDWR);
-    1870:	83 ec 08             	sub    $0x8,%esp
-    1873:	68 02 02 00 00       	push   $0x202
-    1878:	53                   	push   %ebx
-    1879:	e8 95 20 00 00       	call   3913 <open>
-      if(fd < 0){
-    187e:	83 c4 10             	add    $0x10,%esp
-    1881:	85 c0                	test   %eax,%eax
-    1883:	0f 89 ea 01 00 00    	jns    1a73 <concreate+0x2a3>
-        printf(1, "concreate create %s failed\n", file);
-    1889:	83 ec 04             	sub    $0x4,%esp
-    188c:	53                   	push   %ebx
-    188d:	68 94 43 00 00       	push   $0x4394
-    1892:	6a 01                	push   $0x1
-    1894:	e8 87 21 00 00       	call   3a20 <printf>
-        exit();
-    1899:	e8 35 20 00 00       	call   38d3 <exit>
-    189e:	66 90                	xchg   %ax,%ax
-      link("C0", file);
-    18a0:	83 ec 08             	sub    $0x8,%esp
-  for(i = 0; i < 40; i++){
-    18a3:	83 c6 01             	add    $0x1,%esi
-      link("C0", file);
-    18a6:	53                   	push   %ebx
-    18a7:	68 91 43 00 00       	push   $0x4391
-    18ac:	e8 82 20 00 00       	call   3933 <link>
-    18b1:	83 c4 10             	add    $0x10,%esp
-      wait();
-    18b4:	e8 22 20 00 00       	call   38db <wait>
-  for(i = 0; i < 40; i++){
-    18b9:	83 fe 28             	cmp    $0x28,%esi
-    18bc:	0f 85 81 ff ff ff    	jne    1843 <concreate+0x73>
-  memset(fa, 0, sizeof(fa));
-    18c2:	83 ec 04             	sub    $0x4,%esp
-    18c5:	8d 45 c0             	lea    -0x40(%ebp),%eax
-    18c8:	6a 28                	push   $0x28
-    18ca:	6a 00                	push   $0x0
-    18cc:	50                   	push   %eax
-    18cd:	e8 7e 1e 00 00       	call   3750 <memset>
-  fd = open(".", 0);
-    18d2:	5e                   	pop    %esi
-    18d3:	5f                   	pop    %edi
-    18d4:	6a 00                	push   $0x0
-    18d6:	68 9e 45 00 00       	push   $0x459e
-    18db:	8d 7d b0             	lea    -0x50(%ebp),%edi
-    18de:	e8 30 20 00 00       	call   3913 <open>
-  while(read(fd, &de, sizeof(de)) > 0){
-    18e3:	83 c4 10             	add    $0x10,%esp
-  n = 0;
-    18e6:	c7 45 a4 00 00 00 00 	movl   $0x0,-0x5c(%ebp)
-  fd = open(".", 0);
-    18ed:	89 c6                	mov    %eax,%esi
-  while(read(fd, &de, sizeof(de)) > 0){
-    18ef:	90                   	nop
-    18f0:	83 ec 04             	sub    $0x4,%esp
-    18f3:	6a 10                	push   $0x10
-    18f5:	57                   	push   %edi
-    18f6:	56                   	push   %esi
-    18f7:	e8 ef 1f 00 00       	call   38eb <read>
-    18fc:	83 c4 10             	add    $0x10,%esp
-    18ff:	85 c0                	test   %eax,%eax
-    1901:	7e 5d                	jle    1960 <concreate+0x190>
-    if(de.inum == 0)
-    1903:	66 83 7d b0 00       	cmpw   $0x0,-0x50(%ebp)
-    1908:	74 e6                	je     18f0 <concreate+0x120>
-    if(de.name[0] == 'C' && de.name[2] == '\0'){
-    190a:	80 7d b2 43          	cmpb   $0x43,-0x4e(%ebp)
-    190e:	75 e0                	jne    18f0 <concreate+0x120>
-    1910:	80 7d b4 00          	cmpb   $0x0,-0x4c(%ebp)
-    1914:	75 da                	jne    18f0 <concreate+0x120>
-      i = de.name[1] - '0';
-    1916:	0f be 45 b3          	movsbl -0x4d(%ebp),%eax
-    191a:	83 e8 30             	sub    $0x30,%eax
-      if(i < 0 || i >= sizeof(fa)){
-    191d:	83 f8 27             	cmp    $0x27,%eax
-    1920:	0f 87 5e 01 00 00    	ja     1a84 <concreate+0x2b4>
-      if(fa[i]){
-    1926:	80 7c 05 c0 00       	cmpb   $0x0,-0x40(%ebp,%eax,1)
-    192b:	0f 85 7e 01 00 00    	jne    1aaf <concreate+0x2df>
-      n++;
-    1931:	83 45 a4 01          	addl   $0x1,-0x5c(%ebp)
-      fa[i] = 1;
-    1935:	c6 44 05 c0 01       	movb   $0x1,-0x40(%ebp,%eax,1)
-      n++;
-    193a:	eb b4                	jmp    18f0 <concreate+0x120>
-    193c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-      link("C0", file);
-    1940:	83 ec 08             	sub    $0x8,%esp
-    1943:	53                   	push   %ebx
-    1944:	68 91 43 00 00       	push   $0x4391
-    1949:	e8 e5 1f 00 00       	call   3933 <link>
-    194e:	83 c4 10             	add    $0x10,%esp
-      exit();
-    1951:	e8 7d 1f 00 00       	call   38d3 <exit>
-    1956:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    195d:	00 
-    195e:	66 90                	xchg   %ax,%ax
-  close(fd);
-    1960:	83 ec 0c             	sub    $0xc,%esp
-    1963:	56                   	push   %esi
-    1964:	e8 92 1f 00 00       	call   38fb <close>
-  if(n != 40){
-    1969:	83 c4 10             	add    $0x10,%esp
-    196c:	83 7d a4 28          	cmpl   $0x28,-0x5c(%ebp)
-    1970:	0f 85 26 01 00 00    	jne    1a9c <concreate+0x2cc>
-  for(i = 0; i < 40; i++){
-    1976:	31 f6                	xor    %esi,%esi
-    1978:	eb 48                	jmp    19c2 <concreate+0x1f2>
-    197a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-       ((i % 3) == 1 && pid != 0)){
-    1980:	83 f8 01             	cmp    $0x1,%eax
-    1983:	75 04                	jne    1989 <concreate+0x1b9>
-    1985:	85 ff                	test   %edi,%edi
-    1987:	75 68                	jne    19f1 <concreate+0x221>
-      unlink(file);
-    1989:	83 ec 0c             	sub    $0xc,%esp
-    198c:	53                   	push   %ebx
-    198d:	e8 91 1f 00 00       	call   3923 <unlink>
-      unlink(file);
-    1992:	89 1c 24             	mov    %ebx,(%esp)
-    1995:	e8 89 1f 00 00       	call   3923 <unlink>
-      unlink(file);
-    199a:	89 1c 24             	mov    %ebx,(%esp)
-    199d:	e8 81 1f 00 00       	call   3923 <unlink>
-      unlink(file);
-    19a2:	89 1c 24             	mov    %ebx,(%esp)
-    19a5:	e8 79 1f 00 00       	call   3923 <unlink>
-    19aa:	83 c4 10             	add    $0x10,%esp
-    if(pid == 0)
-    19ad:	85 ff                	test   %edi,%edi
-    19af:	74 a0                	je     1951 <concreate+0x181>
-      wait();
-    19b1:	e8 25 1f 00 00       	call   38db <wait>
-  for(i = 0; i < 40; i++){
-    19b6:	83 c6 01             	add    $0x1,%esi
-    19b9:	83 fe 28             	cmp    $0x28,%esi
-    19bc:	0f 84 86 00 00 00    	je     1a48 <concreate+0x278>
-    file[1] = '0' + i;
-    19c2:	8d 46 30             	lea    0x30(%esi),%eax
-    19c5:	88 45 ae             	mov    %al,-0x52(%ebp)
-    pid = fork();
-    19c8:	e8 fe 1e 00 00       	call   38cb <fork>
-    19cd:	89 c7                	mov    %eax,%edi
-    if(pid < 0){
-    19cf:	85 c0                	test   %eax,%eax
-    19d1:	0f 88 88 00 00 00    	js     1a5f <concreate+0x28f>
-    if(((i % 3) == 0 && pid == 0) ||
-    19d7:	b8 ab aa aa aa       	mov    $0xaaaaaaab,%eax
-    19dc:	f7 e6                	mul    %esi
-    19de:	89 d0                	mov    %edx,%eax
-    19e0:	83 e2 fe             	and    $0xfffffffe,%edx
-    19e3:	d1 e8                	shr    $1,%eax
-    19e5:	01 c2                	add    %eax,%edx
-    19e7:	89 f0                	mov    %esi,%eax
-    19e9:	29 d0                	sub    %edx,%eax
-    19eb:	89 c1                	mov    %eax,%ecx
-    19ed:	09 f9                	or     %edi,%ecx
-    19ef:	75 8f                	jne    1980 <concreate+0x1b0>
-      close(open(file, 0));
-    19f1:	83 ec 08             	sub    $0x8,%esp
-    19f4:	6a 00                	push   $0x0
-    19f6:	53                   	push   %ebx
-    19f7:	e8 17 1f 00 00       	call   3913 <open>
-    19fc:	89 04 24             	mov    %eax,(%esp)
-    19ff:	e8 f7 1e 00 00       	call   38fb <close>
-      close(open(file, 0));
-    1a04:	58                   	pop    %eax
-    1a05:	5a                   	pop    %edx
-    1a06:	6a 00                	push   $0x0
-    1a08:	53                   	push   %ebx
-    1a09:	e8 05 1f 00 00       	call   3913 <open>
-    1a0e:	89 04 24             	mov    %eax,(%esp)
-    1a11:	e8 e5 1e 00 00       	call   38fb <close>
-      close(open(file, 0));
-    1a16:	59                   	pop    %ecx
-    1a17:	58                   	pop    %eax
-    1a18:	6a 00                	push   $0x0
-    1a1a:	53                   	push   %ebx
-    1a1b:	e8 f3 1e 00 00       	call   3913 <open>
-    1a20:	89 04 24             	mov    %eax,(%esp)
-    1a23:	e8 d3 1e 00 00       	call   38fb <close>
-      close(open(file, 0));
-    1a28:	58                   	pop    %eax
-    1a29:	5a                   	pop    %edx
-    1a2a:	6a 00                	push   $0x0
-    1a2c:	53                   	push   %ebx
-    1a2d:	e8 e1 1e 00 00       	call   3913 <open>
-    1a32:	89 04 24             	mov    %eax,(%esp)
-    1a35:	e8 c1 1e 00 00       	call   38fb <close>
-    1a3a:	83 c4 10             	add    $0x10,%esp
-    1a3d:	e9 6b ff ff ff       	jmp    19ad <concreate+0x1dd>
-    1a42:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  printf(1, "concreate ok\n");
-    1a48:	83 ec 08             	sub    $0x8,%esp
-    1a4b:	68 e6 43 00 00       	push   $0x43e6
-    1a50:	6a 01                	push   $0x1
-    1a52:	e8 c9 1f 00 00       	call   3a20 <printf>
-}
-    1a57:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1a5a:	5b                   	pop    %ebx
-    1a5b:	5e                   	pop    %esi
-    1a5c:	5f                   	pop    %edi
-    1a5d:	5d                   	pop    %ebp
-    1a5e:	c3                   	ret
-      printf(1, "fork failed\n");
-    1a5f:	83 ec 08             	sub    $0x8,%esp
-    1a62:	68 69 4c 00 00       	push   $0x4c69
-    1a67:	6a 01                	push   $0x1
-    1a69:	e8 b2 1f 00 00       	call   3a20 <printf>
-      exit();
-    1a6e:	e8 60 1e 00 00       	call   38d3 <exit>
-      close(fd);
-    1a73:	83 ec 0c             	sub    $0xc,%esp
-    1a76:	50                   	push   %eax
-    1a77:	e8 7f 1e 00 00       	call   38fb <close>
-    1a7c:	83 c4 10             	add    $0x10,%esp
-    1a7f:	e9 cd fe ff ff       	jmp    1951 <concreate+0x181>
-        printf(1, "concreate weird file %s\n", de.name);
-    1a84:	83 ec 04             	sub    $0x4,%esp
-    1a87:	8d 45 b2             	lea    -0x4e(%ebp),%eax
-    1a8a:	50                   	push   %eax
-    1a8b:	68 b0 43 00 00       	push   $0x43b0
-    1a90:	6a 01                	push   $0x1
-    1a92:	e8 89 1f 00 00       	call   3a20 <printf>
-        exit();
-    1a97:	e8 37 1e 00 00       	call   38d3 <exit>
-    printf(1, "concreate not enough files in directory listing\n");
-    1a9c:	51                   	push   %ecx
-    1a9d:	51                   	push   %ecx
-    1a9e:	68 38 4f 00 00       	push   $0x4f38
-    1aa3:	6a 01                	push   $0x1
-    1aa5:	e8 76 1f 00 00       	call   3a20 <printf>
-    exit();
-    1aaa:	e8 24 1e 00 00       	call   38d3 <exit>
-        printf(1, "concreate duplicate file %s\n", de.name);
-    1aaf:	83 ec 04             	sub    $0x4,%esp
-    1ab2:	8d 45 b2             	lea    -0x4e(%ebp),%eax
-    1ab5:	50                   	push   %eax
-    1ab6:	68 c9 43 00 00       	push   $0x43c9
-    1abb:	6a 01                	push   $0x1
-    1abd:	e8 5e 1f 00 00       	call   3a20 <printf>
-        exit();
-    1ac2:	e8 0c 1e 00 00       	call   38d3 <exit>
-    1ac7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    1ace:	00 
-    1acf:	90                   	nop
-
-00001ad0 <linkunlink>:
-{
-    1ad0:	55                   	push   %ebp
-    1ad1:	89 e5                	mov    %esp,%ebp
-    1ad3:	57                   	push   %edi
-    1ad4:	56                   	push   %esi
-    1ad5:	53                   	push   %ebx
-    1ad6:	83 ec 24             	sub    $0x24,%esp
-  printf(1, "linkunlink test\n");
-    1ad9:	68 f4 43 00 00       	push   $0x43f4
-    1ade:	6a 01                	push   $0x1
-    1ae0:	e8 3b 1f 00 00       	call   3a20 <printf>
-  unlink("x");
-    1ae5:	c7 04 24 81 46 00 00 	movl   $0x4681,(%esp)
-    1aec:	e8 32 1e 00 00       	call   3923 <unlink>
-  pid = fork();
-    1af1:	e8 d5 1d 00 00       	call   38cb <fork>
-  if(pid < 0){
-    1af6:	83 c4 10             	add    $0x10,%esp
-  pid = fork();
-    1af9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  if(pid < 0){
-    1afc:	85 c0                	test   %eax,%eax
-    1afe:	0f 88 b6 00 00 00    	js     1bba <linkunlink+0xea>
-  unsigned int x = (pid ? 1 : 97);
-    1b04:	83 7d e4 01          	cmpl   $0x1,-0x1c(%ebp)
-    1b08:	bb 64 00 00 00       	mov    $0x64,%ebx
-    if((x % 3) == 0){
-    1b0d:	be ab aa aa aa       	mov    $0xaaaaaaab,%esi
-  unsigned int x = (pid ? 1 : 97);
-    1b12:	19 ff                	sbb    %edi,%edi
-    1b14:	83 e7 60             	and    $0x60,%edi
-    1b17:	83 c7 01             	add    $0x1,%edi
-    1b1a:	eb 1e                	jmp    1b3a <linkunlink+0x6a>
-    1b1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    } else if((x % 3) == 1){
-    1b20:	83 f8 01             	cmp    $0x1,%eax
-    1b23:	74 7b                	je     1ba0 <linkunlink+0xd0>
-      unlink("x");
-    1b25:	83 ec 0c             	sub    $0xc,%esp
-    1b28:	68 81 46 00 00       	push   $0x4681
-    1b2d:	e8 f1 1d 00 00       	call   3923 <unlink>
-    1b32:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < 100; i++){
-    1b35:	83 eb 01             	sub    $0x1,%ebx
-    1b38:	74 41                	je     1b7b <linkunlink+0xab>
-    x = x * 1103515245 + 12345;
-    1b3a:	69 cf 6d 4e c6 41    	imul   $0x41c64e6d,%edi,%ecx
-    1b40:	8d b9 39 30 00 00    	lea    0x3039(%ecx),%edi
-    if((x % 3) == 0){
-    1b46:	89 f8                	mov    %edi,%eax
-    1b48:	f7 e6                	mul    %esi
-    1b4a:	89 d0                	mov    %edx,%eax
-    1b4c:	83 e2 fe             	and    $0xfffffffe,%edx
-    1b4f:	d1 e8                	shr    $1,%eax
-    1b51:	01 c2                	add    %eax,%edx
-    1b53:	89 f8                	mov    %edi,%eax
-    1b55:	29 d0                	sub    %edx,%eax
-    1b57:	75 c7                	jne    1b20 <linkunlink+0x50>
-      close(open("x", O_RDWR | O_CREATE));
-    1b59:	83 ec 08             	sub    $0x8,%esp
-    1b5c:	68 02 02 00 00       	push   $0x202
-    1b61:	68 81 46 00 00       	push   $0x4681
-    1b66:	e8 a8 1d 00 00       	call   3913 <open>
-    1b6b:	89 04 24             	mov    %eax,(%esp)
-    1b6e:	e8 88 1d 00 00       	call   38fb <close>
-    1b73:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < 100; i++){
-    1b76:	83 eb 01             	sub    $0x1,%ebx
-    1b79:	75 bf                	jne    1b3a <linkunlink+0x6a>
-  if(pid)
-    1b7b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
-    1b7e:	85 c0                	test   %eax,%eax
-    1b80:	74 4b                	je     1bcd <linkunlink+0xfd>
-    wait();
-    1b82:	e8 54 1d 00 00       	call   38db <wait>
-  printf(1, "linkunlink ok\n");
-    1b87:	83 ec 08             	sub    $0x8,%esp
-    1b8a:	68 09 44 00 00       	push   $0x4409
-    1b8f:	6a 01                	push   $0x1
-    1b91:	e8 8a 1e 00 00       	call   3a20 <printf>
-}
-    1b96:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1b99:	5b                   	pop    %ebx
-    1b9a:	5e                   	pop    %esi
-    1b9b:	5f                   	pop    %edi
-    1b9c:	5d                   	pop    %ebp
-    1b9d:	c3                   	ret
-    1b9e:	66 90                	xchg   %ax,%ax
-      link("cat", "x");
-    1ba0:	83 ec 08             	sub    $0x8,%esp
-    1ba3:	68 81 46 00 00       	push   $0x4681
-    1ba8:	68 05 44 00 00       	push   $0x4405
-    1bad:	e8 81 1d 00 00       	call   3933 <link>
-    1bb2:	83 c4 10             	add    $0x10,%esp
-    1bb5:	e9 7b ff ff ff       	jmp    1b35 <linkunlink+0x65>
-    printf(1, "fork failed\n");
-    1bba:	52                   	push   %edx
-    1bbb:	52                   	push   %edx
-    1bbc:	68 69 4c 00 00       	push   $0x4c69
-    1bc1:	6a 01                	push   $0x1
-    1bc3:	e8 58 1e 00 00       	call   3a20 <printf>
-    exit();
-    1bc8:	e8 06 1d 00 00       	call   38d3 <exit>
-    exit();
-    1bcd:	e8 01 1d 00 00       	call   38d3 <exit>
-    1bd2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    1bd9:	00 
-    1bda:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00001be0 <bigdir>:
-{
-    1be0:	55                   	push   %ebp
-    1be1:	89 e5                	mov    %esp,%ebp
-    1be3:	57                   	push   %edi
-    1be4:	56                   	push   %esi
-    1be5:	53                   	push   %ebx
-    1be6:	83 ec 24             	sub    $0x24,%esp
-  printf(1, "bigdir test\n");
-    1be9:	68 18 44 00 00       	push   $0x4418
-    1bee:	6a 01                	push   $0x1
-    1bf0:	e8 2b 1e 00 00       	call   3a20 <printf>
-  unlink("bd");
-    1bf5:	c7 04 24 25 44 00 00 	movl   $0x4425,(%esp)
-    1bfc:	e8 22 1d 00 00       	call   3923 <unlink>
-  fd = open("bd", O_CREATE);
-    1c01:	5a                   	pop    %edx
-    1c02:	59                   	pop    %ecx
-    1c03:	68 00 02 00 00       	push   $0x200
-    1c08:	68 25 44 00 00       	push   $0x4425
-    1c0d:	e8 01 1d 00 00       	call   3913 <open>
-  if(fd < 0){
-    1c12:	83 c4 10             	add    $0x10,%esp
-    1c15:	85 c0                	test   %eax,%eax
-    1c17:	0f 88 de 00 00 00    	js     1cfb <bigdir+0x11b>
-  close(fd);
-    1c1d:	83 ec 0c             	sub    $0xc,%esp
-  for(i = 0; i < 500; i++){
-    1c20:	31 f6                	xor    %esi,%esi
-    1c22:	8d 7d de             	lea    -0x22(%ebp),%edi
-  close(fd);
-    1c25:	50                   	push   %eax
-    1c26:	e8 d0 1c 00 00       	call   38fb <close>
-    1c2b:	83 c4 10             	add    $0x10,%esp
-    1c2e:	66 90                	xchg   %ax,%ax
-    name[1] = '0' + (i / 64);
-    1c30:	89 f0                	mov    %esi,%eax
-    if(link("bd", name) != 0){
-    1c32:	83 ec 08             	sub    $0x8,%esp
-    name[0] = 'x';
-    1c35:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
-    name[1] = '0' + (i / 64);
-    1c39:	c1 f8 06             	sar    $0x6,%eax
-    name[3] = '\0';
-    1c3c:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
-    name[1] = '0' + (i / 64);
-    1c40:	83 c0 30             	add    $0x30,%eax
-    1c43:	88 45 df             	mov    %al,-0x21(%ebp)
-    name[2] = '0' + (i % 64);
-    1c46:	89 f0                	mov    %esi,%eax
-    1c48:	83 e0 3f             	and    $0x3f,%eax
-    1c4b:	83 c0 30             	add    $0x30,%eax
-    1c4e:	88 45 e0             	mov    %al,-0x20(%ebp)
-    if(link("bd", name) != 0){
-    1c51:	57                   	push   %edi
-    1c52:	68 25 44 00 00       	push   $0x4425
-    1c57:	e8 d7 1c 00 00       	call   3933 <link>
-    1c5c:	83 c4 10             	add    $0x10,%esp
-    1c5f:	89 c3                	mov    %eax,%ebx
-    1c61:	85 c0                	test   %eax,%eax
-    1c63:	75 6e                	jne    1cd3 <bigdir+0xf3>
-  for(i = 0; i < 500; i++){
-    1c65:	83 c6 01             	add    $0x1,%esi
-    1c68:	81 fe f4 01 00 00    	cmp    $0x1f4,%esi
-    1c6e:	75 c0                	jne    1c30 <bigdir+0x50>
-  unlink("bd");
-    1c70:	83 ec 0c             	sub    $0xc,%esp
-    1c73:	68 25 44 00 00       	push   $0x4425
-    1c78:	e8 a6 1c 00 00       	call   3923 <unlink>
-    1c7d:	83 c4 10             	add    $0x10,%esp
-    name[1] = '0' + (i / 64);
-    1c80:	89 d8                	mov    %ebx,%eax
-    if(unlink(name) != 0){
-    1c82:	83 ec 0c             	sub    $0xc,%esp
-    name[0] = 'x';
-    1c85:	c6 45 de 78          	movb   $0x78,-0x22(%ebp)
-    name[1] = '0' + (i / 64);
-    1c89:	c1 f8 06             	sar    $0x6,%eax
-    name[3] = '\0';
-    1c8c:	c6 45 e1 00          	movb   $0x0,-0x1f(%ebp)
-    name[1] = '0' + (i / 64);
-    1c90:	83 c0 30             	add    $0x30,%eax
-    1c93:	88 45 df             	mov    %al,-0x21(%ebp)
-    name[2] = '0' + (i % 64);
-    1c96:	89 d8                	mov    %ebx,%eax
-    1c98:	83 e0 3f             	and    $0x3f,%eax
-    1c9b:	83 c0 30             	add    $0x30,%eax
-    1c9e:	88 45 e0             	mov    %al,-0x20(%ebp)
-    if(unlink(name) != 0){
-    1ca1:	57                   	push   %edi
-    1ca2:	e8 7c 1c 00 00       	call   3923 <unlink>
-    1ca7:	83 c4 10             	add    $0x10,%esp
-    1caa:	85 c0                	test   %eax,%eax
-    1cac:	75 39                	jne    1ce7 <bigdir+0x107>
-  for(i = 0; i < 500; i++){
-    1cae:	83 c3 01             	add    $0x1,%ebx
-    1cb1:	81 fb f4 01 00 00    	cmp    $0x1f4,%ebx
-    1cb7:	75 c7                	jne    1c80 <bigdir+0xa0>
-  printf(1, "bigdir ok\n");
-    1cb9:	83 ec 08             	sub    $0x8,%esp
-    1cbc:	68 67 44 00 00       	push   $0x4467
-    1cc1:	6a 01                	push   $0x1
-    1cc3:	e8 58 1d 00 00       	call   3a20 <printf>
-    1cc8:	83 c4 10             	add    $0x10,%esp
-}
-    1ccb:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    1cce:	5b                   	pop    %ebx
-    1ccf:	5e                   	pop    %esi
-    1cd0:	5f                   	pop    %edi
-    1cd1:	5d                   	pop    %ebp
-    1cd2:	c3                   	ret
-      printf(1, "bigdir link failed\n");
-    1cd3:	83 ec 08             	sub    $0x8,%esp
-    1cd6:	68 3e 44 00 00       	push   $0x443e
-    1cdb:	6a 01                	push   $0x1
-    1cdd:	e8 3e 1d 00 00       	call   3a20 <printf>
-      exit();
-    1ce2:	e8 ec 1b 00 00       	call   38d3 <exit>
-      printf(1, "bigdir unlink failed");
-    1ce7:	83 ec 08             	sub    $0x8,%esp
-    1cea:	68 52 44 00 00       	push   $0x4452
-    1cef:	6a 01                	push   $0x1
-    1cf1:	e8 2a 1d 00 00       	call   3a20 <printf>
-      exit();
-    1cf6:	e8 d8 1b 00 00       	call   38d3 <exit>
-    printf(1, "bigdir create failed\n");
-    1cfb:	50                   	push   %eax
-    1cfc:	50                   	push   %eax
-    1cfd:	68 28 44 00 00       	push   $0x4428
-    1d02:	6a 01                	push   $0x1
-    1d04:	e8 17 1d 00 00       	call   3a20 <printf>
-    exit();
-    1d09:	e8 c5 1b 00 00       	call   38d3 <exit>
-    1d0e:	66 90                	xchg   %ax,%ax
-
-00001d10 <subdir>:
-{
-    1d10:	55                   	push   %ebp
-    1d11:	89 e5                	mov    %esp,%ebp
-    1d13:	53                   	push   %ebx
-    1d14:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "subdir test\n");
-    1d17:	68 72 44 00 00       	push   $0x4472
-    1d1c:	6a 01                	push   $0x1
-    1d1e:	e8 fd 1c 00 00       	call   3a20 <printf>
-  unlink("ff");
-    1d23:	c7 04 24 fb 44 00 00 	movl   $0x44fb,(%esp)
-    1d2a:	e8 f4 1b 00 00       	call   3923 <unlink>
-  if(mkdir("dd") != 0){
-    1d2f:	c7 04 24 98 45 00 00 	movl   $0x4598,(%esp)
-    1d36:	e8 00 1c 00 00       	call   393b <mkdir>
-    1d3b:	83 c4 10             	add    $0x10,%esp
-    1d3e:	85 c0                	test   %eax,%eax
-    1d40:	0f 85 b3 05 00 00    	jne    22f9 <subdir+0x5e9>
-  fd = open("dd/ff", O_CREATE | O_RDWR);
-    1d46:	83 ec 08             	sub    $0x8,%esp
-    1d49:	68 02 02 00 00       	push   $0x202
-    1d4e:	68 d1 44 00 00       	push   $0x44d1
-    1d53:	e8 bb 1b 00 00       	call   3913 <open>
-  if(fd < 0){
-    1d58:	83 c4 10             	add    $0x10,%esp
-  fd = open("dd/ff", O_CREATE | O_RDWR);
-    1d5b:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1d5d:	85 c0                	test   %eax,%eax
-    1d5f:	0f 88 81 05 00 00    	js     22e6 <subdir+0x5d6>
-  write(fd, "ff", 2);
-    1d65:	83 ec 04             	sub    $0x4,%esp
-    1d68:	6a 02                	push   $0x2
-    1d6a:	68 fb 44 00 00       	push   $0x44fb
-    1d6f:	50                   	push   %eax
-    1d70:	e8 7e 1b 00 00       	call   38f3 <write>
-  close(fd);
-    1d75:	89 1c 24             	mov    %ebx,(%esp)
-    1d78:	e8 7e 1b 00 00       	call   38fb <close>
-  if(unlink("dd") >= 0){
-    1d7d:	c7 04 24 98 45 00 00 	movl   $0x4598,(%esp)
-    1d84:	e8 9a 1b 00 00       	call   3923 <unlink>
-    1d89:	83 c4 10             	add    $0x10,%esp
-    1d8c:	85 c0                	test   %eax,%eax
-    1d8e:	0f 89 3f 05 00 00    	jns    22d3 <subdir+0x5c3>
-  if(mkdir("/dd/dd") != 0){
-    1d94:	83 ec 0c             	sub    $0xc,%esp
-    1d97:	68 ac 44 00 00       	push   $0x44ac
-    1d9c:	e8 9a 1b 00 00       	call   393b <mkdir>
-    1da1:	83 c4 10             	add    $0x10,%esp
-    1da4:	85 c0                	test   %eax,%eax
-    1da6:	0f 85 14 05 00 00    	jne    22c0 <subdir+0x5b0>
-  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-    1dac:	83 ec 08             	sub    $0x8,%esp
-    1daf:	68 02 02 00 00       	push   $0x202
-    1db4:	68 ce 44 00 00       	push   $0x44ce
-    1db9:	e8 55 1b 00 00       	call   3913 <open>
-  if(fd < 0){
-    1dbe:	83 c4 10             	add    $0x10,%esp
-  fd = open("dd/dd/ff", O_CREATE | O_RDWR);
-    1dc1:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1dc3:	85 c0                	test   %eax,%eax
-    1dc5:	0f 88 24 04 00 00    	js     21ef <subdir+0x4df>
-  write(fd, "FF", 2);
-    1dcb:	83 ec 04             	sub    $0x4,%esp
-    1dce:	6a 02                	push   $0x2
-    1dd0:	68 ef 44 00 00       	push   $0x44ef
-    1dd5:	50                   	push   %eax
-    1dd6:	e8 18 1b 00 00       	call   38f3 <write>
-  close(fd);
-    1ddb:	89 1c 24             	mov    %ebx,(%esp)
-    1dde:	e8 18 1b 00 00       	call   38fb <close>
-  fd = open("dd/dd/../ff", 0);
-    1de3:	58                   	pop    %eax
-    1de4:	5a                   	pop    %edx
-    1de5:	6a 00                	push   $0x0
-    1de7:	68 f2 44 00 00       	push   $0x44f2
-    1dec:	e8 22 1b 00 00       	call   3913 <open>
-  if(fd < 0){
-    1df1:	83 c4 10             	add    $0x10,%esp
-  fd = open("dd/dd/../ff", 0);
-    1df4:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1df6:	85 c0                	test   %eax,%eax
-    1df8:	0f 88 de 03 00 00    	js     21dc <subdir+0x4cc>
-  cc = read(fd, buf, sizeof(buf));
-    1dfe:	83 ec 04             	sub    $0x4,%esp
-    1e01:	68 00 20 00 00       	push   $0x2000
-    1e06:	68 40 85 00 00       	push   $0x8540
-    1e0b:	50                   	push   %eax
-    1e0c:	e8 da 1a 00 00       	call   38eb <read>
-  if(cc != 2 || buf[0] != 'f'){
-    1e11:	83 c4 10             	add    $0x10,%esp
-    1e14:	83 f8 02             	cmp    $0x2,%eax
-    1e17:	0f 85 3a 03 00 00    	jne    2157 <subdir+0x447>
-    1e1d:	80 3d 40 85 00 00 66 	cmpb   $0x66,0x8540
-    1e24:	0f 85 2d 03 00 00    	jne    2157 <subdir+0x447>
-  close(fd);
-    1e2a:	83 ec 0c             	sub    $0xc,%esp
-    1e2d:	53                   	push   %ebx
-    1e2e:	e8 c8 1a 00 00       	call   38fb <close>
-  if(link("dd/dd/ff", "dd/dd/ffff") != 0){
-    1e33:	59                   	pop    %ecx
-    1e34:	5b                   	pop    %ebx
-    1e35:	68 32 45 00 00       	push   $0x4532
-    1e3a:	68 ce 44 00 00       	push   $0x44ce
-    1e3f:	e8 ef 1a 00 00       	call   3933 <link>
-    1e44:	83 c4 10             	add    $0x10,%esp
-    1e47:	85 c0                	test   %eax,%eax
-    1e49:	0f 85 c6 03 00 00    	jne    2215 <subdir+0x505>
-  if(unlink("dd/dd/ff") != 0){
-    1e4f:	83 ec 0c             	sub    $0xc,%esp
-    1e52:	68 ce 44 00 00       	push   $0x44ce
-    1e57:	e8 c7 1a 00 00       	call   3923 <unlink>
-    1e5c:	83 c4 10             	add    $0x10,%esp
-    1e5f:	85 c0                	test   %eax,%eax
-    1e61:	0f 85 16 03 00 00    	jne    217d <subdir+0x46d>
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    1e67:	83 ec 08             	sub    $0x8,%esp
-    1e6a:	6a 00                	push   $0x0
-    1e6c:	68 ce 44 00 00       	push   $0x44ce
-    1e71:	e8 9d 1a 00 00       	call   3913 <open>
-    1e76:	83 c4 10             	add    $0x10,%esp
-    1e79:	85 c0                	test   %eax,%eax
-    1e7b:	0f 89 2c 04 00 00    	jns    22ad <subdir+0x59d>
-  if(chdir("dd") != 0){
-    1e81:	83 ec 0c             	sub    $0xc,%esp
-    1e84:	68 98 45 00 00       	push   $0x4598
-    1e89:	e8 b5 1a 00 00       	call   3943 <chdir>
-    1e8e:	83 c4 10             	add    $0x10,%esp
-    1e91:	85 c0                	test   %eax,%eax
-    1e93:	0f 85 01 04 00 00    	jne    229a <subdir+0x58a>
-  if(chdir("dd/../../dd") != 0){
-    1e99:	83 ec 0c             	sub    $0xc,%esp
-    1e9c:	68 66 45 00 00       	push   $0x4566
-    1ea1:	e8 9d 1a 00 00       	call   3943 <chdir>
-    1ea6:	83 c4 10             	add    $0x10,%esp
-    1ea9:	85 c0                	test   %eax,%eax
-    1eab:	0f 85 b9 02 00 00    	jne    216a <subdir+0x45a>
-  if(chdir("dd/../../../dd") != 0){
-    1eb1:	83 ec 0c             	sub    $0xc,%esp
-    1eb4:	68 8c 45 00 00       	push   $0x458c
-    1eb9:	e8 85 1a 00 00       	call   3943 <chdir>
-    1ebe:	83 c4 10             	add    $0x10,%esp
-    1ec1:	85 c0                	test   %eax,%eax
-    1ec3:	0f 85 a1 02 00 00    	jne    216a <subdir+0x45a>
-  if(chdir("./..") != 0){
-    1ec9:	83 ec 0c             	sub    $0xc,%esp
-    1ecc:	68 9b 45 00 00       	push   $0x459b
-    1ed1:	e8 6d 1a 00 00       	call   3943 <chdir>
-    1ed6:	83 c4 10             	add    $0x10,%esp
-    1ed9:	85 c0                	test   %eax,%eax
-    1edb:	0f 85 21 03 00 00    	jne    2202 <subdir+0x4f2>
-  fd = open("dd/dd/ffff", 0);
-    1ee1:	83 ec 08             	sub    $0x8,%esp
-    1ee4:	6a 00                	push   $0x0
-    1ee6:	68 32 45 00 00       	push   $0x4532
-    1eeb:	e8 23 1a 00 00       	call   3913 <open>
-  if(fd < 0){
-    1ef0:	83 c4 10             	add    $0x10,%esp
-  fd = open("dd/dd/ffff", 0);
-    1ef3:	89 c3                	mov    %eax,%ebx
-  if(fd < 0){
-    1ef5:	85 c0                	test   %eax,%eax
-    1ef7:	0f 88 e0 04 00 00    	js     23dd <subdir+0x6cd>
-  if(read(fd, buf, sizeof(buf)) != 2){
-    1efd:	83 ec 04             	sub    $0x4,%esp
-    1f00:	68 00 20 00 00       	push   $0x2000
-    1f05:	68 40 85 00 00       	push   $0x8540
-    1f0a:	50                   	push   %eax
-    1f0b:	e8 db 19 00 00       	call   38eb <read>
-    1f10:	83 c4 10             	add    $0x10,%esp
-    1f13:	83 f8 02             	cmp    $0x2,%eax
-    1f16:	0f 85 ae 04 00 00    	jne    23ca <subdir+0x6ba>
-  close(fd);
-    1f1c:	83 ec 0c             	sub    $0xc,%esp
-    1f1f:	53                   	push   %ebx
-    1f20:	e8 d6 19 00 00       	call   38fb <close>
-  if(open("dd/dd/ff", O_RDONLY) >= 0){
-    1f25:	58                   	pop    %eax
-    1f26:	5a                   	pop    %edx
-    1f27:	6a 00                	push   $0x0
-    1f29:	68 ce 44 00 00       	push   $0x44ce
-    1f2e:	e8 e0 19 00 00       	call   3913 <open>
-    1f33:	83 c4 10             	add    $0x10,%esp
-    1f36:	85 c0                	test   %eax,%eax
-    1f38:	0f 89 65 02 00 00    	jns    21a3 <subdir+0x493>
-  if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
-    1f3e:	83 ec 08             	sub    $0x8,%esp
-    1f41:	68 02 02 00 00       	push   $0x202
-    1f46:	68 e6 45 00 00       	push   $0x45e6
-    1f4b:	e8 c3 19 00 00       	call   3913 <open>
-    1f50:	83 c4 10             	add    $0x10,%esp
-    1f53:	85 c0                	test   %eax,%eax
-    1f55:	0f 89 35 02 00 00    	jns    2190 <subdir+0x480>
-  if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
-    1f5b:	83 ec 08             	sub    $0x8,%esp
-    1f5e:	68 02 02 00 00       	push   $0x202
-    1f63:	68 0b 46 00 00       	push   $0x460b
-    1f68:	e8 a6 19 00 00       	call   3913 <open>
-    1f6d:	83 c4 10             	add    $0x10,%esp
-    1f70:	85 c0                	test   %eax,%eax
-    1f72:	0f 89 0f 03 00 00    	jns    2287 <subdir+0x577>
-  if(open("dd", O_CREATE) >= 0){
-    1f78:	83 ec 08             	sub    $0x8,%esp
-    1f7b:	68 00 02 00 00       	push   $0x200
-    1f80:	68 98 45 00 00       	push   $0x4598
-    1f85:	e8 89 19 00 00       	call   3913 <open>
-    1f8a:	83 c4 10             	add    $0x10,%esp
-    1f8d:	85 c0                	test   %eax,%eax
-    1f8f:	0f 89 df 02 00 00    	jns    2274 <subdir+0x564>
-  if(open("dd", O_RDWR) >= 0){
-    1f95:	83 ec 08             	sub    $0x8,%esp
-    1f98:	6a 02                	push   $0x2
-    1f9a:	68 98 45 00 00       	push   $0x4598
-    1f9f:	e8 6f 19 00 00       	call   3913 <open>
-    1fa4:	83 c4 10             	add    $0x10,%esp
-    1fa7:	85 c0                	test   %eax,%eax
-    1fa9:	0f 89 b2 02 00 00    	jns    2261 <subdir+0x551>
-  if(open("dd", O_WRONLY) >= 0){
-    1faf:	83 ec 08             	sub    $0x8,%esp
-    1fb2:	6a 01                	push   $0x1
-    1fb4:	68 98 45 00 00       	push   $0x4598
-    1fb9:	e8 55 19 00 00       	call   3913 <open>
-    1fbe:	83 c4 10             	add    $0x10,%esp
-    1fc1:	85 c0                	test   %eax,%eax
-    1fc3:	0f 89 85 02 00 00    	jns    224e <subdir+0x53e>
-  if(link("dd/ff/ff", "dd/dd/xx") == 0){
-    1fc9:	83 ec 08             	sub    $0x8,%esp
-    1fcc:	68 7a 46 00 00       	push   $0x467a
-    1fd1:	68 e6 45 00 00       	push   $0x45e6
-    1fd6:	e8 58 19 00 00       	call   3933 <link>
-    1fdb:	83 c4 10             	add    $0x10,%esp
-    1fde:	85 c0                	test   %eax,%eax
-    1fe0:	0f 84 55 02 00 00    	je     223b <subdir+0x52b>
-  if(link("dd/xx/ff", "dd/dd/xx") == 0){
-    1fe6:	83 ec 08             	sub    $0x8,%esp
-    1fe9:	68 7a 46 00 00       	push   $0x467a
-    1fee:	68 0b 46 00 00       	push   $0x460b
-    1ff3:	e8 3b 19 00 00       	call   3933 <link>
-    1ff8:	83 c4 10             	add    $0x10,%esp
-    1ffb:	85 c0                	test   %eax,%eax
-    1ffd:	0f 84 25 02 00 00    	je     2228 <subdir+0x518>
-  if(link("dd/ff", "dd/dd/ffff") == 0){
-    2003:	83 ec 08             	sub    $0x8,%esp
-    2006:	68 32 45 00 00       	push   $0x4532
-    200b:	68 d1 44 00 00       	push   $0x44d1
-    2010:	e8 1e 19 00 00       	call   3933 <link>
-    2015:	83 c4 10             	add    $0x10,%esp
-    2018:	85 c0                	test   %eax,%eax
-    201a:	0f 84 a9 01 00 00    	je     21c9 <subdir+0x4b9>
-  if(mkdir("dd/ff/ff") == 0){
-    2020:	83 ec 0c             	sub    $0xc,%esp
-    2023:	68 e6 45 00 00       	push   $0x45e6
-    2028:	e8 0e 19 00 00       	call   393b <mkdir>
-    202d:	83 c4 10             	add    $0x10,%esp
-    2030:	85 c0                	test   %eax,%eax
-    2032:	0f 84 7e 01 00 00    	je     21b6 <subdir+0x4a6>
-  if(mkdir("dd/xx/ff") == 0){
-    2038:	83 ec 0c             	sub    $0xc,%esp
-    203b:	68 0b 46 00 00       	push   $0x460b
-    2040:	e8 f6 18 00 00       	call   393b <mkdir>
-    2045:	83 c4 10             	add    $0x10,%esp
-    2048:	85 c0                	test   %eax,%eax
-    204a:	0f 84 67 03 00 00    	je     23b7 <subdir+0x6a7>
-  if(mkdir("dd/dd/ffff") == 0){
-    2050:	83 ec 0c             	sub    $0xc,%esp
-    2053:	68 32 45 00 00       	push   $0x4532
-    2058:	e8 de 18 00 00       	call   393b <mkdir>
-    205d:	83 c4 10             	add    $0x10,%esp
-    2060:	85 c0                	test   %eax,%eax
-    2062:	0f 84 3c 03 00 00    	je     23a4 <subdir+0x694>
-  if(unlink("dd/xx/ff") == 0){
-    2068:	83 ec 0c             	sub    $0xc,%esp
-    206b:	68 0b 46 00 00       	push   $0x460b
-    2070:	e8 ae 18 00 00       	call   3923 <unlink>
-    2075:	83 c4 10             	add    $0x10,%esp
-    2078:	85 c0                	test   %eax,%eax
-    207a:	0f 84 11 03 00 00    	je     2391 <subdir+0x681>
-  if(unlink("dd/ff/ff") == 0){
-    2080:	83 ec 0c             	sub    $0xc,%esp
-    2083:	68 e6 45 00 00       	push   $0x45e6
-    2088:	e8 96 18 00 00       	call   3923 <unlink>
-    208d:	83 c4 10             	add    $0x10,%esp
-    2090:	85 c0                	test   %eax,%eax
-    2092:	0f 84 e6 02 00 00    	je     237e <subdir+0x66e>
-  if(chdir("dd/ff") == 0){
-    2098:	83 ec 0c             	sub    $0xc,%esp
-    209b:	68 d1 44 00 00       	push   $0x44d1
-    20a0:	e8 9e 18 00 00       	call   3943 <chdir>
-    20a5:	83 c4 10             	add    $0x10,%esp
-    20a8:	85 c0                	test   %eax,%eax
-    20aa:	0f 84 bb 02 00 00    	je     236b <subdir+0x65b>
-  if(chdir("dd/xx") == 0){
-    20b0:	83 ec 0c             	sub    $0xc,%esp
-    20b3:	68 7d 46 00 00       	push   $0x467d
-    20b8:	e8 86 18 00 00       	call   3943 <chdir>
-    20bd:	83 c4 10             	add    $0x10,%esp
-    20c0:	85 c0                	test   %eax,%eax
-    20c2:	0f 84 90 02 00 00    	je     2358 <subdir+0x648>
-  if(unlink("dd/dd/ffff") != 0){
-    20c8:	83 ec 0c             	sub    $0xc,%esp
-    20cb:	68 32 45 00 00       	push   $0x4532
-    20d0:	e8 4e 18 00 00       	call   3923 <unlink>
-    20d5:	83 c4 10             	add    $0x10,%esp
-    20d8:	85 c0                	test   %eax,%eax
-    20da:	0f 85 9d 00 00 00    	jne    217d <subdir+0x46d>
-  if(unlink("dd/ff") != 0){
-    20e0:	83 ec 0c             	sub    $0xc,%esp
-    20e3:	68 d1 44 00 00       	push   $0x44d1
-    20e8:	e8 36 18 00 00       	call   3923 <unlink>
-    20ed:	83 c4 10             	add    $0x10,%esp
-    20f0:	85 c0                	test   %eax,%eax
-    20f2:	0f 85 4d 02 00 00    	jne    2345 <subdir+0x635>
-  if(unlink("dd") == 0){
-    20f8:	83 ec 0c             	sub    $0xc,%esp
-    20fb:	68 98 45 00 00       	push   $0x4598
-    2100:	e8 1e 18 00 00       	call   3923 <unlink>
-    2105:	83 c4 10             	add    $0x10,%esp
-    2108:	85 c0                	test   %eax,%eax
-    210a:	0f 84 22 02 00 00    	je     2332 <subdir+0x622>
-  if(unlink("dd/dd") < 0){
-    2110:	83 ec 0c             	sub    $0xc,%esp
-    2113:	68 ad 44 00 00       	push   $0x44ad
-    2118:	e8 06 18 00 00       	call   3923 <unlink>
-    211d:	83 c4 10             	add    $0x10,%esp
-    2120:	85 c0                	test   %eax,%eax
-    2122:	0f 88 f7 01 00 00    	js     231f <subdir+0x60f>
-  if(unlink("dd") < 0){
-    2128:	83 ec 0c             	sub    $0xc,%esp
-    212b:	68 98 45 00 00       	push   $0x4598
-    2130:	e8 ee 17 00 00       	call   3923 <unlink>
-    2135:	83 c4 10             	add    $0x10,%esp
-    2138:	85 c0                	test   %eax,%eax
-    213a:	0f 88 cc 01 00 00    	js     230c <subdir+0x5fc>
-  printf(1, "subdir ok\n");
-    2140:	83 ec 08             	sub    $0x8,%esp
-    2143:	68 7a 47 00 00       	push   $0x477a
-    2148:	6a 01                	push   $0x1
-    214a:	e8 d1 18 00 00       	call   3a20 <printf>
-}
-    214f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    2152:	83 c4 10             	add    $0x10,%esp
-    2155:	c9                   	leave
-    2156:	c3                   	ret
-    printf(1, "dd/dd/../ff wrong content\n");
-    2157:	50                   	push   %eax
-    2158:	50                   	push   %eax
-    2159:	68 17 45 00 00       	push   $0x4517
-    215e:	6a 01                	push   $0x1
-    2160:	e8 bb 18 00 00       	call   3a20 <printf>
-    exit();
-    2165:	e8 69 17 00 00       	call   38d3 <exit>
-    printf(1, "chdir dd/../../dd failed\n");
-    216a:	50                   	push   %eax
-    216b:	50                   	push   %eax
-    216c:	68 72 45 00 00       	push   $0x4572
-    2171:	6a 01                	push   $0x1
-    2173:	e8 a8 18 00 00       	call   3a20 <printf>
-    exit();
-    2178:	e8 56 17 00 00       	call   38d3 <exit>
-    printf(1, "unlink dd/dd/ff failed\n");
-    217d:	50                   	push   %eax
-    217e:	50                   	push   %eax
-    217f:	68 3d 45 00 00       	push   $0x453d
-    2184:	6a 01                	push   $0x1
-    2186:	e8 95 18 00 00       	call   3a20 <printf>
-    exit();
-    218b:	e8 43 17 00 00       	call   38d3 <exit>
-    printf(1, "create dd/ff/ff succeeded!\n");
-    2190:	51                   	push   %ecx
-    2191:	51                   	push   %ecx
-    2192:	68 ef 45 00 00       	push   $0x45ef
-    2197:	6a 01                	push   $0x1
-    2199:	e8 82 18 00 00       	call   3a20 <printf>
-    exit();
-    219e:	e8 30 17 00 00       	call   38d3 <exit>
-    printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
-    21a3:	53                   	push   %ebx
-    21a4:	53                   	push   %ebx
-    21a5:	68 dc 4f 00 00       	push   $0x4fdc
-    21aa:	6a 01                	push   $0x1
-    21ac:	e8 6f 18 00 00       	call   3a20 <printf>
-    exit();
-    21b1:	e8 1d 17 00 00       	call   38d3 <exit>
-    printf(1, "mkdir dd/ff/ff succeeded!\n");
-    21b6:	51                   	push   %ecx
-    21b7:	51                   	push   %ecx
-    21b8:	68 83 46 00 00       	push   $0x4683
-    21bd:	6a 01                	push   $0x1
-    21bf:	e8 5c 18 00 00       	call   3a20 <printf>
-    exit();
-    21c4:	e8 0a 17 00 00       	call   38d3 <exit>
-    printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
-    21c9:	53                   	push   %ebx
-    21ca:	53                   	push   %ebx
-    21cb:	68 4c 50 00 00       	push   $0x504c
-    21d0:	6a 01                	push   $0x1
-    21d2:	e8 49 18 00 00       	call   3a20 <printf>
-    exit();
-    21d7:	e8 f7 16 00 00       	call   38d3 <exit>
-    printf(1, "open dd/dd/../ff failed\n");
-    21dc:	50                   	push   %eax
-    21dd:	50                   	push   %eax
-    21de:	68 fe 44 00 00       	push   $0x44fe
-    21e3:	6a 01                	push   $0x1
-    21e5:	e8 36 18 00 00       	call   3a20 <printf>
-    exit();
-    21ea:	e8 e4 16 00 00       	call   38d3 <exit>
-    printf(1, "create dd/dd/ff failed\n");
-    21ef:	51                   	push   %ecx
-    21f0:	51                   	push   %ecx
-    21f1:	68 d7 44 00 00       	push   $0x44d7
-    21f6:	6a 01                	push   $0x1
-    21f8:	e8 23 18 00 00       	call   3a20 <printf>
-    exit();
-    21fd:	e8 d1 16 00 00       	call   38d3 <exit>
-    printf(1, "chdir ./.. failed\n");
-    2202:	50                   	push   %eax
-    2203:	50                   	push   %eax
-    2204:	68 a0 45 00 00       	push   $0x45a0
-    2209:	6a 01                	push   $0x1
-    220b:	e8 10 18 00 00       	call   3a20 <printf>
-    exit();
-    2210:	e8 be 16 00 00       	call   38d3 <exit>
-    printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
-    2215:	52                   	push   %edx
-    2216:	52                   	push   %edx
-    2217:	68 94 4f 00 00       	push   $0x4f94
-    221c:	6a 01                	push   $0x1
-    221e:	e8 fd 17 00 00       	call   3a20 <printf>
-    exit();
-    2223:	e8 ab 16 00 00       	call   38d3 <exit>
-    printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
-    2228:	50                   	push   %eax
-    2229:	50                   	push   %eax
-    222a:	68 28 50 00 00       	push   $0x5028
-    222f:	6a 01                	push   $0x1
-    2231:	e8 ea 17 00 00       	call   3a20 <printf>
-    exit();
-    2236:	e8 98 16 00 00       	call   38d3 <exit>
-    printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
-    223b:	50                   	push   %eax
-    223c:	50                   	push   %eax
-    223d:	68 04 50 00 00       	push   $0x5004
-    2242:	6a 01                	push   $0x1
-    2244:	e8 d7 17 00 00       	call   3a20 <printf>
-    exit();
-    2249:	e8 85 16 00 00       	call   38d3 <exit>
-    printf(1, "open dd wronly succeeded!\n");
-    224e:	50                   	push   %eax
-    224f:	50                   	push   %eax
-    2250:	68 5f 46 00 00       	push   $0x465f
-    2255:	6a 01                	push   $0x1
-    2257:	e8 c4 17 00 00       	call   3a20 <printf>
-    exit();
-    225c:	e8 72 16 00 00       	call   38d3 <exit>
-    printf(1, "open dd rdwr succeeded!\n");
-    2261:	50                   	push   %eax
-    2262:	50                   	push   %eax
-    2263:	68 46 46 00 00       	push   $0x4646
-    2268:	6a 01                	push   $0x1
-    226a:	e8 b1 17 00 00       	call   3a20 <printf>
-    exit();
-    226f:	e8 5f 16 00 00       	call   38d3 <exit>
-    printf(1, "create dd succeeded!\n");
-    2274:	50                   	push   %eax
-    2275:	50                   	push   %eax
-    2276:	68 30 46 00 00       	push   $0x4630
-    227b:	6a 01                	push   $0x1
-    227d:	e8 9e 17 00 00       	call   3a20 <printf>
-    exit();
-    2282:	e8 4c 16 00 00       	call   38d3 <exit>
-    printf(1, "create dd/xx/ff succeeded!\n");
-    2287:	52                   	push   %edx
-    2288:	52                   	push   %edx
-    2289:	68 14 46 00 00       	push   $0x4614
-    228e:	6a 01                	push   $0x1
-    2290:	e8 8b 17 00 00       	call   3a20 <printf>
-    exit();
-    2295:	e8 39 16 00 00       	call   38d3 <exit>
-    printf(1, "chdir dd failed\n");
-    229a:	50                   	push   %eax
-    229b:	50                   	push   %eax
-    229c:	68 55 45 00 00       	push   $0x4555
-    22a1:	6a 01                	push   $0x1
-    22a3:	e8 78 17 00 00       	call   3a20 <printf>
-    exit();
-    22a8:	e8 26 16 00 00       	call   38d3 <exit>
-    printf(1, "open (unlinked) dd/dd/ff succeeded\n");
-    22ad:	50                   	push   %eax
-    22ae:	50                   	push   %eax
-    22af:	68 b8 4f 00 00       	push   $0x4fb8
-    22b4:	6a 01                	push   $0x1
-    22b6:	e8 65 17 00 00       	call   3a20 <printf>
-    exit();
-    22bb:	e8 13 16 00 00       	call   38d3 <exit>
-    printf(1, "subdir mkdir dd/dd failed\n");
-    22c0:	53                   	push   %ebx
-    22c1:	53                   	push   %ebx
-    22c2:	68 b3 44 00 00       	push   $0x44b3
-    22c7:	6a 01                	push   $0x1
-    22c9:	e8 52 17 00 00       	call   3a20 <printf>
-    exit();
-    22ce:	e8 00 16 00 00       	call   38d3 <exit>
-    printf(1, "unlink dd (non-empty dir) succeeded!\n");
-    22d3:	50                   	push   %eax
-    22d4:	50                   	push   %eax
-    22d5:	68 6c 4f 00 00       	push   $0x4f6c
-    22da:	6a 01                	push   $0x1
-    22dc:	e8 3f 17 00 00       	call   3a20 <printf>
-    exit();
-    22e1:	e8 ed 15 00 00       	call   38d3 <exit>
-    printf(1, "create dd/ff failed\n");
-    22e6:	50                   	push   %eax
-    22e7:	50                   	push   %eax
-    22e8:	68 97 44 00 00       	push   $0x4497
-    22ed:	6a 01                	push   $0x1
-    22ef:	e8 2c 17 00 00       	call   3a20 <printf>
-    exit();
-    22f4:	e8 da 15 00 00       	call   38d3 <exit>
-    printf(1, "subdir mkdir dd failed\n");
-    22f9:	50                   	push   %eax
-    22fa:	50                   	push   %eax
-    22fb:	68 7f 44 00 00       	push   $0x447f
-    2300:	6a 01                	push   $0x1
-    2302:	e8 19 17 00 00       	call   3a20 <printf>
-    exit();
-    2307:	e8 c7 15 00 00       	call   38d3 <exit>
-    printf(1, "unlink dd failed\n");
-    230c:	50                   	push   %eax
-    230d:	50                   	push   %eax
-    230e:	68 68 47 00 00       	push   $0x4768
-    2313:	6a 01                	push   $0x1
-    2315:	e8 06 17 00 00       	call   3a20 <printf>
-    exit();
-    231a:	e8 b4 15 00 00       	call   38d3 <exit>
-    printf(1, "unlink dd/dd failed\n");
-    231f:	52                   	push   %edx
-    2320:	52                   	push   %edx
-    2321:	68 53 47 00 00       	push   $0x4753
-    2326:	6a 01                	push   $0x1
-    2328:	e8 f3 16 00 00       	call   3a20 <printf>
-    exit();
-    232d:	e8 a1 15 00 00       	call   38d3 <exit>
-    printf(1, "unlink non-empty dd succeeded!\n");
-    2332:	51                   	push   %ecx
-    2333:	51                   	push   %ecx
-    2334:	68 70 50 00 00       	push   $0x5070
-    2339:	6a 01                	push   $0x1
-    233b:	e8 e0 16 00 00       	call   3a20 <printf>
-    exit();
-    2340:	e8 8e 15 00 00       	call   38d3 <exit>
-    printf(1, "unlink dd/ff failed\n");
-    2345:	53                   	push   %ebx
-    2346:	53                   	push   %ebx
-    2347:	68 3e 47 00 00       	push   $0x473e
-    234c:	6a 01                	push   $0x1
-    234e:	e8 cd 16 00 00       	call   3a20 <printf>
-    exit();
-    2353:	e8 7b 15 00 00       	call   38d3 <exit>
-    printf(1, "chdir dd/xx succeeded!\n");
-    2358:	50                   	push   %eax
-    2359:	50                   	push   %eax
-    235a:	68 26 47 00 00       	push   $0x4726
-    235f:	6a 01                	push   $0x1
-    2361:	e8 ba 16 00 00       	call   3a20 <printf>
-    exit();
-    2366:	e8 68 15 00 00       	call   38d3 <exit>
-    printf(1, "chdir dd/ff succeeded!\n");
-    236b:	50                   	push   %eax
-    236c:	50                   	push   %eax
-    236d:	68 0e 47 00 00       	push   $0x470e
-    2372:	6a 01                	push   $0x1
-    2374:	e8 a7 16 00 00       	call   3a20 <printf>
-    exit();
-    2379:	e8 55 15 00 00       	call   38d3 <exit>
-    printf(1, "unlink dd/ff/ff succeeded!\n");
-    237e:	50                   	push   %eax
-    237f:	50                   	push   %eax
-    2380:	68 f2 46 00 00       	push   $0x46f2
-    2385:	6a 01                	push   $0x1
-    2387:	e8 94 16 00 00       	call   3a20 <printf>
-    exit();
-    238c:	e8 42 15 00 00       	call   38d3 <exit>
-    printf(1, "unlink dd/xx/ff succeeded!\n");
-    2391:	50                   	push   %eax
-    2392:	50                   	push   %eax
-    2393:	68 d6 46 00 00       	push   $0x46d6
-    2398:	6a 01                	push   $0x1
-    239a:	e8 81 16 00 00       	call   3a20 <printf>
-    exit();
-    239f:	e8 2f 15 00 00       	call   38d3 <exit>
-    printf(1, "mkdir dd/dd/ffff succeeded!\n");
-    23a4:	50                   	push   %eax
-    23a5:	50                   	push   %eax
-    23a6:	68 b9 46 00 00       	push   $0x46b9
-    23ab:	6a 01                	push   $0x1
-    23ad:	e8 6e 16 00 00       	call   3a20 <printf>
-    exit();
-    23b2:	e8 1c 15 00 00       	call   38d3 <exit>
-    printf(1, "mkdir dd/xx/ff succeeded!\n");
-    23b7:	52                   	push   %edx
-    23b8:	52                   	push   %edx
-    23b9:	68 9e 46 00 00       	push   $0x469e
-    23be:	6a 01                	push   $0x1
-    23c0:	e8 5b 16 00 00       	call   3a20 <printf>
-    exit();
-    23c5:	e8 09 15 00 00       	call   38d3 <exit>
-    printf(1, "read dd/dd/ffff wrong len\n");
-    23ca:	51                   	push   %ecx
-    23cb:	51                   	push   %ecx
-    23cc:	68 cb 45 00 00       	push   $0x45cb
-    23d1:	6a 01                	push   $0x1
-    23d3:	e8 48 16 00 00       	call   3a20 <printf>
-    exit();
-    23d8:	e8 f6 14 00 00       	call   38d3 <exit>
-    printf(1, "open dd/dd/ffff failed\n");
-    23dd:	53                   	push   %ebx
-    23de:	53                   	push   %ebx
-    23df:	68 b3 45 00 00       	push   $0x45b3
-    23e4:	6a 01                	push   $0x1
-    23e6:	e8 35 16 00 00       	call   3a20 <printf>
-    exit();
-    23eb:	e8 e3 14 00 00       	call   38d3 <exit>
-
-000023f0 <bigwrite>:
-{
-    23f0:	55                   	push   %ebp
-    23f1:	89 e5                	mov    %esp,%ebp
-    23f3:	56                   	push   %esi
-    23f4:	53                   	push   %ebx
-  for(sz = 499; sz < 12*512; sz += 471){
-    23f5:	bb f3 01 00 00       	mov    $0x1f3,%ebx
-  printf(1, "bigwrite test\n");
-    23fa:	83 ec 08             	sub    $0x8,%esp
-    23fd:	68 85 47 00 00       	push   $0x4785
-    2402:	6a 01                	push   $0x1
-    2404:	e8 17 16 00 00       	call   3a20 <printf>
-  unlink("bigwrite");
-    2409:	c7 04 24 94 47 00 00 	movl   $0x4794,(%esp)
-    2410:	e8 0e 15 00 00       	call   3923 <unlink>
-    2415:	83 c4 10             	add    $0x10,%esp
-    2418:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    241f:	00 
-    fd = open("bigwrite", O_CREATE | O_RDWR);
-    2420:	83 ec 08             	sub    $0x8,%esp
-    2423:	68 02 02 00 00       	push   $0x202
-    2428:	68 94 47 00 00       	push   $0x4794
-    242d:	e8 e1 14 00 00       	call   3913 <open>
-    if(fd < 0){
-    2432:	83 c4 10             	add    $0x10,%esp
-    fd = open("bigwrite", O_CREATE | O_RDWR);
-    2435:	89 c6                	mov    %eax,%esi
-    if(fd < 0){
-    2437:	85 c0                	test   %eax,%eax
-    2439:	78 7e                	js     24b9 <bigwrite+0xc9>
-      int cc = write(fd, buf, sz);
-    243b:	83 ec 04             	sub    $0x4,%esp
-    243e:	53                   	push   %ebx
-    243f:	68 40 85 00 00       	push   $0x8540
-    2444:	50                   	push   %eax
-    2445:	e8 a9 14 00 00       	call   38f3 <write>
-      if(cc != sz){
-    244a:	83 c4 10             	add    $0x10,%esp
-    244d:	39 c3                	cmp    %eax,%ebx
-    244f:	75 55                	jne    24a6 <bigwrite+0xb6>
-      int cc = write(fd, buf, sz);
-    2451:	83 ec 04             	sub    $0x4,%esp
-    2454:	53                   	push   %ebx
-    2455:	68 40 85 00 00       	push   $0x8540
-    245a:	56                   	push   %esi
-    245b:	e8 93 14 00 00       	call   38f3 <write>
-      if(cc != sz){
-    2460:	83 c4 10             	add    $0x10,%esp
-    2463:	39 c3                	cmp    %eax,%ebx
-    2465:	75 3f                	jne    24a6 <bigwrite+0xb6>
-    close(fd);
-    2467:	83 ec 0c             	sub    $0xc,%esp
-  for(sz = 499; sz < 12*512; sz += 471){
-    246a:	81 c3 d7 01 00 00    	add    $0x1d7,%ebx
-    close(fd);
-    2470:	56                   	push   %esi
-    2471:	e8 85 14 00 00       	call   38fb <close>
-    unlink("bigwrite");
-    2476:	c7 04 24 94 47 00 00 	movl   $0x4794,(%esp)
-    247d:	e8 a1 14 00 00       	call   3923 <unlink>
-  for(sz = 499; sz < 12*512; sz += 471){
-    2482:	83 c4 10             	add    $0x10,%esp
-    2485:	81 fb 07 18 00 00    	cmp    $0x1807,%ebx
-    248b:	75 93                	jne    2420 <bigwrite+0x30>
-  printf(1, "bigwrite ok\n");
-    248d:	83 ec 08             	sub    $0x8,%esp
-    2490:	68 c7 47 00 00       	push   $0x47c7
-    2495:	6a 01                	push   $0x1
-    2497:	e8 84 15 00 00       	call   3a20 <printf>
-}
-    249c:	83 c4 10             	add    $0x10,%esp
-    249f:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    24a2:	5b                   	pop    %ebx
-    24a3:	5e                   	pop    %esi
-    24a4:	5d                   	pop    %ebp
-    24a5:	c3                   	ret
-        printf(1, "write(%d) ret %d\n", sz, cc);
-    24a6:	50                   	push   %eax
-    24a7:	53                   	push   %ebx
-    24a8:	68 b5 47 00 00       	push   $0x47b5
-    24ad:	6a 01                	push   $0x1
-    24af:	e8 6c 15 00 00       	call   3a20 <printf>
-        exit();
-    24b4:	e8 1a 14 00 00       	call   38d3 <exit>
-      printf(1, "cannot create bigwrite\n");
-    24b9:	83 ec 08             	sub    $0x8,%esp
-    24bc:	68 9d 47 00 00       	push   $0x479d
-    24c1:	6a 01                	push   $0x1
-    24c3:	e8 58 15 00 00       	call   3a20 <printf>
-      exit();
-    24c8:	e8 06 14 00 00       	call   38d3 <exit>
-    24cd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000024d0 <bigfile>:
-{
-    24d0:	55                   	push   %ebp
-    24d1:	89 e5                	mov    %esp,%ebp
-    24d3:	57                   	push   %edi
-    24d4:	56                   	push   %esi
-    24d5:	53                   	push   %ebx
-    24d6:	83 ec 14             	sub    $0x14,%esp
-  printf(1, "bigfile test\n");
-    24d9:	68 d4 47 00 00       	push   $0x47d4
-    24de:	6a 01                	push   $0x1
-    24e0:	e8 3b 15 00 00       	call   3a20 <printf>
-  unlink("bigfile");
-    24e5:	c7 04 24 f0 47 00 00 	movl   $0x47f0,(%esp)
-    24ec:	e8 32 14 00 00       	call   3923 <unlink>
-  fd = open("bigfile", O_CREATE | O_RDWR);
-    24f1:	58                   	pop    %eax
-    24f2:	5a                   	pop    %edx
-    24f3:	68 02 02 00 00       	push   $0x202
-    24f8:	68 f0 47 00 00       	push   $0x47f0
-    24fd:	e8 11 14 00 00       	call   3913 <open>
-  if(fd < 0){
-    2502:	83 c4 10             	add    $0x10,%esp
-    2505:	85 c0                	test   %eax,%eax
-    2507:	0f 88 5e 01 00 00    	js     266b <bigfile+0x19b>
-    250d:	89 c6                	mov    %eax,%esi
-  for(i = 0; i < 20; i++){
-    250f:	31 db                	xor    %ebx,%ebx
-    2511:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    memset(buf, i, 600);
-    2518:	83 ec 04             	sub    $0x4,%esp
-    251b:	68 58 02 00 00       	push   $0x258
-    2520:	53                   	push   %ebx
-    2521:	68 40 85 00 00       	push   $0x8540
-    2526:	e8 25 12 00 00       	call   3750 <memset>
-    if(write(fd, buf, 600) != 600){
-    252b:	83 c4 0c             	add    $0xc,%esp
-    252e:	68 58 02 00 00       	push   $0x258
-    2533:	68 40 85 00 00       	push   $0x8540
-    2538:	56                   	push   %esi
-    2539:	e8 b5 13 00 00       	call   38f3 <write>
-    253e:	83 c4 10             	add    $0x10,%esp
-    2541:	3d 58 02 00 00       	cmp    $0x258,%eax
-    2546:	0f 85 f8 00 00 00    	jne    2644 <bigfile+0x174>
-  for(i = 0; i < 20; i++){
-    254c:	83 c3 01             	add    $0x1,%ebx
-    254f:	83 fb 14             	cmp    $0x14,%ebx
-    2552:	75 c4                	jne    2518 <bigfile+0x48>
-  close(fd);
-    2554:	83 ec 0c             	sub    $0xc,%esp
-    2557:	56                   	push   %esi
-    2558:	e8 9e 13 00 00       	call   38fb <close>
-  fd = open("bigfile", 0);
-    255d:	5e                   	pop    %esi
-    255e:	5f                   	pop    %edi
-    255f:	6a 00                	push   $0x0
-    2561:	68 f0 47 00 00       	push   $0x47f0
-    2566:	e8 a8 13 00 00       	call   3913 <open>
-  if(fd < 0){
-    256b:	83 c4 10             	add    $0x10,%esp
-  fd = open("bigfile", 0);
-    256e:	89 c6                	mov    %eax,%esi
-  if(fd < 0){
-    2570:	85 c0                	test   %eax,%eax
-    2572:	0f 88 e0 00 00 00    	js     2658 <bigfile+0x188>
-  total = 0;
-    2578:	31 db                	xor    %ebx,%ebx
-  for(i = 0; ; i++){
-    257a:	31 ff                	xor    %edi,%edi
-    257c:	eb 30                	jmp    25ae <bigfile+0xde>
-    257e:	66 90                	xchg   %ax,%ax
-    if(cc != 300){
-    2580:	3d 2c 01 00 00       	cmp    $0x12c,%eax
-    2585:	0f 85 91 00 00 00    	jne    261c <bigfile+0x14c>
-    if(buf[0] != i/2 || buf[299] != i/2){
-    258b:	89 fa                	mov    %edi,%edx
-    258d:	0f be 05 40 85 00 00 	movsbl 0x8540,%eax
-    2594:	d1 fa                	sar    $1,%edx
-    2596:	39 d0                	cmp    %edx,%eax
-    2598:	75 6e                	jne    2608 <bigfile+0x138>
-    259a:	0f be 15 6b 86 00 00 	movsbl 0x866b,%edx
-    25a1:	39 d0                	cmp    %edx,%eax
-    25a3:	75 63                	jne    2608 <bigfile+0x138>
-    total += cc;
-    25a5:	81 c3 2c 01 00 00    	add    $0x12c,%ebx
-  for(i = 0; ; i++){
-    25ab:	83 c7 01             	add    $0x1,%edi
-    cc = read(fd, buf, 300);
-    25ae:	83 ec 04             	sub    $0x4,%esp
-    25b1:	68 2c 01 00 00       	push   $0x12c
-    25b6:	68 40 85 00 00       	push   $0x8540
-    25bb:	56                   	push   %esi
-    25bc:	e8 2a 13 00 00       	call   38eb <read>
-    if(cc < 0){
-    25c1:	83 c4 10             	add    $0x10,%esp
-    25c4:	85 c0                	test   %eax,%eax
-    25c6:	78 68                	js     2630 <bigfile+0x160>
-    if(cc == 0)
-    25c8:	75 b6                	jne    2580 <bigfile+0xb0>
-  close(fd);
-    25ca:	83 ec 0c             	sub    $0xc,%esp
-    25cd:	56                   	push   %esi
-    25ce:	e8 28 13 00 00       	call   38fb <close>
-  if(total != 20*600){
-    25d3:	83 c4 10             	add    $0x10,%esp
-    25d6:	81 fb e0 2e 00 00    	cmp    $0x2ee0,%ebx
-    25dc:	0f 85 9c 00 00 00    	jne    267e <bigfile+0x1ae>
-  unlink("bigfile");
-    25e2:	83 ec 0c             	sub    $0xc,%esp
-    25e5:	68 f0 47 00 00       	push   $0x47f0
-    25ea:	e8 34 13 00 00       	call   3923 <unlink>
-  printf(1, "bigfile test ok\n");
-    25ef:	58                   	pop    %eax
-    25f0:	5a                   	pop    %edx
-    25f1:	68 7f 48 00 00       	push   $0x487f
-    25f6:	6a 01                	push   $0x1
-    25f8:	e8 23 14 00 00       	call   3a20 <printf>
-}
-    25fd:	83 c4 10             	add    $0x10,%esp
-    2600:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    2603:	5b                   	pop    %ebx
-    2604:	5e                   	pop    %esi
-    2605:	5f                   	pop    %edi
-    2606:	5d                   	pop    %ebp
-    2607:	c3                   	ret
-      printf(1, "read bigfile wrong data\n");
-    2608:	83 ec 08             	sub    $0x8,%esp
-    260b:	68 4c 48 00 00       	push   $0x484c
-    2610:	6a 01                	push   $0x1
-    2612:	e8 09 14 00 00       	call   3a20 <printf>
-      exit();
-    2617:	e8 b7 12 00 00       	call   38d3 <exit>
-      printf(1, "short read bigfile\n");
-    261c:	83 ec 08             	sub    $0x8,%esp
-    261f:	68 38 48 00 00       	push   $0x4838
-    2624:	6a 01                	push   $0x1
-    2626:	e8 f5 13 00 00       	call   3a20 <printf>
-      exit();
-    262b:	e8 a3 12 00 00       	call   38d3 <exit>
-      printf(1, "read bigfile failed\n");
-    2630:	83 ec 08             	sub    $0x8,%esp
-    2633:	68 23 48 00 00       	push   $0x4823
-    2638:	6a 01                	push   $0x1
-    263a:	e8 e1 13 00 00       	call   3a20 <printf>
-      exit();
-    263f:	e8 8f 12 00 00       	call   38d3 <exit>
-      printf(1, "write bigfile failed\n");
-    2644:	83 ec 08             	sub    $0x8,%esp
-    2647:	68 f8 47 00 00       	push   $0x47f8
-    264c:	6a 01                	push   $0x1
-    264e:	e8 cd 13 00 00       	call   3a20 <printf>
-      exit();
-    2653:	e8 7b 12 00 00       	call   38d3 <exit>
-    printf(1, "cannot open bigfile\n");
-    2658:	53                   	push   %ebx
-    2659:	53                   	push   %ebx
-    265a:	68 0e 48 00 00       	push   $0x480e
-    265f:	6a 01                	push   $0x1
-    2661:	e8 ba 13 00 00       	call   3a20 <printf>
-    exit();
-    2666:	e8 68 12 00 00       	call   38d3 <exit>
-    printf(1, "cannot create bigfile");
-    266b:	50                   	push   %eax
-    266c:	50                   	push   %eax
-    266d:	68 e2 47 00 00       	push   $0x47e2
-    2672:	6a 01                	push   $0x1
-    2674:	e8 a7 13 00 00       	call   3a20 <printf>
-    exit();
-    2679:	e8 55 12 00 00       	call   38d3 <exit>
-    printf(1, "read bigfile wrong total\n");
-    267e:	51                   	push   %ecx
-    267f:	51                   	push   %ecx
-    2680:	68 65 48 00 00       	push   $0x4865
-    2685:	6a 01                	push   $0x1
-    2687:	e8 94 13 00 00       	call   3a20 <printf>
-    exit();
-    268c:	e8 42 12 00 00       	call   38d3 <exit>
-    2691:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    2698:	00 
-    2699:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-000026a0 <fourteen>:
-{
-    26a0:	55                   	push   %ebp
-    26a1:	89 e5                	mov    %esp,%ebp
-    26a3:	83 ec 10             	sub    $0x10,%esp
-  printf(1, "fourteen test\n");
-    26a6:	68 90 48 00 00       	push   $0x4890
-    26ab:	6a 01                	push   $0x1
-    26ad:	e8 6e 13 00 00       	call   3a20 <printf>
-  if(mkdir("12345678901234") != 0){
-    26b2:	c7 04 24 cb 48 00 00 	movl   $0x48cb,(%esp)
-    26b9:	e8 7d 12 00 00       	call   393b <mkdir>
-    26be:	83 c4 10             	add    $0x10,%esp
-    26c1:	85 c0                	test   %eax,%eax
-    26c3:	0f 85 97 00 00 00    	jne    2760 <fourteen+0xc0>
-  if(mkdir("12345678901234/123456789012345") != 0){
-    26c9:	83 ec 0c             	sub    $0xc,%esp
-    26cc:	68 90 50 00 00       	push   $0x5090
-    26d1:	e8 65 12 00 00       	call   393b <mkdir>
-    26d6:	83 c4 10             	add    $0x10,%esp
-    26d9:	85 c0                	test   %eax,%eax
-    26db:	0f 85 de 00 00 00    	jne    27bf <fourteen+0x11f>
-  fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
-    26e1:	83 ec 08             	sub    $0x8,%esp
-    26e4:	68 00 02 00 00       	push   $0x200
-    26e9:	68 e0 50 00 00       	push   $0x50e0
-    26ee:	e8 20 12 00 00       	call   3913 <open>
-  if(fd < 0){
-    26f3:	83 c4 10             	add    $0x10,%esp
-    26f6:	85 c0                	test   %eax,%eax
-    26f8:	0f 88 ae 00 00 00    	js     27ac <fourteen+0x10c>
-  close(fd);
-    26fe:	83 ec 0c             	sub    $0xc,%esp
-    2701:	50                   	push   %eax
-    2702:	e8 f4 11 00 00       	call   38fb <close>
-  fd = open("12345678901234/12345678901234/12345678901234", 0);
-    2707:	58                   	pop    %eax
-    2708:	5a                   	pop    %edx
-    2709:	6a 00                	push   $0x0
-    270b:	68 50 51 00 00       	push   $0x5150
-    2710:	e8 fe 11 00 00       	call   3913 <open>
-  if(fd < 0){
-    2715:	83 c4 10             	add    $0x10,%esp
-    2718:	85 c0                	test   %eax,%eax
-    271a:	78 7d                	js     2799 <fourteen+0xf9>
-  close(fd);
-    271c:	83 ec 0c             	sub    $0xc,%esp
-    271f:	50                   	push   %eax
-    2720:	e8 d6 11 00 00       	call   38fb <close>
-  if(mkdir("12345678901234/12345678901234") == 0){
-    2725:	c7 04 24 bc 48 00 00 	movl   $0x48bc,(%esp)
-    272c:	e8 0a 12 00 00       	call   393b <mkdir>
-    2731:	83 c4 10             	add    $0x10,%esp
-    2734:	85 c0                	test   %eax,%eax
-    2736:	74 4e                	je     2786 <fourteen+0xe6>
-  if(mkdir("123456789012345/12345678901234") == 0){
-    2738:	83 ec 0c             	sub    $0xc,%esp
-    273b:	68 ec 51 00 00       	push   $0x51ec
-    2740:	e8 f6 11 00 00       	call   393b <mkdir>
-    2745:	83 c4 10             	add    $0x10,%esp
-    2748:	85 c0                	test   %eax,%eax
-    274a:	74 27                	je     2773 <fourteen+0xd3>
-  printf(1, "fourteen ok\n");
-    274c:	83 ec 08             	sub    $0x8,%esp
-    274f:	68 da 48 00 00       	push   $0x48da
-    2754:	6a 01                	push   $0x1
-    2756:	e8 c5 12 00 00       	call   3a20 <printf>
-}
-    275b:	83 c4 10             	add    $0x10,%esp
-    275e:	c9                   	leave
-    275f:	c3                   	ret
-    printf(1, "mkdir 12345678901234 failed\n");
-    2760:	50                   	push   %eax
-    2761:	50                   	push   %eax
-    2762:	68 9f 48 00 00       	push   $0x489f
-    2767:	6a 01                	push   $0x1
-    2769:	e8 b2 12 00 00       	call   3a20 <printf>
-    exit();
-    276e:	e8 60 11 00 00       	call   38d3 <exit>
-    printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
-    2773:	50                   	push   %eax
-    2774:	50                   	push   %eax
-    2775:	68 0c 52 00 00       	push   $0x520c
-    277a:	6a 01                	push   $0x1
-    277c:	e8 9f 12 00 00       	call   3a20 <printf>
-    exit();
-    2781:	e8 4d 11 00 00       	call   38d3 <exit>
-    printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
-    2786:	52                   	push   %edx
-    2787:	52                   	push   %edx
-    2788:	68 bc 51 00 00       	push   $0x51bc
-    278d:	6a 01                	push   $0x1
-    278f:	e8 8c 12 00 00       	call   3a20 <printf>
-    exit();
-    2794:	e8 3a 11 00 00       	call   38d3 <exit>
-    printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
-    2799:	51                   	push   %ecx
-    279a:	51                   	push   %ecx
-    279b:	68 80 51 00 00       	push   $0x5180
-    27a0:	6a 01                	push   $0x1
-    27a2:	e8 79 12 00 00       	call   3a20 <printf>
-    exit();
-    27a7:	e8 27 11 00 00       	call   38d3 <exit>
-    printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
-    27ac:	51                   	push   %ecx
-    27ad:	51                   	push   %ecx
-    27ae:	68 10 51 00 00       	push   $0x5110
-    27b3:	6a 01                	push   $0x1
-    27b5:	e8 66 12 00 00       	call   3a20 <printf>
-    exit();
-    27ba:	e8 14 11 00 00       	call   38d3 <exit>
-    printf(1, "mkdir 12345678901234/123456789012345 failed\n");
-    27bf:	50                   	push   %eax
-    27c0:	50                   	push   %eax
-    27c1:	68 b0 50 00 00       	push   $0x50b0
-    27c6:	6a 01                	push   $0x1
-    27c8:	e8 53 12 00 00       	call   3a20 <printf>
-    exit();
-    27cd:	e8 01 11 00 00       	call   38d3 <exit>
-    27d2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    27d9:	00 
-    27da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000027e0 <rmdot>:
-{
-    27e0:	55                   	push   %ebp
-    27e1:	89 e5                	mov    %esp,%ebp
-    27e3:	83 ec 10             	sub    $0x10,%esp
-  printf(1, "rmdot test\n");
-    27e6:	68 e7 48 00 00       	push   $0x48e7
-    27eb:	6a 01                	push   $0x1
-    27ed:	e8 2e 12 00 00       	call   3a20 <printf>
-  if(mkdir("dots") != 0){
-    27f2:	c7 04 24 f3 48 00 00 	movl   $0x48f3,(%esp)
-    27f9:	e8 3d 11 00 00       	call   393b <mkdir>
-    27fe:	83 c4 10             	add    $0x10,%esp
-    2801:	85 c0                	test   %eax,%eax
-    2803:	0f 85 b0 00 00 00    	jne    28b9 <rmdot+0xd9>
-  if(chdir("dots") != 0){
-    2809:	83 ec 0c             	sub    $0xc,%esp
-    280c:	68 f3 48 00 00       	push   $0x48f3
-    2811:	e8 2d 11 00 00       	call   3943 <chdir>
-    2816:	83 c4 10             	add    $0x10,%esp
-    2819:	85 c0                	test   %eax,%eax
-    281b:	0f 85 1d 01 00 00    	jne    293e <rmdot+0x15e>
-  if(unlink(".") == 0){
-    2821:	83 ec 0c             	sub    $0xc,%esp
-    2824:	68 9e 45 00 00       	push   $0x459e
-    2829:	e8 f5 10 00 00       	call   3923 <unlink>
-    282e:	83 c4 10             	add    $0x10,%esp
-    2831:	85 c0                	test   %eax,%eax
-    2833:	0f 84 f2 00 00 00    	je     292b <rmdot+0x14b>
-  if(unlink("..") == 0){
-    2839:	83 ec 0c             	sub    $0xc,%esp
-    283c:	68 9d 45 00 00       	push   $0x459d
-    2841:	e8 dd 10 00 00       	call   3923 <unlink>
-    2846:	83 c4 10             	add    $0x10,%esp
-    2849:	85 c0                	test   %eax,%eax
-    284b:	0f 84 c7 00 00 00    	je     2918 <rmdot+0x138>
-  if(chdir("/") != 0){
-    2851:	83 ec 0c             	sub    $0xc,%esp
-    2854:	68 71 3d 00 00       	push   $0x3d71
-    2859:	e8 e5 10 00 00       	call   3943 <chdir>
-    285e:	83 c4 10             	add    $0x10,%esp
-    2861:	85 c0                	test   %eax,%eax
-    2863:	0f 85 9c 00 00 00    	jne    2905 <rmdot+0x125>
-  if(unlink("dots/.") == 0){
-    2869:	83 ec 0c             	sub    $0xc,%esp
-    286c:	68 3b 49 00 00       	push   $0x493b
-    2871:	e8 ad 10 00 00       	call   3923 <unlink>
-    2876:	83 c4 10             	add    $0x10,%esp
-    2879:	85 c0                	test   %eax,%eax
-    287b:	74 75                	je     28f2 <rmdot+0x112>
-  if(unlink("dots/..") == 0){
-    287d:	83 ec 0c             	sub    $0xc,%esp
-    2880:	68 59 49 00 00       	push   $0x4959
-    2885:	e8 99 10 00 00       	call   3923 <unlink>
-    288a:	83 c4 10             	add    $0x10,%esp
-    288d:	85 c0                	test   %eax,%eax
-    288f:	74 4e                	je     28df <rmdot+0xff>
-  if(unlink("dots") != 0){
-    2891:	83 ec 0c             	sub    $0xc,%esp
-    2894:	68 f3 48 00 00       	push   $0x48f3
-    2899:	e8 85 10 00 00       	call   3923 <unlink>
-    289e:	83 c4 10             	add    $0x10,%esp
-    28a1:	85 c0                	test   %eax,%eax
-    28a3:	75 27                	jne    28cc <rmdot+0xec>
-  printf(1, "rmdot ok\n");
-    28a5:	83 ec 08             	sub    $0x8,%esp
-    28a8:	68 8e 49 00 00       	push   $0x498e
-    28ad:	6a 01                	push   $0x1
-    28af:	e8 6c 11 00 00       	call   3a20 <printf>
-}
-    28b4:	83 c4 10             	add    $0x10,%esp
-    28b7:	c9                   	leave
-    28b8:	c3                   	ret
-    printf(1, "mkdir dots failed\n");
-    28b9:	50                   	push   %eax
-    28ba:	50                   	push   %eax
-    28bb:	68 f8 48 00 00       	push   $0x48f8
-    28c0:	6a 01                	push   $0x1
-    28c2:	e8 59 11 00 00       	call   3a20 <printf>
-    exit();
-    28c7:	e8 07 10 00 00       	call   38d3 <exit>
-    printf(1, "unlink dots failed!\n");
-    28cc:	50                   	push   %eax
-    28cd:	50                   	push   %eax
-    28ce:	68 79 49 00 00       	push   $0x4979
-    28d3:	6a 01                	push   $0x1
-    28d5:	e8 46 11 00 00       	call   3a20 <printf>
-    exit();
-    28da:	e8 f4 0f 00 00       	call   38d3 <exit>
-    printf(1, "unlink dots/.. worked!\n");
-    28df:	52                   	push   %edx
-    28e0:	52                   	push   %edx
-    28e1:	68 61 49 00 00       	push   $0x4961
-    28e6:	6a 01                	push   $0x1
-    28e8:	e8 33 11 00 00       	call   3a20 <printf>
-    exit();
-    28ed:	e8 e1 0f 00 00       	call   38d3 <exit>
-    printf(1, "unlink dots/. worked!\n");
-    28f2:	51                   	push   %ecx
-    28f3:	51                   	push   %ecx
-    28f4:	68 42 49 00 00       	push   $0x4942
-    28f9:	6a 01                	push   $0x1
-    28fb:	e8 20 11 00 00       	call   3a20 <printf>
-    exit();
-    2900:	e8 ce 0f 00 00       	call   38d3 <exit>
-    printf(1, "chdir / failed\n");
-    2905:	50                   	push   %eax
-    2906:	50                   	push   %eax
-    2907:	68 73 3d 00 00       	push   $0x3d73
-    290c:	6a 01                	push   $0x1
-    290e:	e8 0d 11 00 00       	call   3a20 <printf>
-    exit();
-    2913:	e8 bb 0f 00 00       	call   38d3 <exit>
-    printf(1, "rm .. worked!\n");
-    2918:	50                   	push   %eax
-    2919:	50                   	push   %eax
-    291a:	68 2c 49 00 00       	push   $0x492c
-    291f:	6a 01                	push   $0x1
-    2921:	e8 fa 10 00 00       	call   3a20 <printf>
-    exit();
-    2926:	e8 a8 0f 00 00       	call   38d3 <exit>
-    printf(1, "rm . worked!\n");
-    292b:	50                   	push   %eax
-    292c:	50                   	push   %eax
-    292d:	68 1e 49 00 00       	push   $0x491e
-    2932:	6a 01                	push   $0x1
-    2934:	e8 e7 10 00 00       	call   3a20 <printf>
-    exit();
-    2939:	e8 95 0f 00 00       	call   38d3 <exit>
-    printf(1, "chdir dots failed\n");
-    293e:	50                   	push   %eax
-    293f:	50                   	push   %eax
-    2940:	68 0b 49 00 00       	push   $0x490b
-    2945:	6a 01                	push   $0x1
-    2947:	e8 d4 10 00 00       	call   3a20 <printf>
-    exit();
-    294c:	e8 82 0f 00 00       	call   38d3 <exit>
-    2951:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    2958:	00 
-    2959:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00002960 <dirfile>:
-{
-    2960:	55                   	push   %ebp
-    2961:	89 e5                	mov    %esp,%ebp
-    2963:	53                   	push   %ebx
-    2964:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "dir vs file\n");
-    2967:	68 98 49 00 00       	push   $0x4998
-    296c:	6a 01                	push   $0x1
-    296e:	e8 ad 10 00 00       	call   3a20 <printf>
-  fd = open("dirfile", O_CREATE);
-    2973:	5b                   	pop    %ebx
-    2974:	58                   	pop    %eax
-    2975:	68 00 02 00 00       	push   $0x200
-    297a:	68 a5 49 00 00       	push   $0x49a5
-    297f:	e8 8f 0f 00 00       	call   3913 <open>
-  if(fd < 0){
-    2984:	83 c4 10             	add    $0x10,%esp
-    2987:	85 c0                	test   %eax,%eax
-    2989:	0f 88 43 01 00 00    	js     2ad2 <dirfile+0x172>
-  close(fd);
-    298f:	83 ec 0c             	sub    $0xc,%esp
-    2992:	50                   	push   %eax
-    2993:	e8 63 0f 00 00       	call   38fb <close>
-  if(chdir("dirfile") == 0){
-    2998:	c7 04 24 a5 49 00 00 	movl   $0x49a5,(%esp)
-    299f:	e8 9f 0f 00 00       	call   3943 <chdir>
-    29a4:	83 c4 10             	add    $0x10,%esp
-    29a7:	85 c0                	test   %eax,%eax
-    29a9:	0f 84 10 01 00 00    	je     2abf <dirfile+0x15f>
-  fd = open("dirfile/xx", 0);
-    29af:	83 ec 08             	sub    $0x8,%esp
-    29b2:	6a 00                	push   $0x0
-    29b4:	68 de 49 00 00       	push   $0x49de
-    29b9:	e8 55 0f 00 00       	call   3913 <open>
-  if(fd >= 0){
-    29be:	83 c4 10             	add    $0x10,%esp
-    29c1:	85 c0                	test   %eax,%eax
-    29c3:	0f 89 e3 00 00 00    	jns    2aac <dirfile+0x14c>
-  fd = open("dirfile/xx", O_CREATE);
-    29c9:	83 ec 08             	sub    $0x8,%esp
-    29cc:	68 00 02 00 00       	push   $0x200
-    29d1:	68 de 49 00 00       	push   $0x49de
-    29d6:	e8 38 0f 00 00       	call   3913 <open>
-  if(fd >= 0){
-    29db:	83 c4 10             	add    $0x10,%esp
-    29de:	85 c0                	test   %eax,%eax
-    29e0:	0f 89 c6 00 00 00    	jns    2aac <dirfile+0x14c>
-  if(mkdir("dirfile/xx") == 0){
-    29e6:	83 ec 0c             	sub    $0xc,%esp
-    29e9:	68 de 49 00 00       	push   $0x49de
-    29ee:	e8 48 0f 00 00       	call   393b <mkdir>
-    29f3:	83 c4 10             	add    $0x10,%esp
-    29f6:	85 c0                	test   %eax,%eax
-    29f8:	0f 84 46 01 00 00    	je     2b44 <dirfile+0x1e4>
-  if(unlink("dirfile/xx") == 0){
-    29fe:	83 ec 0c             	sub    $0xc,%esp
-    2a01:	68 de 49 00 00       	push   $0x49de
-    2a06:	e8 18 0f 00 00       	call   3923 <unlink>
-    2a0b:	83 c4 10             	add    $0x10,%esp
-    2a0e:	85 c0                	test   %eax,%eax
-    2a10:	0f 84 1b 01 00 00    	je     2b31 <dirfile+0x1d1>
-  if(link("README", "dirfile/xx") == 0){
-    2a16:	83 ec 08             	sub    $0x8,%esp
-    2a19:	68 de 49 00 00       	push   $0x49de
-    2a1e:	68 42 4a 00 00       	push   $0x4a42
-    2a23:	e8 0b 0f 00 00       	call   3933 <link>
-    2a28:	83 c4 10             	add    $0x10,%esp
-    2a2b:	85 c0                	test   %eax,%eax
-    2a2d:	0f 84 eb 00 00 00    	je     2b1e <dirfile+0x1be>
-  if(unlink("dirfile") != 0){
-    2a33:	83 ec 0c             	sub    $0xc,%esp
-    2a36:	68 a5 49 00 00       	push   $0x49a5
-    2a3b:	e8 e3 0e 00 00       	call   3923 <unlink>
-    2a40:	83 c4 10             	add    $0x10,%esp
-    2a43:	85 c0                	test   %eax,%eax
-    2a45:	0f 85 c0 00 00 00    	jne    2b0b <dirfile+0x1ab>
-  fd = open(".", O_RDWR);
-    2a4b:	83 ec 08             	sub    $0x8,%esp
-    2a4e:	6a 02                	push   $0x2
-    2a50:	68 9e 45 00 00       	push   $0x459e
-    2a55:	e8 b9 0e 00 00       	call   3913 <open>
-  if(fd >= 0){
-    2a5a:	83 c4 10             	add    $0x10,%esp
-    2a5d:	85 c0                	test   %eax,%eax
-    2a5f:	0f 89 93 00 00 00    	jns    2af8 <dirfile+0x198>
-  fd = open(".", 0);
-    2a65:	83 ec 08             	sub    $0x8,%esp
-    2a68:	6a 00                	push   $0x0
-    2a6a:	68 9e 45 00 00       	push   $0x459e
-    2a6f:	e8 9f 0e 00 00       	call   3913 <open>
-  if(write(fd, "x", 1) > 0){
-    2a74:	83 c4 0c             	add    $0xc,%esp
-    2a77:	6a 01                	push   $0x1
-  fd = open(".", 0);
-    2a79:	89 c3                	mov    %eax,%ebx
-  if(write(fd, "x", 1) > 0){
-    2a7b:	68 81 46 00 00       	push   $0x4681
-    2a80:	50                   	push   %eax
-    2a81:	e8 6d 0e 00 00       	call   38f3 <write>
-    2a86:	83 c4 10             	add    $0x10,%esp
-    2a89:	85 c0                	test   %eax,%eax
-    2a8b:	7f 58                	jg     2ae5 <dirfile+0x185>
-  close(fd);
-    2a8d:	83 ec 0c             	sub    $0xc,%esp
-    2a90:	53                   	push   %ebx
-    2a91:	e8 65 0e 00 00       	call   38fb <close>
-  printf(1, "dir vs file OK\n");
-    2a96:	58                   	pop    %eax
-    2a97:	5a                   	pop    %edx
-    2a98:	68 75 4a 00 00       	push   $0x4a75
-    2a9d:	6a 01                	push   $0x1
-    2a9f:	e8 7c 0f 00 00       	call   3a20 <printf>
-}
-    2aa4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    2aa7:	83 c4 10             	add    $0x10,%esp
-    2aaa:	c9                   	leave
-    2aab:	c3                   	ret
-    printf(1, "create dirfile/xx succeeded!\n");
-    2aac:	50                   	push   %eax
-    2aad:	50                   	push   %eax
-    2aae:	68 e9 49 00 00       	push   $0x49e9
-    2ab3:	6a 01                	push   $0x1
-    2ab5:	e8 66 0f 00 00       	call   3a20 <printf>
-    exit();
-    2aba:	e8 14 0e 00 00       	call   38d3 <exit>
-    printf(1, "chdir dirfile succeeded!\n");
-    2abf:	52                   	push   %edx
-    2ac0:	52                   	push   %edx
-    2ac1:	68 c4 49 00 00       	push   $0x49c4
-    2ac6:	6a 01                	push   $0x1
-    2ac8:	e8 53 0f 00 00       	call   3a20 <printf>
-    exit();
-    2acd:	e8 01 0e 00 00       	call   38d3 <exit>
-    printf(1, "create dirfile failed\n");
-    2ad2:	51                   	push   %ecx
-    2ad3:	51                   	push   %ecx
-    2ad4:	68 ad 49 00 00       	push   $0x49ad
-    2ad9:	6a 01                	push   $0x1
-    2adb:	e8 40 0f 00 00       	call   3a20 <printf>
-    exit();
-    2ae0:	e8 ee 0d 00 00       	call   38d3 <exit>
-    printf(1, "write . succeeded!\n");
-    2ae5:	51                   	push   %ecx
-    2ae6:	51                   	push   %ecx
-    2ae7:	68 61 4a 00 00       	push   $0x4a61
-    2aec:	6a 01                	push   $0x1
-    2aee:	e8 2d 0f 00 00       	call   3a20 <printf>
-    exit();
-    2af3:	e8 db 0d 00 00       	call   38d3 <exit>
-    printf(1, "open . for writing succeeded!\n");
-    2af8:	53                   	push   %ebx
-    2af9:	53                   	push   %ebx
-    2afa:	68 60 52 00 00       	push   $0x5260
-    2aff:	6a 01                	push   $0x1
-    2b01:	e8 1a 0f 00 00       	call   3a20 <printf>
-    exit();
-    2b06:	e8 c8 0d 00 00       	call   38d3 <exit>
-    printf(1, "unlink dirfile failed!\n");
-    2b0b:	50                   	push   %eax
-    2b0c:	50                   	push   %eax
-    2b0d:	68 49 4a 00 00       	push   $0x4a49
-    2b12:	6a 01                	push   $0x1
-    2b14:	e8 07 0f 00 00       	call   3a20 <printf>
-    exit();
-    2b19:	e8 b5 0d 00 00       	call   38d3 <exit>
-    printf(1, "link to dirfile/xx succeeded!\n");
-    2b1e:	50                   	push   %eax
-    2b1f:	50                   	push   %eax
-    2b20:	68 40 52 00 00       	push   $0x5240
-    2b25:	6a 01                	push   $0x1
-    2b27:	e8 f4 0e 00 00       	call   3a20 <printf>
-    exit();
-    2b2c:	e8 a2 0d 00 00       	call   38d3 <exit>
-    printf(1, "unlink dirfile/xx succeeded!\n");
-    2b31:	50                   	push   %eax
-    2b32:	50                   	push   %eax
-    2b33:	68 24 4a 00 00       	push   $0x4a24
-    2b38:	6a 01                	push   $0x1
-    2b3a:	e8 e1 0e 00 00       	call   3a20 <printf>
-    exit();
-    2b3f:	e8 8f 0d 00 00       	call   38d3 <exit>
-    printf(1, "mkdir dirfile/xx succeeded!\n");
-    2b44:	50                   	push   %eax
-    2b45:	50                   	push   %eax
-    2b46:	68 07 4a 00 00       	push   $0x4a07
-    2b4b:	6a 01                	push   $0x1
-    2b4d:	e8 ce 0e 00 00       	call   3a20 <printf>
-    exit();
-    2b52:	e8 7c 0d 00 00       	call   38d3 <exit>
-    2b57:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    2b5e:	00 
-    2b5f:	90                   	nop
-
-00002b60 <iref>:
-{
-    2b60:	55                   	push   %ebp
-    2b61:	89 e5                	mov    %esp,%ebp
-    2b63:	53                   	push   %ebx
-  printf(1, "empty file name\n");
-    2b64:	bb 33 00 00 00       	mov    $0x33,%ebx
-{
-    2b69:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "empty file name\n");
-    2b6c:	68 85 4a 00 00       	push   $0x4a85
-    2b71:	6a 01                	push   $0x1
-    2b73:	e8 a8 0e 00 00       	call   3a20 <printf>
-    2b78:	83 c4 10             	add    $0x10,%esp
-    2b7b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    if(mkdir("irefd") != 0){
-    2b80:	83 ec 0c             	sub    $0xc,%esp
-    2b83:	68 96 4a 00 00       	push   $0x4a96
-    2b88:	e8 ae 0d 00 00       	call   393b <mkdir>
-    2b8d:	83 c4 10             	add    $0x10,%esp
-    2b90:	85 c0                	test   %eax,%eax
-    2b92:	0f 85 bb 00 00 00    	jne    2c53 <iref+0xf3>
-    if(chdir("irefd") != 0){
-    2b98:	83 ec 0c             	sub    $0xc,%esp
-    2b9b:	68 96 4a 00 00       	push   $0x4a96
-    2ba0:	e8 9e 0d 00 00       	call   3943 <chdir>
-    2ba5:	83 c4 10             	add    $0x10,%esp
-    2ba8:	85 c0                	test   %eax,%eax
-    2baa:	0f 85 b7 00 00 00    	jne    2c67 <iref+0x107>
-    mkdir("");
-    2bb0:	83 ec 0c             	sub    $0xc,%esp
-    2bb3:	68 4b 41 00 00       	push   $0x414b
-    2bb8:	e8 7e 0d 00 00       	call   393b <mkdir>
-    link("README", "");
-    2bbd:	59                   	pop    %ecx
-    2bbe:	58                   	pop    %eax
-    2bbf:	68 4b 41 00 00       	push   $0x414b
-    2bc4:	68 42 4a 00 00       	push   $0x4a42
-    2bc9:	e8 65 0d 00 00       	call   3933 <link>
-    fd = open("", O_CREATE);
-    2bce:	58                   	pop    %eax
-    2bcf:	5a                   	pop    %edx
-    2bd0:	68 00 02 00 00       	push   $0x200
-    2bd5:	68 4b 41 00 00       	push   $0x414b
-    2bda:	e8 34 0d 00 00       	call   3913 <open>
-    if(fd >= 0)
-    2bdf:	83 c4 10             	add    $0x10,%esp
-    2be2:	85 c0                	test   %eax,%eax
-    2be4:	78 0c                	js     2bf2 <iref+0x92>
-      close(fd);
-    2be6:	83 ec 0c             	sub    $0xc,%esp
-    2be9:	50                   	push   %eax
-    2bea:	e8 0c 0d 00 00       	call   38fb <close>
-    2bef:	83 c4 10             	add    $0x10,%esp
-    fd = open("xx", O_CREATE);
-    2bf2:	83 ec 08             	sub    $0x8,%esp
-    2bf5:	68 00 02 00 00       	push   $0x200
-    2bfa:	68 80 46 00 00       	push   $0x4680
-    2bff:	e8 0f 0d 00 00       	call   3913 <open>
-    if(fd >= 0)
-    2c04:	83 c4 10             	add    $0x10,%esp
-    2c07:	85 c0                	test   %eax,%eax
-    2c09:	78 0c                	js     2c17 <iref+0xb7>
-      close(fd);
-    2c0b:	83 ec 0c             	sub    $0xc,%esp
-    2c0e:	50                   	push   %eax
-    2c0f:	e8 e7 0c 00 00       	call   38fb <close>
-    2c14:	83 c4 10             	add    $0x10,%esp
-    unlink("xx");
-    2c17:	83 ec 0c             	sub    $0xc,%esp
-    2c1a:	68 80 46 00 00       	push   $0x4680
-    2c1f:	e8 ff 0c 00 00       	call   3923 <unlink>
-  for(i = 0; i < 50 + 1; i++){
-    2c24:	83 c4 10             	add    $0x10,%esp
-    2c27:	83 eb 01             	sub    $0x1,%ebx
-    2c2a:	0f 85 50 ff ff ff    	jne    2b80 <iref+0x20>
-  chdir("/");
-    2c30:	83 ec 0c             	sub    $0xc,%esp
-    2c33:	68 71 3d 00 00       	push   $0x3d71
-    2c38:	e8 06 0d 00 00       	call   3943 <chdir>
-  printf(1, "empty file name OK\n");
-    2c3d:	58                   	pop    %eax
-    2c3e:	5a                   	pop    %edx
-    2c3f:	68 c4 4a 00 00       	push   $0x4ac4
-    2c44:	6a 01                	push   $0x1
-    2c46:	e8 d5 0d 00 00       	call   3a20 <printf>
-}
-    2c4b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    2c4e:	83 c4 10             	add    $0x10,%esp
-    2c51:	c9                   	leave
-    2c52:	c3                   	ret
-      printf(1, "mkdir irefd failed\n");
-    2c53:	83 ec 08             	sub    $0x8,%esp
-    2c56:	68 9c 4a 00 00       	push   $0x4a9c
-    2c5b:	6a 01                	push   $0x1
-    2c5d:	e8 be 0d 00 00       	call   3a20 <printf>
-      exit();
-    2c62:	e8 6c 0c 00 00       	call   38d3 <exit>
-      printf(1, "chdir irefd failed\n");
-    2c67:	83 ec 08             	sub    $0x8,%esp
-    2c6a:	68 b0 4a 00 00       	push   $0x4ab0
-    2c6f:	6a 01                	push   $0x1
-    2c71:	e8 aa 0d 00 00       	call   3a20 <printf>
-      exit();
-    2c76:	e8 58 0c 00 00       	call   38d3 <exit>
-    2c7b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00002c80 <forktest>:
-{
-    2c80:	55                   	push   %ebp
-    2c81:	89 e5                	mov    %esp,%ebp
-    2c83:	53                   	push   %ebx
-  for(n=0; n<1000; n++){
-    2c84:	31 db                	xor    %ebx,%ebx
-{
-    2c86:	83 ec 0c             	sub    $0xc,%esp
-  printf(1, "fork test\n");
-    2c89:	68 d8 4a 00 00       	push   $0x4ad8
-    2c8e:	6a 01                	push   $0x1
-    2c90:	e8 8b 0d 00 00       	call   3a20 <printf>
-    2c95:	83 c4 10             	add    $0x10,%esp
-    2c98:	eb 13                	jmp    2cad <forktest+0x2d>
-    2c9a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(pid == 0)
-    2ca0:	74 4a                	je     2cec <forktest+0x6c>
-  for(n=0; n<1000; n++){
-    2ca2:	83 c3 01             	add    $0x1,%ebx
-    2ca5:	81 fb e8 03 00 00    	cmp    $0x3e8,%ebx
-    2cab:	74 6b                	je     2d18 <forktest+0x98>
-    pid = fork();
-    2cad:	e8 19 0c 00 00       	call   38cb <fork>
-    if(pid < 0)
-    2cb2:	85 c0                	test   %eax,%eax
-    2cb4:	79 ea                	jns    2ca0 <forktest+0x20>
-  for(; n > 0; n--){
-    2cb6:	85 db                	test   %ebx,%ebx
-    2cb8:	74 14                	je     2cce <forktest+0x4e>
-    2cba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    if(wait() < 0){
-    2cc0:	e8 16 0c 00 00       	call   38db <wait>
-    2cc5:	85 c0                	test   %eax,%eax
-    2cc7:	78 28                	js     2cf1 <forktest+0x71>
-  for(; n > 0; n--){
-    2cc9:	83 eb 01             	sub    $0x1,%ebx
-    2ccc:	75 f2                	jne    2cc0 <forktest+0x40>
-  if(wait() != -1){
-    2cce:	e8 08 0c 00 00       	call   38db <wait>
-    2cd3:	83 f8 ff             	cmp    $0xffffffff,%eax
-    2cd6:	75 2d                	jne    2d05 <forktest+0x85>
-  printf(1, "fork test OK\n");
-    2cd8:	83 ec 08             	sub    $0x8,%esp
-    2cdb:	68 0a 4b 00 00       	push   $0x4b0a
-    2ce0:	6a 01                	push   $0x1
-    2ce2:	e8 39 0d 00 00       	call   3a20 <printf>
-}
-    2ce7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    2cea:	c9                   	leave
-    2ceb:	c3                   	ret
-      exit();
-    2cec:	e8 e2 0b 00 00       	call   38d3 <exit>
-      printf(1, "wait stopped early\n");
-    2cf1:	83 ec 08             	sub    $0x8,%esp
-    2cf4:	68 e3 4a 00 00       	push   $0x4ae3
-    2cf9:	6a 01                	push   $0x1
-    2cfb:	e8 20 0d 00 00       	call   3a20 <printf>
-      exit();
-    2d00:	e8 ce 0b 00 00       	call   38d3 <exit>
-    printf(1, "wait got too many\n");
-    2d05:	52                   	push   %edx
-    2d06:	52                   	push   %edx
-    2d07:	68 f7 4a 00 00       	push   $0x4af7
-    2d0c:	6a 01                	push   $0x1
-    2d0e:	e8 0d 0d 00 00       	call   3a20 <printf>
-    exit();
-    2d13:	e8 bb 0b 00 00       	call   38d3 <exit>
-    printf(1, "fork claimed to work 1000 times!\n");
-    2d18:	50                   	push   %eax
-    2d19:	50                   	push   %eax
-    2d1a:	68 80 52 00 00       	push   $0x5280
-    2d1f:	6a 01                	push   $0x1
-    2d21:	e8 fa 0c 00 00       	call   3a20 <printf>
-    exit();
-    2d26:	e8 a8 0b 00 00       	call   38d3 <exit>
-    2d2b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00002d30 <sbrktest>:
-{
-    2d30:	55                   	push   %ebp
-    2d31:	89 e5                	mov    %esp,%ebp
-    2d33:	57                   	push   %edi
-    2d34:	56                   	push   %esi
-  for(i = 0; i < 5000; i++){
-    2d35:	31 f6                	xor    %esi,%esi
-{
-    2d37:	53                   	push   %ebx
-    2d38:	83 ec 64             	sub    $0x64,%esp
-  printf(stdout, "sbrk test\n");
-    2d3b:	68 18 4b 00 00       	push   $0x4b18
-    2d40:	ff 35 08 5e 00 00    	push   0x5e08
-    2d46:	e8 d5 0c 00 00       	call   3a20 <printf>
-  oldbrk = sbrk(0);
-    2d4b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2d52:	e8 04 0c 00 00       	call   395b <sbrk>
-    2d57:	89 45 a4             	mov    %eax,-0x5c(%ebp)
-  a = sbrk(0);
-    2d5a:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    2d61:	e8 f5 0b 00 00       	call   395b <sbrk>
-    2d66:	83 c4 10             	add    $0x10,%esp
-    2d69:	89 c3                	mov    %eax,%ebx
-  for(i = 0; i < 5000; i++){
-    2d6b:	eb 05                	jmp    2d72 <sbrktest+0x42>
-    2d6d:	8d 76 00             	lea    0x0(%esi),%esi
-    2d70:	89 c3                	mov    %eax,%ebx
-    b = sbrk(1);
-    2d72:	83 ec 0c             	sub    $0xc,%esp
-    2d75:	6a 01                	push   $0x1
-    2d77:	e8 df 0b 00 00       	call   395b <sbrk>
-    if(b != a){
-    2d7c:	83 c4 10             	add    $0x10,%esp
-    2d7f:	39 d8                	cmp    %ebx,%eax
-    2d81:	0f 85 9c 02 00 00    	jne    3023 <sbrktest+0x2f3>
-  for(i = 0; i < 5000; i++){
-    2d87:	83 c6 01             	add    $0x1,%esi
-    *b = 1;
-    2d8a:	c6 03 01             	movb   $0x1,(%ebx)
-    a = b + 1;
-    2d8d:	8d 43 01             	lea    0x1(%ebx),%eax
-  for(i = 0; i < 5000; i++){
-    2d90:	81 fe 88 13 00 00    	cmp    $0x1388,%esi
-    2d96:	75 d8                	jne    2d70 <sbrktest+0x40>
-  pid = fork();
-    2d98:	e8 2e 0b 00 00       	call   38cb <fork>
-    2d9d:	89 c6                	mov    %eax,%esi
-  if(pid < 0){
-    2d9f:	85 c0                	test   %eax,%eax
-    2da1:	0f 88 02 03 00 00    	js     30a9 <sbrktest+0x379>
-  c = sbrk(1);
-    2da7:	83 ec 0c             	sub    $0xc,%esp
-  if(c != a + 1){
-    2daa:	83 c3 02             	add    $0x2,%ebx
-  c = sbrk(1);
-    2dad:	6a 01                	push   $0x1
-    2daf:	e8 a7 0b 00 00       	call   395b <sbrk>
-  c = sbrk(1);
-    2db4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
-    2dbb:	e8 9b 0b 00 00       	call   395b <sbrk>
-  if(c != a + 1){
-    2dc0:	83 c4 10             	add    $0x10,%esp
-    2dc3:	39 c3                	cmp    %eax,%ebx
-    2dc5:	0f 85 3b 03 00 00    	jne    3106 <sbrktest+0x3d6>
-  if(pid == 0)
-    2dcb:	85 f6                	test   %esi,%esi
-    2dcd:	0f 84 2e 03 00 00    	je     3101 <sbrktest+0x3d1>
-  wait();
-    2dd3:	e8 03 0b 00 00       	call   38db <wait>
-  a = sbrk(0);
-    2dd8:	83 ec 0c             	sub    $0xc,%esp
-    2ddb:	6a 00                	push   $0x0
-    2ddd:	e8 79 0b 00 00       	call   395b <sbrk>
-    2de2:	89 c3                	mov    %eax,%ebx
-  amt = (BIG) - (uint)a;
-    2de4:	b8 00 00 40 06       	mov    $0x6400000,%eax
-    2de9:	29 d8                	sub    %ebx,%eax
-  p = sbrk(amt);
-    2deb:	89 04 24             	mov    %eax,(%esp)
-    2dee:	e8 68 0b 00 00       	call   395b <sbrk>
-  if (p != a) {
-    2df3:	83 c4 10             	add    $0x10,%esp
-    2df6:	39 c3                	cmp    %eax,%ebx
-    2df8:	0f 85 94 02 00 00    	jne    3092 <sbrktest+0x362>
-  a = sbrk(0);
-    2dfe:	83 ec 0c             	sub    $0xc,%esp
-  *lastaddr = 99;
-    2e01:	c6 05 ff ff 3f 06 63 	movb   $0x63,0x63fffff
-  a = sbrk(0);
-    2e08:	6a 00                	push   $0x0
-    2e0a:	e8 4c 0b 00 00       	call   395b <sbrk>
-  c = sbrk(-4096);
-    2e0f:	c7 04 24 00 f0 ff ff 	movl   $0xfffff000,(%esp)
-  a = sbrk(0);
-    2e16:	89 c3                	mov    %eax,%ebx
-  c = sbrk(-4096);
-    2e18:	e8 3e 0b 00 00       	call   395b <sbrk>
-  if(c == (char*)0xffffffff){
-    2e1d:	83 c4 10             	add    $0x10,%esp
-    2e20:	83 f8 ff             	cmp    $0xffffffff,%eax
-    2e23:	0f 84 22 03 00 00    	je     314b <sbrktest+0x41b>
-  c = sbrk(0);
-    2e29:	83 ec 0c             	sub    $0xc,%esp
-    2e2c:	6a 00                	push   $0x0
-    2e2e:	e8 28 0b 00 00       	call   395b <sbrk>
-  if(c != a - 4096){
-    2e33:	8d 93 00 f0 ff ff    	lea    -0x1000(%ebx),%edx
-    2e39:	83 c4 10             	add    $0x10,%esp
-    2e3c:	39 d0                	cmp    %edx,%eax
-    2e3e:	0f 85 f0 02 00 00    	jne    3134 <sbrktest+0x404>
-  a = sbrk(0);
-    2e44:	83 ec 0c             	sub    $0xc,%esp
-    2e47:	6a 00                	push   $0x0
-    2e49:	e8 0d 0b 00 00       	call   395b <sbrk>
-  c = sbrk(4096);
-    2e4e:	c7 04 24 00 10 00 00 	movl   $0x1000,(%esp)
-  a = sbrk(0);
-    2e55:	89 c3                	mov    %eax,%ebx
-  c = sbrk(4096);
-    2e57:	e8 ff 0a 00 00       	call   395b <sbrk>
-  if(c != a || sbrk(0) != a + 4096){
-    2e5c:	83 c4 10             	add    $0x10,%esp
-  c = sbrk(4096);
-    2e5f:	89 c6                	mov    %eax,%esi
-  if(c != a || sbrk(0) != a + 4096){
-    2e61:	39 c3                	cmp    %eax,%ebx
-    2e63:	0f 85 b4 02 00 00    	jne    311d <sbrktest+0x3ed>
-    2e69:	83 ec 0c             	sub    $0xc,%esp
-    2e6c:	6a 00                	push   $0x0
-    2e6e:	e8 e8 0a 00 00       	call   395b <sbrk>
-    2e73:	8d 93 00 10 00 00    	lea    0x1000(%ebx),%edx
-    2e79:	83 c4 10             	add    $0x10,%esp
-    2e7c:	39 c2                	cmp    %eax,%edx
-    2e7e:	0f 85 99 02 00 00    	jne    311d <sbrktest+0x3ed>
-  if(*lastaddr == 99){
-    2e84:	80 3d ff ff 3f 06 63 	cmpb   $0x63,0x63fffff
-    2e8b:	0f 84 2f 02 00 00    	je     30c0 <sbrktest+0x390>
-  a = sbrk(0);
-    2e91:	83 ec 0c             	sub    $0xc,%esp
-    2e94:	6a 00                	push   $0x0
-    2e96:	e8 c0 0a 00 00       	call   395b <sbrk>
-  c = sbrk(-(sbrk(0) - oldbrk));
-    2e9b:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-  a = sbrk(0);
-    2ea2:	89 c3                	mov    %eax,%ebx
-  c = sbrk(-(sbrk(0) - oldbrk));
-    2ea4:	e8 b2 0a 00 00       	call   395b <sbrk>
-    2ea9:	89 c2                	mov    %eax,%edx
-    2eab:	8b 45 a4             	mov    -0x5c(%ebp),%eax
-    2eae:	29 d0                	sub    %edx,%eax
-    2eb0:	89 04 24             	mov    %eax,(%esp)
-    2eb3:	e8 a3 0a 00 00       	call   395b <sbrk>
-  if(c != a){
-    2eb8:	83 c4 10             	add    $0x10,%esp
-    2ebb:	39 c3                	cmp    %eax,%ebx
-    2ebd:	0f 85 b8 01 00 00    	jne    307b <sbrktest+0x34b>
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    2ec3:	bb 00 00 00 80       	mov    $0x80000000,%ebx
-    2ec8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    2ecf:	00 
-    ppid = getpid();
-    2ed0:	e8 7e 0a 00 00       	call   3953 <getpid>
-    2ed5:	89 c6                	mov    %eax,%esi
-    pid = fork();
-    2ed7:	e8 ef 09 00 00       	call   38cb <fork>
-    if(pid < 0){
-    2edc:	85 c0                	test   %eax,%eax
-    2ede:	0f 88 5d 01 00 00    	js     3041 <sbrktest+0x311>
-    if(pid == 0){
-    2ee4:	0f 84 6f 01 00 00    	je     3059 <sbrktest+0x329>
-    wait();
-    2eea:	e8 ec 09 00 00       	call   38db <wait>
-  for(a = (char*)(KERNBASE); a < (char*) (KERNBASE+2000000); a += 50000){
-    2eef:	81 c3 50 c3 00 00    	add    $0xc350,%ebx
-    2ef5:	81 fb 80 84 1e 80    	cmp    $0x801e8480,%ebx
-    2efb:	75 d3                	jne    2ed0 <sbrktest+0x1a0>
-  if(pipe(fds) != 0){
-    2efd:	83 ec 0c             	sub    $0xc,%esp
-    2f00:	8d 45 b8             	lea    -0x48(%ebp),%eax
-    2f03:	50                   	push   %eax
-    2f04:	e8 da 09 00 00       	call   38e3 <pipe>
-    2f09:	83 c4 10             	add    $0x10,%esp
-    2f0c:	85 c0                	test   %eax,%eax
-    2f0e:	0f 85 da 01 00 00    	jne    30ee <sbrktest+0x3be>
-    2f14:	8d 5d c0             	lea    -0x40(%ebp),%ebx
-    2f17:	8d 75 e8             	lea    -0x18(%ebp),%esi
-    2f1a:	89 df                	mov    %ebx,%edi
-    2f1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    if((pids[i] = fork()) == 0){
-    2f20:	e8 a6 09 00 00       	call   38cb <fork>
-    2f25:	89 07                	mov    %eax,(%edi)
-    2f27:	85 c0                	test   %eax,%eax
-    2f29:	0f 84 91 00 00 00    	je     2fc0 <sbrktest+0x290>
-    if(pids[i] != -1)
-    2f2f:	83 f8 ff             	cmp    $0xffffffff,%eax
-    2f32:	74 14                	je     2f48 <sbrktest+0x218>
-      read(fds[0], &scratch, 1);
-    2f34:	83 ec 04             	sub    $0x4,%esp
-    2f37:	8d 45 b7             	lea    -0x49(%ebp),%eax
-    2f3a:	6a 01                	push   $0x1
-    2f3c:	50                   	push   %eax
-    2f3d:	ff 75 b8             	push   -0x48(%ebp)
-    2f40:	e8 a6 09 00 00       	call   38eb <read>
-    2f45:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    2f48:	83 c7 04             	add    $0x4,%edi
-    2f4b:	39 f7                	cmp    %esi,%edi
-    2f4d:	75 d1                	jne    2f20 <sbrktest+0x1f0>
-  c = sbrk(4096);
-    2f4f:	83 ec 0c             	sub    $0xc,%esp
-    2f52:	68 00 10 00 00       	push   $0x1000
-    2f57:	e8 ff 09 00 00       	call   395b <sbrk>
-    2f5c:	83 c4 10             	add    $0x10,%esp
-    2f5f:	89 c7                	mov    %eax,%edi
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    2f61:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(pids[i] == -1)
-    2f68:	8b 03                	mov    (%ebx),%eax
-    2f6a:	83 f8 ff             	cmp    $0xffffffff,%eax
-    2f6d:	74 11                	je     2f80 <sbrktest+0x250>
-    kill(pids[i]);
-    2f6f:	83 ec 0c             	sub    $0xc,%esp
-    2f72:	50                   	push   %eax
-    2f73:	e8 8b 09 00 00       	call   3903 <kill>
-    wait();
-    2f78:	e8 5e 09 00 00       	call   38db <wait>
-    2f7d:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
-    2f80:	83 c3 04             	add    $0x4,%ebx
-    2f83:	39 f3                	cmp    %esi,%ebx
-    2f85:	75 e1                	jne    2f68 <sbrktest+0x238>
-  if(c == (char*)0xffffffff){
-    2f87:	83 ff ff             	cmp    $0xffffffff,%edi
-    2f8a:	0f 84 47 01 00 00    	je     30d7 <sbrktest+0x3a7>
-  if(sbrk(0) > oldbrk)
-    2f90:	83 ec 0c             	sub    $0xc,%esp
-    2f93:	6a 00                	push   $0x0
-    2f95:	e8 c1 09 00 00       	call   395b <sbrk>
-    2f9a:	83 c4 10             	add    $0x10,%esp
-    2f9d:	39 45 a4             	cmp    %eax,-0x5c(%ebp)
-    2fa0:	72 60                	jb     3002 <sbrktest+0x2d2>
-  printf(stdout, "sbrk test OK\n");
-    2fa2:	83 ec 08             	sub    $0x8,%esp
-    2fa5:	68 c0 4b 00 00       	push   $0x4bc0
-    2faa:	ff 35 08 5e 00 00    	push   0x5e08
-    2fb0:	e8 6b 0a 00 00       	call   3a20 <printf>
-}
-    2fb5:	83 c4 10             	add    $0x10,%esp
-    2fb8:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    2fbb:	5b                   	pop    %ebx
-    2fbc:	5e                   	pop    %esi
-    2fbd:	5f                   	pop    %edi
-    2fbe:	5d                   	pop    %ebp
-    2fbf:	c3                   	ret
-      sbrk(BIG - (uint)sbrk(0));
-    2fc0:	83 ec 0c             	sub    $0xc,%esp
-    2fc3:	6a 00                	push   $0x0
-    2fc5:	e8 91 09 00 00       	call   395b <sbrk>
-    2fca:	89 c2                	mov    %eax,%edx
-    2fcc:	b8 00 00 40 06       	mov    $0x6400000,%eax
-    2fd1:	29 d0                	sub    %edx,%eax
-    2fd3:	89 04 24             	mov    %eax,(%esp)
-    2fd6:	e8 80 09 00 00       	call   395b <sbrk>
-      write(fds[1], "x", 1);
-    2fdb:	83 c4 0c             	add    $0xc,%esp
-    2fde:	6a 01                	push   $0x1
-    2fe0:	68 81 46 00 00       	push   $0x4681
-    2fe5:	ff 75 bc             	push   -0x44(%ebp)
-    2fe8:	e8 06 09 00 00       	call   38f3 <write>
-    2fed:	83 c4 10             	add    $0x10,%esp
-      for(;;) sleep(1000);
-    2ff0:	83 ec 0c             	sub    $0xc,%esp
-    2ff3:	68 e8 03 00 00       	push   $0x3e8
-    2ff8:	e8 66 09 00 00       	call   3963 <sleep>
-    2ffd:	83 c4 10             	add    $0x10,%esp
-    3000:	eb ee                	jmp    2ff0 <sbrktest+0x2c0>
-    sbrk(-(sbrk(0) - oldbrk));
-    3002:	83 ec 0c             	sub    $0xc,%esp
-    3005:	6a 00                	push   $0x0
-    3007:	e8 4f 09 00 00       	call   395b <sbrk>
-    300c:	89 c2                	mov    %eax,%edx
-    300e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
-    3011:	29 d0                	sub    %edx,%eax
-    3013:	89 04 24             	mov    %eax,(%esp)
-    3016:	e8 40 09 00 00       	call   395b <sbrk>
-    301b:	83 c4 10             	add    $0x10,%esp
-    301e:	e9 7f ff ff ff       	jmp    2fa2 <sbrktest+0x272>
-      printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
-    3023:	83 ec 0c             	sub    $0xc,%esp
-    3026:	50                   	push   %eax
-    3027:	53                   	push   %ebx
-    3028:	56                   	push   %esi
-    3029:	68 23 4b 00 00       	push   $0x4b23
-    302e:	ff 35 08 5e 00 00    	push   0x5e08
-    3034:	e8 e7 09 00 00       	call   3a20 <printf>
-      exit();
-    3039:	83 c4 20             	add    $0x20,%esp
-    303c:	e8 92 08 00 00       	call   38d3 <exit>
-      printf(stdout, "fork failed\n");
-    3041:	83 ec 08             	sub    $0x8,%esp
-    3044:	68 69 4c 00 00       	push   $0x4c69
-    3049:	ff 35 08 5e 00 00    	push   0x5e08
-    304f:	e8 cc 09 00 00       	call   3a20 <printf>
-      exit();
-    3054:	e8 7a 08 00 00       	call   38d3 <exit>
-      printf(stdout, "oops could read %x = %x\n", a, *a);
-    3059:	0f be 03             	movsbl (%ebx),%eax
-    305c:	50                   	push   %eax
-    305d:	53                   	push   %ebx
-    305e:	68 8c 4b 00 00       	push   $0x4b8c
-    3063:	ff 35 08 5e 00 00    	push   0x5e08
-    3069:	e8 b2 09 00 00       	call   3a20 <printf>
-      kill(ppid);
-    306e:	89 34 24             	mov    %esi,(%esp)
-    3071:	e8 8d 08 00 00       	call   3903 <kill>
-      exit();
-    3076:	e8 58 08 00 00       	call   38d3 <exit>
-    printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
-    307b:	50                   	push   %eax
-    307c:	53                   	push   %ebx
-    307d:	68 74 53 00 00       	push   $0x5374
-    3082:	ff 35 08 5e 00 00    	push   0x5e08
-    3088:	e8 93 09 00 00       	call   3a20 <printf>
-    exit();
-    308d:	e8 41 08 00 00       	call   38d3 <exit>
-    printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
-    3092:	56                   	push   %esi
-    3093:	56                   	push   %esi
-    3094:	68 a4 52 00 00       	push   $0x52a4
-    3099:	ff 35 08 5e 00 00    	push   0x5e08
-    309f:	e8 7c 09 00 00       	call   3a20 <printf>
-    exit();
-    30a4:	e8 2a 08 00 00       	call   38d3 <exit>
-    printf(stdout, "sbrk test fork failed\n");
-    30a9:	50                   	push   %eax
-    30aa:	50                   	push   %eax
-    30ab:	68 3e 4b 00 00       	push   $0x4b3e
-    30b0:	ff 35 08 5e 00 00    	push   0x5e08
-    30b6:	e8 65 09 00 00       	call   3a20 <printf>
-    exit();
-    30bb:	e8 13 08 00 00       	call   38d3 <exit>
-    printf(stdout, "sbrk de-allocation didn't really deallocate\n");
-    30c0:	51                   	push   %ecx
-    30c1:	51                   	push   %ecx
-    30c2:	68 44 53 00 00       	push   $0x5344
-    30c7:	ff 35 08 5e 00 00    	push   0x5e08
-    30cd:	e8 4e 09 00 00       	call   3a20 <printf>
-    exit();
-    30d2:	e8 fc 07 00 00       	call   38d3 <exit>
-    printf(stdout, "failed sbrk leaked memory\n");
-    30d7:	50                   	push   %eax
-    30d8:	50                   	push   %eax
-    30d9:	68 a5 4b 00 00       	push   $0x4ba5
-    30de:	ff 35 08 5e 00 00    	push   0x5e08
-    30e4:	e8 37 09 00 00       	call   3a20 <printf>
-    exit();
-    30e9:	e8 e5 07 00 00       	call   38d3 <exit>
-    printf(1, "pipe() failed\n");
-    30ee:	52                   	push   %edx
-    30ef:	52                   	push   %edx
-    30f0:	68 61 40 00 00       	push   $0x4061
-    30f5:	6a 01                	push   $0x1
-    30f7:	e8 24 09 00 00       	call   3a20 <printf>
-    exit();
-    30fc:	e8 d2 07 00 00       	call   38d3 <exit>
-    exit();
-    3101:	e8 cd 07 00 00       	call   38d3 <exit>
-    printf(stdout, "sbrk test failed post-fork\n");
-    3106:	57                   	push   %edi
-    3107:	57                   	push   %edi
-    3108:	68 55 4b 00 00       	push   $0x4b55
-    310d:	ff 35 08 5e 00 00    	push   0x5e08
-    3113:	e8 08 09 00 00       	call   3a20 <printf>
-    exit();
-    3118:	e8 b6 07 00 00       	call   38d3 <exit>
-    printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
-    311d:	56                   	push   %esi
-    311e:	53                   	push   %ebx
-    311f:	68 1c 53 00 00       	push   $0x531c
-    3124:	ff 35 08 5e 00 00    	push   0x5e08
-    312a:	e8 f1 08 00 00       	call   3a20 <printf>
-    exit();
-    312f:	e8 9f 07 00 00       	call   38d3 <exit>
-    printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
-    3134:	50                   	push   %eax
-    3135:	53                   	push   %ebx
-    3136:	68 e4 52 00 00       	push   $0x52e4
-    313b:	ff 35 08 5e 00 00    	push   0x5e08
-    3141:	e8 da 08 00 00       	call   3a20 <printf>
-    exit();
-    3146:	e8 88 07 00 00       	call   38d3 <exit>
-    printf(stdout, "sbrk could not deallocate\n");
-    314b:	53                   	push   %ebx
-    314c:	53                   	push   %ebx
-    314d:	68 71 4b 00 00       	push   $0x4b71
-    3152:	ff 35 08 5e 00 00    	push   0x5e08
-    3158:	e8 c3 08 00 00       	call   3a20 <printf>
-    exit();
-    315d:	e8 71 07 00 00       	call   38d3 <exit>
-    3162:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    3169:	00 
-    316a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00003170 <validateint>:
-}
-    3170:	c3                   	ret
-    3171:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    3178:	00 
-    3179:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00003180 <validatetest>:
-{
-    3180:	55                   	push   %ebp
-    3181:	89 e5                	mov    %esp,%ebp
-    3183:	56                   	push   %esi
-  for(p = 0; p <= (uint)hi; p += 4096){
-    3184:	31 f6                	xor    %esi,%esi
-{
-    3186:	53                   	push   %ebx
-  printf(stdout, "validate test\n");
-    3187:	83 ec 08             	sub    $0x8,%esp
-    318a:	68 ce 4b 00 00       	push   $0x4bce
-    318f:	ff 35 08 5e 00 00    	push   0x5e08
-    3195:	e8 86 08 00 00       	call   3a20 <printf>
-    319a:	83 c4 10             	add    $0x10,%esp
-    319d:	8d 76 00             	lea    0x0(%esi),%esi
-    if((pid = fork()) == 0){
-    31a0:	e8 26 07 00 00       	call   38cb <fork>
-    31a5:	89 c3                	mov    %eax,%ebx
-    31a7:	85 c0                	test   %eax,%eax
-    31a9:	74 63                	je     320e <validatetest+0x8e>
-    sleep(0);
-    31ab:	83 ec 0c             	sub    $0xc,%esp
-    31ae:	6a 00                	push   $0x0
-    31b0:	e8 ae 07 00 00       	call   3963 <sleep>
-    sleep(0);
-    31b5:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
-    31bc:	e8 a2 07 00 00       	call   3963 <sleep>
-    kill(pid);
-    31c1:	89 1c 24             	mov    %ebx,(%esp)
-    31c4:	e8 3a 07 00 00       	call   3903 <kill>
-    wait();
-    31c9:	e8 0d 07 00 00       	call   38db <wait>
-    if(link("nosuchfile", (char*)p) != -1){
-    31ce:	58                   	pop    %eax
-    31cf:	5a                   	pop    %edx
-    31d0:	56                   	push   %esi
-    31d1:	68 dd 4b 00 00       	push   $0x4bdd
-    31d6:	e8 58 07 00 00       	call   3933 <link>
-    31db:	83 c4 10             	add    $0x10,%esp
-    31de:	83 f8 ff             	cmp    $0xffffffff,%eax
-    31e1:	75 30                	jne    3213 <validatetest+0x93>
-  for(p = 0; p <= (uint)hi; p += 4096){
-    31e3:	81 c6 00 10 00 00    	add    $0x1000,%esi
-    31e9:	81 fe 00 40 11 00    	cmp    $0x114000,%esi
-    31ef:	75 af                	jne    31a0 <validatetest+0x20>
-  printf(stdout, "validate ok\n");
-    31f1:	83 ec 08             	sub    $0x8,%esp
-    31f4:	68 01 4c 00 00       	push   $0x4c01
-    31f9:	ff 35 08 5e 00 00    	push   0x5e08
-    31ff:	e8 1c 08 00 00       	call   3a20 <printf>
-}
-    3204:	83 c4 10             	add    $0x10,%esp
-    3207:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    320a:	5b                   	pop    %ebx
-    320b:	5e                   	pop    %esi
-    320c:	5d                   	pop    %ebp
-    320d:	c3                   	ret
-      exit();
-    320e:	e8 c0 06 00 00       	call   38d3 <exit>
-      printf(stdout, "link should not succeed\n");
-    3213:	83 ec 08             	sub    $0x8,%esp
-    3216:	68 e8 4b 00 00       	push   $0x4be8
-    321b:	ff 35 08 5e 00 00    	push   0x5e08
-    3221:	e8 fa 07 00 00       	call   3a20 <printf>
-      exit();
-    3226:	e8 a8 06 00 00       	call   38d3 <exit>
-    322b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00003230 <bsstest>:
-{
-    3230:	55                   	push   %ebp
-    3231:	89 e5                	mov    %esp,%ebp
-    3233:	83 ec 10             	sub    $0x10,%esp
-  printf(stdout, "bss test\n");
-    3236:	68 0e 4c 00 00       	push   $0x4c0e
-    323b:	ff 35 08 5e 00 00    	push   0x5e08
-    3241:	e8 da 07 00 00       	call   3a20 <printf>
-    3246:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; i < sizeof(uninit); i++){
-    3249:	31 c0                	xor    %eax,%eax
-    324b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    if(uninit[i] != '\0'){
-    3250:	80 b8 20 5e 00 00 00 	cmpb   $0x0,0x5e20(%eax)
-    3257:	75 22                	jne    327b <bsstest+0x4b>
-  for(i = 0; i < sizeof(uninit); i++){
-    3259:	83 c0 01             	add    $0x1,%eax
-    325c:	3d 10 27 00 00       	cmp    $0x2710,%eax
-    3261:	75 ed                	jne    3250 <bsstest+0x20>
-  printf(stdout, "bss test ok\n");
-    3263:	83 ec 08             	sub    $0x8,%esp
-    3266:	68 29 4c 00 00       	push   $0x4c29
-    326b:	ff 35 08 5e 00 00    	push   0x5e08
-    3271:	e8 aa 07 00 00       	call   3a20 <printf>
-}
-    3276:	83 c4 10             	add    $0x10,%esp
-    3279:	c9                   	leave
-    327a:	c3                   	ret
-      printf(stdout, "bss test failed\n");
-    327b:	83 ec 08             	sub    $0x8,%esp
-    327e:	68 18 4c 00 00       	push   $0x4c18
-    3283:	ff 35 08 5e 00 00    	push   0x5e08
-    3289:	e8 92 07 00 00       	call   3a20 <printf>
-      exit();
-    328e:	e8 40 06 00 00       	call   38d3 <exit>
-    3293:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    329a:	00 
-    329b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-000032a0 <bigargtest>:
-{
-    32a0:	55                   	push   %ebp
-    32a1:	89 e5                	mov    %esp,%ebp
-    32a3:	83 ec 14             	sub    $0x14,%esp
-  unlink("bigarg-ok");
-    32a6:	68 36 4c 00 00       	push   $0x4c36
-    32ab:	e8 73 06 00 00       	call   3923 <unlink>
-  pid = fork();
-    32b0:	e8 16 06 00 00       	call   38cb <fork>
-  if(pid == 0){
-    32b5:	83 c4 10             	add    $0x10,%esp
-    32b8:	85 c0                	test   %eax,%eax
-    32ba:	74 3f                	je     32fb <bigargtest+0x5b>
-  } else if(pid < 0){
-    32bc:	0f 88 d9 00 00 00    	js     339b <bigargtest+0xfb>
-  wait();
-    32c2:	e8 14 06 00 00       	call   38db <wait>
-  fd = open("bigarg-ok", 0);
-    32c7:	83 ec 08             	sub    $0x8,%esp
-    32ca:	6a 00                	push   $0x0
-    32cc:	68 36 4c 00 00       	push   $0x4c36
-    32d1:	e8 3d 06 00 00       	call   3913 <open>
-  if(fd < 0){
-    32d6:	83 c4 10             	add    $0x10,%esp
-    32d9:	85 c0                	test   %eax,%eax
-    32db:	0f 88 a3 00 00 00    	js     3384 <bigargtest+0xe4>
-  close(fd);
-    32e1:	83 ec 0c             	sub    $0xc,%esp
-    32e4:	50                   	push   %eax
-    32e5:	e8 11 06 00 00       	call   38fb <close>
-  unlink("bigarg-ok");
-    32ea:	c7 04 24 36 4c 00 00 	movl   $0x4c36,(%esp)
-    32f1:	e8 2d 06 00 00       	call   3923 <unlink>
-}
-    32f6:	83 c4 10             	add    $0x10,%esp
-    32f9:	c9                   	leave
-    32fa:	c3                   	ret
-      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    32fb:	c7 04 85 40 a5 00 00 	movl   $0x5398,0xa540(,%eax,4)
-    3302:	98 53 00 00 
-    for(i = 0; i < MAXARG-1; i++)
-    3306:	b8 01 00 00 00       	mov    $0x1,%eax
-      args[i] = "bigargs test: failed\n                                                                                                                                                                                                       ";
-    330b:	c7 04 85 40 a5 00 00 	movl   $0x5398,0xa540(,%eax,4)
-    3312:	98 53 00 00 
-    3316:	c7 04 85 44 a5 00 00 	movl   $0x5398,0xa544(,%eax,4)
-    331d:	98 53 00 00 
-    for(i = 0; i < MAXARG-1; i++)
-    3321:	83 c0 02             	add    $0x2,%eax
-    3324:	83 f8 1f             	cmp    $0x1f,%eax
-    3327:	75 e2                	jne    330b <bigargtest+0x6b>
-    printf(stdout, "bigarg test\n");
-    3329:	50                   	push   %eax
-    args[MAXARG-1] = 0;
-    332a:	31 c9                	xor    %ecx,%ecx
-    printf(stdout, "bigarg test\n");
-    332c:	50                   	push   %eax
-    332d:	68 40 4c 00 00       	push   $0x4c40
-    3332:	ff 35 08 5e 00 00    	push   0x5e08
-    args[MAXARG-1] = 0;
-    3338:	89 0d bc a5 00 00    	mov    %ecx,0xa5bc
-    printf(stdout, "bigarg test\n");
-    333e:	e8 dd 06 00 00       	call   3a20 <printf>
-    exec("echo", args);
-    3343:	58                   	pop    %eax
-    3344:	5a                   	pop    %edx
-    3345:	68 40 a5 00 00       	push   $0xa540
-    334a:	68 0d 3e 00 00       	push   $0x3e0d
-    334f:	e8 b7 05 00 00       	call   390b <exec>
-    printf(stdout, "bigarg test ok\n");
-    3354:	59                   	pop    %ecx
-    3355:	58                   	pop    %eax
-    3356:	68 4d 4c 00 00       	push   $0x4c4d
-    335b:	ff 35 08 5e 00 00    	push   0x5e08
-    3361:	e8 ba 06 00 00       	call   3a20 <printf>
-    fd = open("bigarg-ok", O_CREATE);
-    3366:	58                   	pop    %eax
-    3367:	5a                   	pop    %edx
-    3368:	68 00 02 00 00       	push   $0x200
-    336d:	68 36 4c 00 00       	push   $0x4c36
-    3372:	e8 9c 05 00 00       	call   3913 <open>
-    close(fd);
-    3377:	89 04 24             	mov    %eax,(%esp)
-    337a:	e8 7c 05 00 00       	call   38fb <close>
-    exit();
-    337f:	e8 4f 05 00 00       	call   38d3 <exit>
-    printf(stdout, "bigarg test failed!\n");
-    3384:	50                   	push   %eax
-    3385:	50                   	push   %eax
-    3386:	68 76 4c 00 00       	push   $0x4c76
-    338b:	ff 35 08 5e 00 00    	push   0x5e08
-    3391:	e8 8a 06 00 00       	call   3a20 <printf>
-    exit();
-    3396:	e8 38 05 00 00       	call   38d3 <exit>
-    printf(stdout, "bigargtest: fork failed\n");
-    339b:	52                   	push   %edx
-    339c:	52                   	push   %edx
-    339d:	68 5d 4c 00 00       	push   $0x4c5d
-    33a2:	ff 35 08 5e 00 00    	push   0x5e08
-    33a8:	e8 73 06 00 00       	call   3a20 <printf>
-    exit();
-    33ad:	e8 21 05 00 00       	call   38d3 <exit>
-    33b2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    33b9:	00 
-    33ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000033c0 <fsfull>:
-{
-    33c0:	55                   	push   %ebp
-    33c1:	89 e5                	mov    %esp,%ebp
-    33c3:	57                   	push   %edi
-    33c4:	56                   	push   %esi
-  for(nfiles = 0; ; nfiles++){
-    33c5:	31 f6                	xor    %esi,%esi
-{
-    33c7:	53                   	push   %ebx
-    33c8:	83 ec 54             	sub    $0x54,%esp
-  printf(1, "fsfull test\n");
-    33cb:	68 8b 4c 00 00       	push   $0x4c8b
-    33d0:	6a 01                	push   $0x1
-    33d2:	e8 49 06 00 00       	call   3a20 <printf>
-    33d7:	83 c4 10             	add    $0x10,%esp
-    33da:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-    name[1] = '0' + nfiles / 1000;
-    33e0:	b8 d3 4d 62 10       	mov    $0x10624dd3,%eax
-    name[3] = '0' + (nfiles % 100) / 10;
-    33e5:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
-    printf(1, "writing %s\n", name);
-    33ea:	83 ec 04             	sub    $0x4,%esp
-    name[0] = 'f';
-    33ed:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    33f1:	f7 e6                	mul    %esi
-    name[5] = '\0';
-    33f3:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    33f7:	c1 ea 06             	shr    $0x6,%edx
-    33fa:	8d 42 30             	lea    0x30(%edx),%eax
-    33fd:	88 45 a9             	mov    %al,-0x57(%ebp)
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3400:	69 c2 e8 03 00 00    	imul   $0x3e8,%edx,%eax
-    3406:	89 f2                	mov    %esi,%edx
-    3408:	29 c2                	sub    %eax,%edx
-    340a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
-    340f:	f7 e2                	mul    %edx
-    name[3] = '0' + (nfiles % 100) / 10;
-    3411:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3416:	c1 ea 05             	shr    $0x5,%edx
-    3419:	83 c2 30             	add    $0x30,%edx
-    341c:	88 55 aa             	mov    %dl,-0x56(%ebp)
-    name[3] = '0' + (nfiles % 100) / 10;
-    341f:	f7 e6                	mul    %esi
-    3421:	c1 ea 05             	shr    $0x5,%edx
-    3424:	6b c2 64             	imul   $0x64,%edx,%eax
-    3427:	89 f2                	mov    %esi,%edx
-    3429:	29 c2                	sub    %eax,%edx
-    342b:	89 d0                	mov    %edx,%eax
-    342d:	f7 e1                	mul    %ecx
-    name[4] = '0' + (nfiles % 10);
-    342f:	89 f0                	mov    %esi,%eax
-    name[3] = '0' + (nfiles % 100) / 10;
-    3431:	c1 ea 03             	shr    $0x3,%edx
-    3434:	83 c2 30             	add    $0x30,%edx
-    3437:	88 55 ab             	mov    %dl,-0x55(%ebp)
-    name[4] = '0' + (nfiles % 10);
-    343a:	f7 e1                	mul    %ecx
-    343c:	89 f0                	mov    %esi,%eax
-    343e:	c1 ea 03             	shr    $0x3,%edx
-    3441:	8d 14 92             	lea    (%edx,%edx,4),%edx
-    3444:	01 d2                	add    %edx,%edx
-    3446:	29 d0                	sub    %edx,%eax
-    3448:	83 c0 30             	add    $0x30,%eax
-    344b:	88 45 ac             	mov    %al,-0x54(%ebp)
-    printf(1, "writing %s\n", name);
-    344e:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    3451:	50                   	push   %eax
-    3452:	68 98 4c 00 00       	push   $0x4c98
-    3457:	6a 01                	push   $0x1
-    3459:	e8 c2 05 00 00       	call   3a20 <printf>
-    int fd = open(name, O_CREATE|O_RDWR);
-    345e:	58                   	pop    %eax
-    345f:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    3462:	5a                   	pop    %edx
-    3463:	68 02 02 00 00       	push   $0x202
-    3468:	50                   	push   %eax
-    3469:	e8 a5 04 00 00       	call   3913 <open>
-    if(fd < 0){
-    346e:	83 c4 10             	add    $0x10,%esp
-    int fd = open(name, O_CREATE|O_RDWR);
-    3471:	89 c7                	mov    %eax,%edi
-    if(fd < 0){
-    3473:	85 c0                	test   %eax,%eax
-    3475:	78 4f                	js     34c6 <fsfull+0x106>
-    int total = 0;
-    3477:	31 db                	xor    %ebx,%ebx
-    3479:	eb 07                	jmp    3482 <fsfull+0xc2>
-    347b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-      total += cc;
-    3480:	01 c3                	add    %eax,%ebx
-      int cc = write(fd, buf, 512);
-    3482:	83 ec 04             	sub    $0x4,%esp
-    3485:	68 00 02 00 00       	push   $0x200
-    348a:	68 40 85 00 00       	push   $0x8540
-    348f:	57                   	push   %edi
-    3490:	e8 5e 04 00 00       	call   38f3 <write>
-      if(cc < 512)
-    3495:	83 c4 10             	add    $0x10,%esp
-    3498:	3d ff 01 00 00       	cmp    $0x1ff,%eax
-    349d:	7f e1                	jg     3480 <fsfull+0xc0>
-    printf(1, "wrote %d bytes\n", total);
-    349f:	83 ec 04             	sub    $0x4,%esp
-    34a2:	53                   	push   %ebx
-    34a3:	68 b4 4c 00 00       	push   $0x4cb4
-    34a8:	6a 01                	push   $0x1
-    34aa:	e8 71 05 00 00       	call   3a20 <printf>
-    close(fd);
-    34af:	89 3c 24             	mov    %edi,(%esp)
-    34b2:	e8 44 04 00 00       	call   38fb <close>
-    if(total == 0)
-    34b7:	83 c4 10             	add    $0x10,%esp
-    34ba:	85 db                	test   %ebx,%ebx
-    34bc:	74 1e                	je     34dc <fsfull+0x11c>
-  for(nfiles = 0; ; nfiles++){
-    34be:	83 c6 01             	add    $0x1,%esi
-    34c1:	e9 1a ff ff ff       	jmp    33e0 <fsfull+0x20>
-      printf(1, "open %s failed\n", name);
-    34c6:	83 ec 04             	sub    $0x4,%esp
-    34c9:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    34cc:	50                   	push   %eax
-    34cd:	68 a4 4c 00 00       	push   $0x4ca4
-    34d2:	6a 01                	push   $0x1
-    34d4:	e8 47 05 00 00       	call   3a20 <printf>
-      break;
-    34d9:	83 c4 10             	add    $0x10,%esp
-    name[1] = '0' + nfiles / 1000;
-    34dc:	bf d3 4d 62 10       	mov    $0x10624dd3,%edi
-    name[2] = '0' + (nfiles % 1000) / 100;
-    34e1:	bb 1f 85 eb 51       	mov    $0x51eb851f,%ebx
-    34e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    34ed:	00 
-    34ee:	66 90                	xchg   %ax,%ax
-    name[1] = '0' + nfiles / 1000;
-    34f0:	89 f0                	mov    %esi,%eax
-    unlink(name);
-    34f2:	83 ec 0c             	sub    $0xc,%esp
-    name[0] = 'f';
-    34f5:	c6 45 a8 66          	movb   $0x66,-0x58(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    34f9:	f7 e7                	mul    %edi
-    name[5] = '\0';
-    34fb:	c6 45 ad 00          	movb   $0x0,-0x53(%ebp)
-    name[1] = '0' + nfiles / 1000;
-    34ff:	c1 ea 06             	shr    $0x6,%edx
-    3502:	8d 42 30             	lea    0x30(%edx),%eax
-    3505:	88 45 a9             	mov    %al,-0x57(%ebp)
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3508:	69 c2 e8 03 00 00    	imul   $0x3e8,%edx,%eax
-    350e:	89 f2                	mov    %esi,%edx
-    3510:	29 c2                	sub    %eax,%edx
-    3512:	89 d0                	mov    %edx,%eax
-    3514:	f7 e3                	mul    %ebx
-    name[3] = '0' + (nfiles % 100) / 10;
-    3516:	89 f0                	mov    %esi,%eax
-    name[2] = '0' + (nfiles % 1000) / 100;
-    3518:	c1 ea 05             	shr    $0x5,%edx
-    351b:	83 c2 30             	add    $0x30,%edx
-    351e:	88 55 aa             	mov    %dl,-0x56(%ebp)
-    name[3] = '0' + (nfiles % 100) / 10;
-    3521:	f7 e3                	mul    %ebx
-    3523:	c1 ea 05             	shr    $0x5,%edx
-    3526:	6b ca 64             	imul   $0x64,%edx,%ecx
-    3529:	89 f2                	mov    %esi,%edx
-    352b:	29 ca                	sub    %ecx,%edx
-    352d:	b9 cd cc cc cc       	mov    $0xcccccccd,%ecx
-    3532:	89 d0                	mov    %edx,%eax
-    3534:	f7 e1                	mul    %ecx
-    name[4] = '0' + (nfiles % 10);
-    3536:	89 f0                	mov    %esi,%eax
-    name[3] = '0' + (nfiles % 100) / 10;
-    3538:	c1 ea 03             	shr    $0x3,%edx
-    353b:	83 c2 30             	add    $0x30,%edx
-    353e:	88 55 ab             	mov    %dl,-0x55(%ebp)
-    name[4] = '0' + (nfiles % 10);
-    3541:	f7 e1                	mul    %ecx
-    3543:	89 f0                	mov    %esi,%eax
-    nfiles--;
-    3545:	83 ee 01             	sub    $0x1,%esi
-    name[4] = '0' + (nfiles % 10);
-    3548:	c1 ea 03             	shr    $0x3,%edx
-    354b:	8d 14 92             	lea    (%edx,%edx,4),%edx
-    354e:	01 d2                	add    %edx,%edx
-    3550:	29 d0                	sub    %edx,%eax
-    3552:	83 c0 30             	add    $0x30,%eax
-    3555:	88 45 ac             	mov    %al,-0x54(%ebp)
-    unlink(name);
-    3558:	8d 45 a8             	lea    -0x58(%ebp),%eax
-    355b:	50                   	push   %eax
-    355c:	e8 c2 03 00 00       	call   3923 <unlink>
-  while(nfiles >= 0){
-    3561:	83 c4 10             	add    $0x10,%esp
-    3564:	83 fe ff             	cmp    $0xffffffff,%esi
-    3567:	75 87                	jne    34f0 <fsfull+0x130>
-  printf(1, "fsfull test finished\n");
-    3569:	83 ec 08             	sub    $0x8,%esp
-    356c:	68 c4 4c 00 00       	push   $0x4cc4
-    3571:	6a 01                	push   $0x1
-    3573:	e8 a8 04 00 00       	call   3a20 <printf>
-}
-    3578:	83 c4 10             	add    $0x10,%esp
-    357b:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    357e:	5b                   	pop    %ebx
-    357f:	5e                   	pop    %esi
-    3580:	5f                   	pop    %edi
-    3581:	5d                   	pop    %ebp
-    3582:	c3                   	ret
-    3583:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    358a:	00 
-    358b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-
-00003590 <uio>:
-{
-    3590:	55                   	push   %ebp
-    3591:	89 e5                	mov    %esp,%ebp
-    3593:	83 ec 10             	sub    $0x10,%esp
-  printf(1, "uio test\n");
-    3596:	68 da 4c 00 00       	push   $0x4cda
-    359b:	6a 01                	push   $0x1
-    359d:	e8 7e 04 00 00       	call   3a20 <printf>
-  pid = fork();
-    35a2:	e8 24 03 00 00       	call   38cb <fork>
-  if(pid == 0){
-    35a7:	83 c4 10             	add    $0x10,%esp
-    35aa:	85 c0                	test   %eax,%eax
-    35ac:	74 1b                	je     35c9 <uio+0x39>
-  } else if(pid < 0){
-    35ae:	78 3d                	js     35ed <uio+0x5d>
-  wait();
-    35b0:	e8 26 03 00 00       	call   38db <wait>
-  printf(1, "uio test done\n");
-    35b5:	83 ec 08             	sub    $0x8,%esp
-    35b8:	68 e4 4c 00 00       	push   $0x4ce4
-    35bd:	6a 01                	push   $0x1
-    35bf:	e8 5c 04 00 00       	call   3a20 <printf>
-}
-    35c4:	83 c4 10             	add    $0x10,%esp
-    35c7:	c9                   	leave
-    35c8:	c3                   	ret
-    asm volatile("outb %0,%1"::"a"(val), "d" (port));
-    35c9:	b8 09 00 00 00       	mov    $0x9,%eax
-    35ce:	ba 70 00 00 00       	mov    $0x70,%edx
-    35d3:	ee                   	out    %al,(%dx)
-    asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
-    35d4:	ba 71 00 00 00       	mov    $0x71,%edx
-    35d9:	ec                   	in     (%dx),%al
-    printf(1, "uio: uio succeeded; test FAILED\n");
-    35da:	52                   	push   %edx
-    35db:	52                   	push   %edx
-    35dc:	68 78 54 00 00       	push   $0x5478
-    35e1:	6a 01                	push   $0x1
-    35e3:	e8 38 04 00 00       	call   3a20 <printf>
-    exit();
-    35e8:	e8 e6 02 00 00       	call   38d3 <exit>
-    printf (1, "fork failed\n");
-    35ed:	50                   	push   %eax
-    35ee:	50                   	push   %eax
-    35ef:	68 69 4c 00 00       	push   $0x4c69
-    35f4:	6a 01                	push   $0x1
-    35f6:	e8 25 04 00 00       	call   3a20 <printf>
-    exit();
-    35fb:	e8 d3 02 00 00       	call   38d3 <exit>
-
-00003600 <argptest>:
-{
-    3600:	55                   	push   %ebp
-    3601:	89 e5                	mov    %esp,%ebp
-    3603:	53                   	push   %ebx
-    3604:	83 ec 0c             	sub    $0xc,%esp
-  fd = open("init", O_RDONLY);
-    3607:	6a 00                	push   $0x0
-    3609:	68 f3 4c 00 00       	push   $0x4cf3
-    360e:	e8 00 03 00 00       	call   3913 <open>
-  if (fd < 0) {
-    3613:	83 c4 10             	add    $0x10,%esp
-    3616:	85 c0                	test   %eax,%eax
-    3618:	78 39                	js     3653 <argptest+0x53>
-  read(fd, sbrk(0) - 1, -1);
-    361a:	83 ec 0c             	sub    $0xc,%esp
-    361d:	89 c3                	mov    %eax,%ebx
-    361f:	6a 00                	push   $0x0
-    3621:	e8 35 03 00 00       	call   395b <sbrk>
-    3626:	83 c4 0c             	add    $0xc,%esp
-    3629:	83 e8 01             	sub    $0x1,%eax
-    362c:	6a ff                	push   $0xffffffff
-    362e:	50                   	push   %eax
-    362f:	53                   	push   %ebx
-    3630:	e8 b6 02 00 00       	call   38eb <read>
-  close(fd);
-    3635:	89 1c 24             	mov    %ebx,(%esp)
-    3638:	e8 be 02 00 00       	call   38fb <close>
-  printf(1, "arg test passed\n");
-    363d:	58                   	pop    %eax
-    363e:	5a                   	pop    %edx
-    363f:	68 05 4d 00 00       	push   $0x4d05
-    3644:	6a 01                	push   $0x1
-    3646:	e8 d5 03 00 00       	call   3a20 <printf>
-}
-    364b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    364e:	83 c4 10             	add    $0x10,%esp
-    3651:	c9                   	leave
-    3652:	c3                   	ret
-    printf(2, "open failed\n");
-    3653:	51                   	push   %ecx
-    3654:	51                   	push   %ecx
-    3655:	68 f8 4c 00 00       	push   $0x4cf8
-    365a:	6a 02                	push   $0x2
-    365c:	e8 bf 03 00 00       	call   3a20 <printf>
-    exit();
-    3661:	e8 6d 02 00 00       	call   38d3 <exit>
-    3666:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    366d:	00 
-    366e:	66 90                	xchg   %ax,%ax
-
-00003670 <rand>:
-  randstate = randstate * 1664525 + 1013904223;
-    3670:	69 05 04 5e 00 00 0d 	imul   $0x19660d,0x5e04,%eax
-    3677:	66 19 00 
-    367a:	05 5f f3 6e 3c       	add    $0x3c6ef35f,%eax
-    367f:	a3 04 5e 00 00       	mov    %eax,0x5e04
-}
-    3684:	c3                   	ret
-    3685:	66 90                	xchg   %ax,%ax
-    3687:	66 90                	xchg   %ax,%ax
-    3689:	66 90                	xchg   %ax,%ax
-    368b:	66 90                	xchg   %ax,%ax
-    368d:	66 90                	xchg   %ax,%ax
-    368f:	90                   	nop
-
-00003690 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-    3690:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-    3691:	31 c0                	xor    %eax,%eax
-{
-    3693:	89 e5                	mov    %esp,%ebp
-    3695:	53                   	push   %ebx
-    3696:	8b 4d 08             	mov    0x8(%ebp),%ecx
-    3699:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-    369c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
-    36a0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-    36a4:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-    36a7:	83 c0 01             	add    $0x1,%eax
-    36aa:	84 d2                	test   %dl,%dl
-    36ac:	75 f2                	jne    36a0 <strcpy+0x10>
-    ;
-  return os;
-}
-    36ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    36b1:	89 c8                	mov    %ecx,%eax
-    36b3:	c9                   	leave
-    36b4:	c3                   	ret
-    36b5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    36bc:	00 
-    36bd:	8d 76 00             	lea    0x0(%esi),%esi
-
-000036c0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-    36c0:	55                   	push   %ebp
-    36c1:	89 e5                	mov    %esp,%ebp
-    36c3:	53                   	push   %ebx
-    36c4:	8b 55 08             	mov    0x8(%ebp),%edx
-    36c7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-    36ca:	0f b6 02             	movzbl (%edx),%eax
-    36cd:	84 c0                	test   %al,%al
-    36cf:	75 17                	jne    36e8 <strcmp+0x28>
-    36d1:	eb 3a                	jmp    370d <strcmp+0x4d>
-    36d3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    36d8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
-    36dc:	83 c2 01             	add    $0x1,%edx
-    36df:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
-    36e2:	84 c0                	test   %al,%al
-    36e4:	74 1a                	je     3700 <strcmp+0x40>
-    36e6:	89 d9                	mov    %ebx,%ecx
-    36e8:	0f b6 19             	movzbl (%ecx),%ebx
-    36eb:	38 c3                	cmp    %al,%bl
-    36ed:	74 e9                	je     36d8 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
-    36ef:	29 d8                	sub    %ebx,%eax
-}
-    36f1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    36f4:	c9                   	leave
-    36f5:	c3                   	ret
-    36f6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    36fd:	00 
-    36fe:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
-    3700:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
-    3704:	31 c0                	xor    %eax,%eax
-    3706:	29 d8                	sub    %ebx,%eax
-}
-    3708:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    370b:	c9                   	leave
-    370c:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
-    370d:	0f b6 19             	movzbl (%ecx),%ebx
-    3710:	31 c0                	xor    %eax,%eax
-    3712:	eb db                	jmp    36ef <strcmp+0x2f>
-    3714:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    371b:	00 
-    371c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00003720 <strlen>:
-
-uint
-strlen(const char *s)
-{
-    3720:	55                   	push   %ebp
-    3721:	89 e5                	mov    %esp,%ebp
-    3723:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-    3726:	80 3a 00             	cmpb   $0x0,(%edx)
-    3729:	74 15                	je     3740 <strlen+0x20>
-    372b:	31 c0                	xor    %eax,%eax
-    372d:	8d 76 00             	lea    0x0(%esi),%esi
-    3730:	83 c0 01             	add    $0x1,%eax
-    3733:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-    3737:	89 c1                	mov    %eax,%ecx
-    3739:	75 f5                	jne    3730 <strlen+0x10>
-    ;
-  return n;
-}
-    373b:	89 c8                	mov    %ecx,%eax
-    373d:	5d                   	pop    %ebp
-    373e:	c3                   	ret
-    373f:	90                   	nop
-  for(n = 0; s[n]; n++)
-    3740:	31 c9                	xor    %ecx,%ecx
-}
-    3742:	5d                   	pop    %ebp
-    3743:	89 c8                	mov    %ecx,%eax
-    3745:	c3                   	ret
-    3746:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    374d:	00 
-    374e:	66 90                	xchg   %ax,%ax
-
-00003750 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-    3750:	55                   	push   %ebp
-    3751:	89 e5                	mov    %esp,%ebp
-    3753:	57                   	push   %edi
-    3754:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-    3757:	8b 4d 10             	mov    0x10(%ebp),%ecx
-    375a:	8b 45 0c             	mov    0xc(%ebp),%eax
-    375d:	89 d7                	mov    %edx,%edi
-    375f:	fc                   	cld
-    3760:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
-    3762:	8b 7d fc             	mov    -0x4(%ebp),%edi
-    3765:	89 d0                	mov    %edx,%eax
-    3767:	c9                   	leave
-    3768:	c3                   	ret
-    3769:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00003770 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
-    3770:	55                   	push   %ebp
-    3771:	89 e5                	mov    %esp,%ebp
-    3773:	8b 45 08             	mov    0x8(%ebp),%eax
-    3776:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
-    377a:	0f b6 10             	movzbl (%eax),%edx
-    377d:	84 d2                	test   %dl,%dl
-    377f:	75 12                	jne    3793 <strchr+0x23>
-    3781:	eb 1d                	jmp    37a0 <strchr+0x30>
-    3783:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    3788:	0f b6 50 01          	movzbl 0x1(%eax),%edx
-    378c:	83 c0 01             	add    $0x1,%eax
-    378f:	84 d2                	test   %dl,%dl
-    3791:	74 0d                	je     37a0 <strchr+0x30>
-    if(*s == c)
-    3793:	38 d1                	cmp    %dl,%cl
-    3795:	75 f1                	jne    3788 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
-    3797:	5d                   	pop    %ebp
-    3798:	c3                   	ret
-    3799:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
-    37a0:	31 c0                	xor    %eax,%eax
-}
-    37a2:	5d                   	pop    %ebp
-    37a3:	c3                   	ret
-    37a4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    37ab:	00 
-    37ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000037b0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
-    37b0:	55                   	push   %ebp
-    37b1:	89 e5                	mov    %esp,%ebp
-    37b3:	57                   	push   %edi
-    37b4:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
-    37b5:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
-    37b8:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
-    37b9:	31 db                	xor    %ebx,%ebx
-{
-    37bb:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
-    37be:	eb 27                	jmp    37e7 <gets+0x37>
-    cc = read(0, &c, 1);
-    37c0:	83 ec 04             	sub    $0x4,%esp
-    37c3:	6a 01                	push   $0x1
-    37c5:	56                   	push   %esi
-    37c6:	6a 00                	push   $0x0
-    37c8:	e8 1e 01 00 00       	call   38eb <read>
-    if(cc < 1)
-    37cd:	83 c4 10             	add    $0x10,%esp
-    37d0:	85 c0                	test   %eax,%eax
-    37d2:	7e 1d                	jle    37f1 <gets+0x41>
-      break;
-    buf[i++] = c;
-    37d4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
-    37d8:	8b 55 08             	mov    0x8(%ebp),%edx
-    37db:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
-    37df:	3c 0a                	cmp    $0xa,%al
-    37e1:	74 10                	je     37f3 <gets+0x43>
-    37e3:	3c 0d                	cmp    $0xd,%al
-    37e5:	74 0c                	je     37f3 <gets+0x43>
-  for(i=0; i+1 < max; ){
-    37e7:	89 df                	mov    %ebx,%edi
-    37e9:	83 c3 01             	add    $0x1,%ebx
-    37ec:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
-    37ef:	7c cf                	jl     37c0 <gets+0x10>
-    37f1:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
-    37f3:	8b 45 08             	mov    0x8(%ebp),%eax
-    37f6:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
-    37fa:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    37fd:	5b                   	pop    %ebx
-    37fe:	5e                   	pop    %esi
-    37ff:	5f                   	pop    %edi
-    3800:	5d                   	pop    %ebp
-    3801:	c3                   	ret
-    3802:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    3809:	00 
-    380a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00003810 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
-    3810:	55                   	push   %ebp
-    3811:	89 e5                	mov    %esp,%ebp
-    3813:	56                   	push   %esi
-    3814:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
-    3815:	83 ec 08             	sub    $0x8,%esp
-    3818:	6a 00                	push   $0x0
-    381a:	ff 75 08             	push   0x8(%ebp)
-    381d:	e8 f1 00 00 00       	call   3913 <open>
-  if(fd < 0)
-    3822:	83 c4 10             	add    $0x10,%esp
-    3825:	85 c0                	test   %eax,%eax
-    3827:	78 27                	js     3850 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
-    3829:	83 ec 08             	sub    $0x8,%esp
-    382c:	ff 75 0c             	push   0xc(%ebp)
-    382f:	89 c3                	mov    %eax,%ebx
-    3831:	50                   	push   %eax
-    3832:	e8 f4 00 00 00       	call   392b <fstat>
-  close(fd);
-    3837:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
-    383a:	89 c6                	mov    %eax,%esi
-  close(fd);
-    383c:	e8 ba 00 00 00       	call   38fb <close>
-  return r;
-    3841:	83 c4 10             	add    $0x10,%esp
-}
-    3844:	8d 65 f8             	lea    -0x8(%ebp),%esp
-    3847:	89 f0                	mov    %esi,%eax
-    3849:	5b                   	pop    %ebx
-    384a:	5e                   	pop    %esi
-    384b:	5d                   	pop    %ebp
-    384c:	c3                   	ret
-    384d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
-    3850:	be ff ff ff ff       	mov    $0xffffffff,%esi
-    3855:	eb ed                	jmp    3844 <stat+0x34>
-    3857:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    385e:	00 
-    385f:	90                   	nop
-
-00003860 <atoi>:
-
-int
-atoi(const char *s)
-{
-    3860:	55                   	push   %ebp
-    3861:	89 e5                	mov    %esp,%ebp
-    3863:	53                   	push   %ebx
-    3864:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
-    3867:	0f be 02             	movsbl (%edx),%eax
-    386a:	8d 48 d0             	lea    -0x30(%eax),%ecx
-    386d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
-    3870:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
-    3875:	77 1e                	ja     3895 <atoi+0x35>
-    3877:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    387e:	00 
-    387f:	90                   	nop
-    n = n*10 + *s++ - '0';
-    3880:	83 c2 01             	add    $0x1,%edx
-    3883:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
-    3886:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
-    388a:	0f be 02             	movsbl (%edx),%eax
-    388d:	8d 58 d0             	lea    -0x30(%eax),%ebx
-    3890:	80 fb 09             	cmp    $0x9,%bl
-    3893:	76 eb                	jbe    3880 <atoi+0x20>
-  return n;
-}
-    3895:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-    3898:	89 c8                	mov    %ecx,%eax
-    389a:	c9                   	leave
-    389b:	c3                   	ret
-    389c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000038a0 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
-    38a0:	55                   	push   %ebp
-    38a1:	89 e5                	mov    %esp,%ebp
-    38a3:	57                   	push   %edi
-    38a4:	8b 45 10             	mov    0x10(%ebp),%eax
-    38a7:	8b 55 08             	mov    0x8(%ebp),%edx
-    38aa:	56                   	push   %esi
-    38ab:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
-    38ae:	85 c0                	test   %eax,%eax
-    38b0:	7e 13                	jle    38c5 <memmove+0x25>
-    38b2:	01 d0                	add    %edx,%eax
-  dst = vdst;
-    38b4:	89 d7                	mov    %edx,%edi
-    38b6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    38bd:	00 
-    38be:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
-    38c0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
-    38c1:	39 f8                	cmp    %edi,%eax
-    38c3:	75 fb                	jne    38c0 <memmove+0x20>
-  return vdst;
-}
-    38c5:	5e                   	pop    %esi
-    38c6:	89 d0                	mov    %edx,%eax
-    38c8:	5f                   	pop    %edi
-    38c9:	5d                   	pop    %ebp
-    38ca:	c3                   	ret
-
-000038cb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
-    38cb:	b8 01 00 00 00       	mov    $0x1,%eax
-    38d0:	cd 40                	int    $0x40
-    38d2:	c3                   	ret
-
-000038d3 <exit>:
-SYSCALL(exit)
-    38d3:	b8 02 00 00 00       	mov    $0x2,%eax
-    38d8:	cd 40                	int    $0x40
-    38da:	c3                   	ret
-
-000038db <wait>:
-SYSCALL(wait)
-    38db:	b8 03 00 00 00       	mov    $0x3,%eax
-    38e0:	cd 40                	int    $0x40
-    38e2:	c3                   	ret
-
-000038e3 <pipe>:
-SYSCALL(pipe)
-    38e3:	b8 04 00 00 00       	mov    $0x4,%eax
-    38e8:	cd 40                	int    $0x40
-    38ea:	c3                   	ret
-
-000038eb <read>:
-SYSCALL(read)
-    38eb:	b8 05 00 00 00       	mov    $0x5,%eax
-    38f0:	cd 40                	int    $0x40
-    38f2:	c3                   	ret
-
-000038f3 <write>:
-SYSCALL(write)
-    38f3:	b8 10 00 00 00       	mov    $0x10,%eax
-    38f8:	cd 40                	int    $0x40
-    38fa:	c3                   	ret
-
-000038fb <close>:
-SYSCALL(close)
-    38fb:	b8 15 00 00 00       	mov    $0x15,%eax
-    3900:	cd 40                	int    $0x40
-    3902:	c3                   	ret
-
-00003903 <kill>:
-SYSCALL(kill)
-    3903:	b8 06 00 00 00       	mov    $0x6,%eax
-    3908:	cd 40                	int    $0x40
-    390a:	c3                   	ret
-
-0000390b <exec>:
-SYSCALL(exec)
-    390b:	b8 07 00 00 00       	mov    $0x7,%eax
-    3910:	cd 40                	int    $0x40
-    3912:	c3                   	ret
-
-00003913 <open>:
-SYSCALL(open)
-    3913:	b8 0f 00 00 00       	mov    $0xf,%eax
-    3918:	cd 40                	int    $0x40
-    391a:	c3                   	ret
-
-0000391b <mknod>:
-SYSCALL(mknod)
-    391b:	b8 11 00 00 00       	mov    $0x11,%eax
-    3920:	cd 40                	int    $0x40
-    3922:	c3                   	ret
-
-00003923 <unlink>:
-SYSCALL(unlink)
-    3923:	b8 12 00 00 00       	mov    $0x12,%eax
-    3928:	cd 40                	int    $0x40
-    392a:	c3                   	ret
-
-0000392b <fstat>:
-SYSCALL(fstat)
-    392b:	b8 08 00 00 00       	mov    $0x8,%eax
-    3930:	cd 40                	int    $0x40
-    3932:	c3                   	ret
-
-00003933 <link>:
-SYSCALL(link)
-    3933:	b8 13 00 00 00       	mov    $0x13,%eax
-    3938:	cd 40                	int    $0x40
-    393a:	c3                   	ret
-
-0000393b <mkdir>:
-SYSCALL(mkdir)
-    393b:	b8 14 00 00 00       	mov    $0x14,%eax
-    3940:	cd 40                	int    $0x40
-    3942:	c3                   	ret
-
-00003943 <chdir>:
-SYSCALL(chdir)
-    3943:	b8 09 00 00 00       	mov    $0x9,%eax
-    3948:	cd 40                	int    $0x40
-    394a:	c3                   	ret
-
-0000394b <dup>:
-SYSCALL(dup)
-    394b:	b8 0a 00 00 00       	mov    $0xa,%eax
-    3950:	cd 40                	int    $0x40
-    3952:	c3                   	ret
-
-00003953 <getpid>:
-SYSCALL(getpid)
-    3953:	b8 0b 00 00 00       	mov    $0xb,%eax
-    3958:	cd 40                	int    $0x40
-    395a:	c3                   	ret
-
-0000395b <sbrk>:
-SYSCALL(sbrk)
-    395b:	b8 0c 00 00 00       	mov    $0xc,%eax
-    3960:	cd 40                	int    $0x40
-    3962:	c3                   	ret
-
-00003963 <sleep>:
-SYSCALL(sleep)
-    3963:	b8 0d 00 00 00       	mov    $0xd,%eax
-    3968:	cd 40                	int    $0x40
-    396a:	c3                   	ret
-
-0000396b <uptime>:
-SYSCALL(uptime)
-    396b:	b8 0e 00 00 00       	mov    $0xe,%eax
-    3970:	cd 40                	int    $0x40
-    3972:	c3                   	ret
-    3973:	66 90                	xchg   %ax,%ax
-    3975:	66 90                	xchg   %ax,%ax
-    3977:	66 90                	xchg   %ax,%ax
-    3979:	66 90                	xchg   %ax,%ax
-    397b:	66 90                	xchg   %ax,%ax
-    397d:	66 90                	xchg   %ax,%ax
-    397f:	90                   	nop
-
-00003980 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
-    3980:	55                   	push   %ebp
-    3981:	89 e5                	mov    %esp,%ebp
-    3983:	57                   	push   %edi
-    3984:	56                   	push   %esi
-    3985:	53                   	push   %ebx
-    3986:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
-    3988:	89 d1                	mov    %edx,%ecx
-{
-    398a:	83 ec 3c             	sub    $0x3c,%esp
-    398d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
-    3990:	85 d2                	test   %edx,%edx
-    3992:	0f 89 80 00 00 00    	jns    3a18 <printint+0x98>
-    3998:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
-    399c:	74 7a                	je     3a18 <printint+0x98>
-    x = -xx;
-    399e:	f7 d9                	neg    %ecx
-    neg = 1;
-    39a0:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
-    39a5:	89 45 c4             	mov    %eax,-0x3c(%ebp)
-    39a8:	31 f6                	xor    %esi,%esi
-    39aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
-    39b0:	89 c8                	mov    %ecx,%eax
-    39b2:	31 d2                	xor    %edx,%edx
-    39b4:	89 f7                	mov    %esi,%edi
-    39b6:	f7 f3                	div    %ebx
-    39b8:	8d 76 01             	lea    0x1(%esi),%esi
-    39bb:	0f b6 92 20 55 00 00 	movzbl 0x5520(%edx),%edx
-    39c2:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
-    39c6:	89 ca                	mov    %ecx,%edx
-    39c8:	89 c1                	mov    %eax,%ecx
-    39ca:	39 da                	cmp    %ebx,%edx
-    39cc:	73 e2                	jae    39b0 <printint+0x30>
-  if(neg)
-    39ce:	8b 45 c4             	mov    -0x3c(%ebp),%eax
-    39d1:	85 c0                	test   %eax,%eax
-    39d3:	74 07                	je     39dc <printint+0x5c>
-    buf[i++] = '-';
-    39d5:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
-    39da:	89 f7                	mov    %esi,%edi
-    39dc:	8d 5d d8             	lea    -0x28(%ebp),%ebx
-    39df:	8b 75 c0             	mov    -0x40(%ebp),%esi
-    39e2:	01 df                	add    %ebx,%edi
-    39e4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
-    39e8:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
-    39eb:	83 ec 04             	sub    $0x4,%esp
-    39ee:	88 45 d7             	mov    %al,-0x29(%ebp)
-    39f1:	8d 45 d7             	lea    -0x29(%ebp),%eax
-    39f4:	6a 01                	push   $0x1
-    39f6:	50                   	push   %eax
-    39f7:	56                   	push   %esi
-    39f8:	e8 f6 fe ff ff       	call   38f3 <write>
-  while(--i >= 0)
-    39fd:	89 f8                	mov    %edi,%eax
-    39ff:	83 c4 10             	add    $0x10,%esp
-    3a02:	83 ef 01             	sub    $0x1,%edi
-    3a05:	39 c3                	cmp    %eax,%ebx
-    3a07:	75 df                	jne    39e8 <printint+0x68>
-}
-    3a09:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3a0c:	5b                   	pop    %ebx
-    3a0d:	5e                   	pop    %esi
-    3a0e:	5f                   	pop    %edi
-    3a0f:	5d                   	pop    %ebp
-    3a10:	c3                   	ret
-    3a11:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
-    3a18:	31 c0                	xor    %eax,%eax
-    3a1a:	eb 89                	jmp    39a5 <printint+0x25>
-    3a1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00003a20 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
-    3a20:	55                   	push   %ebp
-    3a21:	89 e5                	mov    %esp,%ebp
-    3a23:	57                   	push   %edi
-    3a24:	56                   	push   %esi
-    3a25:	53                   	push   %ebx
-    3a26:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
-    3a29:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
-    3a2c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
-    3a2f:	0f b6 1e             	movzbl (%esi),%ebx
-    3a32:	83 c6 01             	add    $0x1,%esi
-    3a35:	84 db                	test   %bl,%bl
-    3a37:	74 67                	je     3aa0 <printf+0x80>
-    3a39:	8d 4d 10             	lea    0x10(%ebp),%ecx
-    3a3c:	31 d2                	xor    %edx,%edx
-    3a3e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
-    3a41:	eb 34                	jmp    3a77 <printf+0x57>
-    3a43:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-    3a48:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
-    3a4b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
-    3a50:	83 f8 25             	cmp    $0x25,%eax
-    3a53:	74 18                	je     3a6d <printf+0x4d>
-  write(fd, &c, 1);
-    3a55:	83 ec 04             	sub    $0x4,%esp
-    3a58:	8d 45 e7             	lea    -0x19(%ebp),%eax
-    3a5b:	88 5d e7             	mov    %bl,-0x19(%ebp)
-    3a5e:	6a 01                	push   $0x1
-    3a60:	50                   	push   %eax
-    3a61:	57                   	push   %edi
-    3a62:	e8 8c fe ff ff       	call   38f3 <write>
-    3a67:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
-    3a6a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
-    3a6d:	0f b6 1e             	movzbl (%esi),%ebx
-    3a70:	83 c6 01             	add    $0x1,%esi
-    3a73:	84 db                	test   %bl,%bl
-    3a75:	74 29                	je     3aa0 <printf+0x80>
-    c = fmt[i] & 0xff;
-    3a77:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
-    3a7a:	85 d2                	test   %edx,%edx
-    3a7c:	74 ca                	je     3a48 <printf+0x28>
-      }
-    } else if(state == '%'){
-    3a7e:	83 fa 25             	cmp    $0x25,%edx
-    3a81:	75 ea                	jne    3a6d <printf+0x4d>
-      if(c == 'd'){
-    3a83:	83 f8 25             	cmp    $0x25,%eax
-    3a86:	0f 84 04 01 00 00    	je     3b90 <printf+0x170>
-    3a8c:	83 e8 63             	sub    $0x63,%eax
-    3a8f:	83 f8 15             	cmp    $0x15,%eax
-    3a92:	77 1c                	ja     3ab0 <printf+0x90>
-    3a94:	ff 24 85 c8 54 00 00 	jmp    *0x54c8(,%eax,4)
-    3a9b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
-    3aa0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-    3aa3:	5b                   	pop    %ebx
-    3aa4:	5e                   	pop    %esi
-    3aa5:	5f                   	pop    %edi
-    3aa6:	5d                   	pop    %ebp
-    3aa7:	c3                   	ret
-    3aa8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    3aaf:	00 
-  write(fd, &c, 1);
-    3ab0:	83 ec 04             	sub    $0x4,%esp
-    3ab3:	8d 55 e7             	lea    -0x19(%ebp),%edx
-    3ab6:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
-    3aba:	6a 01                	push   $0x1
-    3abc:	52                   	push   %edx
-    3abd:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    3ac0:	57                   	push   %edi
-    3ac1:	e8 2d fe ff ff       	call   38f3 <write>
-    3ac6:	83 c4 0c             	add    $0xc,%esp
-    3ac9:	88 5d e7             	mov    %bl,-0x19(%ebp)
-    3acc:	6a 01                	push   $0x1
-    3ace:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-    3ad1:	52                   	push   %edx
-    3ad2:	57                   	push   %edi
-    3ad3:	e8 1b fe ff ff       	call   38f3 <write>
-        putc(fd, c);
-    3ad8:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    3adb:	31 d2                	xor    %edx,%edx
-    3add:	eb 8e                	jmp    3a6d <printf+0x4d>
-    3adf:	90                   	nop
-        printint(fd, *ap, 16, 0);
-    3ae0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-    3ae3:	83 ec 0c             	sub    $0xc,%esp
-    3ae6:	b9 10 00 00 00       	mov    $0x10,%ecx
-    3aeb:	8b 13                	mov    (%ebx),%edx
-    3aed:	6a 00                	push   $0x0
-    3aef:	89 f8                	mov    %edi,%eax
-        ap++;
-    3af1:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
-    3af4:	e8 87 fe ff ff       	call   3980 <printint>
-        ap++;
-    3af9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    3afc:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    3aff:	31 d2                	xor    %edx,%edx
-    3b01:	e9 67 ff ff ff       	jmp    3a6d <printf+0x4d>
-        s = (char*)*ap;
-    3b06:	8b 45 d0             	mov    -0x30(%ebp),%eax
-    3b09:	8b 18                	mov    (%eax),%ebx
-        ap++;
-    3b0b:	83 c0 04             	add    $0x4,%eax
-    3b0e:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
-    3b11:	85 db                	test   %ebx,%ebx
-    3b13:	0f 84 87 00 00 00    	je     3ba0 <printf+0x180>
-        while(*s != 0){
-    3b19:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
-    3b1c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
-    3b1e:	84 c0                	test   %al,%al
-    3b20:	0f 84 47 ff ff ff    	je     3a6d <printf+0x4d>
-    3b26:	8d 55 e7             	lea    -0x19(%ebp),%edx
-    3b29:	89 75 d4             	mov    %esi,-0x2c(%ebp)
-    3b2c:	89 de                	mov    %ebx,%esi
-    3b2e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
-    3b30:	83 ec 04             	sub    $0x4,%esp
-    3b33:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
-    3b36:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
-    3b39:	6a 01                	push   $0x1
-    3b3b:	53                   	push   %ebx
-    3b3c:	57                   	push   %edi
-    3b3d:	e8 b1 fd ff ff       	call   38f3 <write>
-        while(*s != 0){
-    3b42:	0f b6 06             	movzbl (%esi),%eax
-    3b45:	83 c4 10             	add    $0x10,%esp
-    3b48:	84 c0                	test   %al,%al
-    3b4a:	75 e4                	jne    3b30 <printf+0x110>
-      state = 0;
-    3b4c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
-    3b4f:	31 d2                	xor    %edx,%edx
-    3b51:	e9 17 ff ff ff       	jmp    3a6d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
-    3b56:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-    3b59:	83 ec 0c             	sub    $0xc,%esp
-    3b5c:	b9 0a 00 00 00       	mov    $0xa,%ecx
-    3b61:	8b 13                	mov    (%ebx),%edx
-    3b63:	6a 01                	push   $0x1
-    3b65:	eb 88                	jmp    3aef <printf+0xcf>
-        putc(fd, *ap);
-    3b67:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
-    3b6a:	83 ec 04             	sub    $0x4,%esp
-    3b6d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
-    3b70:	8b 03                	mov    (%ebx),%eax
-        ap++;
-    3b72:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
-    3b75:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
-    3b78:	6a 01                	push   $0x1
-    3b7a:	52                   	push   %edx
-    3b7b:	57                   	push   %edi
-    3b7c:	e8 72 fd ff ff       	call   38f3 <write>
-        ap++;
-    3b81:	89 5d d0             	mov    %ebx,-0x30(%ebp)
-    3b84:	83 c4 10             	add    $0x10,%esp
-      state = 0;
-    3b87:	31 d2                	xor    %edx,%edx
-    3b89:	e9 df fe ff ff       	jmp    3a6d <printf+0x4d>
-    3b8e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
-    3b90:	83 ec 04             	sub    $0x4,%esp
-    3b93:	88 5d e7             	mov    %bl,-0x19(%ebp)
-    3b96:	8d 55 e7             	lea    -0x19(%ebp),%edx
-    3b99:	6a 01                	push   $0x1
-    3b9b:	e9 31 ff ff ff       	jmp    3ad1 <printf+0xb1>
-    3ba0:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
-    3ba5:	bb 49 4d 00 00       	mov    $0x4d49,%ebx
-    3baa:	e9 77 ff ff ff       	jmp    3b26 <printf+0x106>
-    3baf:	90                   	nop
-
-00003bb0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
-    3bb0:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3bb1:	a1 c0 a5 00 00       	mov    0xa5c0,%eax
-{
-    3bb6:	89 e5                	mov    %esp,%ebp
-    3bb8:	57                   	push   %edi
-    3bb9:	56                   	push   %esi
-    3bba:	53                   	push   %ebx
-    3bbb:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
-    3bbe:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3bc1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3bc8:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
-    3bca:	39 c8                	cmp    %ecx,%eax
-    3bcc:	73 32                	jae    3c00 <free+0x50>
-    3bce:	39 d1                	cmp    %edx,%ecx
-    3bd0:	72 04                	jb     3bd6 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3bd2:	39 d0                	cmp    %edx,%eax
-    3bd4:	72 32                	jb     3c08 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
-    3bd6:	8b 73 fc             	mov    -0x4(%ebx),%esi
-    3bd9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
-    3bdc:	39 fa                	cmp    %edi,%edx
-    3bde:	74 30                	je     3c10 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
-    3be0:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
-    3be3:	8b 50 04             	mov    0x4(%eax),%edx
-    3be6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    3be9:	39 f1                	cmp    %esi,%ecx
-    3beb:	74 3a                	je     3c27 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
-    3bed:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
-    3bef:	5b                   	pop    %ebx
-  freep = p;
-    3bf0:	a3 c0 a5 00 00       	mov    %eax,0xa5c0
-}
-    3bf5:	5e                   	pop    %esi
-    3bf6:	5f                   	pop    %edi
-    3bf7:	5d                   	pop    %ebp
-    3bf8:	c3                   	ret
-    3bf9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
-    3c00:	39 d0                	cmp    %edx,%eax
-    3c02:	72 04                	jb     3c08 <free+0x58>
-    3c04:	39 d1                	cmp    %edx,%ecx
-    3c06:	72 ce                	jb     3bd6 <free+0x26>
-{
-    3c08:	89 d0                	mov    %edx,%eax
-    3c0a:	eb bc                	jmp    3bc8 <free+0x18>
-    3c0c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
-    3c10:	03 72 04             	add    0x4(%edx),%esi
-    3c13:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
-    3c16:	8b 10                	mov    (%eax),%edx
-    3c18:	8b 12                	mov    (%edx),%edx
-    3c1a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
-    3c1d:	8b 50 04             	mov    0x4(%eax),%edx
-    3c20:	8d 34 d0             	lea    (%eax,%edx,8),%esi
-    3c23:	39 f1                	cmp    %esi,%ecx
-    3c25:	75 c6                	jne    3bed <free+0x3d>
-    p->s.size += bp->s.size;
-    3c27:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
-    3c2a:	a3 c0 a5 00 00       	mov    %eax,0xa5c0
-    p->s.size += bp->s.size;
-    3c2f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
-    3c32:	8b 4b f8             	mov    -0x8(%ebx),%ecx
-    3c35:	89 08                	mov    %ecx,(%eax)
-}
-    3c37:	5b                   	pop    %ebx
-    3c38:	5e                   	pop    %esi
-    3c39:	5f                   	pop    %edi
-    3c3a:	5d                   	pop    %ebp
-    3c3b:	c3                   	ret
-    3c3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00003c40 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
-    3c40:	55                   	push   %ebp
-    3c41:	89 e5                	mov    %esp,%ebp
-    3c43:	57                   	push   %edi
-    3c44:	56                   	push   %esi
-    3c45:	53                   	push   %ebx
-    3c46:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    3c49:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
-    3c4c:	8b 15 c0 a5 00 00    	mov    0xa5c0,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
-    3c52:	8d 78 07             	lea    0x7(%eax),%edi
-    3c55:	c1 ef 03             	shr    $0x3,%edi
-    3c58:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
-    3c5b:	85 d2                	test   %edx,%edx
-    3c5d:	0f 84 8d 00 00 00    	je     3cf0 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3c63:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
-    3c65:	8b 48 04             	mov    0x4(%eax),%ecx
-    3c68:	39 f9                	cmp    %edi,%ecx
-    3c6a:	73 64                	jae    3cd0 <malloc+0x90>
-  if(nu < 4096)
-    3c6c:	bb 00 10 00 00       	mov    $0x1000,%ebx
-    3c71:	39 df                	cmp    %ebx,%edi
-    3c73:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
-    3c76:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
-    3c7d:	eb 0a                	jmp    3c89 <malloc+0x49>
-    3c7f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
-    3c80:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
-    3c82:	8b 48 04             	mov    0x4(%eax),%ecx
-    3c85:	39 f9                	cmp    %edi,%ecx
-    3c87:	73 47                	jae    3cd0 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
-    3c89:	89 c2                	mov    %eax,%edx
-    3c8b:	3b 05 c0 a5 00 00    	cmp    0xa5c0,%eax
-    3c91:	75 ed                	jne    3c80 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
-    3c93:	83 ec 0c             	sub    $0xc,%esp
-    3c96:	56                   	push   %esi
-    3c97:	e8 bf fc ff ff       	call   395b <sbrk>
-  if(p == (char*)-1)
-    3c9c:	83 c4 10             	add    $0x10,%esp
-    3c9f:	83 f8 ff             	cmp    $0xffffffff,%eax
-    3ca2:	74 1c                	je     3cc0 <malloc+0x80>
-  hp->s.size = nu;
-    3ca4:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
-    3ca7:	83 ec 0c             	sub    $0xc,%esp
-    3caa:	83 c0 08             	add    $0x8,%eax
-    3cad:	50                   	push   %eax
-    3cae:	e8 fd fe ff ff       	call   3bb0 <free>
-  return freep;
-    3cb3:	8b 15 c0 a5 00 00    	mov    0xa5c0,%edx
-      if((p = morecore(nunits)) == 0)
-    3cb9:	83 c4 10             	add    $0x10,%esp
-    3cbc:	85 d2                	test   %edx,%edx
-    3cbe:	75 c0                	jne    3c80 <malloc+0x40>
-        return 0;
-  }
-}
-    3cc0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
-    3cc3:	31 c0                	xor    %eax,%eax
-}
-    3cc5:	5b                   	pop    %ebx
-    3cc6:	5e                   	pop    %esi
-    3cc7:	5f                   	pop    %edi
-    3cc8:	5d                   	pop    %ebp
-    3cc9:	c3                   	ret
-    3cca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
-    3cd0:	39 cf                	cmp    %ecx,%edi
-    3cd2:	74 4c                	je     3d20 <malloc+0xe0>
-        p->s.size -= nunits;
-    3cd4:	29 f9                	sub    %edi,%ecx
-    3cd6:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
-    3cd9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
-    3cdc:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
-    3cdf:	89 15 c0 a5 00 00    	mov    %edx,0xa5c0
-}
-    3ce5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
-    3ce8:	83 c0 08             	add    $0x8,%eax
-}
-    3ceb:	5b                   	pop    %ebx
-    3cec:	5e                   	pop    %esi
-    3ced:	5f                   	pop    %edi
-    3cee:	5d                   	pop    %ebp
-    3cef:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
-    3cf0:	c7 05 c0 a5 00 00 c4 	movl   $0xa5c4,0xa5c0
-    3cf7:	a5 00 00 
-    base.s.size = 0;
-    3cfa:	b8 c4 a5 00 00       	mov    $0xa5c4,%eax
-    base.s.ptr = freep = prevp = &base;
-    3cff:	c7 05 c4 a5 00 00 c4 	movl   $0xa5c4,0xa5c4
-    3d06:	a5 00 00 
-    base.s.size = 0;
-    3d09:	c7 05 c8 a5 00 00 00 	movl   $0x0,0xa5c8
-    3d10:	00 00 00 
-    if(p->s.size >= nunits){
-    3d13:	e9 54 ff ff ff       	jmp    3c6c <malloc+0x2c>
-    3d18:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-    3d1f:	00 
-        prevp->s.ptr = p->s.ptr;
-    3d20:	8b 08                	mov    (%eax),%ecx
-    3d22:	89 0a                	mov    %ecx,(%edx)
-    3d24:	eb b9                	jmp    3cdf <malloc+0x9f>
diff --git a/usertests.d b/usertests.d
deleted file mode 100644
index a4933d3..0000000
--- a/usertests.d
+++ /dev/null
@@ -1,2 +0,0 @@
-usertests.o: usertests.c /usr/include/stdc-predef.h param.h types.h \
- stat.h user.h fs.h fcntl.h syscall.h traps.h memlayout.h
diff --git a/usertests.o b/usertests.o
deleted file mode 100644
index 14da004..0000000
Binary files a/usertests.o and /dev/null differ
diff --git a/usertests.sym b/usertests.sym
deleted file mode 100644
index 4b04f61..0000000
--- a/usertests.sym
+++ /dev/null
@@ -1,90 +0,0 @@
-00000000 usertests.c
-0000a540 args.0
-00000000 ulib.c
-00000000 printf.c
-00003980 printint
-00005520 digits.0
-00000000 umalloc.c
-0000a5c0 freep
-0000a5c4 base
-00003690 strcpy
-00000d20 exitwait
-00003a20 printf
-00005e08 stdout
-000032a0 bigargtest
-000038a0 memmove
-00000300 openiputtest
-0000391b mknod
-000037b0 gets
-00003953 getpid
-00000a20 pipe1
-00002b60 iref
-00003c40 malloc
-00003963 sleep
-00000200 exitiputtest
-000033c0 fsfull
-00001be0 bigdir
-00002c80 forktest
-00000670 writetest1
-000023f0 bigwrite
-00000e70 sharedfd
-00005e04 randstate
-000038e3 pipe
-00005e20 uninit
-00002960 dirfile
-000038f3 write
-00003230 bsstest
-00005e0c echoargv
-0000392b fstat
-00003903 kill
-00003180 validatetest
-000027e0 rmdot
-00003943 chdir
-000009d0 exectest
-0000390b exec
-000038db wait
-00003670 rand
-000038eb read
-00000bc0 preempt
-00003923 unlink
-00003600 argptest
-00000da0 mem
-000038cb fork
-0000395b sbrk
-0000396b uptime
-00005e20 __bss_start
-00003750 memset
-00000840 createtest
-00000000 main
-00001230 createdelete
-000036c0 strcmp
-00000490 writetest
-0000394b dup
-00002d30 sbrktest
-00000400 opentest
-00001d10 subdir
-00003590 uio
-000015c0 linktest
-00008540 buf
-000008f0 dirtest
-00000120 iputtest
-00003810 stat
-000024d0 bigfile
-00005e20 _edata
-0000a5cc _end
-00001430 unlinkread
-00003933 link
-000038d3 exit
-00003860 atoi
-00001ad0 linkunlink
-00008530 name
-00003720 strlen
-00003913 open
-00003770 strchr
-000017d0 concreate
-000026a0 fourteen
-00003170 validateint
-00001030 fourfiles
-0000393b mkdir
-000038fb close
-00003bb0 free
diff --git a/usys.o b/usys.o
deleted file mode 100644
index dc5adf0..0000000
Binary files a/usys.o and /dev/null differ
diff --git a/vectors.S b/vectors.S
deleted file mode 100644
index 9e4041a..0000000
--- a/vectors.S
+++ /dev/null
@@ -1,1537 +0,0 @@
-# generated by vectors.pl - do not edit
-# handlers
-.globl alltraps
-.globl vector0
-vector0:
-  pushl $0
-  pushl $0
-  jmp alltraps
-.globl vector1
-vector1:
-  pushl $0
-  pushl $1
-  jmp alltraps
-.globl vector2
-vector2:
-  pushl $0
-  pushl $2
-  jmp alltraps
-.globl vector3
-vector3:
-  pushl $0
-  pushl $3
-  jmp alltraps
-.globl vector4
-vector4:
-  pushl $0
-  pushl $4
-  jmp alltraps
-.globl vector5
-vector5:
-  pushl $0
-  pushl $5
-  jmp alltraps
-.globl vector6
-vector6:
-  pushl $0
-  pushl $6
-  jmp alltraps
-.globl vector7
-vector7:
-  pushl $0
-  pushl $7
-  jmp alltraps
-.globl vector8
-vector8:
-  pushl $8
-  jmp alltraps
-.globl vector9
-vector9:
-  pushl $0
-  pushl $9
-  jmp alltraps
-.globl vector10
-vector10:
-  pushl $10
-  jmp alltraps
-.globl vector11
-vector11:
-  pushl $11
-  jmp alltraps
-.globl vector12
-vector12:
-  pushl $12
-  jmp alltraps
-.globl vector13
-vector13:
-  pushl $13
-  jmp alltraps
-.globl vector14
-vector14:
-  pushl $14
-  jmp alltraps
-.globl vector15
-vector15:
-  pushl $0
-  pushl $15
-  jmp alltraps
-.globl vector16
-vector16:
-  pushl $0
-  pushl $16
-  jmp alltraps
-.globl vector17
-vector17:
-  pushl $17
-  jmp alltraps
-.globl vector18
-vector18:
-  pushl $0
-  pushl $18
-  jmp alltraps
-.globl vector19
-vector19:
-  pushl $0
-  pushl $19
-  jmp alltraps
-.globl vector20
-vector20:
-  pushl $0
-  pushl $20
-  jmp alltraps
-.globl vector21
-vector21:
-  pushl $0
-  pushl $21
-  jmp alltraps
-.globl vector22
-vector22:
-  pushl $0
-  pushl $22
-  jmp alltraps
-.globl vector23
-vector23:
-  pushl $0
-  pushl $23
-  jmp alltraps
-.globl vector24
-vector24:
-  pushl $0
-  pushl $24
-  jmp alltraps
-.globl vector25
-vector25:
-  pushl $0
-  pushl $25
-  jmp alltraps
-.globl vector26
-vector26:
-  pushl $0
-  pushl $26
-  jmp alltraps
-.globl vector27
-vector27:
-  pushl $0
-  pushl $27
-  jmp alltraps
-.globl vector28
-vector28:
-  pushl $0
-  pushl $28
-  jmp alltraps
-.globl vector29
-vector29:
-  pushl $0
-  pushl $29
-  jmp alltraps
-.globl vector30
-vector30:
-  pushl $0
-  pushl $30
-  jmp alltraps
-.globl vector31
-vector31:
-  pushl $0
-  pushl $31
-  jmp alltraps
-.globl vector32
-vector32:
-  pushl $0
-  pushl $32
-  jmp alltraps
-.globl vector33
-vector33:
-  pushl $0
-  pushl $33
-  jmp alltraps
-.globl vector34
-vector34:
-  pushl $0
-  pushl $34
-  jmp alltraps
-.globl vector35
-vector35:
-  pushl $0
-  pushl $35
-  jmp alltraps
-.globl vector36
-vector36:
-  pushl $0
-  pushl $36
-  jmp alltraps
-.globl vector37
-vector37:
-  pushl $0
-  pushl $37
-  jmp alltraps
-.globl vector38
-vector38:
-  pushl $0
-  pushl $38
-  jmp alltraps
-.globl vector39
-vector39:
-  pushl $0
-  pushl $39
-  jmp alltraps
-.globl vector40
-vector40:
-  pushl $0
-  pushl $40
-  jmp alltraps
-.globl vector41
-vector41:
-  pushl $0
-  pushl $41
-  jmp alltraps
-.globl vector42
-vector42:
-  pushl $0
-  pushl $42
-  jmp alltraps
-.globl vector43
-vector43:
-  pushl $0
-  pushl $43
-  jmp alltraps
-.globl vector44
-vector44:
-  pushl $0
-  pushl $44
-  jmp alltraps
-.globl vector45
-vector45:
-  pushl $0
-  pushl $45
-  jmp alltraps
-.globl vector46
-vector46:
-  pushl $0
-  pushl $46
-  jmp alltraps
-.globl vector47
-vector47:
-  pushl $0
-  pushl $47
-  jmp alltraps
-.globl vector48
-vector48:
-  pushl $0
-  pushl $48
-  jmp alltraps
-.globl vector49
-vector49:
-  pushl $0
-  pushl $49
-  jmp alltraps
-.globl vector50
-vector50:
-  pushl $0
-  pushl $50
-  jmp alltraps
-.globl vector51
-vector51:
-  pushl $0
-  pushl $51
-  jmp alltraps
-.globl vector52
-vector52:
-  pushl $0
-  pushl $52
-  jmp alltraps
-.globl vector53
-vector53:
-  pushl $0
-  pushl $53
-  jmp alltraps
-.globl vector54
-vector54:
-  pushl $0
-  pushl $54
-  jmp alltraps
-.globl vector55
-vector55:
-  pushl $0
-  pushl $55
-  jmp alltraps
-.globl vector56
-vector56:
-  pushl $0
-  pushl $56
-  jmp alltraps
-.globl vector57
-vector57:
-  pushl $0
-  pushl $57
-  jmp alltraps
-.globl vector58
-vector58:
-  pushl $0
-  pushl $58
-  jmp alltraps
-.globl vector59
-vector59:
-  pushl $0
-  pushl $59
-  jmp alltraps
-.globl vector60
-vector60:
-  pushl $0
-  pushl $60
-  jmp alltraps
-.globl vector61
-vector61:
-  pushl $0
-  pushl $61
-  jmp alltraps
-.globl vector62
-vector62:
-  pushl $0
-  pushl $62
-  jmp alltraps
-.globl vector63
-vector63:
-  pushl $0
-  pushl $63
-  jmp alltraps
-.globl vector64
-vector64:
-  pushl $0
-  pushl $64
-  jmp alltraps
-.globl vector65
-vector65:
-  pushl $0
-  pushl $65
-  jmp alltraps
-.globl vector66
-vector66:
-  pushl $0
-  pushl $66
-  jmp alltraps
-.globl vector67
-vector67:
-  pushl $0
-  pushl $67
-  jmp alltraps
-.globl vector68
-vector68:
-  pushl $0
-  pushl $68
-  jmp alltraps
-.globl vector69
-vector69:
-  pushl $0
-  pushl $69
-  jmp alltraps
-.globl vector70
-vector70:
-  pushl $0
-  pushl $70
-  jmp alltraps
-.globl vector71
-vector71:
-  pushl $0
-  pushl $71
-  jmp alltraps
-.globl vector72
-vector72:
-  pushl $0
-  pushl $72
-  jmp alltraps
-.globl vector73
-vector73:
-  pushl $0
-  pushl $73
-  jmp alltraps
-.globl vector74
-vector74:
-  pushl $0
-  pushl $74
-  jmp alltraps
-.globl vector75
-vector75:
-  pushl $0
-  pushl $75
-  jmp alltraps
-.globl vector76
-vector76:
-  pushl $0
-  pushl $76
-  jmp alltraps
-.globl vector77
-vector77:
-  pushl $0
-  pushl $77
-  jmp alltraps
-.globl vector78
-vector78:
-  pushl $0
-  pushl $78
-  jmp alltraps
-.globl vector79
-vector79:
-  pushl $0
-  pushl $79
-  jmp alltraps
-.globl vector80
-vector80:
-  pushl $0
-  pushl $80
-  jmp alltraps
-.globl vector81
-vector81:
-  pushl $0
-  pushl $81
-  jmp alltraps
-.globl vector82
-vector82:
-  pushl $0
-  pushl $82
-  jmp alltraps
-.globl vector83
-vector83:
-  pushl $0
-  pushl $83
-  jmp alltraps
-.globl vector84
-vector84:
-  pushl $0
-  pushl $84
-  jmp alltraps
-.globl vector85
-vector85:
-  pushl $0
-  pushl $85
-  jmp alltraps
-.globl vector86
-vector86:
-  pushl $0
-  pushl $86
-  jmp alltraps
-.globl vector87
-vector87:
-  pushl $0
-  pushl $87
-  jmp alltraps
-.globl vector88
-vector88:
-  pushl $0
-  pushl $88
-  jmp alltraps
-.globl vector89
-vector89:
-  pushl $0
-  pushl $89
-  jmp alltraps
-.globl vector90
-vector90:
-  pushl $0
-  pushl $90
-  jmp alltraps
-.globl vector91
-vector91:
-  pushl $0
-  pushl $91
-  jmp alltraps
-.globl vector92
-vector92:
-  pushl $0
-  pushl $92
-  jmp alltraps
-.globl vector93
-vector93:
-  pushl $0
-  pushl $93
-  jmp alltraps
-.globl vector94
-vector94:
-  pushl $0
-  pushl $94
-  jmp alltraps
-.globl vector95
-vector95:
-  pushl $0
-  pushl $95
-  jmp alltraps
-.globl vector96
-vector96:
-  pushl $0
-  pushl $96
-  jmp alltraps
-.globl vector97
-vector97:
-  pushl $0
-  pushl $97
-  jmp alltraps
-.globl vector98
-vector98:
-  pushl $0
-  pushl $98
-  jmp alltraps
-.globl vector99
-vector99:
-  pushl $0
-  pushl $99
-  jmp alltraps
-.globl vector100
-vector100:
-  pushl $0
-  pushl $100
-  jmp alltraps
-.globl vector101
-vector101:
-  pushl $0
-  pushl $101
-  jmp alltraps
-.globl vector102
-vector102:
-  pushl $0
-  pushl $102
-  jmp alltraps
-.globl vector103
-vector103:
-  pushl $0
-  pushl $103
-  jmp alltraps
-.globl vector104
-vector104:
-  pushl $0
-  pushl $104
-  jmp alltraps
-.globl vector105
-vector105:
-  pushl $0
-  pushl $105
-  jmp alltraps
-.globl vector106
-vector106:
-  pushl $0
-  pushl $106
-  jmp alltraps
-.globl vector107
-vector107:
-  pushl $0
-  pushl $107
-  jmp alltraps
-.globl vector108
-vector108:
-  pushl $0
-  pushl $108
-  jmp alltraps
-.globl vector109
-vector109:
-  pushl $0
-  pushl $109
-  jmp alltraps
-.globl vector110
-vector110:
-  pushl $0
-  pushl $110
-  jmp alltraps
-.globl vector111
-vector111:
-  pushl $0
-  pushl $111
-  jmp alltraps
-.globl vector112
-vector112:
-  pushl $0
-  pushl $112
-  jmp alltraps
-.globl vector113
-vector113:
-  pushl $0
-  pushl $113
-  jmp alltraps
-.globl vector114
-vector114:
-  pushl $0
-  pushl $114
-  jmp alltraps
-.globl vector115
-vector115:
-  pushl $0
-  pushl $115
-  jmp alltraps
-.globl vector116
-vector116:
-  pushl $0
-  pushl $116
-  jmp alltraps
-.globl vector117
-vector117:
-  pushl $0
-  pushl $117
-  jmp alltraps
-.globl vector118
-vector118:
-  pushl $0
-  pushl $118
-  jmp alltraps
-.globl vector119
-vector119:
-  pushl $0
-  pushl $119
-  jmp alltraps
-.globl vector120
-vector120:
-  pushl $0
-  pushl $120
-  jmp alltraps
-.globl vector121
-vector121:
-  pushl $0
-  pushl $121
-  jmp alltraps
-.globl vector122
-vector122:
-  pushl $0
-  pushl $122
-  jmp alltraps
-.globl vector123
-vector123:
-  pushl $0
-  pushl $123
-  jmp alltraps
-.globl vector124
-vector124:
-  pushl $0
-  pushl $124
-  jmp alltraps
-.globl vector125
-vector125:
-  pushl $0
-  pushl $125
-  jmp alltraps
-.globl vector126
-vector126:
-  pushl $0
-  pushl $126
-  jmp alltraps
-.globl vector127
-vector127:
-  pushl $0
-  pushl $127
-  jmp alltraps
-.globl vector128
-vector128:
-  pushl $0
-  pushl $128
-  jmp alltraps
-.globl vector129
-vector129:
-  pushl $0
-  pushl $129
-  jmp alltraps
-.globl vector130
-vector130:
-  pushl $0
-  pushl $130
-  jmp alltraps
-.globl vector131
-vector131:
-  pushl $0
-  pushl $131
-  jmp alltraps
-.globl vector132
-vector132:
-  pushl $0
-  pushl $132
-  jmp alltraps
-.globl vector133
-vector133:
-  pushl $0
-  pushl $133
-  jmp alltraps
-.globl vector134
-vector134:
-  pushl $0
-  pushl $134
-  jmp alltraps
-.globl vector135
-vector135:
-  pushl $0
-  pushl $135
-  jmp alltraps
-.globl vector136
-vector136:
-  pushl $0
-  pushl $136
-  jmp alltraps
-.globl vector137
-vector137:
-  pushl $0
-  pushl $137
-  jmp alltraps
-.globl vector138
-vector138:
-  pushl $0
-  pushl $138
-  jmp alltraps
-.globl vector139
-vector139:
-  pushl $0
-  pushl $139
-  jmp alltraps
-.globl vector140
-vector140:
-  pushl $0
-  pushl $140
-  jmp alltraps
-.globl vector141
-vector141:
-  pushl $0
-  pushl $141
-  jmp alltraps
-.globl vector142
-vector142:
-  pushl $0
-  pushl $142
-  jmp alltraps
-.globl vector143
-vector143:
-  pushl $0
-  pushl $143
-  jmp alltraps
-.globl vector144
-vector144:
-  pushl $0
-  pushl $144
-  jmp alltraps
-.globl vector145
-vector145:
-  pushl $0
-  pushl $145
-  jmp alltraps
-.globl vector146
-vector146:
-  pushl $0
-  pushl $146
-  jmp alltraps
-.globl vector147
-vector147:
-  pushl $0
-  pushl $147
-  jmp alltraps
-.globl vector148
-vector148:
-  pushl $0
-  pushl $148
-  jmp alltraps
-.globl vector149
-vector149:
-  pushl $0
-  pushl $149
-  jmp alltraps
-.globl vector150
-vector150:
-  pushl $0
-  pushl $150
-  jmp alltraps
-.globl vector151
-vector151:
-  pushl $0
-  pushl $151
-  jmp alltraps
-.globl vector152
-vector152:
-  pushl $0
-  pushl $152
-  jmp alltraps
-.globl vector153
-vector153:
-  pushl $0
-  pushl $153
-  jmp alltraps
-.globl vector154
-vector154:
-  pushl $0
-  pushl $154
-  jmp alltraps
-.globl vector155
-vector155:
-  pushl $0
-  pushl $155
-  jmp alltraps
-.globl vector156
-vector156:
-  pushl $0
-  pushl $156
-  jmp alltraps
-.globl vector157
-vector157:
-  pushl $0
-  pushl $157
-  jmp alltraps
-.globl vector158
-vector158:
-  pushl $0
-  pushl $158
-  jmp alltraps
-.globl vector159
-vector159:
-  pushl $0
-  pushl $159
-  jmp alltraps
-.globl vector160
-vector160:
-  pushl $0
-  pushl $160
-  jmp alltraps
-.globl vector161
-vector161:
-  pushl $0
-  pushl $161
-  jmp alltraps
-.globl vector162
-vector162:
-  pushl $0
-  pushl $162
-  jmp alltraps
-.globl vector163
-vector163:
-  pushl $0
-  pushl $163
-  jmp alltraps
-.globl vector164
-vector164:
-  pushl $0
-  pushl $164
-  jmp alltraps
-.globl vector165
-vector165:
-  pushl $0
-  pushl $165
-  jmp alltraps
-.globl vector166
-vector166:
-  pushl $0
-  pushl $166
-  jmp alltraps
-.globl vector167
-vector167:
-  pushl $0
-  pushl $167
-  jmp alltraps
-.globl vector168
-vector168:
-  pushl $0
-  pushl $168
-  jmp alltraps
-.globl vector169
-vector169:
-  pushl $0
-  pushl $169
-  jmp alltraps
-.globl vector170
-vector170:
-  pushl $0
-  pushl $170
-  jmp alltraps
-.globl vector171
-vector171:
-  pushl $0
-  pushl $171
-  jmp alltraps
-.globl vector172
-vector172:
-  pushl $0
-  pushl $172
-  jmp alltraps
-.globl vector173
-vector173:
-  pushl $0
-  pushl $173
-  jmp alltraps
-.globl vector174
-vector174:
-  pushl $0
-  pushl $174
-  jmp alltraps
-.globl vector175
-vector175:
-  pushl $0
-  pushl $175
-  jmp alltraps
-.globl vector176
-vector176:
-  pushl $0
-  pushl $176
-  jmp alltraps
-.globl vector177
-vector177:
-  pushl $0
-  pushl $177
-  jmp alltraps
-.globl vector178
-vector178:
-  pushl $0
-  pushl $178
-  jmp alltraps
-.globl vector179
-vector179:
-  pushl $0
-  pushl $179
-  jmp alltraps
-.globl vector180
-vector180:
-  pushl $0
-  pushl $180
-  jmp alltraps
-.globl vector181
-vector181:
-  pushl $0
-  pushl $181
-  jmp alltraps
-.globl vector182
-vector182:
-  pushl $0
-  pushl $182
-  jmp alltraps
-.globl vector183
-vector183:
-  pushl $0
-  pushl $183
-  jmp alltraps
-.globl vector184
-vector184:
-  pushl $0
-  pushl $184
-  jmp alltraps
-.globl vector185
-vector185:
-  pushl $0
-  pushl $185
-  jmp alltraps
-.globl vector186
-vector186:
-  pushl $0
-  pushl $186
-  jmp alltraps
-.globl vector187
-vector187:
-  pushl $0
-  pushl $187
-  jmp alltraps
-.globl vector188
-vector188:
-  pushl $0
-  pushl $188
-  jmp alltraps
-.globl vector189
-vector189:
-  pushl $0
-  pushl $189
-  jmp alltraps
-.globl vector190
-vector190:
-  pushl $0
-  pushl $190
-  jmp alltraps
-.globl vector191
-vector191:
-  pushl $0
-  pushl $191
-  jmp alltraps
-.globl vector192
-vector192:
-  pushl $0
-  pushl $192
-  jmp alltraps
-.globl vector193
-vector193:
-  pushl $0
-  pushl $193
-  jmp alltraps
-.globl vector194
-vector194:
-  pushl $0
-  pushl $194
-  jmp alltraps
-.globl vector195
-vector195:
-  pushl $0
-  pushl $195
-  jmp alltraps
-.globl vector196
-vector196:
-  pushl $0
-  pushl $196
-  jmp alltraps
-.globl vector197
-vector197:
-  pushl $0
-  pushl $197
-  jmp alltraps
-.globl vector198
-vector198:
-  pushl $0
-  pushl $198
-  jmp alltraps
-.globl vector199
-vector199:
-  pushl $0
-  pushl $199
-  jmp alltraps
-.globl vector200
-vector200:
-  pushl $0
-  pushl $200
-  jmp alltraps
-.globl vector201
-vector201:
-  pushl $0
-  pushl $201
-  jmp alltraps
-.globl vector202
-vector202:
-  pushl $0
-  pushl $202
-  jmp alltraps
-.globl vector203
-vector203:
-  pushl $0
-  pushl $203
-  jmp alltraps
-.globl vector204
-vector204:
-  pushl $0
-  pushl $204
-  jmp alltraps
-.globl vector205
-vector205:
-  pushl $0
-  pushl $205
-  jmp alltraps
-.globl vector206
-vector206:
-  pushl $0
-  pushl $206
-  jmp alltraps
-.globl vector207
-vector207:
-  pushl $0
-  pushl $207
-  jmp alltraps
-.globl vector208
-vector208:
-  pushl $0
-  pushl $208
-  jmp alltraps
-.globl vector209
-vector209:
-  pushl $0
-  pushl $209
-  jmp alltraps
-.globl vector210
-vector210:
-  pushl $0
-  pushl $210
-  jmp alltraps
-.globl vector211
-vector211:
-  pushl $0
-  pushl $211
-  jmp alltraps
-.globl vector212
-vector212:
-  pushl $0
-  pushl $212
-  jmp alltraps
-.globl vector213
-vector213:
-  pushl $0
-  pushl $213
-  jmp alltraps
-.globl vector214
-vector214:
-  pushl $0
-  pushl $214
-  jmp alltraps
-.globl vector215
-vector215:
-  pushl $0
-  pushl $215
-  jmp alltraps
-.globl vector216
-vector216:
-  pushl $0
-  pushl $216
-  jmp alltraps
-.globl vector217
-vector217:
-  pushl $0
-  pushl $217
-  jmp alltraps
-.globl vector218
-vector218:
-  pushl $0
-  pushl $218
-  jmp alltraps
-.globl vector219
-vector219:
-  pushl $0
-  pushl $219
-  jmp alltraps
-.globl vector220
-vector220:
-  pushl $0
-  pushl $220
-  jmp alltraps
-.globl vector221
-vector221:
-  pushl $0
-  pushl $221
-  jmp alltraps
-.globl vector222
-vector222:
-  pushl $0
-  pushl $222
-  jmp alltraps
-.globl vector223
-vector223:
-  pushl $0
-  pushl $223
-  jmp alltraps
-.globl vector224
-vector224:
-  pushl $0
-  pushl $224
-  jmp alltraps
-.globl vector225
-vector225:
-  pushl $0
-  pushl $225
-  jmp alltraps
-.globl vector226
-vector226:
-  pushl $0
-  pushl $226
-  jmp alltraps
-.globl vector227
-vector227:
-  pushl $0
-  pushl $227
-  jmp alltraps
-.globl vector228
-vector228:
-  pushl $0
-  pushl $228
-  jmp alltraps
-.globl vector229
-vector229:
-  pushl $0
-  pushl $229
-  jmp alltraps
-.globl vector230
-vector230:
-  pushl $0
-  pushl $230
-  jmp alltraps
-.globl vector231
-vector231:
-  pushl $0
-  pushl $231
-  jmp alltraps
-.globl vector232
-vector232:
-  pushl $0
-  pushl $232
-  jmp alltraps
-.globl vector233
-vector233:
-  pushl $0
-  pushl $233
-  jmp alltraps
-.globl vector234
-vector234:
-  pushl $0
-  pushl $234
-  jmp alltraps
-.globl vector235
-vector235:
-  pushl $0
-  pushl $235
-  jmp alltraps
-.globl vector236
-vector236:
-  pushl $0
-  pushl $236
-  jmp alltraps
-.globl vector237
-vector237:
-  pushl $0
-  pushl $237
-  jmp alltraps
-.globl vector238
-vector238:
-  pushl $0
-  pushl $238
-  jmp alltraps
-.globl vector239
-vector239:
-  pushl $0
-  pushl $239
-  jmp alltraps
-.globl vector240
-vector240:
-  pushl $0
-  pushl $240
-  jmp alltraps
-.globl vector241
-vector241:
-  pushl $0
-  pushl $241
-  jmp alltraps
-.globl vector242
-vector242:
-  pushl $0
-  pushl $242
-  jmp alltraps
-.globl vector243
-vector243:
-  pushl $0
-  pushl $243
-  jmp alltraps
-.globl vector244
-vector244:
-  pushl $0
-  pushl $244
-  jmp alltraps
-.globl vector245
-vector245:
-  pushl $0
-  pushl $245
-  jmp alltraps
-.globl vector246
-vector246:
-  pushl $0
-  pushl $246
-  jmp alltraps
-.globl vector247
-vector247:
-  pushl $0
-  pushl $247
-  jmp alltraps
-.globl vector248
-vector248:
-  pushl $0
-  pushl $248
-  jmp alltraps
-.globl vector249
-vector249:
-  pushl $0
-  pushl $249
-  jmp alltraps
-.globl vector250
-vector250:
-  pushl $0
-  pushl $250
-  jmp alltraps
-.globl vector251
-vector251:
-  pushl $0
-  pushl $251
-  jmp alltraps
-.globl vector252
-vector252:
-  pushl $0
-  pushl $252
-  jmp alltraps
-.globl vector253
-vector253:
-  pushl $0
-  pushl $253
-  jmp alltraps
-.globl vector254
-vector254:
-  pushl $0
-  pushl $254
-  jmp alltraps
-.globl vector255
-vector255:
-  pushl $0
-  pushl $255
-  jmp alltraps
-
-# vector table
-.data
-.globl vectors
-vectors:
-  .long vector0
-  .long vector1
-  .long vector2
-  .long vector3
-  .long vector4
-  .long vector5
-  .long vector6
-  .long vector7
-  .long vector8
-  .long vector9
-  .long vector10
-  .long vector11
-  .long vector12
-  .long vector13
-  .long vector14
-  .long vector15
-  .long vector16
-  .long vector17
-  .long vector18
-  .long vector19
-  .long vector20
-  .long vector21
-  .long vector22
-  .long vector23
-  .long vector24
-  .long vector25
-  .long vector26
-  .long vector27
-  .long vector28
-  .long vector29
-  .long vector30
-  .long vector31
-  .long vector32
-  .long vector33
-  .long vector34
-  .long vector35
-  .long vector36
-  .long vector37
-  .long vector38
-  .long vector39
-  .long vector40
-  .long vector41
-  .long vector42
-  .long vector43
-  .long vector44
-  .long vector45
-  .long vector46
-  .long vector47
-  .long vector48
-  .long vector49
-  .long vector50
-  .long vector51
-  .long vector52
-  .long vector53
-  .long vector54
-  .long vector55
-  .long vector56
-  .long vector57
-  .long vector58
-  .long vector59
-  .long vector60
-  .long vector61
-  .long vector62
-  .long vector63
-  .long vector64
-  .long vector65
-  .long vector66
-  .long vector67
-  .long vector68
-  .long vector69
-  .long vector70
-  .long vector71
-  .long vector72
-  .long vector73
-  .long vector74
-  .long vector75
-  .long vector76
-  .long vector77
-  .long vector78
-  .long vector79
-  .long vector80
-  .long vector81
-  .long vector82
-  .long vector83
-  .long vector84
-  .long vector85
-  .long vector86
-  .long vector87
-  .long vector88
-  .long vector89
-  .long vector90
-  .long vector91
-  .long vector92
-  .long vector93
-  .long vector94
-  .long vector95
-  .long vector96
-  .long vector97
-  .long vector98
-  .long vector99
-  .long vector100
-  .long vector101
-  .long vector102
-  .long vector103
-  .long vector104
-  .long vector105
-  .long vector106
-  .long vector107
-  .long vector108
-  .long vector109
-  .long vector110
-  .long vector111
-  .long vector112
-  .long vector113
-  .long vector114
-  .long vector115
-  .long vector116
-  .long vector117
-  .long vector118
-  .long vector119
-  .long vector120
-  .long vector121
-  .long vector122
-  .long vector123
-  .long vector124
-  .long vector125
-  .long vector126
-  .long vector127
-  .long vector128
-  .long vector129
-  .long vector130
-  .long vector131
-  .long vector132
-  .long vector133
-  .long vector134
-  .long vector135
-  .long vector136
-  .long vector137
-  .long vector138
-  .long vector139
-  .long vector140
-  .long vector141
-  .long vector142
-  .long vector143
-  .long vector144
-  .long vector145
-  .long vector146
-  .long vector147
-  .long vector148
-  .long vector149
-  .long vector150
-  .long vector151
-  .long vector152
-  .long vector153
-  .long vector154
-  .long vector155
-  .long vector156
-  .long vector157
-  .long vector158
-  .long vector159
-  .long vector160
-  .long vector161
-  .long vector162
-  .long vector163
-  .long vector164
-  .long vector165
-  .long vector166
-  .long vector167
-  .long vector168
-  .long vector169
-  .long vector170
-  .long vector171
-  .long vector172
-  .long vector173
-  .long vector174
-  .long vector175
-  .long vector176
-  .long vector177
-  .long vector178
-  .long vector179
-  .long vector180
-  .long vector181
-  .long vector182
-  .long vector183
-  .long vector184
-  .long vector185
-  .long vector186
-  .long vector187
-  .long vector188
-  .long vector189
-  .long vector190
-  .long vector191
-  .long vector192
-  .long vector193
-  .long vector194
-  .long vector195
-  .long vector196
-  .long vector197
-  .long vector198
-  .long vector199
-  .long vector200
-  .long vector201
-  .long vector202
-  .long vector203
-  .long vector204
-  .long vector205
-  .long vector206
-  .long vector207
-  .long vector208
-  .long vector209
-  .long vector210
-  .long vector211
-  .long vector212
-  .long vector213
-  .long vector214
-  .long vector215
-  .long vector216
-  .long vector217
-  .long vector218
-  .long vector219
-  .long vector220
-  .long vector221
-  .long vector222
-  .long vector223
-  .long vector224
-  .long vector225
-  .long vector226
-  .long vector227
-  .long vector228
-  .long vector229
-  .long vector230
-  .long vector231
-  .long vector232
-  .long vector233
-  .long vector234
-  .long vector235
-  .long vector236
-  .long vector237
-  .long vector238
-  .long vector239
-  .long vector240
-  .long vector241
-  .long vector242
-  .long vector243
-  .long vector244
-  .long vector245
-  .long vector246
-  .long vector247
-  .long vector248
-  .long vector249
-  .long vector250
-  .long vector251
-  .long vector252
-  .long vector253
-  .long vector254
-  .long vector255
diff --git a/vectors.o b/vectors.o
deleted file mode 100644
index 918bb4d..0000000
Binary files a/vectors.o and /dev/null differ
diff --git a/vm.c b/vm.c
index 7134cff..f03d17a 100644
--- a/vm.c
+++ b/vm.c
@@ -54,6 +54,25 @@ walkpgdir(pde_t *pgdir, const void *va, int alloc)
   return &pgtab[PTX(va)];
 }
 
+int
+count_mem_pages(struct proc *p)
+{
+  pde_t *pgdir = p->pgdir;
+  int count = 0;
+
+  // Scan every user virtual‐address page from 0 up to p->sz
+  for (uint va = 0; va < p->sz; va += PGSIZE) {
+    pte_t *pte = walkpgdir(pgdir, (void*)va, 0);
+    if (pte && (*pte & PTE_P))
+      count++;
+  }
+  return count;
+}
+pte_t* proxytowalkpgdir(pde_t *pgdir, const void *va, int alloc)
+{
+  return walkpgdir(pgdir,va,alloc);
+}
+
 // Create PTEs for virtual addresses starting at va that refer to
 // physical addresses starting at pa. va and size might not
 // be page-aligned.
@@ -218,6 +237,7 @@ loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)
 
 // Allocate page tables and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
+extern void handle_low_mem(void);
 int
 allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 {
@@ -231,11 +251,24 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
 
   a = PGROUNDUP(oldsz);
   for(; a < newsz; a += PGSIZE){
+    // handle_low_mem();
     mem = kalloc();
+    // if(mem == 0){
+    //   cprintf("allocuvm out of memory\n");
+    //   deallocuvm(pgdir, newsz, oldsz);
+    //   return 0;
+    // }
+    
     if(mem == 0){
-      cprintf("allocuvm out of memory\n");
-      deallocuvm(pgdir, newsz, oldsz);
-      return 0;
+      cprintf("inside mem == 0\n");
+      handle_low_mem();
+      while(mem==0) mem = kalloc();
+      if(mem == 0)
+      {
+        cprintf("allocuvm out of memory even after swap\n");
+        deallocuvm(pgdir, newsz, oldsz);
+        return 0;
+      }
     }
     memset(mem, 0, PGSIZE);
     if(mappages(pgdir, (char*)a, PGSIZE, V2P(mem), PTE_W|PTE_U) < 0){
@@ -244,6 +277,7 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
       kfree(mem);
       return 0;
     }
+    myproc()->rss++;
   }
   return newsz;
 }
diff --git a/vm.d b/vm.d
deleted file mode 100644
index 51631b1..0000000
--- a/vm.d
+++ /dev/null
@@ -1,2 +0,0 @@
-vm.o: vm.c /usr/include/stdc-predef.h param.h types.h defs.h x86.h \
- memlayout.h mmu.h proc.h elf.h
diff --git a/vm.o b/vm.o
deleted file mode 100644
index dc72648..0000000
Binary files a/vm.o and /dev/null differ
diff --git a/wc.asm b/wc.asm
deleted file mode 100644
index c216219..0000000
--- a/wc.asm
+++ /dev/null
@@ -1,1265 +0,0 @@
-
-_wc:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-  printf(1, "%d %d %d %s\n", l, w, c, name);
-}
-
-int
-main(int argc, char *argv[])
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	57                   	push   %edi
-   e:	56                   	push   %esi
-   f:	be 01 00 00 00       	mov    $0x1,%esi
-  14:	53                   	push   %ebx
-  15:	51                   	push   %ecx
-  16:	83 ec 18             	sub    $0x18,%esp
-  19:	8b 01                	mov    (%ecx),%eax
-  1b:	8b 59 04             	mov    0x4(%ecx),%ebx
-  1e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
-  21:	83 c3 04             	add    $0x4,%ebx
-  int fd, i;
-
-  if(argc <= 1){
-  24:	83 f8 01             	cmp    $0x1,%eax
-  27:	7f 28                	jg     51 <main+0x51>
-  29:	eb 54                	jmp    7f <main+0x7f>
-  2b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  for(i = 1; i < argc; i++){
-    if((fd = open(argv[i], 0)) < 0){
-      printf(1, "wc: cannot open %s\n", argv[i]);
-      exit();
-    }
-    wc(fd, argv[i]);
-  30:	83 ec 08             	sub    $0x8,%esp
-  33:	ff 33                	push   (%ebx)
-  for(i = 1; i < argc; i++){
-  35:	83 c6 01             	add    $0x1,%esi
-  38:	83 c3 04             	add    $0x4,%ebx
-    wc(fd, argv[i]);
-  3b:	50                   	push   %eax
-  3c:	e8 5f 00 00 00       	call   a0 <wc>
-    close(fd);
-  41:	89 3c 24             	mov    %edi,(%esp)
-  44:	e8 a2 03 00 00       	call   3eb <close>
-  for(i = 1; i < argc; i++){
-  49:	83 c4 10             	add    $0x10,%esp
-  4c:	39 75 e4             	cmp    %esi,-0x1c(%ebp)
-  4f:	74 29                	je     7a <main+0x7a>
-    if((fd = open(argv[i], 0)) < 0){
-  51:	83 ec 08             	sub    $0x8,%esp
-  54:	6a 00                	push   $0x0
-  56:	ff 33                	push   (%ebx)
-  58:	e8 a6 03 00 00       	call   403 <open>
-  5d:	83 c4 10             	add    $0x10,%esp
-  60:	89 c7                	mov    %eax,%edi
-  62:	85 c0                	test   %eax,%eax
-  64:	79 ca                	jns    30 <main+0x30>
-      printf(1, "wc: cannot open %s\n", argv[i]);
-  66:	50                   	push   %eax
-  67:	ff 33                	push   (%ebx)
-  69:	68 3b 08 00 00       	push   $0x83b
-  6e:	6a 01                	push   $0x1
-  70:	e8 9b 04 00 00       	call   510 <printf>
-      exit();
-  75:	e8 49 03 00 00       	call   3c3 <exit>
-  }
-  exit();
-  7a:	e8 44 03 00 00       	call   3c3 <exit>
-    wc(0, "");
-  7f:	52                   	push   %edx
-  80:	52                   	push   %edx
-  81:	68 2d 08 00 00       	push   $0x82d
-  86:	6a 00                	push   $0x0
-  88:	e8 13 00 00 00       	call   a0 <wc>
-    exit();
-  8d:	e8 31 03 00 00       	call   3c3 <exit>
-  92:	66 90                	xchg   %ax,%ax
-  94:	66 90                	xchg   %ax,%ax
-  96:	66 90                	xchg   %ax,%ax
-  98:	66 90                	xchg   %ax,%ax
-  9a:	66 90                	xchg   %ax,%ax
-  9c:	66 90                	xchg   %ax,%ax
-  9e:	66 90                	xchg   %ax,%ax
-
-000000a0 <wc>:
-{
-  a0:	55                   	push   %ebp
-  l = w = c = 0;
-  a1:	31 d2                	xor    %edx,%edx
-{
-  a3:	89 e5                	mov    %esp,%ebp
-  a5:	57                   	push   %edi
-  a6:	56                   	push   %esi
-  inword = 0;
-  a7:	31 f6                	xor    %esi,%esi
-{
-  a9:	53                   	push   %ebx
-  l = w = c = 0;
-  aa:	31 db                	xor    %ebx,%ebx
-{
-  ac:	83 ec 1c             	sub    $0x1c,%esp
-  l = w = c = 0;
-  af:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
-  b6:	89 55 dc             	mov    %edx,-0x24(%ebp)
-  b9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  while((n = read(fd, buf, sizeof(buf))) > 0){
-  c0:	83 ec 04             	sub    $0x4,%esp
-  c3:	68 00 02 00 00       	push   $0x200
-  c8:	68 a0 0b 00 00       	push   $0xba0
-  cd:	ff 75 08             	push   0x8(%ebp)
-  d0:	e8 06 03 00 00       	call   3db <read>
-  d5:	83 c4 10             	add    $0x10,%esp
-  d8:	89 c1                	mov    %eax,%ecx
-  da:	85 c0                	test   %eax,%eax
-  dc:	7e 62                	jle    140 <wc+0xa0>
-    for(i=0; i<n; i++){
-  de:	89 4d e4             	mov    %ecx,-0x1c(%ebp)
-  e1:	31 ff                	xor    %edi,%edi
-  e3:	eb 0d                	jmp    f2 <wc+0x52>
-  e5:	8d 76 00             	lea    0x0(%esi),%esi
-        inword = 0;
-  e8:	31 f6                	xor    %esi,%esi
-    for(i=0; i<n; i++){
-  ea:	83 c7 01             	add    $0x1,%edi
-  ed:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
-  f0:	74 3e                	je     130 <wc+0x90>
-      if(buf[i] == '\n')
-  f2:	0f be 87 a0 0b 00 00 	movsbl 0xba0(%edi),%eax
-        l++;
-  f9:	31 c9                	xor    %ecx,%ecx
-  fb:	3c 0a                	cmp    $0xa,%al
-  fd:	0f 94 c1             	sete   %cl
-      if(strchr(" \r\t\n\v", buf[i]))
- 100:	83 ec 08             	sub    $0x8,%esp
- 103:	50                   	push   %eax
-        l++;
- 104:	01 cb                	add    %ecx,%ebx
-      if(strchr(" \r\t\n\v", buf[i]))
- 106:	68 18 08 00 00       	push   $0x818
- 10b:	e8 50 01 00 00       	call   260 <strchr>
- 110:	83 c4 10             	add    $0x10,%esp
- 113:	85 c0                	test   %eax,%eax
- 115:	75 d1                	jne    e8 <wc+0x48>
-      else if(!inword){
- 117:	85 f6                	test   %esi,%esi
- 119:	75 cf                	jne    ea <wc+0x4a>
-        w++;
- 11b:	83 45 e0 01          	addl   $0x1,-0x20(%ebp)
-        inword = 1;
- 11f:	be 01 00 00 00       	mov    $0x1,%esi
-    for(i=0; i<n; i++){
- 124:	83 c7 01             	add    $0x1,%edi
- 127:	39 7d e4             	cmp    %edi,-0x1c(%ebp)
- 12a:	75 c6                	jne    f2 <wc+0x52>
- 12c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
- 130:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
- 133:	01 4d dc             	add    %ecx,-0x24(%ebp)
- 136:	eb 88                	jmp    c0 <wc+0x20>
- 138:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 13f:	00 
-  if(n < 0){
- 140:	8b 55 dc             	mov    -0x24(%ebp),%edx
- 143:	75 22                	jne    167 <wc+0xc7>
-  printf(1, "%d %d %d %s\n", l, w, c, name);
- 145:	83 ec 08             	sub    $0x8,%esp
- 148:	ff 75 0c             	push   0xc(%ebp)
- 14b:	52                   	push   %edx
- 14c:	ff 75 e0             	push   -0x20(%ebp)
- 14f:	53                   	push   %ebx
- 150:	68 2e 08 00 00       	push   $0x82e
- 155:	6a 01                	push   $0x1
- 157:	e8 b4 03 00 00       	call   510 <printf>
-}
- 15c:	83 c4 20             	add    $0x20,%esp
- 15f:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 162:	5b                   	pop    %ebx
- 163:	5e                   	pop    %esi
- 164:	5f                   	pop    %edi
- 165:	5d                   	pop    %ebp
- 166:	c3                   	ret
-    printf(1, "wc: read error\n");
- 167:	50                   	push   %eax
- 168:	50                   	push   %eax
- 169:	68 1e 08 00 00       	push   $0x81e
- 16e:	6a 01                	push   $0x1
- 170:	e8 9b 03 00 00       	call   510 <printf>
-    exit();
- 175:	e8 49 02 00 00       	call   3c3 <exit>
- 17a:	66 90                	xchg   %ax,%ax
- 17c:	66 90                	xchg   %ax,%ax
- 17e:	66 90                	xchg   %ax,%ax
-
-00000180 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
- 180:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
- 181:	31 c0                	xor    %eax,%eax
-{
- 183:	89 e5                	mov    %esp,%ebp
- 185:	53                   	push   %ebx
- 186:	8b 4d 08             	mov    0x8(%ebp),%ecx
- 189:	8b 5d 0c             	mov    0xc(%ebp),%ebx
- 18c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
- 190:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
- 194:	88 14 01             	mov    %dl,(%ecx,%eax,1)
- 197:	83 c0 01             	add    $0x1,%eax
- 19a:	84 d2                	test   %dl,%dl
- 19c:	75 f2                	jne    190 <strcpy+0x10>
-    ;
-  return os;
-}
- 19e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 1a1:	89 c8                	mov    %ecx,%eax
- 1a3:	c9                   	leave
- 1a4:	c3                   	ret
- 1a5:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1ac:	00 
- 1ad:	8d 76 00             	lea    0x0(%esi),%esi
-
-000001b0 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
- 1b0:	55                   	push   %ebp
- 1b1:	89 e5                	mov    %esp,%ebp
- 1b3:	53                   	push   %ebx
- 1b4:	8b 55 08             	mov    0x8(%ebp),%edx
- 1b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
- 1ba:	0f b6 02             	movzbl (%edx),%eax
- 1bd:	84 c0                	test   %al,%al
- 1bf:	75 17                	jne    1d8 <strcmp+0x28>
- 1c1:	eb 3a                	jmp    1fd <strcmp+0x4d>
- 1c3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
- 1cc:	83 c2 01             	add    $0x1,%edx
- 1cf:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
- 1d2:	84 c0                	test   %al,%al
- 1d4:	74 1a                	je     1f0 <strcmp+0x40>
- 1d6:	89 d9                	mov    %ebx,%ecx
- 1d8:	0f b6 19             	movzbl (%ecx),%ebx
- 1db:	38 c3                	cmp    %al,%bl
- 1dd:	74 e9                	je     1c8 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
- 1df:	29 d8                	sub    %ebx,%eax
-}
- 1e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 1e4:	c9                   	leave
- 1e5:	c3                   	ret
- 1e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1ed:	00 
- 1ee:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
- 1f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
- 1f4:	31 c0                	xor    %eax,%eax
- 1f6:	29 d8                	sub    %ebx,%eax
-}
- 1f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 1fb:	c9                   	leave
- 1fc:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
- 1fd:	0f b6 19             	movzbl (%ecx),%ebx
- 200:	31 c0                	xor    %eax,%eax
- 202:	eb db                	jmp    1df <strcmp+0x2f>
- 204:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 20b:	00 
- 20c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000210 <strlen>:
-
-uint
-strlen(const char *s)
-{
- 210:	55                   	push   %ebp
- 211:	89 e5                	mov    %esp,%ebp
- 213:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
- 216:	80 3a 00             	cmpb   $0x0,(%edx)
- 219:	74 15                	je     230 <strlen+0x20>
- 21b:	31 c0                	xor    %eax,%eax
- 21d:	8d 76 00             	lea    0x0(%esi),%esi
- 220:	83 c0 01             	add    $0x1,%eax
- 223:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
- 227:	89 c1                	mov    %eax,%ecx
- 229:	75 f5                	jne    220 <strlen+0x10>
-    ;
-  return n;
-}
- 22b:	89 c8                	mov    %ecx,%eax
- 22d:	5d                   	pop    %ebp
- 22e:	c3                   	ret
- 22f:	90                   	nop
-  for(n = 0; s[n]; n++)
- 230:	31 c9                	xor    %ecx,%ecx
-}
- 232:	5d                   	pop    %ebp
- 233:	89 c8                	mov    %ecx,%eax
- 235:	c3                   	ret
- 236:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 23d:	00 
- 23e:	66 90                	xchg   %ax,%ax
-
-00000240 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
- 240:	55                   	push   %ebp
- 241:	89 e5                	mov    %esp,%ebp
- 243:	57                   	push   %edi
- 244:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
- 247:	8b 4d 10             	mov    0x10(%ebp),%ecx
- 24a:	8b 45 0c             	mov    0xc(%ebp),%eax
- 24d:	89 d7                	mov    %edx,%edi
- 24f:	fc                   	cld
- 250:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 252:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 255:	89 d0                	mov    %edx,%eax
- 257:	c9                   	leave
- 258:	c3                   	ret
- 259:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000260 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 260:	55                   	push   %ebp
- 261:	89 e5                	mov    %esp,%ebp
- 263:	8b 45 08             	mov    0x8(%ebp),%eax
- 266:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 26a:	0f b6 10             	movzbl (%eax),%edx
- 26d:	84 d2                	test   %dl,%dl
- 26f:	75 12                	jne    283 <strchr+0x23>
- 271:	eb 1d                	jmp    290 <strchr+0x30>
- 273:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 278:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 27c:	83 c0 01             	add    $0x1,%eax
- 27f:	84 d2                	test   %dl,%dl
- 281:	74 0d                	je     290 <strchr+0x30>
-    if(*s == c)
- 283:	38 d1                	cmp    %dl,%cl
- 285:	75 f1                	jne    278 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 287:	5d                   	pop    %ebp
- 288:	c3                   	ret
- 289:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 290:	31 c0                	xor    %eax,%eax
-}
- 292:	5d                   	pop    %ebp
- 293:	c3                   	ret
- 294:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 29b:	00 
- 29c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000002a0 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 2a0:	55                   	push   %ebp
- 2a1:	89 e5                	mov    %esp,%ebp
- 2a3:	57                   	push   %edi
- 2a4:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 2a5:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 2a8:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 2a9:	31 db                	xor    %ebx,%ebx
-{
- 2ab:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 2ae:	eb 27                	jmp    2d7 <gets+0x37>
-    cc = read(0, &c, 1);
- 2b0:	83 ec 04             	sub    $0x4,%esp
- 2b3:	6a 01                	push   $0x1
- 2b5:	56                   	push   %esi
- 2b6:	6a 00                	push   $0x0
- 2b8:	e8 1e 01 00 00       	call   3db <read>
-    if(cc < 1)
- 2bd:	83 c4 10             	add    $0x10,%esp
- 2c0:	85 c0                	test   %eax,%eax
- 2c2:	7e 1d                	jle    2e1 <gets+0x41>
-      break;
-    buf[i++] = c;
- 2c4:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 2c8:	8b 55 08             	mov    0x8(%ebp),%edx
- 2cb:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 2cf:	3c 0a                	cmp    $0xa,%al
- 2d1:	74 10                	je     2e3 <gets+0x43>
- 2d3:	3c 0d                	cmp    $0xd,%al
- 2d5:	74 0c                	je     2e3 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 2d7:	89 df                	mov    %ebx,%edi
- 2d9:	83 c3 01             	add    $0x1,%ebx
- 2dc:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 2df:	7c cf                	jl     2b0 <gets+0x10>
- 2e1:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 2e3:	8b 45 08             	mov    0x8(%ebp),%eax
- 2e6:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 2ea:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 2ed:	5b                   	pop    %ebx
- 2ee:	5e                   	pop    %esi
- 2ef:	5f                   	pop    %edi
- 2f0:	5d                   	pop    %ebp
- 2f1:	c3                   	ret
- 2f2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 2f9:	00 
- 2fa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-00000300 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 300:	55                   	push   %ebp
- 301:	89 e5                	mov    %esp,%ebp
- 303:	56                   	push   %esi
- 304:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 305:	83 ec 08             	sub    $0x8,%esp
- 308:	6a 00                	push   $0x0
- 30a:	ff 75 08             	push   0x8(%ebp)
- 30d:	e8 f1 00 00 00       	call   403 <open>
-  if(fd < 0)
- 312:	83 c4 10             	add    $0x10,%esp
- 315:	85 c0                	test   %eax,%eax
- 317:	78 27                	js     340 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 319:	83 ec 08             	sub    $0x8,%esp
- 31c:	ff 75 0c             	push   0xc(%ebp)
- 31f:	89 c3                	mov    %eax,%ebx
- 321:	50                   	push   %eax
- 322:	e8 f4 00 00 00       	call   41b <fstat>
-  close(fd);
- 327:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 32a:	89 c6                	mov    %eax,%esi
-  close(fd);
- 32c:	e8 ba 00 00 00       	call   3eb <close>
-  return r;
- 331:	83 c4 10             	add    $0x10,%esp
-}
- 334:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 337:	89 f0                	mov    %esi,%eax
- 339:	5b                   	pop    %ebx
- 33a:	5e                   	pop    %esi
- 33b:	5d                   	pop    %ebp
- 33c:	c3                   	ret
- 33d:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 340:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 345:	eb ed                	jmp    334 <stat+0x34>
- 347:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 34e:	00 
- 34f:	90                   	nop
-
-00000350 <atoi>:
-
-int
-atoi(const char *s)
-{
- 350:	55                   	push   %ebp
- 351:	89 e5                	mov    %esp,%ebp
- 353:	53                   	push   %ebx
- 354:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 357:	0f be 02             	movsbl (%edx),%eax
- 35a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 35d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 360:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 365:	77 1e                	ja     385 <atoi+0x35>
- 367:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 36e:	00 
- 36f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 370:	83 c2 01             	add    $0x1,%edx
- 373:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 376:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 37a:	0f be 02             	movsbl (%edx),%eax
- 37d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 380:	80 fb 09             	cmp    $0x9,%bl
- 383:	76 eb                	jbe    370 <atoi+0x20>
-  return n;
-}
- 385:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 388:	89 c8                	mov    %ecx,%eax
- 38a:	c9                   	leave
- 38b:	c3                   	ret
- 38c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000390 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 390:	55                   	push   %ebp
- 391:	89 e5                	mov    %esp,%ebp
- 393:	57                   	push   %edi
- 394:	8b 45 10             	mov    0x10(%ebp),%eax
- 397:	8b 55 08             	mov    0x8(%ebp),%edx
- 39a:	56                   	push   %esi
- 39b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 39e:	85 c0                	test   %eax,%eax
- 3a0:	7e 13                	jle    3b5 <memmove+0x25>
- 3a2:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 3a4:	89 d7                	mov    %edx,%edi
- 3a6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 3ad:	00 
- 3ae:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 3b0:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 3b1:	39 f8                	cmp    %edi,%eax
- 3b3:	75 fb                	jne    3b0 <memmove+0x20>
-  return vdst;
-}
- 3b5:	5e                   	pop    %esi
- 3b6:	89 d0                	mov    %edx,%eax
- 3b8:	5f                   	pop    %edi
- 3b9:	5d                   	pop    %ebp
- 3ba:	c3                   	ret
-
-000003bb <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 3bb:	b8 01 00 00 00       	mov    $0x1,%eax
- 3c0:	cd 40                	int    $0x40
- 3c2:	c3                   	ret
-
-000003c3 <exit>:
-SYSCALL(exit)
- 3c3:	b8 02 00 00 00       	mov    $0x2,%eax
- 3c8:	cd 40                	int    $0x40
- 3ca:	c3                   	ret
-
-000003cb <wait>:
-SYSCALL(wait)
- 3cb:	b8 03 00 00 00       	mov    $0x3,%eax
- 3d0:	cd 40                	int    $0x40
- 3d2:	c3                   	ret
-
-000003d3 <pipe>:
-SYSCALL(pipe)
- 3d3:	b8 04 00 00 00       	mov    $0x4,%eax
- 3d8:	cd 40                	int    $0x40
- 3da:	c3                   	ret
-
-000003db <read>:
-SYSCALL(read)
- 3db:	b8 05 00 00 00       	mov    $0x5,%eax
- 3e0:	cd 40                	int    $0x40
- 3e2:	c3                   	ret
-
-000003e3 <write>:
-SYSCALL(write)
- 3e3:	b8 10 00 00 00       	mov    $0x10,%eax
- 3e8:	cd 40                	int    $0x40
- 3ea:	c3                   	ret
-
-000003eb <close>:
-SYSCALL(close)
- 3eb:	b8 15 00 00 00       	mov    $0x15,%eax
- 3f0:	cd 40                	int    $0x40
- 3f2:	c3                   	ret
-
-000003f3 <kill>:
-SYSCALL(kill)
- 3f3:	b8 06 00 00 00       	mov    $0x6,%eax
- 3f8:	cd 40                	int    $0x40
- 3fa:	c3                   	ret
-
-000003fb <exec>:
-SYSCALL(exec)
- 3fb:	b8 07 00 00 00       	mov    $0x7,%eax
- 400:	cd 40                	int    $0x40
- 402:	c3                   	ret
-
-00000403 <open>:
-SYSCALL(open)
- 403:	b8 0f 00 00 00       	mov    $0xf,%eax
- 408:	cd 40                	int    $0x40
- 40a:	c3                   	ret
-
-0000040b <mknod>:
-SYSCALL(mknod)
- 40b:	b8 11 00 00 00       	mov    $0x11,%eax
- 410:	cd 40                	int    $0x40
- 412:	c3                   	ret
-
-00000413 <unlink>:
-SYSCALL(unlink)
- 413:	b8 12 00 00 00       	mov    $0x12,%eax
- 418:	cd 40                	int    $0x40
- 41a:	c3                   	ret
-
-0000041b <fstat>:
-SYSCALL(fstat)
- 41b:	b8 08 00 00 00       	mov    $0x8,%eax
- 420:	cd 40                	int    $0x40
- 422:	c3                   	ret
-
-00000423 <link>:
-SYSCALL(link)
- 423:	b8 13 00 00 00       	mov    $0x13,%eax
- 428:	cd 40                	int    $0x40
- 42a:	c3                   	ret
-
-0000042b <mkdir>:
-SYSCALL(mkdir)
- 42b:	b8 14 00 00 00       	mov    $0x14,%eax
- 430:	cd 40                	int    $0x40
- 432:	c3                   	ret
-
-00000433 <chdir>:
-SYSCALL(chdir)
- 433:	b8 09 00 00 00       	mov    $0x9,%eax
- 438:	cd 40                	int    $0x40
- 43a:	c3                   	ret
-
-0000043b <dup>:
-SYSCALL(dup)
- 43b:	b8 0a 00 00 00       	mov    $0xa,%eax
- 440:	cd 40                	int    $0x40
- 442:	c3                   	ret
-
-00000443 <getpid>:
-SYSCALL(getpid)
- 443:	b8 0b 00 00 00       	mov    $0xb,%eax
- 448:	cd 40                	int    $0x40
- 44a:	c3                   	ret
-
-0000044b <sbrk>:
-SYSCALL(sbrk)
- 44b:	b8 0c 00 00 00       	mov    $0xc,%eax
- 450:	cd 40                	int    $0x40
- 452:	c3                   	ret
-
-00000453 <sleep>:
-SYSCALL(sleep)
- 453:	b8 0d 00 00 00       	mov    $0xd,%eax
- 458:	cd 40                	int    $0x40
- 45a:	c3                   	ret
-
-0000045b <uptime>:
-SYSCALL(uptime)
- 45b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 460:	cd 40                	int    $0x40
- 462:	c3                   	ret
- 463:	66 90                	xchg   %ax,%ax
- 465:	66 90                	xchg   %ax,%ax
- 467:	66 90                	xchg   %ax,%ax
- 469:	66 90                	xchg   %ax,%ax
- 46b:	66 90                	xchg   %ax,%ax
- 46d:	66 90                	xchg   %ax,%ax
- 46f:	90                   	nop
-
-00000470 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 470:	55                   	push   %ebp
- 471:	89 e5                	mov    %esp,%ebp
- 473:	57                   	push   %edi
- 474:	56                   	push   %esi
- 475:	53                   	push   %ebx
- 476:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 478:	89 d1                	mov    %edx,%ecx
-{
- 47a:	83 ec 3c             	sub    $0x3c,%esp
- 47d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 480:	85 d2                	test   %edx,%edx
- 482:	0f 89 80 00 00 00    	jns    508 <printint+0x98>
- 488:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 48c:	74 7a                	je     508 <printint+0x98>
-    x = -xx;
- 48e:	f7 d9                	neg    %ecx
-    neg = 1;
- 490:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 495:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 498:	31 f6                	xor    %esi,%esi
- 49a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 4a0:	89 c8                	mov    %ecx,%eax
- 4a2:	31 d2                	xor    %edx,%edx
- 4a4:	89 f7                	mov    %esi,%edi
- 4a6:	f7 f3                	div    %ebx
- 4a8:	8d 76 01             	lea    0x1(%esi),%esi
- 4ab:	0f b6 92 b0 08 00 00 	movzbl 0x8b0(%edx),%edx
- 4b2:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 4b6:	89 ca                	mov    %ecx,%edx
- 4b8:	89 c1                	mov    %eax,%ecx
- 4ba:	39 da                	cmp    %ebx,%edx
- 4bc:	73 e2                	jae    4a0 <printint+0x30>
-  if(neg)
- 4be:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 4c1:	85 c0                	test   %eax,%eax
- 4c3:	74 07                	je     4cc <printint+0x5c>
-    buf[i++] = '-';
- 4c5:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 4ca:	89 f7                	mov    %esi,%edi
- 4cc:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 4cf:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 4d2:	01 df                	add    %ebx,%edi
- 4d4:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 4d8:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 4db:	83 ec 04             	sub    $0x4,%esp
- 4de:	88 45 d7             	mov    %al,-0x29(%ebp)
- 4e1:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 4e4:	6a 01                	push   $0x1
- 4e6:	50                   	push   %eax
- 4e7:	56                   	push   %esi
- 4e8:	e8 f6 fe ff ff       	call   3e3 <write>
-  while(--i >= 0)
- 4ed:	89 f8                	mov    %edi,%eax
- 4ef:	83 c4 10             	add    $0x10,%esp
- 4f2:	83 ef 01             	sub    $0x1,%edi
- 4f5:	39 c3                	cmp    %eax,%ebx
- 4f7:	75 df                	jne    4d8 <printint+0x68>
-}
- 4f9:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 4fc:	5b                   	pop    %ebx
- 4fd:	5e                   	pop    %esi
- 4fe:	5f                   	pop    %edi
- 4ff:	5d                   	pop    %ebp
- 500:	c3                   	ret
- 501:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 508:	31 c0                	xor    %eax,%eax
- 50a:	eb 89                	jmp    495 <printint+0x25>
- 50c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000510 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 510:	55                   	push   %ebp
- 511:	89 e5                	mov    %esp,%ebp
- 513:	57                   	push   %edi
- 514:	56                   	push   %esi
- 515:	53                   	push   %ebx
- 516:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 519:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 51c:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 51f:	0f b6 1e             	movzbl (%esi),%ebx
- 522:	83 c6 01             	add    $0x1,%esi
- 525:	84 db                	test   %bl,%bl
- 527:	74 67                	je     590 <printf+0x80>
- 529:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 52c:	31 d2                	xor    %edx,%edx
- 52e:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 531:	eb 34                	jmp    567 <printf+0x57>
- 533:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 538:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 53b:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 540:	83 f8 25             	cmp    $0x25,%eax
- 543:	74 18                	je     55d <printf+0x4d>
-  write(fd, &c, 1);
- 545:	83 ec 04             	sub    $0x4,%esp
- 548:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 54b:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 54e:	6a 01                	push   $0x1
- 550:	50                   	push   %eax
- 551:	57                   	push   %edi
- 552:	e8 8c fe ff ff       	call   3e3 <write>
- 557:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 55a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 55d:	0f b6 1e             	movzbl (%esi),%ebx
- 560:	83 c6 01             	add    $0x1,%esi
- 563:	84 db                	test   %bl,%bl
- 565:	74 29                	je     590 <printf+0x80>
-    c = fmt[i] & 0xff;
- 567:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 56a:	85 d2                	test   %edx,%edx
- 56c:	74 ca                	je     538 <printf+0x28>
-      }
-    } else if(state == '%'){
- 56e:	83 fa 25             	cmp    $0x25,%edx
- 571:	75 ea                	jne    55d <printf+0x4d>
-      if(c == 'd'){
- 573:	83 f8 25             	cmp    $0x25,%eax
- 576:	0f 84 04 01 00 00    	je     680 <printf+0x170>
- 57c:	83 e8 63             	sub    $0x63,%eax
- 57f:	83 f8 15             	cmp    $0x15,%eax
- 582:	77 1c                	ja     5a0 <printf+0x90>
- 584:	ff 24 85 58 08 00 00 	jmp    *0x858(,%eax,4)
- 58b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 590:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 593:	5b                   	pop    %ebx
- 594:	5e                   	pop    %esi
- 595:	5f                   	pop    %edi
- 596:	5d                   	pop    %ebp
- 597:	c3                   	ret
- 598:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 59f:	00 
-  write(fd, &c, 1);
- 5a0:	83 ec 04             	sub    $0x4,%esp
- 5a3:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 5a6:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 5aa:	6a 01                	push   $0x1
- 5ac:	52                   	push   %edx
- 5ad:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 5b0:	57                   	push   %edi
- 5b1:	e8 2d fe ff ff       	call   3e3 <write>
- 5b6:	83 c4 0c             	add    $0xc,%esp
- 5b9:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 5bc:	6a 01                	push   $0x1
- 5be:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 5c1:	52                   	push   %edx
- 5c2:	57                   	push   %edi
- 5c3:	e8 1b fe ff ff       	call   3e3 <write>
-        putc(fd, c);
- 5c8:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 5cb:	31 d2                	xor    %edx,%edx
- 5cd:	eb 8e                	jmp    55d <printf+0x4d>
- 5cf:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 5d0:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 5d3:	83 ec 0c             	sub    $0xc,%esp
- 5d6:	b9 10 00 00 00       	mov    $0x10,%ecx
- 5db:	8b 13                	mov    (%ebx),%edx
- 5dd:	6a 00                	push   $0x0
- 5df:	89 f8                	mov    %edi,%eax
-        ap++;
- 5e1:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 5e4:	e8 87 fe ff ff       	call   470 <printint>
-        ap++;
- 5e9:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 5ec:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 5ef:	31 d2                	xor    %edx,%edx
- 5f1:	e9 67 ff ff ff       	jmp    55d <printf+0x4d>
-        s = (char*)*ap;
- 5f6:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 5f9:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 5fb:	83 c0 04             	add    $0x4,%eax
- 5fe:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 601:	85 db                	test   %ebx,%ebx
- 603:	0f 84 87 00 00 00    	je     690 <printf+0x180>
-        while(*s != 0){
- 609:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 60c:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 60e:	84 c0                	test   %al,%al
- 610:	0f 84 47 ff ff ff    	je     55d <printf+0x4d>
- 616:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 619:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 61c:	89 de                	mov    %ebx,%esi
- 61e:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 620:	83 ec 04             	sub    $0x4,%esp
- 623:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 626:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 629:	6a 01                	push   $0x1
- 62b:	53                   	push   %ebx
- 62c:	57                   	push   %edi
- 62d:	e8 b1 fd ff ff       	call   3e3 <write>
-        while(*s != 0){
- 632:	0f b6 06             	movzbl (%esi),%eax
- 635:	83 c4 10             	add    $0x10,%esp
- 638:	84 c0                	test   %al,%al
- 63a:	75 e4                	jne    620 <printf+0x110>
-      state = 0;
- 63c:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 63f:	31 d2                	xor    %edx,%edx
- 641:	e9 17 ff ff ff       	jmp    55d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 646:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 649:	83 ec 0c             	sub    $0xc,%esp
- 64c:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 651:	8b 13                	mov    (%ebx),%edx
- 653:	6a 01                	push   $0x1
- 655:	eb 88                	jmp    5df <printf+0xcf>
-        putc(fd, *ap);
- 657:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 65a:	83 ec 04             	sub    $0x4,%esp
- 65d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 660:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 662:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 665:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 668:	6a 01                	push   $0x1
- 66a:	52                   	push   %edx
- 66b:	57                   	push   %edi
- 66c:	e8 72 fd ff ff       	call   3e3 <write>
-        ap++;
- 671:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 674:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 677:	31 d2                	xor    %edx,%edx
- 679:	e9 df fe ff ff       	jmp    55d <printf+0x4d>
- 67e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 680:	83 ec 04             	sub    $0x4,%esp
- 683:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 686:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 689:	6a 01                	push   $0x1
- 68b:	e9 31 ff ff ff       	jmp    5c1 <printf+0xb1>
- 690:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 695:	bb 4f 08 00 00       	mov    $0x84f,%ebx
- 69a:	e9 77 ff ff ff       	jmp    616 <printf+0x106>
- 69f:	90                   	nop
-
-000006a0 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 6a0:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6a1:	a1 a0 0d 00 00       	mov    0xda0,%eax
-{
- 6a6:	89 e5                	mov    %esp,%ebp
- 6a8:	57                   	push   %edi
- 6a9:	56                   	push   %esi
- 6aa:	53                   	push   %ebx
- 6ab:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 6ae:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6b8:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 6ba:	39 c8                	cmp    %ecx,%eax
- 6bc:	73 32                	jae    6f0 <free+0x50>
- 6be:	39 d1                	cmp    %edx,%ecx
- 6c0:	72 04                	jb     6c6 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6c2:	39 d0                	cmp    %edx,%eax
- 6c4:	72 32                	jb     6f8 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 6c6:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 6c9:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 6cc:	39 fa                	cmp    %edi,%edx
- 6ce:	74 30                	je     700 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 6d0:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 6d3:	8b 50 04             	mov    0x4(%eax),%edx
- 6d6:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 6d9:	39 f1                	cmp    %esi,%ecx
- 6db:	74 3a                	je     717 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 6dd:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 6df:	5b                   	pop    %ebx
-  freep = p;
- 6e0:	a3 a0 0d 00 00       	mov    %eax,0xda0
-}
- 6e5:	5e                   	pop    %esi
- 6e6:	5f                   	pop    %edi
- 6e7:	5d                   	pop    %ebp
- 6e8:	c3                   	ret
- 6e9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 6f0:	39 d0                	cmp    %edx,%eax
- 6f2:	72 04                	jb     6f8 <free+0x58>
- 6f4:	39 d1                	cmp    %edx,%ecx
- 6f6:	72 ce                	jb     6c6 <free+0x26>
-{
- 6f8:	89 d0                	mov    %edx,%eax
- 6fa:	eb bc                	jmp    6b8 <free+0x18>
- 6fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 700:	03 72 04             	add    0x4(%edx),%esi
- 703:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 706:	8b 10                	mov    (%eax),%edx
- 708:	8b 12                	mov    (%edx),%edx
- 70a:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 70d:	8b 50 04             	mov    0x4(%eax),%edx
- 710:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 713:	39 f1                	cmp    %esi,%ecx
- 715:	75 c6                	jne    6dd <free+0x3d>
-    p->s.size += bp->s.size;
- 717:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 71a:	a3 a0 0d 00 00       	mov    %eax,0xda0
-    p->s.size += bp->s.size;
- 71f:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 722:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 725:	89 08                	mov    %ecx,(%eax)
-}
- 727:	5b                   	pop    %ebx
- 728:	5e                   	pop    %esi
- 729:	5f                   	pop    %edi
- 72a:	5d                   	pop    %ebp
- 72b:	c3                   	ret
- 72c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000730 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 730:	55                   	push   %ebp
- 731:	89 e5                	mov    %esp,%ebp
- 733:	57                   	push   %edi
- 734:	56                   	push   %esi
- 735:	53                   	push   %ebx
- 736:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 739:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 73c:	8b 15 a0 0d 00 00    	mov    0xda0,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 742:	8d 78 07             	lea    0x7(%eax),%edi
- 745:	c1 ef 03             	shr    $0x3,%edi
- 748:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 74b:	85 d2                	test   %edx,%edx
- 74d:	0f 84 8d 00 00 00    	je     7e0 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 753:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 755:	8b 48 04             	mov    0x4(%eax),%ecx
- 758:	39 f9                	cmp    %edi,%ecx
- 75a:	73 64                	jae    7c0 <malloc+0x90>
-  if(nu < 4096)
- 75c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 761:	39 df                	cmp    %ebx,%edi
- 763:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 766:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 76d:	eb 0a                	jmp    779 <malloc+0x49>
- 76f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 770:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 772:	8b 48 04             	mov    0x4(%eax),%ecx
- 775:	39 f9                	cmp    %edi,%ecx
- 777:	73 47                	jae    7c0 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 779:	89 c2                	mov    %eax,%edx
- 77b:	3b 05 a0 0d 00 00    	cmp    0xda0,%eax
- 781:	75 ed                	jne    770 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 783:	83 ec 0c             	sub    $0xc,%esp
- 786:	56                   	push   %esi
- 787:	e8 bf fc ff ff       	call   44b <sbrk>
-  if(p == (char*)-1)
- 78c:	83 c4 10             	add    $0x10,%esp
- 78f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 792:	74 1c                	je     7b0 <malloc+0x80>
-  hp->s.size = nu;
- 794:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 797:	83 ec 0c             	sub    $0xc,%esp
- 79a:	83 c0 08             	add    $0x8,%eax
- 79d:	50                   	push   %eax
- 79e:	e8 fd fe ff ff       	call   6a0 <free>
-  return freep;
- 7a3:	8b 15 a0 0d 00 00    	mov    0xda0,%edx
-      if((p = morecore(nunits)) == 0)
- 7a9:	83 c4 10             	add    $0x10,%esp
- 7ac:	85 d2                	test   %edx,%edx
- 7ae:	75 c0                	jne    770 <malloc+0x40>
-        return 0;
-  }
-}
- 7b0:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 7b3:	31 c0                	xor    %eax,%eax
-}
- 7b5:	5b                   	pop    %ebx
- 7b6:	5e                   	pop    %esi
- 7b7:	5f                   	pop    %edi
- 7b8:	5d                   	pop    %ebp
- 7b9:	c3                   	ret
- 7ba:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 7c0:	39 cf                	cmp    %ecx,%edi
- 7c2:	74 4c                	je     810 <malloc+0xe0>
-        p->s.size -= nunits;
- 7c4:	29 f9                	sub    %edi,%ecx
- 7c6:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 7c9:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 7cc:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 7cf:	89 15 a0 0d 00 00    	mov    %edx,0xda0
-}
- 7d5:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 7d8:	83 c0 08             	add    $0x8,%eax
-}
- 7db:	5b                   	pop    %ebx
- 7dc:	5e                   	pop    %esi
- 7dd:	5f                   	pop    %edi
- 7de:	5d                   	pop    %ebp
- 7df:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 7e0:	c7 05 a0 0d 00 00 a4 	movl   $0xda4,0xda0
- 7e7:	0d 00 00 
-    base.s.size = 0;
- 7ea:	b8 a4 0d 00 00       	mov    $0xda4,%eax
-    base.s.ptr = freep = prevp = &base;
- 7ef:	c7 05 a4 0d 00 00 a4 	movl   $0xda4,0xda4
- 7f6:	0d 00 00 
-    base.s.size = 0;
- 7f9:	c7 05 a8 0d 00 00 00 	movl   $0x0,0xda8
- 800:	00 00 00 
-    if(p->s.size >= nunits){
- 803:	e9 54 ff ff ff       	jmp    75c <malloc+0x2c>
- 808:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 80f:	00 
-        prevp->s.ptr = p->s.ptr;
- 810:	8b 08                	mov    (%eax),%ecx
- 812:	89 0a                	mov    %ecx,(%edx)
- 814:	eb b9                	jmp    7cf <malloc+0x9f>
diff --git a/wc.d b/wc.d
deleted file mode 100644
index 6adc498..0000000
--- a/wc.d
+++ /dev/null
@@ -1 +0,0 @@
-wc.o: wc.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/wc.o b/wc.o
deleted file mode 100644
index fbda6b8..0000000
Binary files a/wc.o and /dev/null differ
diff --git a/wc.sym b/wc.sym
deleted file mode 100644
index 41f4a6e..0000000
--- a/wc.sym
+++ /dev/null
@@ -1,47 +0,0 @@
-00000000 wc.c
-00000000 ulib.c
-00000000 printf.c
-00000470 printint
-000008b0 digits.0
-00000000 umalloc.c
-00000da0 freep
-00000da4 base
-00000180 strcpy
-00000510 printf
-00000390 memmove
-0000040b mknod
-000002a0 gets
-00000443 getpid
-00000730 malloc
-00000453 sleep
-000003d3 pipe
-000003e3 write
-0000041b fstat
-000003f3 kill
-00000433 chdir
-000003fb exec
-000003cb wait
-000003db read
-00000413 unlink
-000000a0 wc
-000003bb fork
-0000044b sbrk
-0000045b uptime
-00000ba0 __bss_start
-00000240 memset
-00000000 main
-000001b0 strcmp
-0000043b dup
-00000ba0 buf
-00000300 stat
-00000b8c _edata
-00000dac _end
-00000423 link
-000003c3 exit
-00000350 atoi
-00000210 strlen
-00000403 open
-00000260 strchr
-0000042b mkdir
-000003eb close
-000006a0 free
diff --git a/xv6.img b/xv6.img
deleted file mode 100644
index 35515d1..0000000
Binary files a/xv6.img and /dev/null differ
diff --git a/zombie.asm b/zombie.asm
deleted file mode 100644
index 33f15a8..0000000
--- a/zombie.asm
+++ /dev/null
@@ -1,1099 +0,0 @@
-
-_zombie:     file format elf32-i386
-
-
-Disassembly of section .text:
-
-00000000 <main>:
-#include "stat.h"
-#include "user.h"
-
-int
-main(void)
-{
-   0:	8d 4c 24 04          	lea    0x4(%esp),%ecx
-   4:	83 e4 f0             	and    $0xfffffff0,%esp
-   7:	ff 71 fc             	push   -0x4(%ecx)
-   a:	55                   	push   %ebp
-   b:	89 e5                	mov    %esp,%ebp
-   d:	51                   	push   %ecx
-   e:	83 ec 04             	sub    $0x4,%esp
-  if(fork() > 0)
-  11:	e8 55 02 00 00       	call   26b <fork>
-  16:	85 c0                	test   %eax,%eax
-  18:	7e 0d                	jle    27 <main+0x27>
-    sleep(5);  // Let child exit before parent.
-  1a:	83 ec 0c             	sub    $0xc,%esp
-  1d:	6a 05                	push   $0x5
-  1f:	e8 df 02 00 00       	call   303 <sleep>
-  24:	83 c4 10             	add    $0x10,%esp
-  exit();
-  27:	e8 47 02 00 00       	call   273 <exit>
-  2c:	66 90                	xchg   %ax,%ax
-  2e:	66 90                	xchg   %ax,%ax
-
-00000030 <strcpy>:
-#include "user.h"
-#include "x86.h"
-
-char*
-strcpy(char *s, const char *t)
-{
-  30:	55                   	push   %ebp
-  char *os;
-
-  os = s;
-  while((*s++ = *t++) != 0)
-  31:	31 c0                	xor    %eax,%eax
-{
-  33:	89 e5                	mov    %esp,%ebp
-  35:	53                   	push   %ebx
-  36:	8b 4d 08             	mov    0x8(%ebp),%ecx
-  39:	8b 5d 0c             	mov    0xc(%ebp),%ebx
-  3c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-  while((*s++ = *t++) != 0)
-  40:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx
-  44:	88 14 01             	mov    %dl,(%ecx,%eax,1)
-  47:	83 c0 01             	add    $0x1,%eax
-  4a:	84 d2                	test   %dl,%dl
-  4c:	75 f2                	jne    40 <strcpy+0x10>
-    ;
-  return os;
-}
-  4e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  51:	89 c8                	mov    %ecx,%eax
-  53:	c9                   	leave
-  54:	c3                   	ret
-  55:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  5c:	00 
-  5d:	8d 76 00             	lea    0x0(%esi),%esi
-
-00000060 <strcmp>:
-
-int
-strcmp(const char *p, const char *q)
-{
-  60:	55                   	push   %ebp
-  61:	89 e5                	mov    %esp,%ebp
-  63:	53                   	push   %ebx
-  64:	8b 55 08             	mov    0x8(%ebp),%edx
-  67:	8b 4d 0c             	mov    0xc(%ebp),%ecx
-  while(*p && *p == *q)
-  6a:	0f b6 02             	movzbl (%edx),%eax
-  6d:	84 c0                	test   %al,%al
-  6f:	75 17                	jne    88 <strcmp+0x28>
-  71:	eb 3a                	jmp    ad <strcmp+0x4d>
-  73:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-  78:	0f b6 42 01          	movzbl 0x1(%edx),%eax
-    p++, q++;
-  7c:	83 c2 01             	add    $0x1,%edx
-  7f:	8d 59 01             	lea    0x1(%ecx),%ebx
-  while(*p && *p == *q)
-  82:	84 c0                	test   %al,%al
-  84:	74 1a                	je     a0 <strcmp+0x40>
-  86:	89 d9                	mov    %ebx,%ecx
-  88:	0f b6 19             	movzbl (%ecx),%ebx
-  8b:	38 c3                	cmp    %al,%bl
-  8d:	74 e9                	je     78 <strcmp+0x18>
-  return (uchar)*p - (uchar)*q;
-  8f:	29 d8                	sub    %ebx,%eax
-}
-  91:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  94:	c9                   	leave
-  95:	c3                   	ret
-  96:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  9d:	00 
-  9e:	66 90                	xchg   %ax,%ax
-  return (uchar)*p - (uchar)*q;
-  a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx
-  a4:	31 c0                	xor    %eax,%eax
-  a6:	29 d8                	sub    %ebx,%eax
-}
-  a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx
-  ab:	c9                   	leave
-  ac:	c3                   	ret
-  return (uchar)*p - (uchar)*q;
-  ad:	0f b6 19             	movzbl (%ecx),%ebx
-  b0:	31 c0                	xor    %eax,%eax
-  b2:	eb db                	jmp    8f <strcmp+0x2f>
-  b4:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  bb:	00 
-  bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000000c0 <strlen>:
-
-uint
-strlen(const char *s)
-{
-  c0:	55                   	push   %ebp
-  c1:	89 e5                	mov    %esp,%ebp
-  c3:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  for(n = 0; s[n]; n++)
-  c6:	80 3a 00             	cmpb   $0x0,(%edx)
-  c9:	74 15                	je     e0 <strlen+0x20>
-  cb:	31 c0                	xor    %eax,%eax
-  cd:	8d 76 00             	lea    0x0(%esi),%esi
-  d0:	83 c0 01             	add    $0x1,%eax
-  d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)
-  d7:	89 c1                	mov    %eax,%ecx
-  d9:	75 f5                	jne    d0 <strlen+0x10>
-    ;
-  return n;
-}
-  db:	89 c8                	mov    %ecx,%eax
-  dd:	5d                   	pop    %ebp
-  de:	c3                   	ret
-  df:	90                   	nop
-  for(n = 0; s[n]; n++)
-  e0:	31 c9                	xor    %ecx,%ecx
-}
-  e2:	5d                   	pop    %ebp
-  e3:	89 c8                	mov    %ecx,%eax
-  e5:	c3                   	ret
-  e6:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
-  ed:	00 
-  ee:	66 90                	xchg   %ax,%ax
-
-000000f0 <memset>:
-
-void*
-memset(void *dst, int c, uint n)
-{
-  f0:	55                   	push   %ebp
-  f1:	89 e5                	mov    %esp,%ebp
-  f3:	57                   	push   %edi
-  f4:	8b 55 08             	mov    0x8(%ebp),%edx
-}
-
-static inline void
-stosb(void *addr, int data, int cnt)
-{
-  asm volatile("cld; rep stosb" :
-  f7:	8b 4d 10             	mov    0x10(%ebp),%ecx
-  fa:	8b 45 0c             	mov    0xc(%ebp),%eax
-  fd:	89 d7                	mov    %edx,%edi
-  ff:	fc                   	cld
- 100:	f3 aa                	rep stos %al,%es:(%edi)
-  stosb(dst, c, n);
-  return dst;
-}
- 102:	8b 7d fc             	mov    -0x4(%ebp),%edi
- 105:	89 d0                	mov    %edx,%eax
- 107:	c9                   	leave
- 108:	c3                   	ret
- 109:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-
-00000110 <strchr>:
-
-char*
-strchr(const char *s, char c)
-{
- 110:	55                   	push   %ebp
- 111:	89 e5                	mov    %esp,%ebp
- 113:	8b 45 08             	mov    0x8(%ebp),%eax
- 116:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx
-  for(; *s; s++)
- 11a:	0f b6 10             	movzbl (%eax),%edx
- 11d:	84 d2                	test   %dl,%dl
- 11f:	75 12                	jne    133 <strchr+0x23>
- 121:	eb 1d                	jmp    140 <strchr+0x30>
- 123:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 128:	0f b6 50 01          	movzbl 0x1(%eax),%edx
- 12c:	83 c0 01             	add    $0x1,%eax
- 12f:	84 d2                	test   %dl,%dl
- 131:	74 0d                	je     140 <strchr+0x30>
-    if(*s == c)
- 133:	38 d1                	cmp    %dl,%cl
- 135:	75 f1                	jne    128 <strchr+0x18>
-      return (char*)s;
-  return 0;
-}
- 137:	5d                   	pop    %ebp
- 138:	c3                   	ret
- 139:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  return 0;
- 140:	31 c0                	xor    %eax,%eax
-}
- 142:	5d                   	pop    %ebp
- 143:	c3                   	ret
- 144:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 14b:	00 
- 14c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000150 <gets>:
-
-char*
-gets(char *buf, int max)
-{
- 150:	55                   	push   %ebp
- 151:	89 e5                	mov    %esp,%ebp
- 153:	57                   	push   %edi
- 154:	56                   	push   %esi
-  int i, cc;
-  char c;
-
-  for(i=0; i+1 < max; ){
-    cc = read(0, &c, 1);
- 155:	8d 75 e7             	lea    -0x19(%ebp),%esi
-{
- 158:	53                   	push   %ebx
-  for(i=0; i+1 < max; ){
- 159:	31 db                	xor    %ebx,%ebx
-{
- 15b:	83 ec 1c             	sub    $0x1c,%esp
-  for(i=0; i+1 < max; ){
- 15e:	eb 27                	jmp    187 <gets+0x37>
-    cc = read(0, &c, 1);
- 160:	83 ec 04             	sub    $0x4,%esp
- 163:	6a 01                	push   $0x1
- 165:	56                   	push   %esi
- 166:	6a 00                	push   $0x0
- 168:	e8 1e 01 00 00       	call   28b <read>
-    if(cc < 1)
- 16d:	83 c4 10             	add    $0x10,%esp
- 170:	85 c0                	test   %eax,%eax
- 172:	7e 1d                	jle    191 <gets+0x41>
-      break;
-    buf[i++] = c;
- 174:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax
- 178:	8b 55 08             	mov    0x8(%ebp),%edx
- 17b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)
-    if(c == '\n' || c == '\r')
- 17f:	3c 0a                	cmp    $0xa,%al
- 181:	74 10                	je     193 <gets+0x43>
- 183:	3c 0d                	cmp    $0xd,%al
- 185:	74 0c                	je     193 <gets+0x43>
-  for(i=0; i+1 < max; ){
- 187:	89 df                	mov    %ebx,%edi
- 189:	83 c3 01             	add    $0x1,%ebx
- 18c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx
- 18f:	7c cf                	jl     160 <gets+0x10>
- 191:	89 fb                	mov    %edi,%ebx
-      break;
-  }
-  buf[i] = '\0';
- 193:	8b 45 08             	mov    0x8(%ebp),%eax
- 196:	c6 04 18 00          	movb   $0x0,(%eax,%ebx,1)
-  return buf;
-}
- 19a:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 19d:	5b                   	pop    %ebx
- 19e:	5e                   	pop    %esi
- 19f:	5f                   	pop    %edi
- 1a0:	5d                   	pop    %ebp
- 1a1:	c3                   	ret
- 1a2:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1a9:	00 
- 1aa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-
-000001b0 <stat>:
-
-int
-stat(const char *n, struct stat *st)
-{
- 1b0:	55                   	push   %ebp
- 1b1:	89 e5                	mov    %esp,%ebp
- 1b3:	56                   	push   %esi
- 1b4:	53                   	push   %ebx
-  int fd;
-  int r;
-
-  fd = open(n, O_RDONLY);
- 1b5:	83 ec 08             	sub    $0x8,%esp
- 1b8:	6a 00                	push   $0x0
- 1ba:	ff 75 08             	push   0x8(%ebp)
- 1bd:	e8 f1 00 00 00       	call   2b3 <open>
-  if(fd < 0)
- 1c2:	83 c4 10             	add    $0x10,%esp
- 1c5:	85 c0                	test   %eax,%eax
- 1c7:	78 27                	js     1f0 <stat+0x40>
-    return -1;
-  r = fstat(fd, st);
- 1c9:	83 ec 08             	sub    $0x8,%esp
- 1cc:	ff 75 0c             	push   0xc(%ebp)
- 1cf:	89 c3                	mov    %eax,%ebx
- 1d1:	50                   	push   %eax
- 1d2:	e8 f4 00 00 00       	call   2cb <fstat>
-  close(fd);
- 1d7:	89 1c 24             	mov    %ebx,(%esp)
-  r = fstat(fd, st);
- 1da:	89 c6                	mov    %eax,%esi
-  close(fd);
- 1dc:	e8 ba 00 00 00       	call   29b <close>
-  return r;
- 1e1:	83 c4 10             	add    $0x10,%esp
-}
- 1e4:	8d 65 f8             	lea    -0x8(%ebp),%esp
- 1e7:	89 f0                	mov    %esi,%eax
- 1e9:	5b                   	pop    %ebx
- 1ea:	5e                   	pop    %esi
- 1eb:	5d                   	pop    %ebp
- 1ec:	c3                   	ret
- 1ed:	8d 76 00             	lea    0x0(%esi),%esi
-    return -1;
- 1f0:	be ff ff ff ff       	mov    $0xffffffff,%esi
- 1f5:	eb ed                	jmp    1e4 <stat+0x34>
- 1f7:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 1fe:	00 
- 1ff:	90                   	nop
-
-00000200 <atoi>:
-
-int
-atoi(const char *s)
-{
- 200:	55                   	push   %ebp
- 201:	89 e5                	mov    %esp,%ebp
- 203:	53                   	push   %ebx
- 204:	8b 55 08             	mov    0x8(%ebp),%edx
-  int n;
-
-  n = 0;
-  while('0' <= *s && *s <= '9')
- 207:	0f be 02             	movsbl (%edx),%eax
- 20a:	8d 48 d0             	lea    -0x30(%eax),%ecx
- 20d:	80 f9 09             	cmp    $0x9,%cl
-  n = 0;
- 210:	b9 00 00 00 00       	mov    $0x0,%ecx
-  while('0' <= *s && *s <= '9')
- 215:	77 1e                	ja     235 <atoi+0x35>
- 217:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 21e:	00 
- 21f:	90                   	nop
-    n = n*10 + *s++ - '0';
- 220:	83 c2 01             	add    $0x1,%edx
- 223:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx
- 226:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx
-  while('0' <= *s && *s <= '9')
- 22a:	0f be 02             	movsbl (%edx),%eax
- 22d:	8d 58 d0             	lea    -0x30(%eax),%ebx
- 230:	80 fb 09             	cmp    $0x9,%bl
- 233:	76 eb                	jbe    220 <atoi+0x20>
-  return n;
-}
- 235:	8b 5d fc             	mov    -0x4(%ebp),%ebx
- 238:	89 c8                	mov    %ecx,%eax
- 23a:	c9                   	leave
- 23b:	c3                   	ret
- 23c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-00000240 <memmove>:
-
-void*
-memmove(void *vdst, const void *vsrc, int n)
-{
- 240:	55                   	push   %ebp
- 241:	89 e5                	mov    %esp,%ebp
- 243:	57                   	push   %edi
- 244:	8b 45 10             	mov    0x10(%ebp),%eax
- 247:	8b 55 08             	mov    0x8(%ebp),%edx
- 24a:	56                   	push   %esi
- 24b:	8b 75 0c             	mov    0xc(%ebp),%esi
-  char *dst;
-  const char *src;
-
-  dst = vdst;
-  src = vsrc;
-  while(n-- > 0)
- 24e:	85 c0                	test   %eax,%eax
- 250:	7e 13                	jle    265 <memmove+0x25>
- 252:	01 d0                	add    %edx,%eax
-  dst = vdst;
- 254:	89 d7                	mov    %edx,%edi
- 256:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 25d:	00 
- 25e:	66 90                	xchg   %ax,%ax
-    *dst++ = *src++;
- 260:	a4                   	movsb  %ds:(%esi),%es:(%edi)
-  while(n-- > 0)
- 261:	39 f8                	cmp    %edi,%eax
- 263:	75 fb                	jne    260 <memmove+0x20>
-  return vdst;
-}
- 265:	5e                   	pop    %esi
- 266:	89 d0                	mov    %edx,%eax
- 268:	5f                   	pop    %edi
- 269:	5d                   	pop    %ebp
- 26a:	c3                   	ret
-
-0000026b <fork>:
-  name: \
-    movl $SYS_ ## name, %eax; \
-    int $T_SYSCALL; \
-    ret
-
-SYSCALL(fork)
- 26b:	b8 01 00 00 00       	mov    $0x1,%eax
- 270:	cd 40                	int    $0x40
- 272:	c3                   	ret
-
-00000273 <exit>:
-SYSCALL(exit)
- 273:	b8 02 00 00 00       	mov    $0x2,%eax
- 278:	cd 40                	int    $0x40
- 27a:	c3                   	ret
-
-0000027b <wait>:
-SYSCALL(wait)
- 27b:	b8 03 00 00 00       	mov    $0x3,%eax
- 280:	cd 40                	int    $0x40
- 282:	c3                   	ret
-
-00000283 <pipe>:
-SYSCALL(pipe)
- 283:	b8 04 00 00 00       	mov    $0x4,%eax
- 288:	cd 40                	int    $0x40
- 28a:	c3                   	ret
-
-0000028b <read>:
-SYSCALL(read)
- 28b:	b8 05 00 00 00       	mov    $0x5,%eax
- 290:	cd 40                	int    $0x40
- 292:	c3                   	ret
-
-00000293 <write>:
-SYSCALL(write)
- 293:	b8 10 00 00 00       	mov    $0x10,%eax
- 298:	cd 40                	int    $0x40
- 29a:	c3                   	ret
-
-0000029b <close>:
-SYSCALL(close)
- 29b:	b8 15 00 00 00       	mov    $0x15,%eax
- 2a0:	cd 40                	int    $0x40
- 2a2:	c3                   	ret
-
-000002a3 <kill>:
-SYSCALL(kill)
- 2a3:	b8 06 00 00 00       	mov    $0x6,%eax
- 2a8:	cd 40                	int    $0x40
- 2aa:	c3                   	ret
-
-000002ab <exec>:
-SYSCALL(exec)
- 2ab:	b8 07 00 00 00       	mov    $0x7,%eax
- 2b0:	cd 40                	int    $0x40
- 2b2:	c3                   	ret
-
-000002b3 <open>:
-SYSCALL(open)
- 2b3:	b8 0f 00 00 00       	mov    $0xf,%eax
- 2b8:	cd 40                	int    $0x40
- 2ba:	c3                   	ret
-
-000002bb <mknod>:
-SYSCALL(mknod)
- 2bb:	b8 11 00 00 00       	mov    $0x11,%eax
- 2c0:	cd 40                	int    $0x40
- 2c2:	c3                   	ret
-
-000002c3 <unlink>:
-SYSCALL(unlink)
- 2c3:	b8 12 00 00 00       	mov    $0x12,%eax
- 2c8:	cd 40                	int    $0x40
- 2ca:	c3                   	ret
-
-000002cb <fstat>:
-SYSCALL(fstat)
- 2cb:	b8 08 00 00 00       	mov    $0x8,%eax
- 2d0:	cd 40                	int    $0x40
- 2d2:	c3                   	ret
-
-000002d3 <link>:
-SYSCALL(link)
- 2d3:	b8 13 00 00 00       	mov    $0x13,%eax
- 2d8:	cd 40                	int    $0x40
- 2da:	c3                   	ret
-
-000002db <mkdir>:
-SYSCALL(mkdir)
- 2db:	b8 14 00 00 00       	mov    $0x14,%eax
- 2e0:	cd 40                	int    $0x40
- 2e2:	c3                   	ret
-
-000002e3 <chdir>:
-SYSCALL(chdir)
- 2e3:	b8 09 00 00 00       	mov    $0x9,%eax
- 2e8:	cd 40                	int    $0x40
- 2ea:	c3                   	ret
-
-000002eb <dup>:
-SYSCALL(dup)
- 2eb:	b8 0a 00 00 00       	mov    $0xa,%eax
- 2f0:	cd 40                	int    $0x40
- 2f2:	c3                   	ret
-
-000002f3 <getpid>:
-SYSCALL(getpid)
- 2f3:	b8 0b 00 00 00       	mov    $0xb,%eax
- 2f8:	cd 40                	int    $0x40
- 2fa:	c3                   	ret
-
-000002fb <sbrk>:
-SYSCALL(sbrk)
- 2fb:	b8 0c 00 00 00       	mov    $0xc,%eax
- 300:	cd 40                	int    $0x40
- 302:	c3                   	ret
-
-00000303 <sleep>:
-SYSCALL(sleep)
- 303:	b8 0d 00 00 00       	mov    $0xd,%eax
- 308:	cd 40                	int    $0x40
- 30a:	c3                   	ret
-
-0000030b <uptime>:
-SYSCALL(uptime)
- 30b:	b8 0e 00 00 00       	mov    $0xe,%eax
- 310:	cd 40                	int    $0x40
- 312:	c3                   	ret
- 313:	66 90                	xchg   %ax,%ax
- 315:	66 90                	xchg   %ax,%ax
- 317:	66 90                	xchg   %ax,%ax
- 319:	66 90                	xchg   %ax,%ax
- 31b:	66 90                	xchg   %ax,%ax
- 31d:	66 90                	xchg   %ax,%ax
- 31f:	90                   	nop
-
-00000320 <printint>:
-  write(fd, &c, 1);
-}
-
-static void
-printint(int fd, int xx, int base, int sgn)
-{
- 320:	55                   	push   %ebp
- 321:	89 e5                	mov    %esp,%ebp
- 323:	57                   	push   %edi
- 324:	56                   	push   %esi
- 325:	53                   	push   %ebx
- 326:	89 cb                	mov    %ecx,%ebx
-  uint x;
-
-  neg = 0;
-  if(sgn && xx < 0){
-    neg = 1;
-    x = -xx;
- 328:	89 d1                	mov    %edx,%ecx
-{
- 32a:	83 ec 3c             	sub    $0x3c,%esp
- 32d:	89 45 c0             	mov    %eax,-0x40(%ebp)
-  if(sgn && xx < 0){
- 330:	85 d2                	test   %edx,%edx
- 332:	0f 89 80 00 00 00    	jns    3b8 <printint+0x98>
- 338:	f6 45 08 01          	testb  $0x1,0x8(%ebp)
- 33c:	74 7a                	je     3b8 <printint+0x98>
-    x = -xx;
- 33e:	f7 d9                	neg    %ecx
-    neg = 1;
- 340:	b8 01 00 00 00       	mov    $0x1,%eax
-  } else {
-    x = xx;
-  }
-
-  i = 0;
- 345:	89 45 c4             	mov    %eax,-0x3c(%ebp)
- 348:	31 f6                	xor    %esi,%esi
- 34a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-  do{
-    buf[i++] = digits[x % base];
- 350:	89 c8                	mov    %ecx,%eax
- 352:	31 d2                	xor    %edx,%edx
- 354:	89 f7                	mov    %esi,%edi
- 356:	f7 f3                	div    %ebx
- 358:	8d 76 01             	lea    0x1(%esi),%esi
- 35b:	0f b6 92 28 07 00 00 	movzbl 0x728(%edx),%edx
- 362:	88 54 35 d7          	mov    %dl,-0x29(%ebp,%esi,1)
-  }while((x /= base) != 0);
- 366:	89 ca                	mov    %ecx,%edx
- 368:	89 c1                	mov    %eax,%ecx
- 36a:	39 da                	cmp    %ebx,%edx
- 36c:	73 e2                	jae    350 <printint+0x30>
-  if(neg)
- 36e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
- 371:	85 c0                	test   %eax,%eax
- 373:	74 07                	je     37c <printint+0x5c>
-    buf[i++] = '-';
- 375:	c6 44 35 d8 2d       	movb   $0x2d,-0x28(%ebp,%esi,1)
-
-  while(--i >= 0)
- 37a:	89 f7                	mov    %esi,%edi
- 37c:	8d 5d d8             	lea    -0x28(%ebp),%ebx
- 37f:	8b 75 c0             	mov    -0x40(%ebp),%esi
- 382:	01 df                	add    %ebx,%edi
- 384:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    putc(fd, buf[i]);
- 388:	0f b6 07             	movzbl (%edi),%eax
-  write(fd, &c, 1);
- 38b:	83 ec 04             	sub    $0x4,%esp
- 38e:	88 45 d7             	mov    %al,-0x29(%ebp)
- 391:	8d 45 d7             	lea    -0x29(%ebp),%eax
- 394:	6a 01                	push   $0x1
- 396:	50                   	push   %eax
- 397:	56                   	push   %esi
- 398:	e8 f6 fe ff ff       	call   293 <write>
-  while(--i >= 0)
- 39d:	89 f8                	mov    %edi,%eax
- 39f:	83 c4 10             	add    $0x10,%esp
- 3a2:	83 ef 01             	sub    $0x1,%edi
- 3a5:	39 c3                	cmp    %eax,%ebx
- 3a7:	75 df                	jne    388 <printint+0x68>
-}
- 3a9:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 3ac:	5b                   	pop    %ebx
- 3ad:	5e                   	pop    %esi
- 3ae:	5f                   	pop    %edi
- 3af:	5d                   	pop    %ebp
- 3b0:	c3                   	ret
- 3b1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-  neg = 0;
- 3b8:	31 c0                	xor    %eax,%eax
- 3ba:	eb 89                	jmp    345 <printint+0x25>
- 3bc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000003c0 <printf>:
-
-// Print to the given fd. Only understands %d, %x, %p, %s.
-void
-printf(int fd, const char *fmt, ...)
-{
- 3c0:	55                   	push   %ebp
- 3c1:	89 e5                	mov    %esp,%ebp
- 3c3:	57                   	push   %edi
- 3c4:	56                   	push   %esi
- 3c5:	53                   	push   %ebx
- 3c6:	83 ec 2c             	sub    $0x2c,%esp
-  int c, i, state;
-  uint *ap;
-
-  state = 0;
-  ap = (uint*)(void*)&fmt + 1;
-  for(i = 0; fmt[i]; i++){
- 3c9:	8b 75 0c             	mov    0xc(%ebp),%esi
-{
- 3cc:	8b 7d 08             	mov    0x8(%ebp),%edi
-  for(i = 0; fmt[i]; i++){
- 3cf:	0f b6 1e             	movzbl (%esi),%ebx
- 3d2:	83 c6 01             	add    $0x1,%esi
- 3d5:	84 db                	test   %bl,%bl
- 3d7:	74 67                	je     440 <printf+0x80>
- 3d9:	8d 4d 10             	lea    0x10(%ebp),%ecx
- 3dc:	31 d2                	xor    %edx,%edx
- 3de:	89 4d d0             	mov    %ecx,-0x30(%ebp)
- 3e1:	eb 34                	jmp    417 <printf+0x57>
- 3e3:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
- 3e8:	89 55 d4             	mov    %edx,-0x2c(%ebp)
-    c = fmt[i] & 0xff;
-    if(state == 0){
-      if(c == '%'){
-        state = '%';
- 3eb:	ba 25 00 00 00       	mov    $0x25,%edx
-      if(c == '%'){
- 3f0:	83 f8 25             	cmp    $0x25,%eax
- 3f3:	74 18                	je     40d <printf+0x4d>
-  write(fd, &c, 1);
- 3f5:	83 ec 04             	sub    $0x4,%esp
- 3f8:	8d 45 e7             	lea    -0x19(%ebp),%eax
- 3fb:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 3fe:	6a 01                	push   $0x1
- 400:	50                   	push   %eax
- 401:	57                   	push   %edi
- 402:	e8 8c fe ff ff       	call   293 <write>
- 407:	8b 55 d4             	mov    -0x2c(%ebp),%edx
-      } else {
-        putc(fd, c);
- 40a:	83 c4 10             	add    $0x10,%esp
-  for(i = 0; fmt[i]; i++){
- 40d:	0f b6 1e             	movzbl (%esi),%ebx
- 410:	83 c6 01             	add    $0x1,%esi
- 413:	84 db                	test   %bl,%bl
- 415:	74 29                	je     440 <printf+0x80>
-    c = fmt[i] & 0xff;
- 417:	0f b6 c3             	movzbl %bl,%eax
-    if(state == 0){
- 41a:	85 d2                	test   %edx,%edx
- 41c:	74 ca                	je     3e8 <printf+0x28>
-      }
-    } else if(state == '%'){
- 41e:	83 fa 25             	cmp    $0x25,%edx
- 421:	75 ea                	jne    40d <printf+0x4d>
-      if(c == 'd'){
- 423:	83 f8 25             	cmp    $0x25,%eax
- 426:	0f 84 04 01 00 00    	je     530 <printf+0x170>
- 42c:	83 e8 63             	sub    $0x63,%eax
- 42f:	83 f8 15             	cmp    $0x15,%eax
- 432:	77 1c                	ja     450 <printf+0x90>
- 434:	ff 24 85 d0 06 00 00 	jmp    *0x6d0(,%eax,4)
- 43b:	2e 8d 74 26 00       	lea    %cs:0x0(%esi,%eiz,1),%esi
-        putc(fd, c);
-      }
-      state = 0;
-    }
-  }
-}
- 440:	8d 65 f4             	lea    -0xc(%ebp),%esp
- 443:	5b                   	pop    %ebx
- 444:	5e                   	pop    %esi
- 445:	5f                   	pop    %edi
- 446:	5d                   	pop    %ebp
- 447:	c3                   	ret
- 448:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 44f:	00 
-  write(fd, &c, 1);
- 450:	83 ec 04             	sub    $0x4,%esp
- 453:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 456:	c6 45 e7 25          	movb   $0x25,-0x19(%ebp)
- 45a:	6a 01                	push   $0x1
- 45c:	52                   	push   %edx
- 45d:	89 55 d4             	mov    %edx,-0x2c(%ebp)
- 460:	57                   	push   %edi
- 461:	e8 2d fe ff ff       	call   293 <write>
- 466:	83 c4 0c             	add    $0xc,%esp
- 469:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 46c:	6a 01                	push   $0x1
- 46e:	8b 55 d4             	mov    -0x2c(%ebp),%edx
- 471:	52                   	push   %edx
- 472:	57                   	push   %edi
- 473:	e8 1b fe ff ff       	call   293 <write>
-        putc(fd, c);
- 478:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 47b:	31 d2                	xor    %edx,%edx
- 47d:	eb 8e                	jmp    40d <printf+0x4d>
- 47f:	90                   	nop
-        printint(fd, *ap, 16, 0);
- 480:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 483:	83 ec 0c             	sub    $0xc,%esp
- 486:	b9 10 00 00 00       	mov    $0x10,%ecx
- 48b:	8b 13                	mov    (%ebx),%edx
- 48d:	6a 00                	push   $0x0
- 48f:	89 f8                	mov    %edi,%eax
-        ap++;
- 491:	83 c3 04             	add    $0x4,%ebx
-        printint(fd, *ap, 16, 0);
- 494:	e8 87 fe ff ff       	call   320 <printint>
-        ap++;
- 499:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 49c:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 49f:	31 d2                	xor    %edx,%edx
- 4a1:	e9 67 ff ff ff       	jmp    40d <printf+0x4d>
-        s = (char*)*ap;
- 4a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
- 4a9:	8b 18                	mov    (%eax),%ebx
-        ap++;
- 4ab:	83 c0 04             	add    $0x4,%eax
- 4ae:	89 45 d0             	mov    %eax,-0x30(%ebp)
-        if(s == 0)
- 4b1:	85 db                	test   %ebx,%ebx
- 4b3:	0f 84 87 00 00 00    	je     540 <printf+0x180>
-        while(*s != 0){
- 4b9:	0f b6 03             	movzbl (%ebx),%eax
-      state = 0;
- 4bc:	31 d2                	xor    %edx,%edx
-        while(*s != 0){
- 4be:	84 c0                	test   %al,%al
- 4c0:	0f 84 47 ff ff ff    	je     40d <printf+0x4d>
- 4c6:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 4c9:	89 75 d4             	mov    %esi,-0x2c(%ebp)
- 4cc:	89 de                	mov    %ebx,%esi
- 4ce:	89 d3                	mov    %edx,%ebx
-  write(fd, &c, 1);
- 4d0:	83 ec 04             	sub    $0x4,%esp
- 4d3:	88 45 e7             	mov    %al,-0x19(%ebp)
-          s++;
- 4d6:	83 c6 01             	add    $0x1,%esi
-  write(fd, &c, 1);
- 4d9:	6a 01                	push   $0x1
- 4db:	53                   	push   %ebx
- 4dc:	57                   	push   %edi
- 4dd:	e8 b1 fd ff ff       	call   293 <write>
-        while(*s != 0){
- 4e2:	0f b6 06             	movzbl (%esi),%eax
- 4e5:	83 c4 10             	add    $0x10,%esp
- 4e8:	84 c0                	test   %al,%al
- 4ea:	75 e4                	jne    4d0 <printf+0x110>
-      state = 0;
- 4ec:	8b 75 d4             	mov    -0x2c(%ebp),%esi
- 4ef:	31 d2                	xor    %edx,%edx
- 4f1:	e9 17 ff ff ff       	jmp    40d <printf+0x4d>
-        printint(fd, *ap, 10, 1);
- 4f6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
- 4f9:	83 ec 0c             	sub    $0xc,%esp
- 4fc:	b9 0a 00 00 00       	mov    $0xa,%ecx
- 501:	8b 13                	mov    (%ebx),%edx
- 503:	6a 01                	push   $0x1
- 505:	eb 88                	jmp    48f <printf+0xcf>
-        putc(fd, *ap);
- 507:	8b 5d d0             	mov    -0x30(%ebp),%ebx
-  write(fd, &c, 1);
- 50a:	83 ec 04             	sub    $0x4,%esp
- 50d:	8d 55 e7             	lea    -0x19(%ebp),%edx
-        putc(fd, *ap);
- 510:	8b 03                	mov    (%ebx),%eax
-        ap++;
- 512:	83 c3 04             	add    $0x4,%ebx
-        putc(fd, *ap);
- 515:	88 45 e7             	mov    %al,-0x19(%ebp)
-  write(fd, &c, 1);
- 518:	6a 01                	push   $0x1
- 51a:	52                   	push   %edx
- 51b:	57                   	push   %edi
- 51c:	e8 72 fd ff ff       	call   293 <write>
-        ap++;
- 521:	89 5d d0             	mov    %ebx,-0x30(%ebp)
- 524:	83 c4 10             	add    $0x10,%esp
-      state = 0;
- 527:	31 d2                	xor    %edx,%edx
- 529:	e9 df fe ff ff       	jmp    40d <printf+0x4d>
- 52e:	66 90                	xchg   %ax,%ax
-  write(fd, &c, 1);
- 530:	83 ec 04             	sub    $0x4,%esp
- 533:	88 5d e7             	mov    %bl,-0x19(%ebp)
- 536:	8d 55 e7             	lea    -0x19(%ebp),%edx
- 539:	6a 01                	push   $0x1
- 53b:	e9 31 ff ff ff       	jmp    471 <printf+0xb1>
- 540:	b8 28 00 00 00       	mov    $0x28,%eax
-          s = "(null)";
- 545:	bb c8 06 00 00       	mov    $0x6c8,%ebx
- 54a:	e9 77 ff ff ff       	jmp    4c6 <printf+0x106>
- 54f:	90                   	nop
-
-00000550 <free>:
-static Header base;
-static Header *freep;
-
-void
-free(void *ap)
-{
- 550:	55                   	push   %ebp
-  Header *bp, *p;
-
-  bp = (Header*)ap - 1;
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 551:	a1 c4 09 00 00       	mov    0x9c4,%eax
-{
- 556:	89 e5                	mov    %esp,%ebp
- 558:	57                   	push   %edi
- 559:	56                   	push   %esi
- 55a:	53                   	push   %ebx
- 55b:	8b 5d 08             	mov    0x8(%ebp),%ebx
-  bp = (Header*)ap - 1;
- 55e:	8d 4b f8             	lea    -0x8(%ebx),%ecx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 561:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 568:	8b 10                	mov    (%eax),%edx
-  for(p = freep; !(bp > p && bp < p->s.ptr); p = p->s.ptr)
- 56a:	39 c8                	cmp    %ecx,%eax
- 56c:	73 32                	jae    5a0 <free+0x50>
- 56e:	39 d1                	cmp    %edx,%ecx
- 570:	72 04                	jb     576 <free+0x26>
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 572:	39 d0                	cmp    %edx,%eax
- 574:	72 32                	jb     5a8 <free+0x58>
-      break;
-  if(bp + bp->s.size == p->s.ptr){
- 576:	8b 73 fc             	mov    -0x4(%ebx),%esi
- 579:	8d 3c f1             	lea    (%ecx,%esi,8),%edi
- 57c:	39 fa                	cmp    %edi,%edx
- 57e:	74 30                	je     5b0 <free+0x60>
-    bp->s.size += p->s.ptr->s.size;
-    bp->s.ptr = p->s.ptr->s.ptr;
- 580:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  } else
-    bp->s.ptr = p->s.ptr;
-  if(p + p->s.size == bp){
- 583:	8b 50 04             	mov    0x4(%eax),%edx
- 586:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 589:	39 f1                	cmp    %esi,%ecx
- 58b:	74 3a                	je     5c7 <free+0x77>
-    p->s.size += bp->s.size;
-    p->s.ptr = bp->s.ptr;
- 58d:	89 08                	mov    %ecx,(%eax)
-  } else
-    p->s.ptr = bp;
-  freep = p;
-}
- 58f:	5b                   	pop    %ebx
-  freep = p;
- 590:	a3 c4 09 00 00       	mov    %eax,0x9c4
-}
- 595:	5e                   	pop    %esi
- 596:	5f                   	pop    %edi
- 597:	5d                   	pop    %ebp
- 598:	c3                   	ret
- 599:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi
-    if(p >= p->s.ptr && (bp > p || bp < p->s.ptr))
- 5a0:	39 d0                	cmp    %edx,%eax
- 5a2:	72 04                	jb     5a8 <free+0x58>
- 5a4:	39 d1                	cmp    %edx,%ecx
- 5a6:	72 ce                	jb     576 <free+0x26>
-{
- 5a8:	89 d0                	mov    %edx,%eax
- 5aa:	eb bc                	jmp    568 <free+0x18>
- 5ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-    bp->s.size += p->s.ptr->s.size;
- 5b0:	03 72 04             	add    0x4(%edx),%esi
- 5b3:	89 73 fc             	mov    %esi,-0x4(%ebx)
-    bp->s.ptr = p->s.ptr->s.ptr;
- 5b6:	8b 10                	mov    (%eax),%edx
- 5b8:	8b 12                	mov    (%edx),%edx
- 5ba:	89 53 f8             	mov    %edx,-0x8(%ebx)
-  if(p + p->s.size == bp){
- 5bd:	8b 50 04             	mov    0x4(%eax),%edx
- 5c0:	8d 34 d0             	lea    (%eax,%edx,8),%esi
- 5c3:	39 f1                	cmp    %esi,%ecx
- 5c5:	75 c6                	jne    58d <free+0x3d>
-    p->s.size += bp->s.size;
- 5c7:	03 53 fc             	add    -0x4(%ebx),%edx
-  freep = p;
- 5ca:	a3 c4 09 00 00       	mov    %eax,0x9c4
-    p->s.size += bp->s.size;
- 5cf:	89 50 04             	mov    %edx,0x4(%eax)
-    p->s.ptr = bp->s.ptr;
- 5d2:	8b 4b f8             	mov    -0x8(%ebx),%ecx
- 5d5:	89 08                	mov    %ecx,(%eax)
-}
- 5d7:	5b                   	pop    %ebx
- 5d8:	5e                   	pop    %esi
- 5d9:	5f                   	pop    %edi
- 5da:	5d                   	pop    %ebp
- 5db:	c3                   	ret
- 5dc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi
-
-000005e0 <malloc>:
-  return freep;
-}
-
-void*
-malloc(uint nbytes)
-{
- 5e0:	55                   	push   %ebp
- 5e1:	89 e5                	mov    %esp,%ebp
- 5e3:	57                   	push   %edi
- 5e4:	56                   	push   %esi
- 5e5:	53                   	push   %ebx
- 5e6:	83 ec 0c             	sub    $0xc,%esp
-  Header *p, *prevp;
-  uint nunits;
-
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 5e9:	8b 45 08             	mov    0x8(%ebp),%eax
-  if((prevp = freep) == 0){
- 5ec:	8b 15 c4 09 00 00    	mov    0x9c4,%edx
-  nunits = (nbytes + sizeof(Header) - 1)/sizeof(Header) + 1;
- 5f2:	8d 78 07             	lea    0x7(%eax),%edi
- 5f5:	c1 ef 03             	shr    $0x3,%edi
- 5f8:	83 c7 01             	add    $0x1,%edi
-  if((prevp = freep) == 0){
- 5fb:	85 d2                	test   %edx,%edx
- 5fd:	0f 84 8d 00 00 00    	je     690 <malloc+0xb0>
-    base.s.ptr = freep = prevp = &base;
-    base.s.size = 0;
-  }
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 603:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 605:	8b 48 04             	mov    0x4(%eax),%ecx
- 608:	39 f9                	cmp    %edi,%ecx
- 60a:	73 64                	jae    670 <malloc+0x90>
-  if(nu < 4096)
- 60c:	bb 00 10 00 00       	mov    $0x1000,%ebx
- 611:	39 df                	cmp    %ebx,%edi
- 613:	0f 43 df             	cmovae %edi,%ebx
-  p = sbrk(nu * sizeof(Header));
- 616:	8d 34 dd 00 00 00 00 	lea    0x0(,%ebx,8),%esi
- 61d:	eb 0a                	jmp    629 <malloc+0x49>
- 61f:	90                   	nop
-  for(p = prevp->s.ptr; ; prevp = p, p = p->s.ptr){
- 620:	8b 02                	mov    (%edx),%eax
-    if(p->s.size >= nunits){
- 622:	8b 48 04             	mov    0x4(%eax),%ecx
- 625:	39 f9                	cmp    %edi,%ecx
- 627:	73 47                	jae    670 <malloc+0x90>
-        p->s.size = nunits;
-      }
-      freep = prevp;
-      return (void*)(p + 1);
-    }
-    if(p == freep)
- 629:	89 c2                	mov    %eax,%edx
- 62b:	3b 05 c4 09 00 00    	cmp    0x9c4,%eax
- 631:	75 ed                	jne    620 <malloc+0x40>
-  p = sbrk(nu * sizeof(Header));
- 633:	83 ec 0c             	sub    $0xc,%esp
- 636:	56                   	push   %esi
- 637:	e8 bf fc ff ff       	call   2fb <sbrk>
-  if(p == (char*)-1)
- 63c:	83 c4 10             	add    $0x10,%esp
- 63f:	83 f8 ff             	cmp    $0xffffffff,%eax
- 642:	74 1c                	je     660 <malloc+0x80>
-  hp->s.size = nu;
- 644:	89 58 04             	mov    %ebx,0x4(%eax)
-  free((void*)(hp + 1));
- 647:	83 ec 0c             	sub    $0xc,%esp
- 64a:	83 c0 08             	add    $0x8,%eax
- 64d:	50                   	push   %eax
- 64e:	e8 fd fe ff ff       	call   550 <free>
-  return freep;
- 653:	8b 15 c4 09 00 00    	mov    0x9c4,%edx
-      if((p = morecore(nunits)) == 0)
- 659:	83 c4 10             	add    $0x10,%esp
- 65c:	85 d2                	test   %edx,%edx
- 65e:	75 c0                	jne    620 <malloc+0x40>
-        return 0;
-  }
-}
- 660:	8d 65 f4             	lea    -0xc(%ebp),%esp
-        return 0;
- 663:	31 c0                	xor    %eax,%eax
-}
- 665:	5b                   	pop    %ebx
- 666:	5e                   	pop    %esi
- 667:	5f                   	pop    %edi
- 668:	5d                   	pop    %ebp
- 669:	c3                   	ret
- 66a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
-      if(p->s.size == nunits)
- 670:	39 cf                	cmp    %ecx,%edi
- 672:	74 4c                	je     6c0 <malloc+0xe0>
-        p->s.size -= nunits;
- 674:	29 f9                	sub    %edi,%ecx
- 676:	89 48 04             	mov    %ecx,0x4(%eax)
-        p += p->s.size;
- 679:	8d 04 c8             	lea    (%eax,%ecx,8),%eax
-        p->s.size = nunits;
- 67c:	89 78 04             	mov    %edi,0x4(%eax)
-      freep = prevp;
- 67f:	89 15 c4 09 00 00    	mov    %edx,0x9c4
-}
- 685:	8d 65 f4             	lea    -0xc(%ebp),%esp
-      return (void*)(p + 1);
- 688:	83 c0 08             	add    $0x8,%eax
-}
- 68b:	5b                   	pop    %ebx
- 68c:	5e                   	pop    %esi
- 68d:	5f                   	pop    %edi
- 68e:	5d                   	pop    %ebp
- 68f:	c3                   	ret
-    base.s.ptr = freep = prevp = &base;
- 690:	c7 05 c4 09 00 00 c8 	movl   $0x9c8,0x9c4
- 697:	09 00 00 
-    base.s.size = 0;
- 69a:	b8 c8 09 00 00       	mov    $0x9c8,%eax
-    base.s.ptr = freep = prevp = &base;
- 69f:	c7 05 c8 09 00 00 c8 	movl   $0x9c8,0x9c8
- 6a6:	09 00 00 
-    base.s.size = 0;
- 6a9:	c7 05 cc 09 00 00 00 	movl   $0x0,0x9cc
- 6b0:	00 00 00 
-    if(p->s.size >= nunits){
- 6b3:	e9 54 ff ff ff       	jmp    60c <malloc+0x2c>
- 6b8:	2e 8d b4 26 00 00 00 	lea    %cs:0x0(%esi,%eiz,1),%esi
- 6bf:	00 
-        prevp->s.ptr = p->s.ptr;
- 6c0:	8b 08                	mov    (%eax),%ecx
- 6c2:	89 0a                	mov    %ecx,(%edx)
- 6c4:	eb b9                	jmp    67f <malloc+0x9f>
diff --git a/zombie.d b/zombie.d
deleted file mode 100644
index c3e36f5..0000000
--- a/zombie.d
+++ /dev/null
@@ -1 +0,0 @@
-zombie.o: zombie.c /usr/include/stdc-predef.h types.h stat.h user.h
diff --git a/zombie.o b/zombie.o
deleted file mode 100644
index dde72b1..0000000
Binary files a/zombie.o and /dev/null differ
diff --git a/zombie.sym b/zombie.sym
deleted file mode 100644
index b3a5c2e..0000000
--- a/zombie.sym
+++ /dev/null
@@ -1,45 +0,0 @@
-00000000 zombie.c
-00000000 ulib.c
-00000000 printf.c
-00000320 printint
-00000728 digits.0
-00000000 umalloc.c
-000009c4 freep
-000009c8 base
-00000030 strcpy
-000003c0 printf
-00000240 memmove
-000002bb mknod
-00000150 gets
-000002f3 getpid
-000005e0 malloc
-00000303 sleep
-00000283 pipe
-00000293 write
-000002cb fstat
-000002a3 kill
-000002e3 chdir
-000002ab exec
-0000027b wait
-0000028b read
-000002c3 unlink
-0000026b fork
-000002fb sbrk
-0000030b uptime
-000009c4 __bss_start
-000000f0 memset
-00000000 main
-00000060 strcmp
-000002eb dup
-000001b0 stat
-000009c4 _edata
-000009d0 _end
-000002d3 link
-00000273 exit
-00000200 atoi
-000000c0 strlen
-000002b3 open
-00000110 strchr
-000002db mkdir
-0000029b close
-00000550 free
