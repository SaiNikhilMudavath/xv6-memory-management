# Memory Management in xv6

This is cloned from https://github.com/mit-pdos/xv6-public.
1. Implemented a signal handler that prints the number of pages (in the user space) residing on the RAM for each of the SLEEPING, RUNNING and RUNNABLE process with pid >= 1. This handler is invoked by pressing Ctrl + I.
2. Swapping Implementation
    1. Introduced swap blocks partition between the sb block and the log of the disk layout.
    2. Limited the available physical memory to 4MB. This is done using #define PHYSTOP 0x400000 in memlayout.h
    3. A victim process is a process with the highest number of user-pages residing in the RAM.
    4. Page Replacement: Victim Page is found by iterating through the pages of the victim process, choosing a page with the PTE_P flag set and the PTE_A flag unset.
    5. Swap-In Mechanism: T_PGFLT trap signal is generated when a process accesses a swapped-out page. Implemented a page-fault handler function which loads the page back to memory. 
3. Adaptive Page Replacement Strategy:
    Implements an adaptive page replacement mechanism with dynamic threshold and page swap adjustments. The system monitors free pages in memory, and when the count falls below a defined threshold (Th), it triggers a swap-out of a set number of pages (Npg) to disk. After each swap, both Th and Npg are updated adaptively based on parameters α (alpha) and β (beta), which are configurable via the Makefile. This approach ensures efficient memory management by balancing free space availability with controlled swapping.
